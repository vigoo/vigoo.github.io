<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <title>vigoo&#x27;s software development blog - aws</title>
    <link rel="self" type="application/atom+xml" href="https://blog.vigoo.dev/tags/aws/atom.xml"/>
    <link rel="alternate" type="text/html" href="https://blog.vigoo.dev"/>
    <generator uri="https://www.getzola.org/">Zola</generator>
    <updated>2020-11-01T00:00:00+00:00</updated>
    <id>https://blog.vigoo.dev/tags/aws/atom.xml</id>
    <entry xml:lang="en">
        <title>ZIO-AWS with ZIO Query</title>
        <published>2020-11-01T00:00:00+00:00</published>
        <updated>2020-11-01T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Daniel Vigovszky
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://blog.vigoo.dev/posts/zioaws-zioquery/"/>
        <id>https://blog.vigoo.dev/posts/zioaws-zioquery/</id>
        
        <content type="html" xml:base="https://blog.vigoo.dev/posts/zioaws-zioquery/">&lt;p&gt;A few years ago I wrote a &lt;a href=&quot;https:&#x2F;&#x2F;blog.vigoo.dev&#x2F;posts&#x2F;aws-rate-limits-prezidig&#x2F;&quot;&gt;post&lt;&#x2F;a&gt; about how I refactored one of our internal tools at &lt;a href=&quot;https:&#x2F;&#x2F;prezi.com&quot;&gt;Prezi&lt;&#x2F;a&gt;. This command line tool was able to discover a set of AWS resources and present them in a nice human readable way. The primary motivation at that time was to introduce circuit breaking to survive AWS API rate limits.&lt;&#x2F;p&gt;
&lt;p&gt;I have recently published a set of libraries, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;vigoo&#x2F;zio-aws&quot;&gt;&lt;strong&gt;zio-aws&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;, and thought it would be interesting to rewrite this tool on top of it, and use this opportunity to try out &lt;a href=&quot;https:&#x2F;&#x2F;zio.github.io&#x2F;zio-query&#x2F;&quot;&gt;&lt;strong&gt;ZIO Query&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; on a real-world example. In this post I&#x27;m going to show step by step how to build an efficient and easily extensible query tool with the help of &lt;em&gt;ZIO&lt;&#x2F;em&gt; libraries. The full source can be found &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;vigoo&#x2F;aws-query&quot;&gt;on GitHub&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-task&quot;&gt;The task&lt;&#x2F;h2&gt;
&lt;p&gt;The CLI tool we build will get an arbitrary string as an input, and search for it in various AWS resources. Once it has a match, it has to traverse a graph of these resources and finally pretty-print all the gathered information to the console.&lt;&#x2F;p&gt;
&lt;img src=&quot;&#x2F;images&#x2F;awsquery-1.png&quot;&#x2F;&gt;
&lt;p&gt;The provided input could mean any of the following:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;An &lt;strong&gt;EC2&lt;&#x2F;strong&gt; &lt;em&gt;instance ID&lt;&#x2F;em&gt;&lt;&#x2F;li&gt;
&lt;li&gt;An &lt;strong&gt;ELB&lt;&#x2F;strong&gt; (load balancer)&#x27;s &lt;em&gt;name&lt;&#x2F;em&gt;&lt;&#x2F;li&gt;
&lt;li&gt;An &lt;strong&gt;ElasticBeanstalk&lt;&#x2F;strong&gt; &lt;em&gt;environment name&lt;&#x2F;em&gt; or &lt;em&gt;ID&lt;&#x2F;em&gt;&lt;&#x2F;li&gt;
&lt;li&gt;An &lt;strong&gt;ElasticBeanstalk&lt;&#x2F;strong&gt; &lt;em&gt;application name&lt;&#x2F;em&gt;&lt;&#x2F;li&gt;
&lt;li&gt;An &lt;strong&gt;ASG&lt;&#x2F;strong&gt; (auto-scaling group) &lt;em&gt;ID&lt;&#x2F;em&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;For the level of detail to be reported I copied the original tool. This means finding all the related resources in the above sets (plus among &lt;em&gt;launch configurations&lt;&#x2F;em&gt;) but only include a single &lt;em&gt;EC2 instance&lt;&#x2F;em&gt; in the output if it was explicitly queried. So for example if the search term matches an &lt;em&gt;ELB&lt;&#x2F;em&gt; that belongs to an &lt;em&gt;ElasticBeanstalk environment&lt;&#x2F;em&gt;, the report will contain the &lt;em&gt;EB app&lt;&#x2F;em&gt; and all its other environments as well, but won&#x27;t show individual instances. This choice does not affect the design and could be easily changed or extended with additional resource types.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;aws-client&quot;&gt;AWS client&lt;&#x2F;h2&gt;
&lt;p&gt;For querying the above mentioned resources, we have to call four different AWS services. The &lt;code&gt;zio-aws&lt;&#x2F;code&gt; project adds a streaming ZIO wrapper for &lt;em&gt;all&lt;&#x2F;em&gt; the libraries in &lt;a href=&quot;https:&#x2F;&#x2F;docs.aws.amazon.com&#x2F;sdk-for-java&#x2F;v2&#x2F;developer-guide&#x2F;welcome.html&quot;&gt;AWS Java SDK v2&lt;&#x2F;a&gt;, each published as separate artifact:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span&gt;libraryDependencies ++= Seq(
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;io.github.vigoo&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt; %% &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;zio-aws-autoscaling&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt; % zioAwsVersion,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;io.github.vigoo&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt; %% &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;zio-aws-ec2&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt; % zioAwsVersion,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;io.github.vigoo&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt; %% &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;zio-aws-elasticloadbalancing&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt; % zioAwsVersion,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;io.github.vigoo&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt; %% &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;zio-aws-elasticbeanstalk&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt; % zioAwsVersion
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;io.github.vigoo&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt; %% &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;zio-aws-netty&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt; % zioAwsVersion,    
&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In addition to loading the necessary client libraries, we also need one of the &lt;em&gt;http implementations&lt;&#x2F;em&gt;, in this case I chose the default &lt;em&gt;Netty&lt;&#x2F;em&gt;. Other possibilities are &lt;em&gt;akka-http&lt;&#x2F;em&gt; and &lt;em&gt;http4s&lt;&#x2F;em&gt;. If your application already uses one of these for other HTTP communications you may want to use them to share their configuration and pools.&lt;&#x2F;p&gt;
&lt;p&gt;The client libraries have a &lt;code&gt;ZStream&lt;&#x2F;code&gt; API for all the operations that either support streaming (like for example S3 download&#x2F;upload) or pagination, and &lt;code&gt;ZIO&lt;&#x2F;code&gt; wrapper for non-streaming simple operations. Instead of using the Java SDK&#x27;s builders, the requests are described by &lt;em&gt;case classes&lt;&#x2F;em&gt;, and the &lt;em&gt;result&lt;&#x2F;em&gt; types have convenience accessors to handle the nullable results.&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s see some examples!&lt;&#x2F;p&gt;
&lt;p&gt;We can get information about &lt;em&gt;EB applications&lt;&#x2F;em&gt; with the &lt;em&gt;ElasticBeanstalk&lt;&#x2F;em&gt; API&#x27;s &lt;a href=&quot;https:&#x2F;&#x2F;docs.aws.amazon.com&#x2F;elasticbeanstalk&#x2F;latest&#x2F;api&#x2F;API_DescribeApplications.html&quot;&gt;&lt;code&gt;DescribeApplications&lt;&#x2F;code&gt; operation&lt;&#x2F;a&gt;. This is defined like the following in &lt;code&gt;zio-aws-elasticbeanstalk&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;describeApplications&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;request&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;DescribeApplicationsRequest&lt;&#x2F;span&gt;&lt;span&gt;): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ZIO&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ElasticBeanstalk&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;AwsError&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;DescribeApplicationsResponse&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ReadOnly&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;ApplicationName &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;String
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; DescribeApplicationsRequest&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;applicationNames&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Iterable&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ApplicationName&lt;&#x2F;span&gt;&lt;span&gt;]])
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; DescribeApplicationsResponse&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;applications &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Iterable&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ApplicationDescription&lt;&#x2F;span&gt;&lt;span&gt;]])
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;object&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; DescribeApplicationsResponse {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;trait&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; ReadOnly {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;editable&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: DescribeApplicationsResponse
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;applicationsValue&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: Option[List[ApplicationDescription.ReadOnly]]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;applications&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: ZIO[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Any&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;, AwsError, List[ApplicationDescription.ReadOnly]]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;A few things to notice here:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;The client function requires the &lt;code&gt;ElasticBeanstalk&lt;&#x2F;code&gt; module. We will see how to set up the dependencies in the &lt;em&gt;Putting all together&lt;&#x2F;em&gt; section.&lt;&#x2F;li&gt;
&lt;li&gt;The primitive types defined by the AWS schema are currently simple type aliases. In the future they will be probably replaced by &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;zio&#x2F;zio-prelude&quot;&gt;zio-prelude&lt;&#x2F;a&gt;&#x27;s &lt;em&gt;newtypes&lt;&#x2F;em&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;Each wrapper type has a &lt;code&gt;ReadOnly&lt;&#x2F;code&gt; trait and a &lt;em&gt;case class&lt;&#x2F;em&gt;. The case classes are used as input, and the read-only interfaces as outputs. This way the result provided by the Java SDK can be accessed directly and it only has to be rewrapped in the case class if it is passed to another call as input.&lt;&#x2F;li&gt;
&lt;li&gt;In many cases the AWS SDK describes fields as optional even if in normal circumstances it would never be &lt;code&gt;None&lt;&#x2F;code&gt;. To make it more convenient to work with these, the &lt;code&gt;ReadOnly&lt;&#x2F;code&gt; interface contains &lt;em&gt;accessor functions&lt;&#x2F;em&gt; which fail with &lt;code&gt;FieldIsNone&lt;&#x2F;code&gt; in case the field did not have any value. The pure optional values can be accessed with the &lt;code&gt;xxxValue&lt;&#x2F;code&gt; variants. See &lt;code&gt;applications&lt;&#x2F;code&gt; and &lt;code&gt;applicationsValue&lt;&#x2F;code&gt; in the above example.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;For operations support pagination, the wrapper functions return a stream. The actual first AWS call happens when the stream is first pulled. An example for this that we have to use in this application is the &lt;em&gt;EC2&lt;&#x2F;em&gt; API&#x27;s &lt;a href=&quot;https:&#x2F;&#x2F;docs.aws.amazon.com&#x2F;AWSEC2&#x2F;latest&#x2F;APIReference&#x2F;API_DescribeInstances.html&quot;&gt;&lt;code&gt;DescribeInstances&lt;&#x2F;code&gt; operation&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;describeInstances&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;request&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;DescribeInstancesRequest&lt;&#x2F;span&gt;&lt;span&gt;): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ZStream&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Ec2&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;AwsError&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Reservation&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ReadOnly&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The pagination can be controlled by setting the &lt;code&gt;MaxResults&lt;&#x2F;code&gt; property in &lt;code&gt;DescribeInstancesRequest&lt;&#x2F;code&gt;. For the user of the &lt;code&gt;describeInstances&lt;&#x2F;code&gt; function this is completely transparent, the returned stream will gather all the results, possibly by performing multiple AWS requests.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;queries&quot;&gt;Queries&lt;&#x2F;h2&gt;
&lt;p&gt;We could implement the resource discovery directly using the low level AWS wrappers described above, using ZIO&#x27;s tools to achieve concurrency. There are several things to consider though:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;We don&#x27;t know what resource we are looking for, so we should start multiple queries in parallel to find a match as soon as possible&lt;&#x2F;li&gt;
&lt;li&gt;Some queries return additional data that could be reused later. For example it is not possible to search for an ELB by a instance ID contained by it; for that we have to query &lt;em&gt;all&lt;&#x2F;em&gt; load balancers and check the members on client side.&lt;&#x2F;li&gt;
&lt;li&gt;There are AWS operations that support querying multiple entities, for example by providing a list of IDs to look for&lt;&#x2F;li&gt;
&lt;li&gt;We should minimize the number of calls to AWS, both for performance reasons, and to avoid getting rate limited&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;We can achieve all this by expressing our AWS queries with a higher level abstraction, delegating the execution to a library called &lt;a href=&quot;https:&#x2F;&#x2F;zio.github.io&#x2F;zio-query&#x2F;&quot;&gt;ZIO Query&lt;&#x2F;a&gt;. This library let us define composable &lt;em&gt;queries&lt;&#x2F;em&gt; to arbitrary &lt;em&gt;data sources&lt;&#x2F;em&gt;, and it automatically provides &lt;em&gt;pipelining&lt;&#x2F;em&gt;, &lt;em&gt;batching&lt;&#x2F;em&gt; and &lt;em&gt;caching&lt;&#x2F;em&gt;. A perfect match for the problem we have to solve here.&lt;&#x2F;p&gt;
&lt;p&gt;To be able to cache results that became available as a side effect of a query, we need a &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;zio&#x2F;zio-query&#x2F;pull&#x2F;105&quot;&gt;recent improvement&lt;&#x2F;a&gt; that is not published yet, so &lt;code&gt;aws-query&lt;&#x2F;code&gt; currently uses a snapshot release of &lt;code&gt;zio-query&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span&gt;libraryDependencies += &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;dev.zio&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt; %% &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;zio-query&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt; % &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;0.2.5+12-c41557f7-SNAPSHOT&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The first step is to define custom &lt;em&gt;data sources&lt;&#x2F;em&gt;. Data sources must implement a function &lt;code&gt;runAll&lt;&#x2F;code&gt; with the following signature:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;runAll&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;requests&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Chunk&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Chunk&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;]]): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ZIO&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;R&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Nothing&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;CompletedRequestMap&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Here &lt;code&gt;A&lt;&#x2F;code&gt; is the &lt;em&gt;request type&lt;&#x2F;em&gt; specific to a given data source (extending &lt;code&gt;Request[E, A]&lt;&#x2F;code&gt;, and the returned &lt;code&gt;CompletedRequestMap&lt;&#x2F;code&gt; will store an &lt;code&gt;Either[E, A]&lt;&#x2F;code&gt; result for each request. The two nested chunks model sequential and parallel execution: the requests in the inner chunks can be executed in parallel, while these batches contained by the outer chunk must be performed sequentially. In practice we won&#x27;t implement this method but use &lt;code&gt;DataSource.Batched&lt;&#x2F;code&gt; that is a simplified version that can perform requests in parallel but does not make further optimizations on the requests to be performed sequentially.&lt;&#x2F;p&gt;
&lt;p&gt;What should belong to one data source?  It could be a single data source for all the AWS queries, or one per service, or one per resource type. The best choice in this case is to have one for each resource type, for the following reasons:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;There are no opportunities to do any cross-resource-type caching. For example when we are querying EC2 instances, we won&#x27;t fetch auto scaling groups as a side effect.&lt;&#x2F;li&gt;
&lt;li&gt;If all requests are about the same data type, implementing the data source is much simpler&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Let&#x27;s see a simple example. EC2 instances can be queried by &lt;em&gt;instance ID&lt;&#x2F;em&gt; with the &lt;a href=&quot;https:&#x2F;&#x2F;docs.aws.amazon.com&#x2F;AWSEC2&#x2F;latest&#x2F;APIReference&#x2F;API_DescribeInstances.html&quot;&gt;&lt;code&gt;DescribeInstances&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; operation, and it supports querying for multiple IDs in a single request. We first define a &lt;em&gt;request type&lt;&#x2F;em&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; GetEc2Instance&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;InstanceId&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span&gt;Request[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;AwsError&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Instance&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ReadOnly&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Then the data source:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;ec2InstancesDataSource&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;DataSource&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Logging &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;with &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Ec2&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;GetEc2Instance&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= 
&lt;&#x2F;span&gt;&lt;span&gt;  DataSource.Batched.make(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;ec2&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;) { (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;requests&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Chunk&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;GetEc2Instance&lt;&#x2F;span&gt;&lt;span&gt;]) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;import&lt;&#x2F;span&gt;&lt;span&gt; AwsDataSource.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;result &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span&gt; ec2.describeInstances(DescribeInstancesRequest(instanceIds &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;Some(requests.map(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;.id))))
&lt;&#x2F;span&gt;&lt;span&gt;        .mapM(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;.instances)
&lt;&#x2F;span&gt;&lt;span&gt;        .flatMap(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;instances &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;ZStream.fromIterable(instances))
&lt;&#x2F;span&gt;&lt;span&gt;        .foldM(CompletedRequestMap.empty) { (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;resultMap&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;item&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;instanceId &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span&gt; item.instanceId
&lt;&#x2F;span&gt;&lt;span&gt;          } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;yield&lt;&#x2F;span&gt;&lt;span&gt; resultMap.insert(GetEc2Instance(instanceId))(Right(item))
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        .recordFailures(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;DescribeInstances&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, requests)
&lt;&#x2F;span&gt;&lt;span&gt;    } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;yield&lt;&#x2F;span&gt;&lt;span&gt; result
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Here &lt;code&gt;requests&lt;&#x2F;code&gt; holds a set of &lt;code&gt;GetEc2Instance&lt;&#x2F;code&gt; requests to be performed in parallel. We can simply do this by taking all the &lt;em&gt;instance IDs&lt;&#x2F;em&gt; from these requests and performing a single &lt;code&gt;describeInstances&lt;&#x2F;code&gt; AWS call. The result, as I explained before, is a &lt;code&gt;ZStream&lt;&#x2F;code&gt; of instances. We have to construct a &lt;code&gt;CompletedRequestMap&lt;&#x2F;code&gt; holding one entry for each request in &lt;code&gt;requests&lt;&#x2F;code&gt;. To do this we &lt;code&gt;foldM&lt;&#x2F;code&gt; the stream, using the &lt;code&gt;instanceId&lt;&#x2F;code&gt; accessor function to reconstruct the request value for each item in the result stream.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;code&gt;.recordFailures&lt;&#x2F;code&gt; function is a helper extension method defined in &lt;code&gt;AwsDataSource&lt;&#x2F;code&gt;. It catches all errors and produces a &lt;code&gt;CompletedRequestMap&lt;&#x2F;code&gt; where all requested items are recorded as failures:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;recordFailures&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;description&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;, 
&lt;&#x2F;span&gt;&lt;span&gt;                      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;requests&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Iterable&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Request&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;AwsError&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;]]): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ZIO&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;R&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Nothing&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;CompletedRequestMap&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span&gt;  f.catchAll { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;error &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    log.error(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;$description&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt; failed with &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;$error&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;) *&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;      ZIO.succeed {
&lt;&#x2F;span&gt;&lt;span&gt;        requests.foldLeft(CompletedRequestMap.empty) { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;resultMap&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;req&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;          resultMap.insert(req)(Left(error))
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;      }
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This is necessary because the data source requires a function of type &lt;code&gt;Chunk[A] =&amp;gt; ZIO[R, Nothing, CompletedRequestMap]&lt;&#x2F;code&gt; that cannot fail.&lt;&#x2F;p&gt;
&lt;p&gt;With the data source defined, we can define primitive &lt;em&gt;queries&lt;&#x2F;em&gt; on it:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;getEc2Instance&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;InstanceId&lt;&#x2F;span&gt;&lt;span&gt;): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ZQuery&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Logging &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;with &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Ec2&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;AwsError&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Instance&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ReadOnly&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span&gt;  ZQuery.fromRequest(GetEc2Instance(id))(ec2InstancesDataSource)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;A more complex example is &lt;code&gt;ebEnvDataSource&lt;&#x2F;code&gt;, the data source of &lt;em&gt;ElasticBeanstalk environments&lt;&#x2F;em&gt;. For this resource, we have different request types:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;sealed trait&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; EbEnvRequest&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span&gt;Request[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;AwsError&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; GetEnvironmentByName&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;EnvironmentName&lt;&#x2F;span&gt;&lt;span&gt;) 
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span&gt;EbEnvRequest[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;EnvironmentDescription&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ReadOnly&lt;&#x2F;span&gt;&lt;span&gt;]]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; GetEnvironmentById&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;EnvironmentId&lt;&#x2F;span&gt;&lt;span&gt;) 
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span&gt;EbEnvRequest[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;EnvironmentDescription&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ReadOnly&lt;&#x2F;span&gt;&lt;span&gt;]]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; GetEnvironmentByApplicationName&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ApplicationName&lt;&#x2F;span&gt;&lt;span&gt;) 
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span&gt;EbEnvRequest[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;EnvironmentDescription&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ReadOnly&lt;&#x2F;span&gt;&lt;span&gt;]]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In the data source implementation we get a &lt;code&gt;Chunk&lt;&#x2F;code&gt; of &lt;code&gt;EbEnvRequest&lt;&#x2F;code&gt; to be performed in parallel. We start it by separating it per request type:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;byName &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; requests.collect { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span&gt;GetEnvironmentByName(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; name }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;byId &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; requests.collect { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span&gt;GetEnvironmentById(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; id }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;byAppName &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; requests.collect { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span&gt;GetEnvironmentByApplicationName(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; name }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Then for each of these collections, if not empty, we can perform a &lt;code&gt;describeEnvironments&lt;&#x2F;code&gt; AWS call and then fold the result stream to create partial &lt;code&gt;CompletedRequestMap&lt;&#x2F;code&gt; values. What is interesting here is that if we already queried an environment by either name or id or it&#x27;s application name, we already know both its identifier and name, so we can store additional items in &lt;code&gt;CompletedRequestMap&lt;&#x2F;code&gt; that will be cached and reused in future queries. For example this is how the query by-id gets processed:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span&gt;resultMap &amp;lt;- elasticbeanstalk
&lt;&#x2F;span&gt;&lt;span&gt;  .describeEnvironments(DescribeEnvironmentsRequest(environmentIds &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;Some(byId)))
&lt;&#x2F;span&gt;&lt;span&gt;  .foldM(initialResultMap) { (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;resultMap&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;item&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span&gt; item.environmentName
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span&gt; item.environmentId
&lt;&#x2F;span&gt;&lt;span&gt;    } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;yield&lt;&#x2F;span&gt;&lt;span&gt; resultMap
&lt;&#x2F;span&gt;&lt;span&gt;        .insert(GetEnvironmentById(id))(Right(Some(item)))
&lt;&#x2F;span&gt;&lt;span&gt;        .insert(GetEnvironmentByName(name))(Right(Some(item)))
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;  .recordFailures(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;DescribeEnvironmentRequest(id)&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, byId.map(GetEnvironmentById))
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;For all three request types we describe the computation to create a partial &lt;code&gt;CompletedRequestMap&lt;&#x2F;code&gt; for them. Then we can implement the data source by executing these (maximum) three queries in parallel and combining the results:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span&gt;byNameResultMap
&lt;&#x2F;span&gt;&lt;span&gt;  .zipWithPar(byIdResultMap)(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt; ++ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  .zipWithPar(byAppNameResultMap)(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt; ++ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;There are some cases where being able to query &lt;em&gt;all&lt;&#x2F;em&gt; instances of a given resource is also a requirement. An example is &lt;em&gt;load balancers&lt;&#x2F;em&gt;, where the only way to find if an ELB contains a given &lt;em&gt;EC2 instance&lt;&#x2F;em&gt; is to query &lt;em&gt;all&lt;&#x2F;em&gt; ELBs and check their members. There are a few more cases that require a very similar implementation, so it makes sense extracting it to a common place. We define an &lt;code&gt;AllOrPerItem&lt;&#x2F;code&gt; trait that defines the specifics per use case:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;trait&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; AllOrPerItem&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;R&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Req&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Item&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: String
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;isGetAll&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;request&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: Req): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Boolean
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;isPerItem&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;request&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: Req): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Boolean
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;allReq&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: Req
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;itemToReq&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;item&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: Item): ZIO[R, AwsError, Req]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;getAll&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;(): ZStream[R, AwsError, Item]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;getSome&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;reqs&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: Set[Req]): ZStream[R, AwsError, Item]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;processAdditionalRequests&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;requests&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: Chunk[Req], 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;                                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;partialResult&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: CompletedRequestMap): ZIO[R, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Nothing&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;, CompletedRequestMap] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    ZIO.succeed(partialResult)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;By implementing these one-liners the actual data source implementation can be a shared code defined in &lt;code&gt;AllOrPerItem.make&lt;&#x2F;code&gt;. It&#x27;s very similar to the examples already seen. If any of the requests is the &lt;em&gt;get all request&lt;&#x2F;em&gt;, that&#x27;s the only thing to be performed, and all the result items will be cached. Otherwise a single batched request is made.&lt;&#x2F;p&gt;
&lt;p&gt;These primitive &lt;code&gt;ZQuery&lt;&#x2F;code&gt;s then can be composed to more complex queries. For example the following code:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;instance &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span&gt; ec2query.getEc2Instance(instanceId)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;imageId &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;- &lt;&#x2F;span&gt;&lt;span&gt;ZQuery.fromEffect(instance.imageId)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;imgElb &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;- &lt;&#x2F;span&gt;&lt;span&gt;(ec2query.getImage(imageId) &amp;lt;&amp;amp;&amp;gt; elbquery.loadBalancerOf(instanceId))
&lt;&#x2F;span&gt;&lt;span&gt;  (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;image&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;elb&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; imgElb
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;elbReport &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span&gt; optionally(elb)(getElbReport)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;result &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;yield&lt;&#x2F;span&gt;&lt;span&gt; result    
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This is part of the definition of a query of type &lt;code&gt;ZQuery[QueryEnv, AwsError, LinkedReport[Ec2InstanceKey, Ec2InstanceReport]]&lt;&#x2F;code&gt;. We will talk about &lt;code&gt;QueryEnv&lt;&#x2F;code&gt; and &lt;code&gt;LinkedReport&lt;&#x2F;code&gt; later, for now it&#x27;s enough to understand that this is a more complex query that provides an &lt;em&gt;EC2 instance report&lt;&#x2F;em&gt;; the data type that will be used to render the human-readable output. The query first gets an EC2 instance by &lt;em&gt;instance ID&lt;&#x2F;em&gt;. Then with &lt;code&gt;ZQuery.fromEffect&lt;&#x2F;code&gt; we lift a &lt;code&gt;ZIO&lt;&#x2F;code&gt; effect to the query. In this case this is a &lt;code&gt;zio-aws&lt;&#x2F;code&gt; &lt;em&gt;accessor function&lt;&#x2F;em&gt; that fails if &lt;code&gt;imageId&lt;&#x2F;code&gt; is &lt;code&gt;None&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;By this we express that we &lt;em&gt;expect&lt;&#x2F;em&gt; that &lt;code&gt;imageId&lt;&#x2F;code&gt; is always specified, and if not, we fail the &lt;em&gt;whole query&lt;&#x2F;em&gt;. Then we use &lt;code&gt;&amp;lt;&amp;amp;&amp;gt;&lt;&#x2F;code&gt; (it&#x27;s alias is &lt;code&gt;zipPar&lt;&#x2F;code&gt;) to perform two queries &lt;strong&gt;in parallel&lt;&#x2F;strong&gt;: getting an EC2 image and finding the load balancer containing the instance. Once both queries are finished, we optionally generate a &lt;em&gt;load balancer report&lt;&#x2F;em&gt; (if we have found an ELB link) and then we construct the result.&lt;&#x2F;p&gt;
&lt;p&gt;Here &lt;code&gt;optionally&lt;&#x2F;code&gt; is a simple helper function that makes our query more readable. It could have been written as &lt;code&gt;elb.fold(ZQuery.none)(getElbReport)&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Another useful combinator on &lt;code&gt;ZQuery&lt;&#x2F;code&gt; is &lt;code&gt;collectAllPar&lt;&#x2F;code&gt; that runs a subquery on each item of a collection in parallel:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;elbNames &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;- &lt;&#x2F;span&gt;&lt;span&gt;ZQuery.fromEffect(asg.loadBalancerNames)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;result &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;- &lt;&#x2F;span&gt;&lt;span&gt;ZQuery.collectAllPar(elbNames.map(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; elbquery.getLoadBalancer(name) &amp;gt;&amp;gt;= getElbReport))
&lt;&#x2F;span&gt;&lt;span&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;yield&lt;&#x2F;span&gt;&lt;span&gt; result
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;As I mentioned earlier, we have no way to know what resource we are looking for (in fact we could for example detect EC2 &lt;em&gt;instance IDs&lt;&#x2F;em&gt; by a pattern but let&#x27;s ignore that for now). So on top level we simply start _all the possible queries &lt;strong&gt;at once&lt;&#x2F;strong&gt; and let print all the non-failing ones:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;renderers &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;- &lt;&#x2F;span&gt;&lt;span&gt;ZQuery.collectAllPar(possibleQueries).run
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;- &lt;&#x2F;span&gt;&lt;span&gt;ZIO.foreach_(renderers.flatten)(identity)
&lt;&#x2F;span&gt;&lt;span&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;yield &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Where &lt;code&gt;possibleQueries&lt;&#x2F;code&gt; is a where we list all the queries we want to support, tied to the &lt;em&gt;renderer&lt;&#x2F;em&gt; to show it on the console.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;report-cache&quot;&gt;Report cache&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;em&gt;ZIO Query&lt;&#x2F;em&gt; solves caching and optimizes the requests on the AWS resource level, but we still have a problem. The queries form a cyclic graph. For example an &lt;em&gt;EC2 instance&lt;&#x2F;em&gt; holds a link to its &lt;em&gt;load balancer&lt;&#x2F;em&gt;, that holds a link to the &lt;em&gt;EB environment&lt;&#x2F;em&gt; it is defined in. The environment refers back to the ELB, and it also links to the &lt;em&gt;EB app&lt;&#x2F;em&gt; and the application has again links to all the &lt;em&gt;environments&lt;&#x2F;em&gt; it contains.&lt;&#x2F;p&gt;
&lt;p&gt;We want to collect all these resources exactly once, and there is a chance that parallel queries reach to the same resource. To solve this we can add an extra &lt;em&gt;caching layer&lt;&#x2F;em&gt; on top of &lt;em&gt;ZIO Query&lt;&#x2F;em&gt;. Let&#x27;s define this caching layer as a ZIO &lt;em&gt;module&lt;&#x2F;em&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;object&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; ReportCache {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;trait&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; Service {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;storeIfNew&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;[A &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Report](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;reportKey&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: ReportKey, 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;                                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;query&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: ZQuery[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Any&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;, AwsError, A]): ZQuery[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Any&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;, AwsError, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Boolean&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;retrieve&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;[A &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Report](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;key&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: ReportKey): ZIO[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Any&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;, AwsError, Option[A]]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;code&gt;storeIfNew&lt;&#x2F;code&gt; function is a &lt;em&gt;query&lt;&#x2F;em&gt;, to be used in high level queries to shortcut cycles in case a given report is already stored in the cache. We can define a helper function &lt;code&gt;cached&lt;&#x2F;code&gt; like the following:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;protected def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;cached&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;R &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ReportCache &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;with &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Logging&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;B &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Report&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;K &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ReportKey&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;  (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;input&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;keyFn&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;A &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ZIO&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Any&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;AwsError&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;K&lt;&#x2F;span&gt;&lt;span&gt;])
&lt;&#x2F;span&gt;&lt;span&gt;  (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;query&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;K &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ZQuery&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;R&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;AwsError&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;B&lt;&#x2F;span&gt;&lt;span&gt;]): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ZQuery&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;R&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;AwsError&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;LinkedReport&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;K&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;B&lt;&#x2F;span&gt;&lt;span&gt;]] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;key &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;- &lt;&#x2F;span&gt;&lt;span&gt;ZQuery.fromEffect(keyFn(input))
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;env &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;- &lt;&#x2F;span&gt;&lt;span&gt;ZQuery.environment[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;R&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span&gt; storeIfNew(
&lt;&#x2F;span&gt;&lt;span&gt;      key,
&lt;&#x2F;span&gt;&lt;span&gt;      query(key).provide(env ? &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;provided environment&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    )
&lt;&#x2F;span&gt;&lt;span&gt;  } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;yield &lt;&#x2F;span&gt;&lt;span&gt;LinkedReport[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;K&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;B&lt;&#x2F;span&gt;&lt;span&gt;](key)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Then we can use it in queries like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;getEbAppReport&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ApplicationName&lt;&#x2F;span&gt;&lt;span&gt;): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ZQuery&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;QueryEnv&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;AwsError&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;LinkedReport&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;EbAppKey&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;EbAppReport&lt;&#x2F;span&gt;&lt;span&gt;]] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span&gt;  cached(name)(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;ZIO.succeed(EbAppKey(name))) { (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;key&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;EbAppKey&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Let&#x27;s see in detail how this works!&lt;&#x2F;p&gt;
&lt;p&gt;First of all, we define the following types:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;final case class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; LinkedReport&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;K &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ReportKey&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;R &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Report&lt;&#x2F;span&gt;&lt;span&gt;](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;key&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;K&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;sealed trait&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; ReportKey
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;final case class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; Ec2InstanceKey&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;instanceId&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;InstanceId&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span&gt;ReportKey
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;sealed trait&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; Report
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;final case class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; Ec2InstanceReport&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;instanceId&lt;&#x2F;span&gt;&lt;span&gt;: ec2.model.primitives.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;InstanceId&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                                   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;                                   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;elb&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;LinkedReport&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ElbKey&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ElbReport&lt;&#x2F;span&gt;&lt;span&gt;]]
&lt;&#x2F;span&gt;&lt;span&gt;                                  ) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span&gt;Report
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In &lt;code&gt;cached&lt;&#x2F;code&gt;, we provide a &lt;code&gt;keyFn&lt;&#x2F;code&gt; that is an effectful function to extract the &lt;code&gt;ReportKey&lt;&#x2F;code&gt; from the arbitrary input that can be the key itself, or an already fetched resource. Then we call the &lt;code&gt;ReportCache&lt;&#x2F;code&gt; module&#x27;s &lt;code&gt;storeIfNew&lt;&#x2F;code&gt; query and return a &lt;code&gt;LinkedReport&lt;&#x2F;code&gt;. A &lt;em&gt;linked report&lt;&#x2F;em&gt; is just a wrapper around a report key, it is the type to be used in &lt;code&gt;Report&lt;&#x2F;code&gt; types to refer to each other. We store the cyclic resource graph by using these report keys and the cache&#x27;s &lt;code&gt;retrieve&lt;&#x2F;code&gt; function to resolve the references on demand.&lt;&#x2F;p&gt;
&lt;p&gt;One thing to notice is the &lt;code&gt;.provide&lt;&#x2F;code&gt; in the code of &lt;code&gt;cached&lt;&#x2F;code&gt;. The report cache does not know about the environments needed for the queries it caches the results of; the &lt;code&gt;query&lt;&#x2F;code&gt; parameter of &lt;code&gt;storeIfNew&lt;&#x2F;code&gt; has the type &lt;code&gt;ZQuery[Any, AwsError, A]&lt;&#x2F;code&gt;. For this reason &lt;code&gt;cached&lt;&#x2F;code&gt; eliminates the environment of its inner query by getting it and calling &lt;code&gt;.provide(env)&lt;&#x2F;code&gt; before passing it to the cache.&lt;&#x2F;p&gt;
&lt;p&gt;The report cache itself can be implemented with &lt;a href=&quot;https:&#x2F;&#x2F;zio.dev&#x2F;docs&#x2F;datatypes&#x2F;datatypes_stm&quot;&gt;&lt;em&gt;STM&lt;&#x2F;em&gt;&lt;&#x2F;a&gt;. First we create a &lt;a href=&quot;https:&#x2F;&#x2F;zio.dev&#x2F;docs&#x2F;datatypes&#x2F;datatypes_tmap&quot;&gt;&lt;code&gt;TMap&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span&gt;cache &amp;lt;- TMap.empty[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ReportKey&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Promise&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;AwsError&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Report&lt;&#x2F;span&gt;&lt;span&gt;]].commit
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We want to store the fact that a query &lt;em&gt;has been started&lt;&#x2F;em&gt; for a given report key. This can be modelled with a &lt;code&gt;Promise&lt;&#x2F;code&gt; that eventually gets a &lt;code&gt;Report&lt;&#x2F;code&gt; value. With this &lt;code&gt;TMap&lt;&#x2F;code&gt; structure, the &lt;code&gt;storeIfNew&lt;&#x2F;code&gt; function can be defined as:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;override def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;storeIfNew&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;A &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Report&lt;&#x2F;span&gt;&lt;span&gt;](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;reportKey&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ReportKey&lt;&#x2F;span&gt;&lt;span&gt;, 
&lt;&#x2F;span&gt;&lt;span&gt;                                     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;query&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ZQuery&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Any&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;AwsError&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;]): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ZQuery&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Any&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;AwsError&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Boolean&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span&gt;  ZQuery.fromEffect {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;promise &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;- &lt;&#x2F;span&gt;&lt;span&gt;Promise.make[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;AwsError&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Report&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;finalQuery &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span&gt; cache.get(reportKey).flatMap {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span&gt;Some(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;report&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; replacing the query with the cached value
&lt;&#x2F;span&gt;&lt;span&gt;          ZSTM.succeed(ZQuery.succeed(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span&gt;None &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; replacing the query with the cached value
&lt;&#x2F;span&gt;&lt;span&gt;          cache.put(reportKey, promise).map { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;            query.foldM(
&lt;&#x2F;span&gt;&lt;span&gt;              &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;failure &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;ZQuery.fromEffect(promise.fail(failure)) *&amp;gt; ZQuery.fail(failure),
&lt;&#x2F;span&gt;&lt;span&gt;              &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;success &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;ZQuery.fromEffect(promise.succeed(success))
&lt;&#x2F;span&gt;&lt;span&gt;            )
&lt;&#x2F;span&gt;&lt;span&gt;          }
&lt;&#x2F;span&gt;&lt;span&gt;      }.commit
&lt;&#x2F;span&gt;&lt;span&gt;    } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;yield&lt;&#x2F;span&gt;&lt;span&gt; finalQuery
&lt;&#x2F;span&gt;&lt;span&gt;  }.flatMap(identity)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This may seem simple but actually we are combining three different layers of abstraction here!&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;The whole thing is a &lt;em&gt;query&lt;&#x2F;em&gt;. But we first run a &lt;em&gt;ZIO effect&lt;&#x2F;em&gt; that &lt;strong&gt;produces&lt;&#x2F;strong&gt; a query, and then execute that result query (in &lt;code&gt;.flatMap(identity)&lt;&#x2F;code&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;In the effect we create a promise that might be used or not, depending on the outcome of the transaction. Then we do &lt;code&gt;cache.get&lt;&#x2F;code&gt; which is an &lt;em&gt;STM transaction&lt;&#x2F;em&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;In the transaction we produce a &lt;code&gt;ZQuery&lt;&#x2F;code&gt; value that is either returning a simple &lt;code&gt;false&lt;&#x2F;code&gt; value if the report was already cached, or we store the already created promise in the map and return the query that constructs the report as the &lt;em&gt;result&lt;&#x2F;em&gt; of the transaction.&lt;&#x2F;li&gt;
&lt;li&gt;As it is an &lt;em&gt;STM transaction&lt;&#x2F;em&gt; it may be retried multiple times but eventually it returns with a query that is either a NOP or calculates the &lt;em&gt;report&lt;&#x2F;em&gt; &lt;strong&gt;and&lt;&#x2F;strong&gt; sets the promise in the end.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The other function of &lt;code&gt;ReportCache&lt;&#x2F;code&gt;, &lt;code&gt;retrieve&lt;&#x2F;code&gt; will be used when traversing the gathered &lt;em&gt;reports&lt;&#x2F;em&gt; to follow the &lt;code&gt;LinkedReport&lt;&#x2F;code&gt; links. It is simply a combination of getting an item from the &lt;code&gt;TMap&lt;&#x2F;code&gt; and then waiting for the stored promise.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;throttling&quot;&gt;Throttling&lt;&#x2F;h2&gt;
&lt;p&gt;The original implementation of this tool did not control the amount and rate of AWS requests in any way, and a few years ago API rate limits made it somewhat unusable. As I explained &lt;a href=&quot;https:&#x2F;&#x2F;blog.vigoo.dev&#x2F;posts&#x2F;aws-rate-limits-prezidig&#x2F;&quot;&gt;in a previous post&lt;&#x2F;a&gt;, I solved it by centralizing the calls to AWS then adding &lt;em&gt;circuit breaking and retry&lt;&#x2F;em&gt; to handle the &lt;em&gt;throttling errors&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;In this new implementation &lt;em&gt;ZIO Query&lt;&#x2F;em&gt; &#x27;s batching feature already reduces the load but AWS has a global rate limit that can be reached any time, regardless of the actual request rate provided by this application. So how could we handle this with &lt;code&gt;zio-aws&lt;&#x2F;code&gt; and ZIO Query?&lt;&#x2F;p&gt;
&lt;p&gt;There is useful ZIO library called &lt;a href=&quot;https:&#x2F;&#x2F;www.vroste.nl&#x2F;rezilience&#x2F;&quot;&gt;rezilience&lt;&#x2F;a&gt; that defines utilities to express circuit breaking, retries, rate limiting and other similar policies. With this library we can create a policy that detects &lt;code&gt;AwsError&lt;&#x2F;code&gt;s representing throttling failures:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;private def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;throttlingPolicy&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ZManaged&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Random &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;with &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Clock &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;with &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Logging&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Nothing&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Policy&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;AwsError&lt;&#x2F;span&gt;&lt;span&gt;]] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;cb &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;- &lt;&#x2F;span&gt;&lt;span&gt;CircuitBreaker.make[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;AwsError&lt;&#x2F;span&gt;&lt;span&gt;](
&lt;&#x2F;span&gt;&lt;span&gt;      trippingStrategy &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;TrippingStrategy.failureCount(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;      resetPolicy &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;Retry.Schedules.exponentialBackoff(min &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;.second, max &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;.minute),
&lt;&#x2F;span&gt;&lt;span&gt;      isFailure &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span&gt;GenericAwsError(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;AwsServiceException&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; error.isThrottlingException &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;true
&lt;&#x2F;span&gt;&lt;span&gt;      }
&lt;&#x2F;span&gt;&lt;span&gt;    )
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;retry &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;- &lt;&#x2F;span&gt;&lt;span&gt;Retry.make(min &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;.second, max &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;.minute)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;retryComposable &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; retry.widen[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;PolicyError&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;AwsError&lt;&#x2F;span&gt;&lt;span&gt;]] { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span&gt;Policy.WrappedError(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;e&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; e }
&lt;&#x2F;span&gt;&lt;span&gt;  } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;yield&lt;&#x2F;span&gt;&lt;span&gt; cb.toPolicy compose retryComposable.toPolicy
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This will open a circuit breaker in case of throttling errors, and retry the operation with exponential back-off.&lt;&#x2F;p&gt;
&lt;p&gt;These policies can be applied to &lt;code&gt;ZIO&lt;&#x2F;code&gt; effects. What we really need is to apply a policy like this to &lt;em&gt;all&lt;&#x2F;em&gt; AWS call. It should be the actual call to the underlying &lt;em&gt;AWS Java SDK&lt;&#x2F;em&gt;, not on the &lt;code&gt;zio-aws&lt;&#x2F;code&gt; wrapper level, because for example a streaming API function may produce multiple AWS requests.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;code&gt;zio-aws&lt;&#x2F;code&gt; library supports applying &lt;code&gt;AwsCallAspect&lt;&#x2F;code&gt;s on the &lt;em&gt;AWS service client layers&lt;&#x2F;em&gt; to modify the underlying SDK calls. This is exactly what we need to apply the throttling policy to all calls! What&#x27;s even better, by creating a single &lt;code&gt;throttlingPolicy&lt;&#x2F;code&gt; and applying it to all the service layers (&lt;code&gt;ec2&lt;&#x2F;code&gt;, &lt;code&gt;elasticloadbalancing&lt;&#x2F;code&gt;, &lt;code&gt;elasticbeanstalk&lt;&#x2F;code&gt; and &lt;code&gt;autoscaling&lt;&#x2F;code&gt;) they will share a common circuit breaker that matches the situation perfectly as the AWS API rate limiting is applied to globally to all services.&lt;&#x2F;p&gt;
&lt;p&gt;An AWS call aspect has the following form:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;throttling &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;AwsCallAspect&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Any&lt;&#x2F;span&gt;&lt;span&gt;] {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;override def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;apply&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;R1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ZIO&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;R1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;AwsError&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Described&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;]]): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ZIO&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;R1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;AwsError&lt;&#x2F;span&gt;&lt;span&gt;, aspects.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Described&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;]] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span&gt;    policy(f).mapError {
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span&gt;Policy.WrappedError(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;e&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; e
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span&gt;Policy.BulkheadRejection &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;AwsError.fromThrowable(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RuntimeException&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;Bulkhead rejection&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span&gt;Policy.CircuitBreakerOpen &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;AwsError.fromThrowable(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RuntimeException&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;AWS rate limit exceeded&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;      }
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Another simple example could be logging all AWS requests:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;callLogging&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;AwsCallAspect&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Logging&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;AwsCallAspect&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Logging&lt;&#x2F;span&gt;&lt;span&gt;] {
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;override final def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;apply&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;R1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Logging&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ZIO&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;R1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;AwsError&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Described&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;]]): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ZIO&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;R1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;AwsError&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Described&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;]] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span&gt;     f.flatMap { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;@&lt;&#x2F;span&gt;&lt;span&gt;Described(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;description&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;       log.info(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;[${&lt;&#x2F;span&gt;&lt;span&gt;description.service&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;}&#x2F;${&lt;&#x2F;span&gt;&lt;span&gt;description.operation&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;}]&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;).as(r)
&lt;&#x2F;span&gt;&lt;span&gt;     }
&lt;&#x2F;span&gt;&lt;span&gt; }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;These aspects can be applied to a &lt;code&gt;zio-aws&lt;&#x2F;code&gt; &lt;code&gt;ZLayer&lt;&#x2F;code&gt; directly, such as:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span&gt;ec2.live @@ (throttling &amp;gt;&amp;gt;&amp;gt; callLogging)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;rendering&quot;&gt;Rendering&lt;&#x2F;h2&gt;
&lt;p&gt;With the queries and report cache ready the last missing building block is &lt;em&gt;rendering&lt;&#x2F;em&gt; the gathered reports. We implement it in its own ZIO module with the following interface:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;object&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; Rendering {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;trait&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; Service {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;renderEc2Instance&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;report&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: LinkedReport[Ec2InstanceKey, Ec2InstanceReport]): UIO[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Unit&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;renderElb&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;report&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: LinkedReport[ElbKey, ElbReport], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;context&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: Option[String]): UIO[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Unit&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;renderAsg&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;report&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: LinkedReport[AsgKey, AsgReport]): UIO[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Unit&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;renderEbEnv&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;report&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: LinkedReport[EbEnvKey, EbEnvReport]): UIO[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Unit&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;renderEbApp&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;report&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: LinkedReport[EbAppKey, EbAppReport]): UIO[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Unit&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The live implementation of course needs access to &lt;code&gt;ReportCache&lt;&#x2F;code&gt; and writes the report out to &lt;code&gt;Console&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;live&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ZLayer&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Console &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;with &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ReportCache&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Nothing&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Rendering&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We need two main things to implement report rendering:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;A way to pretty-print reports to the console&lt;&#x2F;li&gt;
&lt;li&gt;We have to track which report was already rendered to be able to traverse the cyclic result graph&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;To track the already printed reports we can simply create a &lt;code&gt;Ref&lt;&#x2F;code&gt; holding a set of visited &lt;code&gt;ReportKey&lt;&#x2F;code&gt;s:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;private case class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; State&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;alreadyVisited&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Set&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ReportKey&lt;&#x2F;span&gt;&lt;span&gt;])
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;alreadyVisited &amp;lt;- Ref.make(State(Set.empty))
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;For pretty printing the reports there are several possibilities. Eventually we want to call &lt;code&gt;console.putStr&lt;&#x2F;code&gt; to write to the console. The original implementation of this tool used a string templating engine to define the output. Instead of doing that we can write a pretty-printing DSL to define our output in Scala. Take a look at the following example:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span&gt;ifNotVisitedYet(report) { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;env &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  sectionHeader(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;Beanstalk&#x2F;Env&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;) &amp;lt;-&amp;gt; highlighted(env.name) &amp;lt;-&amp;gt; 
&lt;&#x2F;span&gt;&lt;span&gt;    details(env.id) &amp;lt;-&amp;gt; 
&lt;&#x2F;span&gt;&lt;span&gt;    normal(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;is a Beanstalk environment of the application ${&lt;&#x2F;span&gt;&lt;span&gt;env.appName&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;}&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;) \\
&lt;&#x2F;span&gt;&lt;span&gt;  indented {
&lt;&#x2F;span&gt;&lt;span&gt;    keyword(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;AWS Console&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;) &amp;lt;:&amp;gt; 
&lt;&#x2F;span&gt;&lt;span&gt;      link(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;https:&#x2F;&#x2F;console.aws.amazon.com&#x2F;elasticbeanstalk&#x2F;home?region=${&lt;&#x2F;span&gt;&lt;span&gt;env.region&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;}#&#x2F;environment&#x2F;dashboard?applicationName=${&lt;&#x2F;span&gt;&lt;span&gt;env.appName&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;}&amp;amp;environmentId=${&lt;&#x2F;span&gt;&lt;span&gt;env.id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;}&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;) \\
&lt;&#x2F;span&gt;&lt;span&gt;    keyword(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;Health&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;) &amp;lt;:&amp;gt; highlighted(env.health.toString) \\
&lt;&#x2F;span&gt;&lt;span&gt;    keyword(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;Currently running version&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;) &amp;lt;:&amp;gt; normal(env.version) \\
&lt;&#x2F;span&gt;&lt;span&gt;    normal(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;${&lt;&#x2F;span&gt;&lt;span&gt;env.asgs.size&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;} ASGs, ${&lt;&#x2F;span&gt;&lt;span&gt;env.instanceCount&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;} instances, ${&lt;&#x2F;span&gt;&lt;span&gt;env.elbs.size&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;} ELBs&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;) \\
&lt;&#x2F;span&gt;&lt;span&gt;    env.elbs.foreach_(elb(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;, None)) \\
&lt;&#x2F;span&gt;&lt;span&gt;    env.asgs.foreach_(asg) \\
&lt;&#x2F;span&gt;&lt;span&gt;    ebApp(env.app)
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We can see here a couple of functions and operators, all created to the specific task of printing &lt;em&gt;AWS resource reports&lt;&#x2F;em&gt;:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ifNotYetVisitedYet&lt;&#x2F;code&gt; must somehow interact with the &lt;code&gt;Ref&lt;&#x2F;code&gt; we defined above&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;-&amp;gt;&lt;&#x2F;code&gt; concatenates two texts with a space&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;:&amp;gt;&lt;&#x2F;code&gt; concatenates two texts with a colon and a space&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;\\&lt;&#x2F;code&gt; concatenates two texts with a newline&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;keyword&lt;&#x2F;code&gt;, &lt;code&gt;link&lt;&#x2F;code&gt;, &lt;code&gt;normal&lt;&#x2F;code&gt;, &lt;code&gt;highlighted&lt;&#x2F;code&gt; etc. add styling to the given text&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;foreach_&lt;&#x2F;code&gt; is coming from &lt;code&gt;zio-prelude&lt;&#x2F;code&gt;-s &lt;code&gt;Traversable&lt;&#x2F;code&gt;. We will see why is it used soon.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;We could define these styling functions as &lt;code&gt;ZIO&lt;&#x2F;code&gt; effects and the helper operators as general extension methods on &lt;code&gt;ZIO&lt;&#x2F;code&gt;. Then we could store required state (for example for indentation) in a &lt;code&gt;Ref&lt;&#x2F;code&gt; for example. This works but we can do better. By defining our own monadic data type &lt;code&gt;Print[A]&lt;&#x2F;code&gt; we get the following advantages:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;It is more type safe. The pretty printing operators will be only applicable to pretty printing functions, not to arbitrary ZIO effects&lt;&#x2F;li&gt;
&lt;li&gt;Pretty printing state gets completely hidden from the pretty printing definitions&lt;&#x2F;li&gt;
&lt;li&gt;We can easily do some optimizations such as collapsing multiple newlines into one, which makes rendering optional lines more convenient&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;So let&#x27;s define a data type to represent pretty printing:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;sealed trait&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; Print&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;final case class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; PrintPure&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span&gt;Print[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;final case class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; PrintS&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span&gt;Print[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Unit&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;final case class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; PrintModified&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;modifiers&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span&gt;Print[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Unit&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;final case object&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; PrintNL &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span&gt;Print[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Unit&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;final case class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; PrintIndented&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;p&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Print&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;]) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span&gt;Print[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;final case class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; PrintFlatMap&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;B&lt;&#x2F;span&gt;&lt;span&gt;](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Print&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;A &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Print&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;B&lt;&#x2F;span&gt;&lt;span&gt;]) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span&gt;Print[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;B&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;final case class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; PrintEffect&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;UIO&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;]) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span&gt;Print[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;PrintPure&lt;&#x2F;code&gt; and &lt;code&gt;PrintFlatMap&lt;&#x2F;code&gt; can be used to implement &lt;code&gt;zio-prelude&lt;&#x2F;code&gt;s type classes:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;implicit val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;print &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Covariant&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Print&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;with &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;IdentityFlatten&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Print&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;with &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;IdentityBoth&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Print&lt;&#x2F;span&gt;&lt;span&gt;] {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;override def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;B&lt;&#x2F;span&gt;&lt;span&gt;](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;A &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;B&lt;&#x2F;span&gt;&lt;span&gt;): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Print&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Print&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;B&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= 
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;fa &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;PrintFlatMap(fa, (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;PrintPure(f(a)))
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;override def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;any&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Print&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Any&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span&gt;    PrintPure(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;override def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;flatten&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;ffa&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Print&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Print&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;]]): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Print&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= 
&lt;&#x2F;span&gt;&lt;span&gt;    PrintFlatMap(ffa, (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;fa&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Print&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;]) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; fa)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;override def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;both&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;B&lt;&#x2F;span&gt;&lt;span&gt;](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;fa&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Print&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;fb&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Print&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;B&lt;&#x2F;span&gt;&lt;span&gt;]): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Print&lt;&#x2F;span&gt;&lt;span&gt;[(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;B&lt;&#x2F;span&gt;&lt;span&gt;)] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= 
&lt;&#x2F;span&gt;&lt;span&gt;    PrintFlatMap(fa, (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; map((&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;B&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;(a, b))(fb))
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;What are these type classes providing to us?&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Covariant&lt;&#x2F;code&gt; basically gives us &lt;code&gt;map&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;IdentityFlatten&lt;&#x2F;code&gt; means that the data type can be &quot;flattened&quot; associatively and has an identity element. This gives us &lt;code&gt;flatten&lt;&#x2F;code&gt; and &lt;code&gt;flatMap&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;IdentityBoth&lt;&#x2F;code&gt; means we have an associative binary operator to combine two values. This enables syntax like &lt;code&gt;&amp;lt;*&amp;gt;&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Having this we can define primitive pretty printing operators like:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;normal&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;text&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Print&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Unit&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;PrintS(text)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;space&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Print&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Unit&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;PrintS(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot; &amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;implicit class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; PrintOps&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Print&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;]) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;&amp;lt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;[B](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;next&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Print[B]): Print[B] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    self *&amp;gt; space *&amp;gt; next
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Then we can use the syntax provided by &lt;code&gt;zio-prelude&lt;&#x2F;code&gt; to compose these pretty printer values. The only thing remaining is to provide a transformation of &lt;code&gt;Print[A]&lt;&#x2F;code&gt; to &lt;code&gt;UIO[A]&lt;&#x2F;code&gt;. This is where we can hide the pretty printer state and can handle special rules like collapsing newlines:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;private trait&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; PrettyConsole {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;protected val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;console&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: Console.Service
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;private case class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; PrettyState(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;indentation&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: String, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;afterNL&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Boolean&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;private def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;printFlatMap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;[A, B](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: Print[A], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: A &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Print[B], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;state&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: PrettyState): UIO[(B, PrettyState)] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;r1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; runImpl(a, state)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;r2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; runImpl(f(r1._1), r1._2)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;yield&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; r2
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;private def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;runImpl&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;[A](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;p&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: Print[A], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;state&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: PrettyState): UIO[(A, PrettyState)] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    p &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;match &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;PrintPure(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ZIO.succeed((a, state))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;PrintS(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ZIO.when(state.afterNL)(console.putStr(state.indentation)) *&amp;gt; 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;        console.putStr(s).as(((), state.copy(afterNL &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;false)))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;PrintModified(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;modifiers&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ZIO.when(state.afterNL)(console.putStr(state.indentation)) *&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;        console.putStr(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;modifiers&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;$s$RESET&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;).as(((), state.copy(afterNL &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;false)))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;PrintNL &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;(state.afterNL) ZIO.succeed(((), state)) 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;else&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; console.putStrLn(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;).as(((), state.copy(afterNL &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;true)))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;PrintIndented(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; runImpl(f, state.copy(indentation &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; state.indentation + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;)).map { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;          (a, s.copy(indentation &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; state.indentation)) }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;PrintFlatMap(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; printFlatMap(a, f, state)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;PrintEffect(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; f.map((&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;, state))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;run&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;[A](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;p&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: Print[A]): UIO[A] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; runImpl(p, PrettyState(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;, afterNL &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;false)).map(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;._1)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;A couple of things to notice here:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;PrettyState&lt;&#x2F;code&gt; holds the indentation and a flag that is true when the last print was a &lt;em&gt;new line&lt;&#x2F;em&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;runImpl&lt;&#x2F;code&gt; gets the state as input and has the capability to modify it, by returning the modified state together with the computation&#x27;s result&lt;&#x2F;li&gt;
&lt;li&gt;there is a &lt;code&gt;PrintEffect&lt;&#x2F;code&gt; constructor that allows lifting arbitrary &lt;code&gt;ZIO&lt;&#x2F;code&gt; effects to the pretty printer. This is needed for interacting with the &lt;code&gt;Ref&lt;&#x2F;code&gt; that holds the record of already printed reports.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;putting-all-together&quot;&gt;Putting all together&lt;&#x2F;h2&gt;
&lt;p&gt;Putting all this together means getting command line arguments, setting up the AWS client libraries, the report cache and the rendering modules and running the top level queries.&lt;&#x2F;p&gt;
&lt;p&gt;To parse the command line arguments we can use my &lt;a href=&quot;https:&#x2F;&#x2F;vigoo.github.io&#x2F;clipp&#x2F;docs&#x2F;&quot;&gt;clipp library&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;final case class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; Parameters&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;verbose&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Boolean&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;searchInput&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;region&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;paramSpec &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= for &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span&gt; metadata(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;aws-query&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;search for AWS infrastructure resources&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;verbose &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span&gt; flag(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;Verbose logging&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;&amp;#39;v&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;verbose&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;searchInput &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span&gt; parameter[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;Search input&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;NAME_OR_ID&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;region &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span&gt; optional { namedParameter[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;AWS region&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;REGION&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;region&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;) }
&lt;&#x2F;span&gt;&lt;span&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;yield &lt;&#x2F;span&gt;&lt;span&gt;Parameters(verbose, searchInput, region.getOrElse(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;us-east-1&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;params &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; clipp.zioapi.config.fromArgsWithUsageInfo(args, paramSpec)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;code&gt;verbose&lt;&#x2F;code&gt; flag is used to set up logging. We use &lt;a href=&quot;https:&#x2F;&#x2F;zio.github.io&#x2F;zio-logging&#x2F;&quot;&gt;zio-logging&lt;&#x2F;a&gt; with SLF4j support (to be able to see logs from the underlying AWS Java SDK) with lo4j2 backend. In order to control the log level by the command line &lt;code&gt;verbose&lt;&#x2F;code&gt; flag, instead of the usual XML-based configuration for log4j2 we define a ZIO &lt;em&gt;layer&lt;&#x2F;em&gt; that&#x27;s only purpose is to perform the configuration programmatically:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;private def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;log4j2Configuration&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ZLayer&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Has&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ClippConfig&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Service&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Parameters&lt;&#x2F;span&gt;&lt;span&gt;]], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Throwable&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Has&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Log4jConfiguration&lt;&#x2F;span&gt;&lt;span&gt;]] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  ZLayer.fromServiceM[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ClippConfig&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Service&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Parameters&lt;&#x2F;span&gt;&lt;span&gt;], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Any&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Throwable&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Log4jConfiguration&lt;&#x2F;span&gt;&lt;span&gt;] { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;params &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    ZIO.effect {
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;builder &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;ConfigurationBuilderFactory.newConfigurationBuilder()       
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;      Configurator.initialize(builder.build())
&lt;&#x2F;span&gt;&lt;span&gt;      Log4jConfiguration()
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This way the root logger&#x27;s level can depend on the &lt;code&gt;Parameters&lt;&#x2F;code&gt; parsed by &lt;code&gt;clipp&lt;&#x2F;code&gt;. Composing this layer with &lt;code&gt;zio-logger&lt;&#x2F;code&gt;s &lt;code&gt;Slf4jLogger&lt;&#x2F;code&gt; gives us a working &lt;code&gt;Logging&lt;&#x2F;code&gt; layer:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;logging &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; log4j2Configuration &amp;gt;+&amp;gt; Slf4jLogger.make { (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;message&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; message }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;By bootstrapping the parameters and the logging we can run our main application like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;result &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span&gt; awsQuery()
&lt;&#x2F;span&gt;&lt;span&gt;    .provideCustomLayer(params &amp;gt;+&amp;gt; logging)
&lt;&#x2F;span&gt;&lt;span&gt;    .catchAll { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;ZIO.succeed(ExitCode.failure) }
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;- &lt;&#x2F;span&gt;&lt;span&gt;ZIO.effect(LogManager.shutdown()).orDie
&lt;&#x2F;span&gt;&lt;span&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;yield&lt;&#x2F;span&gt;&lt;span&gt; result
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;code&gt;clipp&lt;&#x2F;code&gt; parser will print detailed usage info in case it fails, and other runtime errors are logged, so we can simply catch all errors and exit with a failure on top level.&lt;&#x2F;p&gt;
&lt;p&gt;In &lt;code&gt;awsQuery&lt;&#x2F;code&gt; we create all the other layers necessary for running the queries. First we need to create the &lt;em&gt;throttling policy&lt;&#x2F;em&gt; that is used by all the AWS service clients as I explained above:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;private def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;awsQuery&lt;&#x2F;span&gt;&lt;span&gt;(): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ZIO&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Random &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;with &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Clock &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;with &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Console &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;with &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Logging &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;with &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ClippConfig&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Parameters&lt;&#x2F;span&gt;&lt;span&gt;], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Nothing&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ExitCode&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span&gt;    throttlingPolicy.use { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;policy &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;      
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;code&gt;zio-aws&lt;&#x2F;code&gt; library uses &lt;a href=&quot;https:&#x2F;&#x2F;zio.github.io&#x2F;zio-config&#x2F;&quot;&gt;ZIO Config&lt;&#x2F;a&gt; for configuration. This means we need a &lt;code&gt;ZConfig[CommonAwsConfig]&lt;&#x2F;code&gt; to construct the &lt;code&gt;AwsConfig&lt;&#x2F;code&gt; layer:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;commonConfig &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;ZLayer.succeed(CommonAwsConfig(
&lt;&#x2F;span&gt;&lt;span&gt;  region &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;Some(Region.of(params.region)),
&lt;&#x2F;span&gt;&lt;span&gt;  credentialsProvider &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;DefaultCredentialsProvider.create(),
&lt;&#x2F;span&gt;&lt;span&gt;  endpointOverride &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;None,
&lt;&#x2F;span&gt;&lt;span&gt;  commonClientConfig &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;None
&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;awsCore &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;(netty.default ++ commonConfig) &amp;gt;&amp;gt;&amp;gt; core.config.configured()
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;code&gt;AwsConfig&lt;&#x2F;code&gt; layer combines the configuration with a selected HTTP backend. In our case this is the &lt;em&gt;Netty&lt;&#x2F;em&gt; backend, using its default configuration.&lt;&#x2F;p&gt;
&lt;p&gt;Then we define the per-service client layers, applying the throttling and call logging &lt;em&gt;aspects&lt;&#x2F;em&gt; as I described before:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;awsClients &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span&gt;  ec2.live @@ (throttling &amp;gt;&amp;gt;&amp;gt; callLogging) ++
&lt;&#x2F;span&gt;&lt;span&gt;  elasticloadbalancing.live @@ (throttling &amp;gt;&amp;gt;&amp;gt; callLogging) ++
&lt;&#x2F;span&gt;&lt;span&gt;  elasticbeanstalk.live @@ (throttling &amp;gt;&amp;gt;&amp;gt; callLogging) ++
&lt;&#x2F;span&gt;&lt;span&gt;  autoscaling.live @@ (throttling &amp;gt;&amp;gt;&amp;gt; callLogging)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;To produce the final layer, we feed the logging and the &lt;code&gt;AwsConfig&lt;&#x2F;code&gt; layers to the client layers, and add the &lt;code&gt;ReportCache&lt;&#x2F;code&gt; and &lt;code&gt;Render&lt;&#x2F;code&gt; implementations:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;finalLayer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= 
&lt;&#x2F;span&gt;&lt;span&gt;  ((ZLayer.service[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Logger&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;]] ++ awsCore) &amp;gt;&amp;gt;&amp;gt; awsClients) ++
&lt;&#x2F;span&gt;&lt;span&gt;  ((Console.any ++ cache.live) &amp;gt;+&amp;gt; render.live)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This has the environment &lt;code&gt;ClippConfig[Parameters] with Console with Logging with ReportCache with Rendering with AllServices&lt;&#x2F;code&gt; where&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;AllServices &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Ec2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;with &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ElasticLoadBalancing &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;with &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ElasticBeanstalk &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;with &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;AutoScaling
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;We reimplemented the tool to query AWS resources using functional programming techniques, built on top of ZIO libraries. By separating the execution from the problem specification we get an easily readable and maintainable code that can be easily extended with new queries or reports without having to thing about how caching and concurrency is implemented under the hood. We can rate limit AWS requests without touching the actual queries, and take advantage of batching AWS operations while keeping the query logic simple and unaware of this optimization.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Code generation in ZIO-AWS</title>
        <published>2020-09-23T00:00:00+00:00</published>
        <updated>2020-09-23T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Daniel Vigovszky
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://blog.vigoo.dev/posts/zioaws-code-generation/"/>
        <id>https://blog.vigoo.dev/posts/zioaws-code-generation/</id>
        
        <content type="html" xml:base="https://blog.vigoo.dev/posts/zioaws-code-generation/">&lt;p&gt;I have recently published a set of libraries, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;vigoo&#x2F;zio-aws&quot;&gt;&lt;strong&gt;zio-aws&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;, aiming to provide a better interface for working with &lt;em&gt;AWS services&lt;&#x2F;em&gt; from &lt;a href=&quot;https:&#x2F;&#x2F;zio.dev&#x2F;&quot;&gt;ZIO&lt;&#x2F;a&gt; applications. For more information about how the ZIO &lt;em&gt;interface&lt;&#x2F;em&gt; works and how to get started with these libraries, read the repository&#x27;s README. In this post, I will focus on how these libraries are generated from the schema provided by the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;aws&#x2F;aws-sdk-java-v2&quot;&gt;AWS Java SDK v2&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;generating-code&quot;&gt;Generating code&lt;&#x2F;h2&gt;
&lt;p&gt;I wanted to cover &lt;em&gt;all&lt;&#x2F;em&gt; AWS services at once. This means client libraries for more than 200 services, so the only possible approach was to &lt;em&gt;generate&lt;&#x2F;em&gt; these libraries on top of a small hand-written core.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;schema&quot;&gt;Schema&lt;&#x2F;h3&gt;
&lt;p&gt;The first thing we need for generating code is a source schema. This is the model that we use to create the source code from. It is usually constructed by some kind of DSL or more directly described by a JSON or YAML or similar data model. In the case of &lt;strong&gt;zio-aws&lt;&#x2F;strong&gt; this was already defined in the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;aws&#x2F;aws-sdk-java-v2&quot;&gt;AWS Java SDK v2&lt;&#x2F;a&gt; project. The way it works is:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;There is a &lt;code&gt;codegen&lt;&#x2F;code&gt; project, published in the &lt;code&gt;software.amazon.awssdk&lt;&#x2F;code&gt; group among the client libraries, that contains the Java classes used for generating the Java SDK itself. This contains the data model classes for parsing the actual schema as well.&lt;&#x2F;li&gt;
&lt;li&gt;In the AWS Java SDK v2 repository, the schema is located in the subdirectory called &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;aws&#x2F;aws-sdk-java-v2&#x2F;tree&#x2F;master&#x2F;services&quot;&gt;&lt;code&gt;services&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;. There is a directory for each AWS service and it contains among other things some relevant &lt;em&gt;JSON&lt;&#x2F;em&gt; schema files:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;service-2.json&lt;&#x2F;code&gt; is the main schema of the service, describing the data structures and operations&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;paginators-1.json&lt;&#x2F;code&gt; describes the operations that the Java SDK creates a &lt;em&gt;paginator interface&lt;&#x2F;em&gt; for&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;customization.config&lt;&#x2F;code&gt; contains extra information, including changes to be applied on top of the service model&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Fortunately, these are also embedded in the generated &lt;em&gt;AWS Java SDK&lt;&#x2F;em&gt; libraries as resources, so getting &lt;em&gt;all client libraries&lt;&#x2F;em&gt; on the classpath gives us an easy way to get the corresponding schemas as well&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;I decided to use the low-level data classes from the AWS &lt;code&gt;codegen&lt;&#x2F;code&gt; library to parse these files and using that build a higher-level model that can be then used as an input for the &lt;em&gt;code generator&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;This is encapsulated in a &lt;em&gt;ZIO layer&lt;&#x2F;em&gt; called &lt;code&gt;Loader&lt;&#x2F;code&gt;, which has two functions:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;findModels&lt;&#x2F;span&gt;&lt;span&gt;(): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ZIO&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Blocking&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Throwable&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Set&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ModelId&lt;&#x2F;span&gt;&lt;span&gt;]]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;loadCodegenModel&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ModelId&lt;&#x2F;span&gt;&lt;span&gt;): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ZIO&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Blocking&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Throwable&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;C2jModels&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The first one, &lt;code&gt;findModels&lt;&#x2F;code&gt; uses the &lt;code&gt;ClassLoader&lt;&#x2F;code&gt; to enumerate all &lt;code&gt;codegen-resources&lt;&#x2F;code&gt; folders on the &lt;em&gt;classpath&lt;&#x2F;em&gt; and just returns a set of &lt;code&gt;ModelId&lt;&#x2F;code&gt;s. &lt;code&gt;ModelId&lt;&#x2F;code&gt; is a pair of a model name (such as &lt;code&gt;s3&lt;&#x2F;code&gt;) and an optional submodule name (for example &lt;code&gt;dynamodb:dynamodbstreams&lt;&#x2F;code&gt;).&lt;&#x2F;p&gt;
&lt;p&gt;Then for each detected model we can load it with the &lt;code&gt;loadCodegenModel&lt;&#x2F;code&gt; function, &lt;code&gt;C2jModels&lt;&#x2F;code&gt; is a class from the AWS &lt;code&gt;codegen&lt;&#x2F;code&gt; library.&lt;&#x2F;p&gt;
&lt;p&gt;Figuring out how to interpret these data structures, and how to map them to the generated Java API was the hardest part, but it&#x27;s out of scope for this post. Our next topic here is how we generate code from our &lt;em&gt;model&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;scalameta&quot;&gt;Scalameta&lt;&#x2F;h3&gt;
&lt;p&gt;There are several possibilities to generate source code and I tried many of them during the past years. Let&#x27;s see some examples:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Using a general-purpose text template engine. An example we used at &lt;a href=&quot;https:&#x2F;&#x2F;prezi.com&quot;&gt;Prezi&lt;&#x2F;a&gt; is the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bkiers&#x2F;Liqp&quot;&gt;Java implementation of the Liquid templating engine&lt;&#x2F;a&gt;. Another example is the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;OpenAPITools&#x2F;openapi-generator&quot;&gt;OpenAPI generator project&lt;&#x2F;a&gt; that uses &lt;a href=&quot;https:&#x2F;&#x2F;mustache.github.io&#x2F;&quot;&gt;Mustache&lt;&#x2F;a&gt; templates to generate server and client code from OpenAPI specifications.&lt;&#x2F;li&gt;
&lt;li&gt;Generating from code with some general-purpose pretty-printing library. With this approach, we are using the pretty-printer library&#x27;s composability features to create source code building blocks, and map the code generator model to these constructs. It is easier to express complex logic in this case, as we don&#x27;t have to encode it in a limited dynamic template model. On the other hand, reading the code generator&#x27;s source and imagining the output is not easy, and nothing enforces that the pretty-printer building blocks are actually creating valid source code.&lt;&#x2F;li&gt;
&lt;li&gt;If the target language has an AST with a pretty-printing feature, we can map the model to the AST directly and just pretty print at the end. With this, we get a much more efficient development cycle, as the generated code is at least guaranteed to be syntactically correct. But the AST can be far from how the target language&#x27;s textual representation looks like, which makes it difficult to read and write this code.&lt;&#x2F;li&gt;
&lt;li&gt;With a library that supports building ASTs with &lt;em&gt;quasiquotes&lt;&#x2F;em&gt;, we can build the AST fragments with a syntax that is very close to the generated target language. For &lt;em&gt;Scala&lt;&#x2F;em&gt;, a library that supports this and is used in a lot of tooling projects is &lt;a href=&quot;https:&#x2F;&#x2F;scalameta.org&#x2F;&quot;&gt;Scalameta&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;I wanted to try using &lt;em&gt;Scalameta&lt;&#x2F;em&gt; ever since I met Devon Stewart and he mentioned how he uses it in &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;twilio&#x2F;guardrail&#x2F;&quot;&gt;guardrail&lt;&#x2F;a&gt;. Finally, this was a perfect use case to do so!&lt;&#x2F;p&gt;
&lt;p&gt;To get an understanding of what kind of Scala language constructs can be built with &lt;em&gt;quasiquotes&lt;&#x2F;em&gt; with &lt;em&gt;Scalameta&lt;&#x2F;em&gt;, check &lt;a href=&quot;https:&#x2F;&#x2F;scalameta.org&#x2F;docs&#x2F;trees&#x2F;quasiquotes.html&quot;&gt;the list of them in the official documentation&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;We get a good mix of both worlds with this. It is possible to express complex template logic in real code, creating higher-level constructs, taking advantage of the full power of Scala. On the other hand, the actual &lt;em&gt;quasiquoted&lt;&#x2F;em&gt; fragments are still close to the code generator&#x27;s target language (which is in this case also Scala).&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s see a short example of this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;private def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;generateMap&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;m&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Model&lt;&#x2F;span&gt;&lt;span&gt;): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ZIO&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;GeneratorContext&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;GeneratorFailure&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ModelWrapper&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;keyModel &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span&gt; get(m.shape.getMapKeyType.getShape)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;valueModel &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span&gt; get(m.shape.getMapValueType.getShape)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;keyT &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;- &lt;&#x2F;span&gt;&lt;span&gt;TypeMapping.toWrappedType(keyModel)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;valueT &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;- &lt;&#x2F;span&gt;&lt;span&gt;TypeMapping.toWrappedType(valueModel)
&lt;&#x2F;span&gt;&lt;span&gt;  } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;yield &lt;&#x2F;span&gt;&lt;span&gt;ModelWrapper(
&lt;&#x2F;span&gt;&lt;span&gt;    code &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;List(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;q&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&amp;quot;&amp;quot;type ${&lt;&#x2F;span&gt;&lt;span&gt;m.asType&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;} = Map[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;$keyT&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;$valueT&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;]&amp;quot;&amp;quot;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  )
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;For each &lt;em&gt;AWS&lt;&#x2F;em&gt; service-specific &lt;em&gt;model type&lt;&#x2F;em&gt; we generate some kind of wrapper code into the ZIO service client library. This is done by processing the schema model to an intermediate format where for each such wrapper, we have a &lt;code&gt;ModelWrapper&lt;&#x2F;code&gt; value that already has the &lt;em&gt;Scalameta AST&lt;&#x2F;em&gt; for that particular wrapper. The above code fragment creates this for &lt;em&gt;map types&lt;&#x2F;em&gt;, which is a simple type alias for a Scala &lt;code&gt;Map&lt;&#x2F;code&gt;. It&#x27;s a &lt;code&gt;ZIO&lt;&#x2F;code&gt; function, taking advantage of passing around the context in the &lt;em&gt;environment&lt;&#x2F;em&gt; and safely handling generator failures, while the actual generated code part in the &lt;code&gt;q&quot;&quot;&quot;...&quot;&quot;&quot;&lt;&#x2F;code&gt; remained quite readable.&lt;&#x2F;p&gt;
&lt;p&gt;Then the whole &lt;em&gt;model package&lt;&#x2F;em&gt; can be expressed like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;primitiveModels &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;- &lt;&#x2F;span&gt;&lt;span&gt;ZIO.foreach(primitiveModels.toList.sortBy(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;.name))(generateModel)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;models &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;- &lt;&#x2F;span&gt;&lt;span&gt;ZIO.foreach(complexModels.toList.sortBy(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;.name))(generateModel)
&lt;&#x2F;span&gt;&lt;span&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;yield &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;q&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&amp;quot;&amp;quot;package &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;$fullPkgName&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt; {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;            import scala.jdk.CollectionConverters._
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;            import java.time.Instant
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;            import zio.{Chunk, ZIO}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;            import software.amazon.awssdk.core.SdkBytes
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;            ..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;$parentModuleImport
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;            package object model {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;              object primitives {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;                ..${&lt;&#x2F;span&gt;&lt;span&gt;primitiveModels.flatMap(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;.code)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;              }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;              ..${&lt;&#x2F;span&gt;&lt;span&gt;models.flatMap(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;.code)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;            }}&amp;quot;&amp;quot;&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This can be then &lt;em&gt;pretty printed&lt;&#x2F;em&gt; simply with&lt;code&gt;.toString&lt;&#x2F;code&gt; and saved to a &lt;code&gt;.scala&lt;&#x2F;code&gt; file.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;building-the-libraries&quot;&gt;Building the libraries&lt;&#x2F;h2&gt;
&lt;p&gt;We have a way to collect the service models and generate source code from that, but we still have to use that generated code somehow. In &lt;code&gt;zio-aws&lt;&#x2F;code&gt; the goal was to generate a separate &lt;em&gt;client library&lt;&#x2F;em&gt; for each AWS service. At the time of writing, there were &lt;strong&gt;235&lt;&#x2F;strong&gt; such services. The generated libraries have to be built and published to &lt;em&gt;Sonatype&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;first-version&quot;&gt;First version&lt;&#x2F;h3&gt;
&lt;p&gt;In the first version I simply wired together the above described &lt;code&gt;loader&lt;&#x2F;code&gt; and &lt;code&gt;generator&lt;&#x2F;code&gt; module into a &lt;code&gt;ZIO&lt;&#x2F;code&gt; &lt;em&gt;command line&lt;&#x2F;em&gt; app, using &lt;a href=&quot;https:&#x2F;&#x2F;vigoo.github.io&#x2F;clipp&#x2F;docs&#x2F;&quot;&gt;clipp&lt;&#x2F;a&gt; for command line parsing. It&#x27;s &lt;code&gt;main&lt;&#x2F;code&gt; was really just something like the following:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;app &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= for &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;svcs &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span&gt; config.parameters[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Parameters&lt;&#x2F;span&gt;&lt;span&gt;].map(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;.serviceList)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;ids &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span&gt; svcs &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;match &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span&gt;Some(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;ids&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;ZIO.succeed(ids.toSet)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span&gt;None &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; loader.findModels().mapError(ReflectionError)
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;- &lt;&#x2F;span&gt;&lt;span&gt;ZIO.foreachPar(ids) { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;model &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span&gt; loader.loadCodegenModel(id).mapError(ReflectionError)
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span&gt; generator.generateServiceCode(id, model).mapError(GeneratorError)
&lt;&#x2F;span&gt;&lt;span&gt;    } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;yield &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span&gt; generator.generateBuildSbt(ids).mapError(GeneratorError)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span&gt; generator.copyCoreProject().mapError(GeneratorError)
&lt;&#x2F;span&gt;&lt;span&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;yield &lt;&#x2F;span&gt;&lt;span&gt;ExitCode.success
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;cfg &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; config.fromArgsWithUsageInfo(args, Parameters.spec).mapError(ParserError)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;modules &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; loader.live ++ (cfg &amp;gt;+&amp;gt; generator.live)
&lt;&#x2F;span&gt;&lt;span&gt;app.provideCustomLayer(modules)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Then created a &lt;em&gt;multi-module&lt;&#x2F;em&gt; &lt;code&gt;sbt&lt;&#x2F;code&gt; project with the following modules:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;zio-aws-codegen&lt;&#x2F;code&gt; the CLI code generator we were talking about so far&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;zio-aws-core&lt;&#x2F;code&gt; holding the common part of all AWS service wrapper libraries. This contains things like how to translate AWS pagination into &lt;code&gt;ZStream&lt;&#x2F;code&gt; etc.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;zio-aws-akka-http&lt;&#x2F;code&gt;, &lt;code&gt;zio-aws-http4s&lt;&#x2F;code&gt; and &lt;code&gt;zio-aws-netty&lt;&#x2F;code&gt; are the supported &lt;em&gt;HTTP layers&lt;&#x2F;em&gt;, all depend on &lt;code&gt;zio-aws-core&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;I also created a first &lt;em&gt;example&lt;&#x2F;em&gt; project in a separate &lt;code&gt;sbt&lt;&#x2F;code&gt; project, that demonstrated the use of some of the generated AWS client libraries. With this primitive setup, building everything from scratch and running the example took the following steps:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;sbt compile&lt;&#x2F;code&gt; the root project&lt;&#x2F;li&gt;
&lt;li&gt;manually running &lt;code&gt;zio-aws-codegen&lt;&#x2F;code&gt; to generate &lt;em&gt;all client libs at once&lt;&#x2F;em&gt; to a separate directory, with a corresponding &lt;code&gt;build.sbt&lt;&#x2F;code&gt; including all these projects in a single &lt;code&gt;sbt&lt;&#x2F;code&gt; project&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;sbt publishLocal&lt;&#x2F;code&gt; in the generated &lt;code&gt;sbt&lt;&#x2F;code&gt; project&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;sbt run&lt;&#x2F;code&gt; in the &lt;em&gt;examples&lt;&#x2F;em&gt; project&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;For the second, manual step I created some &lt;em&gt;custom sbt tasks&lt;&#x2F;em&gt; called &lt;code&gt;generateAll&lt;&#x2F;code&gt;, &lt;code&gt;buildAll&lt;&#x2F;code&gt;, and &lt;code&gt;publishLocalAll&lt;&#x2F;code&gt;, that downloaded an &lt;code&gt;sbt-launch-*.jar&lt;&#x2F;code&gt; and used it to run the code generator and fork an &lt;code&gt;sbt&lt;&#x2F;code&gt; to build the generated project.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;code&gt;generateAll&lt;&#x2F;code&gt; task was quite simple:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span&gt;generateAll := Def.taskDyn {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;root &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; baseDirectory.value.getAbsolutePath
&lt;&#x2F;span&gt;&lt;span&gt;  Def.task {
&lt;&#x2F;span&gt;&lt;span&gt;    (codegen &#x2F; Compile &#x2F; run).toTask(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot; --target-root ${&lt;&#x2F;span&gt;&lt;span&gt;root&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;}&#x2F;generated --source-root ${&lt;&#x2F;span&gt;&lt;span&gt;root&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;} --version &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;$zioAwsVersion&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt; --zio-version &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;$zioVersion&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt; --zio-rs-version &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;$zioReactiveStreamsInteropVersion&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;).value
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}.value
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Launching a second &lt;code&gt;sbt&lt;&#x2F;code&gt; took more effort:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span&gt;buildAll := Def.taskDyn {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; generateAll.value
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;generatedRoot &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; baseDirectory.value &#x2F; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;generated&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;launcherVersion &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; sbtVersion.value
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;launcher &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;sbt-launch-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;$launcherVersion&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;.jar&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;launcherFile &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; generatedRoot &#x2F; launcher
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  Def.task[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Unit&lt;&#x2F;span&gt;&lt;span&gt;] {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(!launcherFile.exists) {
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;u &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; url(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;https:&#x2F;&#x2F;oss.sonatype.org&#x2F;content&#x2F;repositories&#x2F;public&#x2F;org&#x2F;scala-sbt&#x2F;sbt-launch&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;$launcherVersion&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&#x2F;sbt-launch-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;$launcherVersion&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;.jar&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;      sbt.io.Using.urlInputStream(u) { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;inputStream &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        IO.transfer(inputStream, launcherFile)
&lt;&#x2F;span&gt;&lt;span&gt;      }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;fork &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ForkRun&lt;&#x2F;span&gt;&lt;span&gt;(ForkOptions()
&lt;&#x2F;span&gt;&lt;span&gt;      .withWorkingDirectory(generatedRoot))
&lt;&#x2F;span&gt;&lt;span&gt;    fork.run(
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;xsbt.boot.Boot&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;      classpath &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; launcherFile :: Nil,
&lt;&#x2F;span&gt;&lt;span&gt;      options &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;compile&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt; :: Nil,
&lt;&#x2F;span&gt;&lt;span&gt;      log &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; streams.value.log
&lt;&#x2F;span&gt;&lt;span&gt;    )
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}.value
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;With these extra tasks, I released the first version of the library manually, but there was a lot of annoying difficulties:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Having to switch between various &lt;code&gt;sbt&lt;&#x2F;code&gt; projects&lt;&#x2F;li&gt;
&lt;li&gt;The need to &lt;code&gt;publishLocal&lt;&#x2F;code&gt; the generated artifacts in order to build the examples, or any kind of integration tests that I planned to add&lt;&#x2F;li&gt;
&lt;li&gt;The only way to build only those client libraries that are needed for the examples&#x2F;tests was to build and publish them manually, as this dependency was not tracked at all between the unrelated &lt;code&gt;sbt&lt;&#x2F;code&gt; projects&lt;&#x2F;li&gt;
&lt;li&gt;Because the generated &lt;code&gt;sbt&lt;&#x2F;code&gt; project could not refer to the outer &lt;code&gt;zio-aws-core&lt;&#x2F;code&gt; project, it has to be copied into the generated project in the code generator step&lt;&#x2F;li&gt;
&lt;li&gt;Building and publishing all the &lt;strong&gt;235&lt;&#x2F;strong&gt; projects at once required about &lt;strong&gt;16Gb&lt;&#x2F;strong&gt; memory and hours of compilation time. It was too big to run on any of the (freely available) CI systems.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;proper-solution&quot;&gt;Proper solution&lt;&#x2F;h3&gt;
&lt;p&gt;When I mentioned this, &lt;em&gt;Itamar Ravid&lt;&#x2F;em&gt; recommended trying to make it an &lt;em&gt;sbt code generator&lt;&#x2F;em&gt;. &lt;code&gt;sbt&lt;&#x2F;code&gt; has built-in support for generating source code, as described &lt;a href=&quot;https:&#x2F;&#x2F;www.scala-sbt.org&#x2F;1.0&#x2F;docs&#x2F;Howto-Generating-Files.html&quot;&gt;on it&#x27;s documentation page&lt;&#x2F;a&gt;. This alone though would not be enough to cover our use case, as in &lt;code&gt;zio-aws&lt;&#x2F;code&gt; even the &lt;em&gt;set of projects&lt;&#x2F;em&gt; is dynamic and comes from the enumeration of schema models. Fortunately, there is support for that in too, through the &lt;code&gt;extraProjects&lt;&#x2F;code&gt; property of &lt;code&gt;sbt&lt;&#x2F;code&gt; &lt;em&gt;plugins&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;With these two tools, the new project layout became the following:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;zio-aws-codegen&lt;&#x2F;code&gt; is an sbt &lt;strong&gt;plugin&lt;&#x2F;strong&gt;, having it&#x27;s own &lt;code&gt;sbt&lt;&#x2F;code&gt; project in a subdirectory&lt;&#x2F;li&gt;
&lt;li&gt;the &lt;code&gt;zio-aws-core&lt;&#x2F;code&gt; and the HTTP libraries are all in the top-level project as before&lt;&#x2F;li&gt;
&lt;li&gt;examples and integration tests are also part of the top-level project&lt;&#x2F;li&gt;
&lt;li&gt;the &lt;code&gt;zio-aws-codegen&lt;&#x2F;code&gt; plugin is referenced using a &lt;code&gt;ProjectRef&lt;&#x2F;code&gt; from the outer project&lt;&#x2F;li&gt;
&lt;li&gt;the plugin adds all the &lt;em&gt;AWS service client wrapper libraries&lt;&#x2F;em&gt; to the top-level project&lt;&#x2F;li&gt;
&lt;li&gt;these projects generate their source on-demand&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;In this setup, it is possible to build any subset of the generated libraries without the need to process and compile all of them, so it needs much less memory. It is also much simpler to run tests or build examples on top of them, as the test and example projects can directly depend on the generated libraries as &lt;code&gt;sbt&lt;&#x2F;code&gt; submodules. And even developing the &lt;em&gt;code generator&lt;&#x2F;em&gt; itself is convenient - although for editing it, it has to be opened as in a separate IDE session, but otherwise, &lt;code&gt;sbt reload&lt;&#x2F;code&gt; on the top level project automatically recompiles the plugin when needed.&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s see piece by piece how we can achieve this!&lt;&#x2F;p&gt;
&lt;h4 id=&quot;project-as-a-source-dependency&quot;&gt;Project as a source dependency&lt;&#x2F;h4&gt;
&lt;p&gt;The first thing I wanted to do is having the &lt;code&gt;zio-aws-codegen&lt;&#x2F;code&gt; project converted to an &lt;code&gt;sbt&lt;&#x2F;code&gt; plugin, but still having it in the same repository and be able to use it without having to install to a local repository. Although the whole code generator code could have been added to the top level &lt;code&gt;sbt&lt;&#x2F;code&gt; project&#x27;s &lt;code&gt;project&lt;&#x2F;code&gt; source, I wanted to keep it as a separate module to be able to publish it as a library or a CLI tool in the future if needed.&lt;&#x2F;p&gt;
&lt;p&gt;This can be achieved by putting it in a subdirectory of the top level project, with a separate &lt;code&gt;build.sbt&lt;&#x2F;code&gt; that contains the&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span&gt;sbtPlugin := &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;true
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;(beside the usual ones). Then it can be referenced in the top level project&#x27;s &lt;code&gt;project&#x2F;plugins.sbt&lt;&#x2F;code&gt; in the following way:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;lazy val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;codegen &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; project
&lt;&#x2F;span&gt;&lt;span&gt;  .in(file(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;.&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;  .dependsOn(ProjectRef(file(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;..&#x2F;zio-aws-codegen&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;zio-aws-codegen&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;and enabled in the &lt;code&gt;build.sbt&lt;&#x2F;code&gt; as&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span&gt;enablePlugins(ZioAwsCodegenPlugin)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;dynamically-generating-projects&quot;&gt;Dynamically generating projects&lt;&#x2F;h4&gt;
&lt;p&gt;To generate the subprojects dynamically, we need the &lt;code&gt;Set[ModelId]&lt;&#x2F;code&gt; coming from the &lt;code&gt;loader&lt;&#x2F;code&gt; module. It is a &lt;code&gt;ZIO&lt;&#x2F;code&gt; module, so from the &lt;code&gt;sbt&lt;&#x2F;code&gt; plugin we have to use &lt;code&gt;Runtime.default.unsafeRun&lt;&#x2F;code&gt; to execute it.&lt;&#x2F;p&gt;
&lt;p&gt;As the code generator project is now an &lt;code&gt;sbt&lt;&#x2F;code&gt; plugin, all the &lt;code&gt;sbt&lt;&#x2F;code&gt; data structures are directly available, so we can just write a function that maps the &lt;code&gt;ModelId&lt;&#x2F;code&gt;s to &lt;code&gt;Project&lt;&#x2F;code&gt;s:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;protected def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;generateSbtSubprojects&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;ids&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Set&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ModelId&lt;&#x2F;span&gt;&lt;span&gt;]): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Seq&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Project&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= ???
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;One interesting part here is that some of the subprojects are depending on each other. This happens with AWS service &lt;em&gt;submodules&lt;&#x2F;em&gt;, indicated by the second parameter of &lt;code&gt;ModelId&lt;&#x2F;code&gt;. An example is &lt;code&gt;dynamodbstreams&lt;&#x2F;code&gt; that depends on &lt;code&gt;dynamodb&lt;&#x2F;code&gt;. When creating the &lt;code&gt;Project&lt;&#x2F;code&gt; values, we have to be able to &lt;code&gt;dependOn&lt;&#x2F;code&gt; on some other already generated projects, and they have to be generated in the correct order to do so.&lt;&#x2F;p&gt;
&lt;p&gt;We could do a full topological sort, but it is not necessary, here we know that the maximum depth of dependencies is 1, so it is enough to put the submodules at the end of the sequence:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;map &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; ids
&lt;&#x2F;span&gt;&lt;span&gt;  .toSeq
&lt;&#x2F;span&gt;&lt;span&gt;  .sortWith { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;aIsDependent &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; a.subModuleName &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;match &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span&gt;Some(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;!=&lt;&#x2F;span&gt;&lt;span&gt; a.name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;true
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;false
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;bIsDependent &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; b.subModuleName &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;match &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span&gt;Some(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;!=&lt;&#x2F;span&gt;&lt;span&gt; b.name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;true
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;false
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    bIsDependent || (!aIsDependent &amp;amp;&amp;amp; a.toString &amp;lt; b.toString)
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Then in order to be able get the dependencies, we do a &lt;em&gt;fold&lt;&#x2F;em&gt; on the ordered &lt;code&gt;ModelId&lt;&#x2F;code&gt;s:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span&gt;  .foldLeft(Map.empty[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ModelId&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Project&lt;&#x2F;span&gt;&lt;span&gt;]) { (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;mapping&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;deps &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; id.subModule &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;match &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span&gt;Some(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;!=&lt;&#x2F;span&gt;&lt;span&gt; id.name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;          Seq(ClasspathDependency(LocalProject(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;zio-aws-core&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;), None),
&lt;&#x2F;span&gt;&lt;span&gt;              ClasspathDependency(mapping(ModelId(id.name, Some(id.name))), None))
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;          Seq(ClasspathDependency(LocalProject(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;zio-aws-core&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;), None))
&lt;&#x2F;span&gt;&lt;span&gt;      }      
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;project &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;Project(fullName, file(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;generated&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;) &#x2F; name)
&lt;&#x2F;span&gt;&lt;span&gt;        .settings(
&lt;&#x2F;span&gt;&lt;span&gt;          libraryDependencies += &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;software.amazon.awssdk&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt; % id.name % awsLibraryVersion.value,
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;        .dependsOn(deps: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;_*&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;      mapping.updated(id, project)
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;To make it easier to work with the generated projects, we also create a project named &lt;code&gt;all&lt;&#x2F;code&gt; that aggregates all the ones generated above.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;applying-settings-to-the-generated-projects&quot;&gt;Applying settings to the generated projects&lt;&#x2F;h4&gt;
&lt;p&gt;The code generator only sets the basic settings for the generated projects: name, path and dependencies. We need a lot more, setting organization and version, all the publishing options, controlling the Scala version, etc.&lt;&#x2F;p&gt;
&lt;p&gt;I decided to keep these settings outside of the code generator plugin, in the top-level &lt;code&gt;sbt&lt;&#x2F;code&gt; project. By creating an &lt;code&gt;AutoPlugin&lt;&#x2F;code&gt; end enabling it for all projects, we can inject all the common settings for both the hand-written and the generated projects:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;object&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; Common &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span&gt;AutoPlugin &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;object&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; autoImport {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;scala212Version &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;2.12.12&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;scala213Version &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;2.13.3&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;import&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; autoImport.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;override val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;trigger &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; allRequirements
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;override val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;requires &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Sonatype
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;override lazy val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;projectSettings &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    Seq(
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;      scalaVersion := scala213Version,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;      crossScalaVersions := List(scala212Version, scala213Version),
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    )
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;source-generator-task&quot;&gt;Source generator task&lt;&#x2F;h4&gt;
&lt;p&gt;At this point, we could also add the already existing &lt;em&gt;source code generation&lt;&#x2F;em&gt; to the initialization of the plugin, and just generate all the subproject&#x27;s all source files every time the &lt;code&gt;sbt&lt;&#x2F;code&gt; project is loaded. With this number of generated projects though, it would have been a very big startup overhead and would not allow us to split the build (at least not the code generation part) on CI, to solve the memory and build time issues.&lt;&#x2F;p&gt;
&lt;p&gt;As &lt;code&gt;sbt&lt;&#x2F;code&gt; has built-in support for defining &lt;em&gt;source generator tasks&lt;&#x2F;em&gt;, we can do much better!&lt;&#x2F;p&gt;
&lt;p&gt;Instead of generating the source codes in one step, we define a &lt;code&gt;generateSources&lt;&#x2F;code&gt; task and add it to each &lt;em&gt;generated subproject&lt;&#x2F;em&gt; as a &lt;em&gt;source generator&lt;&#x2F;em&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span&gt;Compile &#x2F; sourceGenerators += generateSources.taskValue,
&lt;&#x2F;span&gt;&lt;span&gt;awsLibraryId := id.toString
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;code&gt;awsLibraryId&lt;&#x2F;code&gt; is a custom property that we the &lt;code&gt;generateSources&lt;&#x2F;code&gt; task can use to determine which schema to use for the code generation.&lt;&#x2F;p&gt;
&lt;p&gt;The first part of this task is to gather the information from the project it got applied on, including the custom &lt;code&gt;awsLibraryId&lt;&#x2F;code&gt; property:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;lazy val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;generateSources &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span&gt;  Def.task {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;log &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; streams.value.log
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;idStr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; awsLibraryId.value
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;ModelId.parse(idStr) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;match &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span&gt;Left(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;failure&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; sys.error(failure)
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span&gt;Right(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; value
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;targetRoot &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;(sourceManaged in Compile).value
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;travisSrc &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; travisSource.value
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;travisDst &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; travisTarget.value
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;parallelJobs &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; travisParallelJobs.value
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;From these, we create a &lt;code&gt;Parameters&lt;&#x2F;code&gt; data structure to pass to the &lt;code&gt;generator&lt;&#x2F;code&gt; module. This is what we used to construct with &lt;code&gt;clipp&lt;&#x2F;code&gt; from CLI arguments:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;params &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;Parameters(
&lt;&#x2F;span&gt;&lt;span&gt;      targetRoot &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;Path.fromJava(targetRoot.toPath),
&lt;&#x2F;span&gt;&lt;span&gt;      travisSource &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;Path.fromJava(travisSrc.toPath),
&lt;&#x2F;span&gt;&lt;span&gt;      travisTarget &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;Path.fromJava(travisDst.toPath),
&lt;&#x2F;span&gt;&lt;span&gt;      parallelTravisJobs &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; parallelJobs
&lt;&#x2F;span&gt;&lt;span&gt;    )
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And finally, construct the &lt;code&gt;ZIO&lt;&#x2F;code&gt; environment, load a &lt;strong&gt;single&lt;&#x2F;strong&gt; schema model, and generate the library&#x27;s source code:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span&gt;    zio.Runtime.default.unsafeRun {
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;cfg &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;ZLayer.succeed(params)
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;env &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; loader.live ++ (cfg &amp;gt;+&amp;gt; generator.live)
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;task &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;- &lt;&#x2F;span&gt;&lt;span&gt;ZIO.effect(log.info(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;Generating sources for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;$id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;model &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span&gt; loader.loadCodegenModel(id)
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;files &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span&gt; generator.generateServiceCode(id, model)
&lt;&#x2F;span&gt;&lt;span&gt;        } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;yield&lt;&#x2F;span&gt;&lt;span&gt; files.toSeq
&lt;&#x2F;span&gt;&lt;span&gt;      task.provideCustomLayer(env).catchAll { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;generatorError &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        ZIO.effect(log.error(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;Code generator failure: ${&lt;&#x2F;span&gt;&lt;span&gt;generatorError&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;}&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)).as(Seq.empty)
&lt;&#x2F;span&gt;&lt;span&gt;      }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;code&gt;generateServiceCode&lt;&#x2F;code&gt; function returns a &lt;code&gt;Set[File]&lt;&#x2F;code&gt; value containing all the generated source files. This is the result of the &lt;em&gt;source generator task&lt;&#x2F;em&gt;, and &lt;code&gt;sbt&lt;&#x2F;code&gt; uses this information to add the generated files to the compilation.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;referencing-the-generated-projects&quot;&gt;Referencing the generated projects&lt;&#x2F;h4&gt;
&lt;p&gt;When defining downstream projects in the &lt;code&gt;build.sbt&lt;&#x2F;code&gt;, such as integration tests and other examples, we have to refer to the generated projects somehow. There is no value of type &lt;code&gt;Project&lt;&#x2F;code&gt; in scope to do so, but we can do it easily by name using &lt;code&gt;LocalProject&lt;&#x2F;code&gt;. The following example shows how the &lt;code&gt;example1&lt;&#x2F;code&gt; subproject does this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;lazy val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;example1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;Project(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;example1&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, file(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;examples&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;) &#x2F; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;example1&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  .dependsOn(
&lt;&#x2F;span&gt;&lt;span&gt;    core,
&lt;&#x2F;span&gt;&lt;span&gt;    http4s,
&lt;&#x2F;span&gt;&lt;span&gt;    netty,
&lt;&#x2F;span&gt;&lt;span&gt;    LocalProject(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;zio-aws-elasticbeanstalk&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;    LocalProject(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;zio-aws-ec2&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  )
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;parallel-build-on-travis-ci&quot;&gt;Parallel build on Travis CI&lt;&#x2F;h4&gt;
&lt;p&gt;The last thing that I wanted to solve is building the full &lt;code&gt;zio-aws&lt;&#x2F;code&gt; suite on a CI. I am using &lt;a href=&quot;https:&#x2F;&#x2F;travis-ci.org&#x2F;&quot;&gt;Travis CI&lt;&#x2F;a&gt; for my private projects, so that&#x27;s what I built it for. The idea is to split the set of &lt;em&gt;service client libraries&lt;&#x2F;em&gt; to chunks and create &lt;a href=&quot;https:&#x2F;&#x2F;docs.travis-ci.com&#x2F;user&#x2F;build-matrix&#x2F;&quot;&gt;build matrix&lt;&#x2F;a&gt; to run those in parallel. The tricky part is that the set of generated service libraries is dynamic, collected by the code generator.&lt;&#x2F;p&gt;
&lt;p&gt;To solve this, I started to generate the &lt;code&gt;.travis.yml&lt;&#x2F;code&gt;  build descriptor as well. The &lt;em&gt;hand-written&lt;&#x2F;em&gt; part has been moved to &lt;code&gt;.travis.base.yml&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;language&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;scala
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;services&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;docker
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;scala&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;2.12.12
&lt;&#x2F;span&gt;&lt;span&gt;  - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;2.13.3
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;cache&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;directories&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;$HOME&#x2F;.cache&#x2F;coursier
&lt;&#x2F;span&gt;&lt;span&gt;    - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;$HOME&#x2F;.ivy2&#x2F;cache
&lt;&#x2F;span&gt;&lt;span&gt;    - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;$HOME&#x2F;.sbt
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;env&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;COMMANDS=&amp;quot;clean zio-aws-core&#x2F;test zio-aws-akka-http&#x2F;test zio-aws-http4s&#x2F;test zio-aws-netty&#x2F;test&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;COMMANDS=&amp;quot;clean examples&#x2F;compile&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;COMMANDS=&amp;quot;clean integtests&#x2F;test&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;before_install&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;if [ &amp;quot;$COMMANDS&amp;quot; = &amp;quot;clean integtests&#x2F;test&amp;quot; ]; then docker pull localstack&#x2F;localstack; fi
&lt;&#x2F;span&gt;&lt;span&gt;  - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;if [ &amp;quot;$COMMANDS&amp;quot; = &amp;quot;clean integtests&#x2F;test&amp;quot; ]; then docker run -d -p 4566:4566 --env SERVICES=s3,dynamodb --env START_WEB=0 localstack&#x2F;localstack; fi
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;script&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;sbt ++$TRAVIS_SCALA_VERSION -jvm-opts travis&#x2F;jvmopts $COMMANDS
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I use the &lt;code&gt;COMMANDS&lt;&#x2F;code&gt; environment variable to define the parallel sets of &lt;code&gt;sbt&lt;&#x2F;code&gt; commands here. There are three predefined sets: building &lt;code&gt;zio-aws-core&lt;&#x2F;code&gt; and the HTTP implementations, building the &lt;em&gt;example projects&lt;&#x2F;em&gt; and running the &lt;em&gt;integration test&lt;&#x2F;em&gt;. The last two involve generating actual service client code and building them - but only the few that are necessary, so it is not an issue to do that redundantly.&lt;&#x2F;p&gt;
&lt;p&gt;The real &lt;code&gt;.travis.yml&lt;&#x2F;code&gt; file is then generated by running a task &lt;em&gt;manually&lt;&#x2F;em&gt;, &lt;code&gt;sbt generateTravisYaml&lt;&#x2F;code&gt;. It is implemented in the &lt;code&gt;zio-aws-codegen&lt;&#x2F;code&gt; plugin and it loads the &lt;code&gt;.travis.base.yml&lt;&#x2F;code&gt; file and extends the &lt;code&gt;env&lt;&#x2F;code&gt; section with a set of &lt;code&gt;COMMANDS&lt;&#x2F;code&gt; variants, each compiling a subset of the generated subprojects.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;Travis CI can now build &lt;code&gt;zio-aws&lt;&#x2F;code&gt; and run its integration tests. A build runs for hours, but it is stable, and consists of 22 parallel jobs to build all the libraries for both Scala 2.12 and 2.13. At the same time, developing the code generator and the other subprojects and tests became really convenient.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>AWS rate limits vs prezidig</title>
        <published>2018-09-21T00:00:00+00:00</published>
        <updated>2018-09-21T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Daniel Vigovszky
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://blog.vigoo.dev/posts/aws-rate-limits-prezidig/"/>
        <id>https://blog.vigoo.dev/posts/aws-rate-limits-prezidig/</id>
        
        <content type="html" xml:base="https://blog.vigoo.dev/posts/aws-rate-limits-prezidig/">&lt;p&gt;At &lt;a href=&quot;https:&#x2F;&#x2F;prezi.com&quot;&gt;Prezi&lt;&#x2F;a&gt;, we have an internal tool called &lt;strong&gt;prezidig&lt;&#x2F;strong&gt; for discovering AWS resources. I like it a lot so I was quite annoyed recently that it always fails with a &lt;em&gt;throttling exception&lt;&#x2F;em&gt; because of our increased use of the AWS API. It made it completely unusable, so I decided to try to fix this.&lt;&#x2F;p&gt;
&lt;p&gt;Then I decided to write the story in this blog post, as the steps I had to made to achieve the results I aimed for can be useful for writing maintainable, fast and safe Scala code in the future.&lt;&#x2F;p&gt;
&lt;p&gt;I will describe the phases as they happened, as I did not really know anything about this codebase so the path to the success was not exactly clear immediately.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;wrapping-the-calls&quot;&gt;Wrapping the calls&lt;&#x2F;h2&gt;
&lt;p&gt;So my initial thought was to just find the AWS API calls and wrap them in a helper function which catches the throttling error and retries with an increasing delay.&lt;&#x2F;p&gt;
&lt;p&gt;I basically wrote this in the base class of all the &lt;em&gt;mirrors&lt;&#x2F;em&gt; (the classes which are responsible for fetching AWS and other resource data for &lt;strong&gt;prezidig&lt;&#x2F;strong&gt;):&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;protected def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;byHandlingThrottling&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span&gt;](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;awsCall&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span&gt;): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Future&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;call&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;remainingTries&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Int&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;wait&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;FiniteDuration&lt;&#x2F;span&gt;&lt;span&gt;): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Future&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;      Future(Try(awsCall)).flatMap {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span&gt;Success(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;result&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;Future.successful(result)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span&gt;Failure(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;awsException&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;AmazonServiceException&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; awsException.getErrorCode &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;Throttling&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt; &amp;amp;&amp;amp; remainingTries &amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;          akka.pattern.after(wait, actorSystem.scheduler) {
&lt;&#x2F;span&gt;&lt;span&gt;            call(remainingTries - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, wait * &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;          }
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span&gt;Failure(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;reason&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;Future.failed(reason)
&lt;&#x2F;span&gt;&lt;span&gt;      }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;     call(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span&gt;.millis) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; TODO: make configurable
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Then the only thing I had to do was to was wrapping all the existing AWS calls with this. Then I realized that this won’t be this simple, as these calls were not always asynchronous, just sometimes. To see an example, for an &lt;em&gt;ElasticBeanstalk application&lt;&#x2F;em&gt;, it fetches the &lt;em&gt;application metadata&lt;&#x2F;em&gt; with synchronous call, then fetches the related &lt;em&gt;EB environments&lt;&#x2F;em&gt; asynchronously. The whole thing might be wrapped in another future somewhere else, but that’s a different story.&lt;&#x2F;p&gt;
&lt;p&gt;While making these discoveries I also found several synchronization points, like the code waiting for some futures to complete in a blocking way. Also that the model is mutable. So… just for trying this out, I &lt;em&gt;still &lt;strong&gt;wrapped&lt;&#x2F;strong&gt;&lt;&#x2F;em&gt; all the AWS calls with this stuff, by converting the future back to a synchronous call by immediately blocking on it.&lt;&#x2F;p&gt;
&lt;p&gt;What did I achieve with this? Well, some throttling errors were fixed, the code became extremely ugly, and I could not even wrap everything so the errors remained, and because of the tons of blocking, timeouts, etc. it was basically impossible to understand whether this would work or deadlock or just be slow.&lt;&#x2F;p&gt;
&lt;p&gt;That was the point I decided to do this properly&lt;&#x2F;p&gt;
&lt;h2 id=&quot;reflection&quot;&gt;Reflection&lt;&#x2F;h2&gt;
&lt;p&gt;Before solving the real problem I found that the mirrors are initialized via reflection, something like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;buildMirrors&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;A &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RegionAwareAWSMirror&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;]](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;implicit &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;mf&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Manifest&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;]): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Seq&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span&gt;    Config.regions.map(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;region &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; mf.runtimeClass.getConstructor(classOf[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;]).newInstance(region).asInstanceOf[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;])
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This is something that you should avoid, as it leads to problems that are not detected by the compiler, only at runtime, every time you refactor something around these classes. There are some use cases where this may be required, like dynamically loading plugins or stuff like this, but to just have a factory for something, it is must simple to use… &lt;strong&gt;functions&lt;&#x2F;strong&gt;!&lt;&#x2F;p&gt;
&lt;p&gt;So I could not hold myself back and quickly changed this to:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;buildMirrors&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;A &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RegionAwareAWSMirror&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;]](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;factory&lt;&#x2F;span&gt;&lt;span&gt;: (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ActorSystem&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    Config.regions.map(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;region &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; factory(region, system))
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;(Since then even this has disappeared, but don’t run that much forward).&lt;&#x2F;p&gt;
&lt;h2 id=&quot;async-fetching&quot;&gt;Async fetching&lt;&#x2F;h2&gt;
&lt;p&gt;Ok so the first obvious step was to refactor the whole fetching code in a way that it is just a chain of &lt;strong&gt;futures&lt;&#x2F;strong&gt;. By making everything async in the process, the AWS calls would be simply replaceable with the throttling function above or anything more sophisticated!&lt;&#x2F;p&gt;
&lt;p&gt;But I knew that I cannot safely do this while the model we are building itself is mutable - there is no way I want to debug what happens with it once all the steps are really becoming parallel!&lt;&#x2F;p&gt;
&lt;h3 id=&quot;immutable-model&quot;&gt;Immutable model&lt;&#x2F;h3&gt;
&lt;p&gt;I believe the following GitHub diff captures the core change of this step:&lt;&#x2F;p&gt;
&lt;img src=&quot;&#x2F;images&#x2F;prezidig-img-1.png&quot; width=&quot;800&quot;&#x2F;&gt;
&lt;p&gt;Of course I had to change all the subtypes of Model, and I went through the code looking for&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;var&lt;&#x2F;strong&gt;s&lt;&#x2F;li&gt;
&lt;li&gt;mutable collections&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;and got rid of them. Except for the caching constructs, because I planned to refactor those in the next step, so for now I left them alone.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;async-mirrors&quot;&gt;Async mirrors&lt;&#x2F;h3&gt;
&lt;p&gt;Once I felt the model is safe enough, I went to the next big change, making everything asynchronous.&lt;&#x2F;p&gt;
&lt;img src=&quot;&#x2F;images&#x2F;prezidig-img-2.png&quot; width=&quot;800&quot;&#x2F;&gt;
&lt;p&gt;This took some hours, to be honest. But really, the core idea is only that the result must be a &lt;code&gt;Future[T]&lt;&#x2F;code&gt;, not &lt;code&gt;T&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;So how do you refactor a code that was previously half synchronous, half asynchronous to achieve this? Let’s see an example! It will be the &lt;em&gt;key-pair mirror&lt;&#x2F;em&gt; as it is the smallest.&lt;&#x2F;p&gt;
&lt;p&gt;Originally (with my ugly wrapping in the previous step) it looked like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;override protected def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;fetch&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;input&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;SimpleParsedInput&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;context&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Context&lt;&#x2F;span&gt;&lt;span&gt;): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Seq&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;KeyPair&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;try &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;futureResult &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; byHandlingThrottling(
&lt;&#x2F;span&gt;&lt;span&gt;        buildClient(AmazonEC2ClientBuilder.standard()).describeKeyPairs(
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;DescribeKeyPairsRequest&lt;&#x2F;span&gt;&lt;span&gt;().withKeyNames(input.id)
&lt;&#x2F;span&gt;&lt;span&gt;        ))
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;result &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;Await.result(futureResult, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;.seconds)
&lt;&#x2F;span&gt;&lt;span&gt;      result.getKeyPairs.asScala.map(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;info &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;KeyPair(info, region)).seq
&lt;&#x2F;span&gt;&lt;span&gt;        .map(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;keypair &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; keypair.withFutureChildren(LaunchConfigurationMirror(region, actorSystem).apply(context.withInput(keypair.description.getKeyName))))
&lt;&#x2F;span&gt;&lt;span&gt;    } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;catch &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;AmazonEC2Exception &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;Seq()
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;So as you can see fetching the key pairs by name was a synchronous request, but then the &lt;em&gt;launch configurations&lt;&#x2F;em&gt; are fetched asynchronously and are being updated back the result model in a mutable way. We want to transform this function so it does not have any side effects, just performs a chain of asynchronous operations and in the end have a fully fetched &lt;em&gt;key pair&lt;&#x2F;em&gt; with the related &lt;em&gt;launch configurations&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;In every case the only thing needed was a combination of &lt;code&gt;map&lt;&#x2F;code&gt; and &lt;code&gt;flatMap&lt;&#x2F;code&gt; on futures, and of course the &lt;em&gt;for syntax&lt;&#x2F;em&gt; can also be used to make the code more readable:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;private def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;fetchKeyPair&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;client&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;AmazonEC2&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;context&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Context&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;info&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;KeyPairInfo&lt;&#x2F;span&gt;&lt;span&gt;): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Future&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;KeyPair&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;launchConfigurations &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;- &lt;&#x2F;span&gt;&lt;span&gt;LaunchConfigurationMirror(region, actorSystem).apply(context.withInput(info.getKeyName))
&lt;&#x2F;span&gt;&lt;span&gt;    } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;yield &lt;&#x2F;span&gt;&lt;span&gt;KeyPair(
&lt;&#x2F;span&gt;&lt;span&gt;      description &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; info,
&lt;&#x2F;span&gt;&lt;span&gt;      region &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; region,
&lt;&#x2F;span&gt;&lt;span&gt;      children &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; launchConfigurations
&lt;&#x2F;span&gt;&lt;span&gt;    )
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;override protected def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;fetch&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;input&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;SimpleParsedInput&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;context&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Context&lt;&#x2F;span&gt;&lt;span&gt;): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Future&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;KeyPair&lt;&#x2F;span&gt;&lt;span&gt;]] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;client &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; buildClient(AmazonEC2ClientBuilder.standard())
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    byHandlingThrottling(client.describeKeyPairs(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;DescribeKeyPairsRequest&lt;&#x2F;span&gt;&lt;span&gt;().withKeyNames(input.id))).flatMap { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;result &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;      Future.sequence(
&lt;&#x2F;span&gt;&lt;span&gt;        result.getKeyPairs.asScala.toList.map(fetchKeyPair(client, context, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;      )
&lt;&#x2F;span&gt;&lt;span&gt;    }.recover {
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;AmazonEC2Exception &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;List() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; TODO: log?
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Note that the &lt;code&gt;Future.sequence&lt;&#x2F;code&gt; function is quite useful in these scenarios, as it makes a &lt;code&gt;Future[List[T]]&lt;&#x2F;code&gt; from &lt;code&gt;List[Future[T]]&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Of course the code became more verbose because of all this chaining, this is the price of this transformation. And why I don’t like to express complex logic with a chain of futures, rather with some higher level abstraction such as actors (or for this use case, streams would fit even better).&lt;&#x2F;p&gt;
&lt;p&gt;But I wanted to make iterative changes, so I did this transformation on all the mirrors and eventually got a &lt;code&gt;Future[List[Model]]&lt;&#x2F;code&gt; in the main function that I could await for. I also thrown out the global atomic integer that counted the running stuff for completion, as in this model the completion of the composed future should mark the end of the whole computation.&lt;&#x2F;p&gt;
&lt;p&gt;So did I succeed at this point? Of course not. Actually this whole thing is a big deadlock :)&lt;&#x2F;p&gt;
&lt;h2 id=&quot;caching-and-circular-references&quot;&gt;Caching and circular references&lt;&#x2F;h2&gt;
&lt;p&gt;It was not immediately obvious what causes the deadlock. In a system like this it can happen in different ways. For example I knew that there are global singleton caches in the code, protected by &lt;strong&gt;locks&lt;&#x2F;strong&gt;. This &lt;em&gt;could&lt;&#x2F;em&gt; cause deadlocks if all the executors got blocked and no new threads can be spawned by the active executor. I did not know if this is happening, but would not have been surprised at all, as much more things were happening in parallel because of the previous refactoring step.&lt;&#x2F;p&gt;
&lt;p&gt;And circular references in the huge chained future graph can also lead to this. Let’s consider this simplified example:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;trait&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; Cache { 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;key&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: String): Future[Work]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;put&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;key&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: String, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;compute&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: () &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Future[Work]): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Unit
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;cache&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Cache &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= ???
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;work1&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Future&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Work&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; cache.get(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;work2&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;).map { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;w2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;Work(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;Hello &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;$w2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)) }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;work2&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Future&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Work&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; cache.get(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;work1&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;).map { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;w1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;Work(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;Hello &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;$w1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)) }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;cache.put(work1)
&lt;&#x2F;span&gt;&lt;span&gt;cache.put(work2)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;println(Await.result(work1), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;.second)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This can never work. If you think about what &lt;strong&gt;prezidig&lt;&#x2F;strong&gt; does, you will have a feeling that this happens. A lot.&lt;&#x2F;p&gt;
&lt;p&gt;But let’s go in order.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;non-blocking-cache&quot;&gt;Non-blocking cache&lt;&#x2F;h3&gt;
&lt;p&gt;First I wanted to get rid of the global, lock-protected mutable maps used as caches, and have a non-blocking implementation with more control and better performance and safety. This is the kind of job that an &lt;strong&gt;actor&lt;&#x2F;strong&gt; can model nicely, so I created a &lt;em&gt;model cache actor&lt;&#x2F;em&gt; that is spawned for &lt;em&gt;each mirror&lt;&#x2F;em&gt; and can store and retrieve lists of AWS models for a given key.&lt;&#x2F;p&gt;
&lt;p&gt;I won’t list the whole actor’s code here, let’s see the messages it consumes:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;sealed trait&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; ModelCacheMessage&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;M &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Model&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;final case class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; Put&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;M &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Model&lt;&#x2F;span&gt;&lt;span&gt;](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;key&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;M&lt;&#x2F;span&gt;&lt;span&gt;])
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span&gt;ModelCacheMessage[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;M&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;final case class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; FetchFailed&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;M &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Model&lt;&#x2F;span&gt;&lt;span&gt;](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;key&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;failure&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Failure&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;])
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span&gt;ModelCacheMessage[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;M&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;final case class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; GetOrFetch&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;M &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Model&lt;&#x2F;span&gt;&lt;span&gt;](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;key&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;fetch&lt;&#x2F;span&gt;&lt;span&gt;: () &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Future&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;M&lt;&#x2F;span&gt;&lt;span&gt;]], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;respondTo&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ActorRef&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Try&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;M&lt;&#x2F;span&gt;&lt;span&gt;]]])
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span&gt;ModelCacheMessage[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;M&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;final case class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; GetRefOrFetch&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;M &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Model&lt;&#x2F;span&gt;&lt;span&gt;](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;key&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;fetch&lt;&#x2F;span&gt;&lt;span&gt;: () &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Future&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;M&lt;&#x2F;span&gt;&lt;span&gt;]], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;respondTo&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ActorRef&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ModelRef&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;M&lt;&#x2F;span&gt;&lt;span&gt;]])
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span&gt;ModelCacheMessage[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;M&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;final case class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; Dump&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;M &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Model&lt;&#x2F;span&gt;&lt;span&gt;](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;respondTo&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ActorRef&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Map&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;M&lt;&#x2F;span&gt;&lt;span&gt;]]])
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span&gt;ModelCacheMessage[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;M&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This cache itself is responsible for executing the &lt;em&gt;fetch function&lt;&#x2F;em&gt; only if needed, when the value for the given key is not cached yet. It is done by using the &lt;strong&gt;pipe pattern&lt;&#x2F;strong&gt;: it starts the asynchronous fetch function on a configured worker executor (which can be the actor system, or a fix thread pool, etc.) and registers an &lt;code&gt;onFinish&lt;&#x2F;code&gt; callback for the future which &lt;em&gt;pipes back&lt;&#x2F;em&gt; the future’s result to the actor as actor messages (&lt;code&gt;Put&lt;&#x2F;code&gt; and &lt;code&gt;FetchFailed&lt;&#x2F;code&gt;).&lt;&#x2F;p&gt;
&lt;p&gt;I will talk about references and cache dumps in the next section.&lt;&#x2F;p&gt;
&lt;p&gt;There was one more big problem with the existing code that prevented introducing these cache actors: that the mirrors were not really singletons but some mirrors created new instances of existing mirrors (without any difference to the ones created in the main function). These shared the singleton mutable lock-protected cache map in the original version, that’s why it worked. But in the new implementation each mirror spawned its own cache actor, so it was no longer allowed to create multiple instances of the same thing.&lt;&#x2F;p&gt;
&lt;p&gt;So in this step I collected all the mirrors to a class called &lt;code&gt;Mirrors&lt;&#x2F;code&gt;, which later became the collection of all the resources needed to perform the “dig”, so in the final version it is called &lt;code&gt;DigSite&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;With this change the caching could be replaced, and with the &lt;strong&gt;ask pattern&lt;&#x2F;strong&gt; I was able to fit it to the chain of futures created in the previous step.&lt;&#x2F;p&gt;
&lt;p&gt;Did it solve the deadlock? No, of course not&lt;&#x2F;p&gt;
&lt;h3 id=&quot;circular-references&quot;&gt;Circular references&lt;&#x2F;h3&gt;
&lt;p&gt;But now it was obvious that there are some circular references. And by simply drawing it, I could see that this is actually the core concept of the whole thing :)&lt;&#x2F;p&gt;
&lt;p&gt;Let me show you &lt;em&gt;the drawing&lt;&#x2F;em&gt;:&lt;&#x2F;p&gt;
&lt;img src=&quot;&#x2F;images&#x2F;prezidig-img-3.png&quot; width=&quot;800&quot;&#x2F;&gt;
&lt;p&gt;So everything refers back to everything, not a surprise that this chained-together code cannot finish.&lt;&#x2F;p&gt;
&lt;p&gt;To be honest, I was not sure how exactly did it work in the original version, whether the boundary of sync and async calls were carefully designed to make this work or just accidentally, whatever.&lt;&#x2F;p&gt;
&lt;p&gt;I wanted to have a solution where you don’t have to think about it so nobody will fuck it up next time when it has to be modified.&lt;&#x2F;p&gt;
&lt;p&gt;The chosen solution can be summarized in the following way:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;em&gt;models&lt;&#x2F;em&gt; are only storing &lt;strong&gt;references to other models&lt;&#x2F;strong&gt; encoded by the &lt;code&gt;ModelRef&lt;&#x2F;code&gt; type. A reference is basically selecting a mirror (by its &lt;em&gt;cache&lt;&#x2F;em&gt;) and an item in it by its &lt;em&gt;key&lt;&#x2F;em&gt;&lt;&#x2F;li&gt;
&lt;li&gt;When fetching a model, you immediately get back a &lt;em&gt;model reference&lt;&#x2F;em&gt; from the cache so it can be stored in the owner model, even with circular references. The real data is still fetched and cached as before.&lt;&#x2F;li&gt;
&lt;li&gt;This works because nobody uses the actual child models until the &lt;strong&gt;rendering&lt;&#x2F;strong&gt; of the output. So we have the asynchronous, parallel fetching of all the models, and then a completely separate, non-async step where we need the real connections to actually render the output based on the templates. I could change how the rendering works to query the model references from the cache, but I did not want to touch that part. So I introduced a middle step where all the &lt;em&gt;model cache actors&lt;&#x2F;em&gt; &lt;strong&gt;dump&lt;&#x2F;strong&gt; their state to simple immutable maps, and then the model gets &lt;em&gt;updated&lt;&#x2F;em&gt; by selecting the referenced models from this map and changing a field. Yes, a mutable field. It is a non-threadsafe operation that has a single, well defined place to be called, and this way the whole third part (rendering the output) could remain untouched.&lt;&#x2F;li&gt;
&lt;li&gt;Because of decoupling the actual fetching from the result future (it is completed earlier, as it only needs the references!), I had to have something that keeps track of the ongoing tasks ran by the cache actors, so there is also a &lt;em&gt;work monitor actor&lt;&#x2F;em&gt; that notifies the main logic once everything is complete.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Considering all this, the main steps before starting to render the output looks like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;result &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= for &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;models &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span&gt; runRelevantMirrors(digSite.allMirrors, Context.initial(input))
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;fetchingDone &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span&gt; digSite.workMonitor ? WorkMonitor.WaitForReady
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;cacheDumps &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;- &lt;&#x2F;span&gt;&lt;span&gt;CacheDumps.fromMirrors(digSite.allMirrors)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; models.foreach(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;.resolveChildren(cacheDumps)) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; side effect!
&lt;&#x2F;span&gt;&lt;span&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;yield&lt;&#x2F;span&gt;&lt;span&gt; models
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;anyone-else-blocking&quot;&gt;Anyone else blocking?&lt;&#x2F;h2&gt;
&lt;p&gt;At this point the tool started to work again and produce results. So I went back checking if any other blocking code remained that can be implemented in other ways. The progress tracker was like that, it had mutable state and locks, so I converted that to an actor too. It was quite simple, and on the usage side almost nothing changed compared to the original.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;and-what-about-the-throttling&quot;&gt;And what about the throttling?&lt;&#x2F;h2&gt;
&lt;p&gt;Ok so at this point I refactored the whole stuff but still did not solve the throttling issue, right?&lt;&#x2F;p&gt;
&lt;p&gt;Right.&lt;&#x2F;p&gt;
&lt;p&gt;But now finally I knew how to do it!&lt;&#x2F;p&gt;
&lt;p&gt;I already wrapped all AWS calls with that specific function (and at this point it was really &lt;em&gt;all&lt;&#x2F;em&gt; calls, not just &lt;em&gt;almost)&lt;&#x2F;em&gt;. So I just had to write it in a better way.&lt;&#x2F;p&gt;
&lt;p&gt;I wanted to:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Have control on how many AWS requests are we doing in parallel&lt;&#x2F;li&gt;
&lt;li&gt;In case of throttling errors delay &lt;strong&gt;everything&lt;&#x2F;strong&gt; as soon as possible&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;This can be achieved easily by some standard patterns like treating AWS as an encapsulated resource and putting some circuit breaking logic in it, and explicitly distributing the work among multiple workers.&lt;&#x2F;p&gt;
&lt;p&gt;Let’s see the designed solution on a drawing:&lt;&#x2F;p&gt;
&lt;img src=&quot;&#x2F;images&#x2F;prezidig-img-4.png&quot; width=&quot;800&quot;&#x2F;&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;&#x2F;strong&gt;: the &lt;em&gt;classic Akka&lt;&#x2F;em&gt; has built-in support for this routing and circuit breaking, but I prefer &lt;em&gt;Akka-typed&lt;&#x2F;em&gt; because of its type safety, where there are no official reusable higher level components like this yet. The one I implemented here is quite specific, later could be refactored to be built from more reusable typed actor components.&lt;&#x2F;p&gt;
&lt;p&gt;So how does this work?&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;There is a single coordinator actor called &lt;strong&gt;AWS&lt;&#x2F;strong&gt; and multiple (32 by default) worker actors called &lt;strong&gt;AWS Worker&lt;&#x2F;strong&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;The number of worker actors control the maximum number of parallel AWS operations, because each worker actor is guaranteed to run maximum one such operation at the same time. All the other incoming requests are distributed among the workers and gets enqueued.&lt;&#x2F;li&gt;
&lt;li&gt;The AWS calls are executed on a different thread pool, not blocking the actors. Their result is sent back by the already mentioned &lt;em&gt;pipe to&lt;&#x2F;em&gt; pattern&lt;&#x2F;li&gt;
&lt;li&gt;AWS throttling errors are detected on the worker nodes, and the worker node immediately switches to &lt;strong&gt;open circuit state&lt;&#x2F;strong&gt; in which it does not start any new AWS command. The length of the open state increases with every throttling error, and gets reseted after a number of successful requests.&lt;&#x2F;li&gt;
&lt;li&gt;Opening the circuit breaker on one worker node is immediately followed by opening it on &lt;strong&gt;all other&lt;&#x2F;strong&gt; worker nodes too, to stop overloading AWS.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;This could be further improved with more advanced logic but I believe it is good enough for our current purposes, and now we can use &lt;strong&gt;prezidig&lt;&#x2F;strong&gt; again!&lt;&#x2F;p&gt;
</content>
        
    </entry>
</feed>
