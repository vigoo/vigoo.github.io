<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <title>vigoo&#x27;s software development blog - desert</title>
    <link rel="self" type="application/atom+xml" href="https://blog.vigoo.dev/tags/desert/atom.xml"/>
    <link rel="alternate" type="text/html" href="https://blog.vigoo.dev"/>
    <generator uri="https://www.getzola.org/">Zola</generator>
    <updated>2024-02-19T00:00:00+00:00</updated>
    <id>https://blog.vigoo.dev/tags/desert/atom.xml</id>
    <entry xml:lang="en">
        <title>desert part 1 - features</title>
        <published>2024-02-19T00:00:00+00:00</published>
        <updated>2024-02-19T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Daniel Vigovszky
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://blog.vigoo.dev/posts/desert-1/"/>
        <id>https://blog.vigoo.dev/posts/desert-1/</id>
        
        <content type="html" xml:base="https://blog.vigoo.dev/posts/desert-1/">&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;&#x2F;h2&gt;
&lt;p&gt;This is the &lt;strong&gt;first part&lt;&#x2F;strong&gt; of a series of blog posts about my serialization library, &lt;a href=&quot;https:&#x2F;&#x2F;vigoo.github.io&#x2F;desert&quot;&gt;desert&lt;&#x2F;a&gt;. I also gave an overview of this library on Functional Scala 2022 - you can check the &lt;a href=&quot;https:&#x2F;&#x2F;blog.vigoo.dev&#x2F;posts&#x2F;desert-1&#x2F;@posts&#x2F;funscala2022-talk.md&quot;&gt;talk on YouTube if interested&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;In this post I&#x27;m going to give an overview of the features this serialization library provides, and then going to dive into the details of how it supports evolving data types.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;where-is-it-coming-from&quot;&gt;Where is it coming from?&lt;&#x2F;h2&gt;
&lt;p&gt;The idea of creating &lt;code&gt;desert&lt;&#x2F;code&gt; came after some serious disappointment in our previously chosen serialization library. It was used for serialization of both persistent Akka actors and for the distributed actor messages, and it turned out that just by updating the Scala version from 2.12 to 2.13 completely broke our serialization format.&lt;&#x2F;p&gt;
&lt;p&gt;None of the alternatives looked good enough to me - I wanted something that is code first and fits well to our functional Scala style. Support for multiple platforms or programming languages were not a requirement.&lt;&#x2F;p&gt;
&lt;p&gt;So I started thinking about what would a perfect serialization library look like, at least for our use cases? It was something that has first-class support for ADTs, for Scala&#x27;s collection libraries (I don&#x27;t want to see Scala lists serialized via Java reflection ever again!), with a focus of supporting evolution of the serialized data types. We &lt;em&gt;knew&lt;&#x2F;em&gt; that our persisted data and actor messages will change over time, and we had to be able to survive these changes without any downtime.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;features&quot;&gt;Features&lt;&#x2F;h2&gt;
&lt;p&gt;Let&#x27;s just go through all the features provided by the library before we talk about how exactly it supports these kind of changes in the serialized data structures.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;desert&lt;&#x2F;code&gt; is a Scala library. As probably expected, it captures the core concept of binary serialization though a simple &lt;code&gt;trait&lt;&#x2F;code&gt; called &lt;code&gt;BinaryCodec[T]&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;trait&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; BinarySerializer&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;serialize&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: T)(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;implicit &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;context&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: SerializationContext): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Unit
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;contramap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;[U](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: U &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;T): BinarySerializer[U] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;contramapOrFail&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;[U](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: U &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Either[DesertFailure, T]): BinarySerializer[U] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;trait&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; BinaryDeserializer&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;deserialize&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;()(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;implicit &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;ctx&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: DeserializationContext): T
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;[U](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: T &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;U): BinaryDeserializer[U] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;mapOrFail&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;[U](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: T &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Either[DesertFailure, U]): BinaryDeserializer[U] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;trait&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; BinaryCodec&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span&gt;BinarySerializer[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;with &lt;&#x2F;span&gt;&lt;span&gt;BinaryDeserializer[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;These &lt;code&gt;BinaryCodec&lt;&#x2F;code&gt; instances should be made implicitly available for each type we need to serialize. There are multiple ways to create an instance of a binary codec:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;There are many built-in codecs for primitive types, standard collections, date-time classes, etc.&lt;&#x2F;li&gt;
&lt;li&gt;The &lt;code&gt;map&lt;&#x2F;code&gt; and &lt;code&gt;contramap&lt;&#x2F;code&gt; operators can be used to construct new codecs from existing ones&lt;&#x2F;li&gt;
&lt;li&gt;There is a codec derivation macro for ADTs (case classes and sealed traits &#x2F; enums)&lt;&#x2F;li&gt;
&lt;li&gt;Custom implementation can directly read&#x2F;write the binary data and access some of the built-in features like the type registry, references, string deduplication and compression&lt;&#x2F;li&gt;
&lt;li&gt;It is also possible to define these custom implementations in a more functional way on top of &lt;code&gt;ZPure&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Under the hood there is a simple &lt;code&gt;BinaryInput&lt;&#x2F;code&gt; &#x2F; &lt;code&gt;BinaryOutput&lt;&#x2F;code&gt; abstraction which is extensible, by default implemented for Java &lt;code&gt;InputStream&lt;&#x2F;code&gt; and &lt;code&gt;OutputStream&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;On the lowest level, in addition to having an interface for serializing primitive types we also have support for &lt;strong&gt;variable length integer encoding&lt;&#x2F;strong&gt; and for gzip &lt;strong&gt;compression&lt;&#x2F;strong&gt;. Custom codecs can also use the built-in &lt;strong&gt;string deduplication&lt;&#x2F;strong&gt; feature, and encode cyclic graphs using support for storing &lt;strong&gt;references&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Sometimes you want to serialize only a part of your data structure - a real-world example we had was having a set of &lt;em&gt;typed actor messages&lt;&#x2F;em&gt; where only a subset of the cases were designed to be used between different nodes. Some cases were only used locally, and in those we would store things that are not serializable at all - for example open websocket connection handles. This is supported by &lt;code&gt;desert&lt;&#x2F;code&gt; by having the concept of both &lt;strong&gt;transient fields&lt;&#x2F;strong&gt; and &lt;strong&gt;transient constructors&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;What if a field is not an ADT but contains a reference to an arbitrary type with a given interface? Or if we don&#x27;t know the root type of a message, only a set of possible types which are otherwise unrelated? The library provides a &lt;strong&gt;type registry&lt;&#x2F;strong&gt; for this purpose. Every type registered into this will have an associated identifier, and in places where we don&#x27;t know the exact type, we can use these to get the codec by it&#x27;s unique ID from the type registry.&lt;&#x2F;p&gt;
&lt;p&gt;On the top level &lt;code&gt;desert&lt;&#x2F;code&gt; also comes with a set of &lt;strong&gt;integration modules&lt;&#x2F;strong&gt;. The following modules are available at the time of writing:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;desert-akka&lt;&#x2F;code&gt; provides helper functions to serialize from&#x2F;to &lt;code&gt;ByteString&lt;&#x2F;code&gt;, provides codecs for both typed and untyped &lt;code&gt;ActorRef&lt;&#x2F;code&gt;s, and provides an implementation of Akka&#x27;s &lt;code&gt;Serializer&lt;&#x2F;code&gt; interface.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;desert-cats&lt;&#x2F;code&gt; adds codecs for &lt;code&gt;Validation&lt;&#x2F;code&gt;, &lt;code&gt;NonEmptyList&lt;&#x2F;code&gt;, &lt;code&gt;NonEmptySet&lt;&#x2F;code&gt; and &lt;code&gt;NonEmptyMap&lt;&#x2F;code&gt; from the &lt;a href=&quot;https:&#x2F;&#x2F;typelevel.org&#x2F;cats&#x2F;&quot;&gt;cats library&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;desert-cats-effect&lt;&#x2F;code&gt; gives a &lt;a href=&quot;https:&#x2F;&#x2F;typelevel.org&#x2F;cats-effect&#x2F;&quot;&gt;cats-effect&lt;&#x2F;a&gt; &lt;code&gt;IO&lt;&#x2F;code&gt; version of the top level serialization and deserialization functions&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;desert-zio&lt;&#x2F;code&gt; provides &lt;code&gt;ZIO&lt;&#x2F;code&gt; version of the top level serialization and deserialization functions and adds codec and helper functions to work with &lt;code&gt;Chunk&lt;&#x2F;code&gt;s,&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;desert-zio-prelude&lt;&#x2F;code&gt; provides a more functional interface for defining custom codecs, as well as having built-in codecs for&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;desert-shardcake&lt;&#x2F;code&gt; provides easy integration within the &lt;a href=&quot;https:&#x2F;&#x2F;devsisters.github.io&#x2F;shardcake&#x2F;&quot;&gt;Shardcake&lt;&#x2F;a&gt; library&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;There are two more modules which implement the same core functionality, &lt;strong&gt;codec derivation&lt;&#x2F;strong&gt;, with different tradeoffs:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;desert-shapeless&lt;&#x2F;code&gt; is a &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;milessabin&#x2F;shapeless&quot;&gt;shapeless&lt;&#x2F;a&gt; based codec deriver, the original implementation of &lt;code&gt;desert&lt;&#x2F;code&gt;&#x27;s derivation logic. It only works for &lt;strong&gt;Scala 2&lt;&#x2F;strong&gt; but it has no additional requirements.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;desert-zio-scheme&lt;&#x2F;code&gt; is an alternative implementation of the same codec derivation, built on the &lt;code&gt;Deriver&lt;&#x2F;code&gt; feature of &lt;a href=&quot;https:&#x2F;&#x2F;zio.dev&#x2F;zio-schema&#x2F;&quot;&gt;zio-schema&lt;&#x2F;a&gt;. This works both with &lt;strong&gt;Scala 2&lt;&#x2F;strong&gt; and &lt;strong&gt;Scala 3&lt;&#x2F;strong&gt;, and supposed to provide better compile-time error messages, but requires to derive an implicit &lt;code&gt;Schema&lt;&#x2F;code&gt; for each serialized type beside the binary codec.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;I wrote a &lt;a href=&quot;https:&#x2F;&#x2F;blog.vigoo.dev&#x2F;posts&#x2F;desert-1&#x2F;@posts&#x2F;zio-schema-deriving.md&quot;&gt;detailed post about typeclass derivation&lt;&#x2F;a&gt; a few months ago.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;data-evolution&quot;&gt;Data evolution&lt;&#x2F;h2&gt;
&lt;p&gt;Let&#x27;s see in details what it means that &lt;code&gt;desert&lt;&#x2F;code&gt; supports &lt;em&gt;evolving&lt;&#x2F;em&gt; data structures.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;primitives-vs-newtype-wrappers&quot;&gt;Primitives vs newtype wrappers&lt;&#x2F;h3&gt;
&lt;p&gt;Let&#x27;s start with a simple example: we are serializing a single &lt;code&gt;Int&lt;&#x2F;code&gt;. The default codec just uses the fixed width 32-bit representation of the integer:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Int = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;100
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;results in:&lt;&#x2F;p&gt;
&lt;table style=&quot;border-collapse: initial; border: 0px; width: auto; color: black&quot;&gt;
  &lt;tr&gt;
    &lt;td style=&quot;border: 1px solid; padding: 6px; text-align: center; background-color: rgb(154, 231, 147); margin: 0px; border-spacing: 1px; font-family: monospace; font-weight: normal&quot;&gt;0&lt;&#x2F;td&gt;
    &lt;td style=&quot;border: 1px solid; padding: 6px; text-align: center; background-color: rgb(154, 231, 147); margin: 0px; border-spacing: 1px; font-family: monospace; font-weight: normal&quot;&gt;0&lt;&#x2F;td&gt;
    &lt;td style=&quot;border: 1px solid; padding: 6px; text-align: center; background-color: rgb(154, 231, 147); margin: 0px; border-spacing: 1px; font-family: monospace; font-weight: normal&quot;&gt;0&lt;&#x2F;td&gt;
    &lt;td style=&quot;border: 1px solid; padding: 6px; text-align: center; background-color: rgb(154, 231, 147); margin: 0px; border-spacing: 1px; font-family: monospace; font-weight: normal&quot;&gt;100&lt;&#x2F;td&gt;
  &lt;&#x2F;tr&gt;
&lt;&#x2F;table&gt;
&lt;p&gt;Imagine that later we decide that &lt;code&gt;Int&lt;&#x2F;code&gt; is just too generic, and what we have here is in fact a &lt;code&gt;Coordinate&lt;&#x2F;code&gt;. We can define a a newtype wrapper like the following:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;final case class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; Coordinate&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Int&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span&gt;AnyVal
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;and then define the binary codec either by using &lt;code&gt;map&lt;&#x2F;code&gt; and &lt;code&gt;contramap&lt;&#x2F;code&gt; on the integer codec, or by using the &lt;code&gt;deriveForWrapper&lt;&#x2F;code&gt; macro:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;object&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; Coordinate {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;implicit val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;codec&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: BinaryCodec[Coordinate] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;DeriveBinaryCodec.deriveForWrapper
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The binary representation of a &lt;code&gt;Coordinate&lt;&#x2F;code&gt; will be exactly the same as for an &lt;code&gt;Int&lt;&#x2F;code&gt;, so we are still fully backward and forward compatible regarding our serialization format:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Coordinate &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;Coordinate(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;results in:&lt;&#x2F;p&gt;
&lt;table style=&quot;border-collapse: initial; border: 0px; width: auto; color: black&quot;&gt;
  &lt;tr&gt;
    &lt;td style=&quot;border: 1px solid; padding: 6px; text-align: center; background-color: rgb(154, 231, 147); margin: 0px; border-spacing: 1px; font-family: monospace; font-weight: normal&quot;&gt;0&lt;&#x2F;td&gt;
    &lt;td style=&quot;border: 1px solid; padding: 6px; text-align: center; background-color: rgb(154, 231, 147); margin: 0px; border-spacing: 1px; font-family: monospace; font-weight: normal&quot;&gt;0&lt;&#x2F;td&gt;
    &lt;td style=&quot;border: 1px solid; padding: 6px; text-align: center; background-color: rgb(154, 231, 147); margin: 0px; border-spacing: 1px; font-family: monospace; font-weight: normal&quot;&gt;0&lt;&#x2F;td&gt;
    &lt;td style=&quot;border: 1px solid; padding: 6px; text-align: center; background-color: rgb(154, 231, 147); margin: 0px; border-spacing: 1px; font-family: monospace; font-weight: normal&quot;&gt;100&lt;&#x2F;td&gt;
  &lt;&#x2F;tr&gt;
&lt;&#x2F;table&gt;
&lt;h3 id=&quot;collections&quot;&gt;Collections&lt;&#x2F;h3&gt;
&lt;p&gt;First let&#x27;s see what happens if we try to serialize a pair of coordinates:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;xy &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;(Coordinate(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;), Coordinate(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;results in:&lt;&#x2F;p&gt;
&lt;table style=&quot;border-collapse: initial; border: 0px; width: auto; color: black&quot;&gt;
  &lt;tr&gt;
    &lt;td style=&quot;border: 1px solid; padding: 6px; text-align: center; background-color: rgb(147, 154, 231); margin: 0px; border-spacing: 1px; font-family: monospace; font-weight: normal&quot;&gt;0&lt;&#x2F;td&gt;
    &lt;td style=&quot;border: 1px solid; padding: 6px; text-align: center; background-color: rgb(154, 231, 147); margin: 0px; border-spacing: 1px; font-family: monospace; font-weight: normal&quot;&gt;0&lt;&#x2F;td&gt;
    &lt;td style=&quot;border: 1px solid; padding: 6px; text-align: center; background-color: rgb(154, 231, 147); margin: 0px; border-spacing: 1px; font-family: monospace; font-weight: normal&quot;&gt;0&lt;&#x2F;td&gt;
    &lt;td style=&quot;border: 1px solid; padding: 6px; text-align: center; background-color: rgb(154, 231, 147); margin: 0px; border-spacing: 1px; font-family: monospace; font-weight: normal&quot;&gt;0&lt;&#x2F;td&gt;
    &lt;td style=&quot;border: 1px solid; padding: 6px; text-align: center; background-color: rgb(154, 231, 147); margin: 0px; border-spacing: 1px; font-family: monospace; font-weight: normal&quot;&gt;1&lt;&#x2F;td&gt;
    &lt;td style=&quot;border: 1px solid; padding: 6px; text-align: center; background-color: rgb(231, 154, 147); margin: 0px; border-spacing: 1px; font-family: monospace; font-weight: normal&quot;&gt;0&lt;&#x2F;td&gt;
    &lt;td style=&quot;border: 1px solid; padding: 6px; text-align: center; background-color: rgb(231, 154, 147); margin: 0px; border-spacing: 1px; font-family: monospace; font-weight: normal&quot;&gt;0&lt;&#x2F;td&gt;
    &lt;td style=&quot;border: 1px solid; padding: 6px; text-align: center; background-color: rgb(231, 154, 147); margin: 0px; border-spacing: 1px; font-family: monospace; font-weight: normal&quot;&gt;0&lt;&#x2F;td&gt;
    &lt;td style=&quot;border: 1px solid; padding: 6px; text-align: center; background-color: rgb(231, 154, 147); margin: 0px; border-spacing: 1px; font-family: monospace; font-weight: normal&quot;&gt;2&lt;&#x2F;td&gt;    
  &lt;&#x2F;tr&gt;
&lt;&#x2F;table&gt;
&lt;p&gt;the binary representation starts with a &lt;code&gt;0&lt;&#x2F;code&gt;, which is an &lt;em&gt;ADT header&lt;&#x2F;em&gt;. We will talk about it later. The rest of the data is just a flat representation of the two coordinates, taking in total 9 bytes.&lt;&#x2F;p&gt;
&lt;p&gt;Now we start storing arrays of these coordinates:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;coordinates&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Array&lt;&#x2F;span&gt;&lt;span&gt;[(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Coordinate&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Coordinate&lt;&#x2F;span&gt;&lt;span&gt;)] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= 
&lt;&#x2F;span&gt;&lt;span&gt;  Array(
&lt;&#x2F;span&gt;&lt;span&gt;    (Coordinate(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;), Coordinate(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;)),
&lt;&#x2F;span&gt;&lt;span&gt;    (Coordinate(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;), Coordinate(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;)),
&lt;&#x2F;span&gt;&lt;span&gt;    (Coordinate(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;), Coordinate(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;6&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;  )
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Arrays are serialized simply by writing the length of the array as a variable-length integer and then serializing all elements.&lt;&#x2F;p&gt;
&lt;table style=&quot;border-collapse: initial; border: 0px; width: auto; color: black&quot;&gt;
  &lt;tr&gt;
    &lt;td style=&quot;border: 1px solid; padding: 6px; text-align: center; background-color: rgb(147, 154, 231); margin: 0px; border-spacing: 1px; font-family: monospace; font-weight: normal&quot;&gt;6&lt;&#x2F;td&gt;
    &lt;td style=&quot;border: 1px solid; padding: 6px; text-align: center; background-color: rgb(154, 231, 147); margin: 0px; border-spacing: 1px; font-family: monospace; font-weight: normal&quot;&gt;0&lt;&#x2F;td&gt;
    &lt;td style=&quot;border: 1px solid; padding: 6px; text-align: center; background-color: rgb(154, 231, 147); margin: 0px; border-spacing: 1px; font-family: monospace; font-weight: normal&quot;&gt;0&lt;&#x2F;td&gt;    
    &lt;td style=&quot;border: 1px solid; padding: 6px; text-align: center; background-color: rgb(154, 231, 147); margin: 0px; border-spacing: 1px; font-family: monospace; font-weight: normal&quot;&gt;0&lt;&#x2F;td&gt;
    &lt;td style=&quot;border: 1px solid; padding: 6px; text-align: center; background-color: rgb(154, 231, 147); margin: 0px; border-spacing: 1px; font-family: monospace; font-weight: normal&quot;&gt;0&lt;&#x2F;td&gt;
    &lt;td style=&quot;border: 1px solid; padding: 6px; text-align: center; background-color: rgb(154, 231, 147); margin: 0px; border-spacing: 1px; font-family: monospace; font-weight: normal&quot;&gt;1&lt;&#x2F;td&gt;
    &lt;td style=&quot;border: 1px solid; padding: 6px; text-align: center; background-color: rgb(154, 231, 147); margin: 0px; border-spacing: 1px; font-family: monospace; font-weight: normal&quot;&gt;0&lt;&#x2F;td&gt;
    &lt;td style=&quot;border: 1px solid; padding: 6px; text-align: center; background-color: rgb(154, 231, 147); margin: 0px; border-spacing: 1px; font-family: monospace; font-weight: normal&quot;&gt;0&lt;&#x2F;td&gt;
    &lt;td style=&quot;border: 1px solid; padding: 6px; text-align: center; background-color: rgb(154, 231, 147); margin: 0px; border-spacing: 1px; font-family: monospace; font-weight: normal&quot;&gt;0&lt;&#x2F;td&gt;
    &lt;td style=&quot;border: 1px solid; padding: 6px; text-align: center; background-color: rgb(154, 231, 147); margin: 0px; border-spacing: 1px; font-family: monospace; font-weight: normal&quot;&gt;2&lt;&#x2F;td&gt; 
    &lt;td style=&quot;border: 1px solid; padding: 6px; text-align: center; background-color: rgb(231, 154, 147); margin: 0px; border-spacing: 1px; font-family: monospace; font-weight: normal&quot;&gt;0&lt;&#x2F;td&gt;
    &lt;td style=&quot;border: 1px solid; padding: 6px; text-align: center; background-color: rgb(231, 154, 147); margin: 0px; border-spacing: 1px; font-family: monospace; font-weight: normal&quot;&gt;0&lt;&#x2F;td&gt;    
    &lt;td style=&quot;border: 1px solid; padding: 6px; text-align: center; background-color: rgb(231, 154, 147); margin: 0px; border-spacing: 1px; font-family: monospace; font-weight: normal&quot;&gt;0&lt;&#x2F;td&gt;
    &lt;td style=&quot;border: 1px solid; padding: 6px; text-align: center; background-color: rgb(231, 154, 147); margin: 0px; border-spacing: 1px; font-family: monospace; font-weight: normal&quot;&gt;0&lt;&#x2F;td&gt;
    &lt;td style=&quot;border: 1px solid; padding: 6px; text-align: center; background-color: rgb(231, 154, 147); margin: 0px; border-spacing: 1px; font-family: monospace; font-weight: normal&quot;&gt;3&lt;&#x2F;td&gt;
    &lt;td style=&quot;border: 1px solid; padding: 6px; text-align: center; background-color: rgb(231, 154, 147); margin: 0px; border-spacing: 1px; font-family: monospace; font-weight: normal&quot;&gt;0&lt;&#x2F;td&gt;
    &lt;td style=&quot;border: 1px solid; padding: 6px; text-align: center; background-color: rgb(231, 154, 147); margin: 0px; border-spacing: 1px; font-family: monospace; font-weight: normal&quot;&gt;0&lt;&#x2F;td&gt;
    &lt;td style=&quot;border: 1px solid; padding: 6px; text-align: center; background-color: rgb(231, 154, 147); margin: 0px; border-spacing: 1px; font-family: monospace; font-weight: normal&quot;&gt;0&lt;&#x2F;td&gt;
    &lt;td style=&quot;border: 1px solid; padding: 6px; text-align: center; background-color: rgb(231, 154, 147); margin: 0px; border-spacing: 1px; font-family: monospace; font-weight: normal&quot;&gt;4&lt;&#x2F;td&gt; 
    &lt;td style=&quot;border: 1px solid; padding: 6px; text-align: center; background-color: rgb(231, 147, 200); margin: 0px; border-spacing: 1px; font-family: monospace; font-weight: normal&quot;&gt;0&lt;&#x2F;td&gt;
    &lt;td style=&quot;border: 1px solid; padding: 6px; text-align: center; background-color: rgb(231, 147, 200); margin: 0px; border-spacing: 1px; font-family: monospace; font-weight: normal&quot;&gt;0&lt;&#x2F;td&gt;    
    &lt;td style=&quot;border: 1px solid; padding: 6px; text-align: center; background-color: rgb(231, 147, 200); margin: 0px; border-spacing: 1px; font-family: monospace; font-weight: normal&quot;&gt;0&lt;&#x2F;td&gt;
    &lt;td style=&quot;border: 1px solid; padding: 6px; text-align: center; background-color: rgb(231, 147, 200); margin: 0px; border-spacing: 1px; font-family: monospace; font-weight: normal&quot;&gt;0&lt;&#x2F;td&gt;
    &lt;td style=&quot;border: 1px solid; padding: 6px; text-align: center; background-color: rgb(231, 147, 200); margin: 0px; border-spacing: 1px; font-family: monospace; font-weight: normal&quot;&gt;5&lt;&#x2F;td&gt;
    &lt;td style=&quot;border: 1px solid; padding: 6px; text-align: center; background-color: rgb(231, 147, 200); margin: 0px; border-spacing: 1px; font-family: monospace; font-weight: normal&quot;&gt;0&lt;&#x2F;td&gt;
    &lt;td style=&quot;border: 1px solid; padding: 6px; text-align: center; background-color: rgb(231, 147, 200); margin: 0px; border-spacing: 1px; font-family: monospace; font-weight: normal&quot;&gt;0&lt;&#x2F;td&gt;
    &lt;td style=&quot;border: 1px solid; padding: 6px; text-align: center; background-color: rgb(231, 147, 200); margin: 0px; border-spacing: 1px; font-family: monospace; font-weight: normal&quot;&gt;0&lt;&#x2F;td&gt;
    &lt;td style=&quot;border: 1px solid; padding: 6px; text-align: center; background-color: rgb(231, 147, 200); margin: 0px; border-spacing: 1px; font-family: monospace; font-weight: normal&quot;&gt;6&lt;&#x2F;td&gt;    
  &lt;&#x2F;tr&gt;
&lt;&#x2F;table&gt;
&lt;p&gt;The variable-length integer encoding of &lt;code&gt;3&lt;&#x2F;code&gt; is &lt;code&gt;6&lt;&#x2F;code&gt;, and that is simply followed by the three 9-byte long serialized representation of the coordinate pairs.&lt;&#x2F;p&gt;
&lt;p&gt;What if we decide we don&#x27;t want to use &lt;code&gt;Array&lt;&#x2F;code&gt; but ZIO&#x27;s &lt;code&gt;Chunk&lt;&#x2F;code&gt; instead? Or if we realize our data model is more precise if we talk about a &lt;em&gt;set&lt;&#x2F;em&gt; of coordinate pairs? Nothing! Desert uses the same encoding for all collection types, allowing us to always choose the best data type without being worried about breaking the serialization format. In some collections, such as linked lists, there is no way to know the number of elements without iterating through the whole data set. Desert supports these collection types by writing &lt;code&gt;-1&lt;&#x2F;code&gt; as the number of elements, and then prefixing each element with a single byte where &lt;code&gt;1&lt;&#x2F;code&gt; represents we have a next element and &lt;code&gt;0&lt;&#x2F;code&gt; that we don&#x27;t. This is actually exactly the same binary format as a series of &lt;code&gt;Option[T]&lt;&#x2F;code&gt; values where the first and only &lt;code&gt;None&lt;&#x2F;code&gt; represents the end of the sequence.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;records&quot;&gt;Records&lt;&#x2F;h3&gt;
&lt;p&gt;Maybe using tuples of coordinates was a good idea in the beginning but as our data model evolves we want to introduced a named record type instead:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;final case class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; Point&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Coordinate&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;y&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Coordinate&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We can use &lt;code&gt;desert&lt;&#x2F;code&gt;&#x27;s codec derivation feature to get a binary codec for this type:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;object&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; Point {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;implicit val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;schema&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: Schema[Point] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;DeriveSchema.gen
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;implicit val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;codec&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: BinaryCodec[Point] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;DerivedBinaryCodec.derive
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;When using &lt;code&gt;desert-zio-scheme&lt;&#x2F;code&gt; we also need to derive a &lt;code&gt;Schema&lt;&#x2F;code&gt; instance - this is not required when using the &lt;code&gt;desert-shapeless&lt;&#x2F;code&gt; version of the codec derivation.&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s see how &lt;code&gt;desert&lt;&#x2F;code&gt; serializes an instance of this &lt;code&gt;Point&lt;&#x2F;code&gt; type:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;pt &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;Point(Coordinate(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;), Coordinate(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;results in:&lt;&#x2F;p&gt;
&lt;table style=&quot;border-collapse: initial; border: 0px; width: auto; color: black&quot;&gt;
  &lt;tr&gt;
    &lt;td style=&quot;border: 1px solid; padding: 6px; text-align: center; background-color: rgb(147, 154, 231); margin: 0px; border-spacing: 1px; font-family: monospace; font-weight: normal&quot;&gt;0&lt;&#x2F;td&gt;
    &lt;td style=&quot;border: 1px solid; padding: 6px; text-align: center; background-color: rgb(154, 231, 147); margin: 0px; border-spacing: 1px; font-family: monospace; font-weight: normal&quot;&gt;0&lt;&#x2F;td&gt;
    &lt;td style=&quot;border: 1px solid; padding: 6px; text-align: center; background-color: rgb(154, 231, 147); margin: 0px; border-spacing: 1px; font-family: monospace; font-weight: normal&quot;&gt;0&lt;&#x2F;td&gt;
    &lt;td style=&quot;border: 1px solid; padding: 6px; text-align: center; background-color: rgb(154, 231, 147); margin: 0px; border-spacing: 1px; font-family: monospace; font-weight: normal&quot;&gt;0&lt;&#x2F;td&gt;
    &lt;td style=&quot;border: 1px solid; padding: 6px; text-align: center; background-color: rgb(154, 231, 147); margin: 0px; border-spacing: 1px; font-family: monospace; font-weight: normal&quot;&gt;1&lt;&#x2F;td&gt;
    &lt;td style=&quot;border: 1px solid; padding: 6px; text-align: center; background-color: rgb(231, 154, 147); margin: 0px; border-spacing: 1px; font-family: monospace; font-weight: normal&quot;&gt;0&lt;&#x2F;td&gt;
    &lt;td style=&quot;border: 1px solid; padding: 6px; text-align: center; background-color: rgb(231, 154, 147); margin: 0px; border-spacing: 1px; font-family: monospace; font-weight: normal&quot;&gt;0&lt;&#x2F;td&gt;
    &lt;td style=&quot;border: 1px solid; padding: 6px; text-align: center; background-color: rgb(231, 154, 147); margin: 0px; border-spacing: 1px; font-family: monospace; font-weight: normal&quot;&gt;0&lt;&#x2F;td&gt;
    &lt;td style=&quot;border: 1px solid; padding: 6px; text-align: center; background-color: rgb(231, 154, 147); margin: 0px; border-spacing: 1px; font-family: monospace; font-weight: normal&quot;&gt;2&lt;&#x2F;td&gt;    
  &lt;&#x2F;tr&gt;
&lt;&#x2F;table&gt;
&lt;p&gt;This is exactly the same as the tuple&#x27;s binary representation was, which probably isn&#x27;t a big surprise as they are structurally equivalent. Still this is an important property as it allows us to replace any tuple with an equivalent record type and keeping the binary format exactly the same!&lt;&#x2F;p&gt;
&lt;p&gt;If we have to change a record&#x27;s type, we can only change any of its fields if that field&#x27;s new type has a compatible binary representation with the old one. All the cases described in this post are valid data evolution steps. Beside those there are a few special type of changes &lt;code&gt;desert&lt;&#x2F;code&gt; supports for records. Let&#x27;s see!s&lt;&#x2F;p&gt;
&lt;h3 id=&quot;adding-a-field&quot;&gt;Adding a field&lt;&#x2F;h3&gt;
&lt;p&gt;As a next step let&#x27;s imagine our data type requires a new field. Let&#x27;s add a &lt;code&gt;z&lt;&#x2F;code&gt; coordinate to our point:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;final case class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; Point&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Coordinate&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;y&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Coordinate&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;z&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Coordinate&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;object&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; Point {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;implicit val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;codec&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: BinaryCodec[Point] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;DerivedBinaryCodec.derive 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;pt &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;Point(Coordinate(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;), Coordinate(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;), Coordinate(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Serializing this &lt;code&gt;pt&lt;&#x2F;code&gt; value results in:&lt;&#x2F;p&gt;
&lt;table style=&quot;border-collapse: initial; border: 0px; width: auto; color: black&quot;&gt;
  &lt;tr&gt;
    &lt;td style=&quot;border: 1px solid; padding: 6px; text-align: center; background-color: rgb(147, 154, 231); margin: 0px; border-spacing: 1px; font-family: monospace; font-weight: normal&quot;&gt;0&lt;&#x2F;td&gt;
    &lt;td style=&quot;border: 1px solid; padding: 6px; text-align: center; background-color: rgb(154, 231, 147); margin: 0px; border-spacing: 1px; font-family: monospace; font-weight: normal&quot;&gt;0&lt;&#x2F;td&gt;
    &lt;td style=&quot;border: 1px solid; padding: 6px; text-align: center; background-color: rgb(154, 231, 147); margin: 0px; border-spacing: 1px; font-family: monospace; font-weight: normal&quot;&gt;0&lt;&#x2F;td&gt;
    &lt;td style=&quot;border: 1px solid; padding: 6px; text-align: center; background-color: rgb(154, 231, 147); margin: 0px; border-spacing: 1px; font-family: monospace; font-weight: normal&quot;&gt;0&lt;&#x2F;td&gt;
    &lt;td style=&quot;border: 1px solid; padding: 6px; text-align: center; background-color: rgb(154, 231, 147); margin: 0px; border-spacing: 1px; font-family: monospace; font-weight: normal&quot;&gt;1&lt;&#x2F;td&gt;
    &lt;td style=&quot;border: 1px solid; padding: 6px; text-align: center; background-color: rgb(231, 154, 147); margin: 0px; border-spacing: 1px; font-family: monospace; font-weight: normal&quot;&gt;0&lt;&#x2F;td&gt;
    &lt;td style=&quot;border: 1px solid; padding: 6px; text-align: center; background-color: rgb(231, 154, 147); margin: 0px; border-spacing: 1px; font-family: monospace; font-weight: normal&quot;&gt;0&lt;&#x2F;td&gt;
    &lt;td style=&quot;border: 1px solid; padding: 6px; text-align: center; background-color: rgb(231, 154, 147); margin: 0px; border-spacing: 1px; font-family: monospace; font-weight: normal&quot;&gt;0&lt;&#x2F;td&gt;
    &lt;td style=&quot;border: 1px solid; padding: 6px; text-align: center; background-color: rgb(231, 154, 147); margin: 0px; border-spacing: 1px; font-family: monospace; font-weight: normal&quot;&gt;2&lt;&#x2F;td&gt;
    &lt;td style=&quot;border: 1px solid; padding: 6px; text-align: center; background-color: rgb(231, 147, 200); margin: 0px; border-spacing: 1px; font-family: monospace; font-weight: normal&quot;&gt;0&lt;&#x2F;td&gt;
    &lt;td style=&quot;border: 1px solid; padding: 6px; text-align: center; background-color: rgb(231, 147, 200); margin: 0px; border-spacing: 1px; font-family: monospace; font-weight: normal&quot;&gt;0&lt;&#x2F;td&gt;
    &lt;td style=&quot;border: 1px solid; padding: 6px; text-align: center; background-color: rgb(231, 147, 200); margin: 0px; border-spacing: 1px; font-family: monospace; font-weight: normal&quot;&gt;0&lt;&#x2F;td&gt;
    &lt;td style=&quot;border: 1px solid; padding: 6px; text-align: center; background-color: rgb(231, 147, 200); margin: 0px; border-spacing: 1px; font-family: monospace; font-weight: normal&quot;&gt;3&lt;&#x2F;td&gt;    
  &lt;&#x2F;tr&gt;
&lt;&#x2F;table&gt;
&lt;p&gt;If we try to read this value with the &lt;em&gt;deserializer&lt;&#x2F;em&gt; of our original &lt;code&gt;Point&lt;&#x2F;code&gt; type, it will read &lt;code&gt;Point(Coordinate(1), Coordinate(2))&lt;&#x2F;code&gt;, but the next deserialized value will be corrupt as the input stream will point to the beginning of the &lt;code&gt;0, 0, 0, 3&lt;&#x2F;code&gt; value. Similarly, if we would try to read a binary serialized with the old &lt;code&gt;Point&lt;&#x2F;code&gt; &lt;em&gt;serializer&lt;&#x2F;em&gt;, it would read the next four bytes from the data stream which, if even exists, belongs to some other serialized element.&lt;&#x2F;p&gt;
&lt;p&gt;The solution for this in &lt;code&gt;desert&lt;&#x2F;code&gt; is to &lt;strong&gt;explicitly document data evolution&lt;&#x2F;strong&gt;. This is done by listing each modification in an &lt;em&gt;attribute&lt;&#x2F;em&gt; called &lt;code&gt;evolutionSteps&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span&gt;@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;evolutionSteps&lt;&#x2F;span&gt;&lt;span&gt;(FieldAdded[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Coordinate&lt;&#x2F;span&gt;&lt;span&gt;](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;z&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, Coordinate(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;)))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;final case class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; Point&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Coordinate&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;y&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Coordinate&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;z&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Coordinate&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;object&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; Point {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;implicit val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;codec&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: BinaryCodec[Point] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;DerivedBinaryCodec.derive 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;pt &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;Point(Coordinate(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;), Coordinate(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;), Coordinate(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;With this annotation, we mark &lt;code&gt;z&lt;&#x2F;code&gt; as a newly added field, and provide a &lt;em&gt;default value&lt;&#x2F;em&gt; for it which will be used in cases when reading an old version of the serialized data which did not have this field yet. Every time we change the data type we record the change as a new element in this attribute. There are other supported evolution step types as we will see soon.&lt;&#x2F;p&gt;
&lt;p&gt;But first let&#x27;s see what changes in the binary representation of &lt;code&gt;Point&lt;&#x2F;code&gt; now that we added this attribute!&lt;&#x2F;p&gt;
&lt;table style=&quot;border-collapse: initial; border: 0px; width: auto; color: black&quot;&gt;
  &lt;tr&gt;
    &lt;td style=&quot;border: 1px solid; padding: 6px; text-align: center; background-color: rgb(147, 154, 231); margin: 0px; border-spacing: 1px; font-family: monospace; font-weight: normal&quot;&gt;1&lt;&#x2F;td&gt;
    &lt;td style=&quot;border: 1px solid; padding: 6px; text-align: center; background-color: rgb(154, 231, 147); margin: 0px; border-spacing: 1px; font-family: monospace; font-weight: normal&quot;&gt;16&lt;&#x2F;td&gt;
    &lt;td style=&quot;border: 1px solid; padding: 6px; text-align: center; background-color: rgb(231, 147, 200); margin: 0px; border-spacing: 1px; font-family: monospace; font-weight: normal&quot;&gt;8&lt;&#x2F;td&gt;
    &lt;td style=&quot;border: 1px solid; padding: 6px; text-align: center; background-color: rgb(154, 231, 147); margin: 0px; border-spacing: 1px; font-family: monospace; font-weight: normal&quot;&gt;0&lt;&#x2F;td&gt;
    &lt;td style=&quot;border: 1px solid; padding: 6px; text-align: center; background-color: rgb(154, 231, 147); margin: 0px; border-spacing: 1px; font-family: monospace; font-weight: normal&quot;&gt;0&lt;&#x2F;td&gt;
    &lt;td style=&quot;border: 1px solid; padding: 6px; text-align: center; background-color: rgb(154, 231, 147); margin: 0px; border-spacing: 1px; font-family: monospace; font-weight: normal&quot;&gt;0&lt;&#x2F;td&gt;
    &lt;td style=&quot;border: 1px solid; padding: 6px; text-align: center; background-color: rgb(154, 231, 147); margin: 0px; border-spacing: 1px; font-family: monospace; font-weight: normal&quot;&gt;1&lt;&#x2F;td&gt;
    &lt;td style=&quot;border: 1px solid; padding: 6px; text-align: center; background-color: rgb(231, 154, 147); margin: 0px; border-spacing: 1px; font-family: monospace; font-weight: normal&quot;&gt;0&lt;&#x2F;td&gt;
    &lt;td style=&quot;border: 1px solid; padding: 6px; text-align: center; background-color: rgb(231, 154, 147); margin: 0px; border-spacing: 1px; font-family: monospace; font-weight: normal&quot;&gt;0&lt;&#x2F;td&gt;
    &lt;td style=&quot;border: 1px solid; padding: 6px; text-align: center; background-color: rgb(231, 154, 147); margin: 0px; border-spacing: 1px; font-family: monospace; font-weight: normal&quot;&gt;0&lt;&#x2F;td&gt;
    &lt;td style=&quot;border: 1px solid; padding: 6px; text-align: center; background-color: rgb(231, 154, 147); margin: 0px; border-spacing: 1px; font-family: monospace; font-weight: normal&quot;&gt;2&lt;&#x2F;td&gt;
    &lt;td style=&quot;border: 1px solid; padding: 6px; text-align: center; background-color: rgb(231, 147, 200); margin: 0px; border-spacing: 1px; font-family: monospace; font-weight: normal&quot;&gt;0&lt;&#x2F;td&gt;
    &lt;td style=&quot;border: 1px solid; padding: 6px; text-align: center; background-color: rgb(231, 147, 200); margin: 0px; border-spacing: 1px; font-family: monospace; font-weight: normal&quot;&gt;0&lt;&#x2F;td&gt;
    &lt;td style=&quot;border: 1px solid; padding: 6px; text-align: center; background-color: rgb(231, 147, 200); margin: 0px; border-spacing: 1px; font-family: monospace; font-weight: normal&quot;&gt;0&lt;&#x2F;td&gt;
    &lt;td style=&quot;border: 1px solid; padding: 6px; text-align: center; background-color: rgb(231, 147, 200); margin: 0px; border-spacing: 1px; font-family: monospace; font-weight: normal&quot;&gt;3&lt;&#x2F;td&gt;    
  &lt;&#x2F;tr&gt;
&lt;&#x2F;table&gt;
&lt;p&gt;Now that we have an &lt;em&gt;evolution step&lt;&#x2F;em&gt; the first byte, which was always &lt;code&gt;0&lt;&#x2F;code&gt; before, becomes &lt;code&gt;1&lt;&#x2F;code&gt;. Every evolution step increases this value, which is interpreted as the type&#x27;s &lt;em&gt;version&lt;&#x2F;em&gt;. For each ADT which has a version other than 0, this first version byte is followed by a list of the binary encoding of the evolution steps. Here the &lt;code&gt;16&lt;&#x2F;code&gt; is the variable-length encoding of the value &lt;code&gt;8&lt;&#x2F;code&gt;, which is the length of the &quot;version 0&quot; part of the data type. This is followed by &lt;code&gt;8&lt;&#x2F;code&gt; which is just the variable-length encoding of the value &lt;code&gt;4&lt;&#x2F;code&gt;, and it represents the &lt;em&gt;field added&lt;&#x2F;em&gt; evolution step, encoding the newly added field&#x27;s size.&lt;&#x2F;p&gt;
&lt;p&gt;With this format when the &lt;em&gt;old&lt;&#x2F;em&gt; deserializer reads the point, it knows it needs to skip additional 4 bytes after reading the &lt;code&gt;x&lt;&#x2F;code&gt; and &lt;code&gt;y&lt;&#x2F;code&gt; coordinates. Also when the &lt;em&gt;new&lt;&#x2F;em&gt; deserializer encounters an old point, that binary data will begin with &lt;code&gt;0&lt;&#x2F;code&gt;, so the deserializer is aware that it&#x27;s an older version and can set the deserialized value&#x27;s &lt;code&gt;z&lt;&#x2F;code&gt; coordinate to the provided default.&lt;&#x2F;p&gt;
&lt;p&gt;By documenting the data type change we get full forward and backward compatibility in this case. The cost is that instead of &lt;code&gt;13&lt;&#x2F;code&gt; bytes, now each &lt;code&gt;Point&lt;&#x2F;code&gt; takes &lt;code&gt;15&lt;&#x2F;code&gt; bytes.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;making-a-field-optional&quot;&gt;Making a field optional&lt;&#x2F;h3&gt;
&lt;p&gt;Another special data type change is making an existing field optional. Staying with the previous example we could change our &lt;code&gt;Point&lt;&#x2F;code&gt; type like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span&gt;@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;evolutionSteps&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;  FieldAdded[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Coordinate&lt;&#x2F;span&gt;&lt;span&gt;](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;z&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, Coordinate(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;)),
&lt;&#x2F;span&gt;&lt;span&gt;  FieldMadeOptional(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;z&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;final case class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; Point&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Coordinate&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;y&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Coordinate&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;z&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Coordinate&lt;&#x2F;span&gt;&lt;span&gt;])
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;object&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; Point {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;implicit val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;codec&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: BinaryCodec[Point] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;DerivedBinaryCodec.derive 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;pt &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;Point(Coordinate(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;), Coordinate(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;), None)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This of course can no longer guarantee full forward and backward compatibility - but it can be useful as an intermediate step in getting rid of some unused parts of the data model, while still being able to access it when it&#x27;s available from older serialized data.&lt;&#x2F;p&gt;
&lt;p&gt;This evolution step is represented by a variable-length integer &lt;code&gt;-1&lt;&#x2F;code&gt; in the ADT header. All positive values are representing the &lt;em&gt;field added&lt;&#x2F;em&gt; case, with the actual value containing the size of the added field. -1 is a special marker for field removed, and it is followed by another variable-length integer encoding the field position which has been made optional. Then serializing the &lt;code&gt;Option&lt;&#x2F;code&gt; field, the integer gets prefixed by a &lt;code&gt;1&lt;&#x2F;code&gt; if the value was &lt;code&gt;Some&lt;&#x2F;code&gt;, or the whole option is serialized as a &lt;code&gt;0&lt;&#x2F;code&gt; if it was &lt;code&gt;None&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The total serialized record of the above example would look like this:&lt;&#x2F;p&gt;
&lt;table style=&quot;border-collapse: initial; border: 0px; width: auto; color: black&quot;&gt;
  &lt;tr&gt;
    &lt;td style=&quot;border: 1px solid; padding: 6px; text-align: center; background-color: rgb(147, 154, 231); margin: 0px; border-spacing: 1px; font-family: monospace; font-weight: normal&quot;&gt;2&lt;&#x2F;td&gt;
    &lt;td style=&quot;border: 1px solid; padding: 6px; text-align: center; background-color: rgb(154, 231, 147); margin: 0px; border-spacing: 1px; font-family: monospace; font-weight: normal&quot;&gt;16&lt;&#x2F;td&gt;
    &lt;td style=&quot;border: 1px solid; padding: 6px; text-align: center; background-color: rgb(231, 147, 200); margin: 0px; border-spacing: 1px; font-family: monospace; font-weight: normal&quot;&gt;2&lt;&#x2F;td&gt;
    &lt;td style=&quot;border: 1px solid; padding: 6px; text-align: center; background-color: rgb(60, 200, 150); margin: 0px; border-spacing: 1px; font-family: monospace; font-weight: normal&quot;&gt;1&lt;&#x2F;td&gt;
    &lt;td style=&quot;border: 1px solid; padding: 6px; text-align: center; background-color: rgb(60, 200, 150); margin: 0px; border-spacing: 1px; font-family: monospace; font-weight: normal&quot;&gt;1&lt;&#x2F;td&gt;    
    &lt;td style=&quot;border: 1px solid; padding: 6px; text-align: center; background-color: rgb(154, 231, 147); margin: 0px; border-spacing: 1px; font-family: monospace; font-weight: normal&quot;&gt;0&lt;&#x2F;td&gt;
    &lt;td style=&quot;border: 1px solid; padding: 6px; text-align: center; background-color: rgb(154, 231, 147); margin: 0px; border-spacing: 1px; font-family: monospace; font-weight: normal&quot;&gt;0&lt;&#x2F;td&gt;
    &lt;td style=&quot;border: 1px solid; padding: 6px; text-align: center; background-color: rgb(154, 231, 147); margin: 0px; border-spacing: 1px; font-family: monospace; font-weight: normal&quot;&gt;0&lt;&#x2F;td&gt;
    &lt;td style=&quot;border: 1px solid; padding: 6px; text-align: center; background-color: rgb(154, 231, 147); margin: 0px; border-spacing: 1px; font-family: monospace; font-weight: normal&quot;&gt;1&lt;&#x2F;td&gt;
    &lt;td style=&quot;border: 1px solid; padding: 6px; text-align: center; background-color: rgb(231, 154, 147); margin: 0px; border-spacing: 1px; font-family: monospace; font-weight: normal&quot;&gt;0&lt;&#x2F;td&gt;
    &lt;td style=&quot;border: 1px solid; padding: 6px; text-align: center; background-color: rgb(231, 154, 147); margin: 0px; border-spacing: 1px; font-family: monospace; font-weight: normal&quot;&gt;0&lt;&#x2F;td&gt;
    &lt;td style=&quot;border: 1px solid; padding: 6px; text-align: center; background-color: rgb(231, 154, 147); margin: 0px; border-spacing: 1px; font-family: monospace; font-weight: normal&quot;&gt;0&lt;&#x2F;td&gt;
    &lt;td style=&quot;border: 1px solid; padding: 6px; text-align: center; background-color: rgb(231, 154, 147); margin: 0px; border-spacing: 1px; font-family: monospace; font-weight: normal&quot;&gt;2&lt;&#x2F;td&gt;
    &lt;td style=&quot;border: 1px solid; padding: 6px; text-align: center; background-color: rgb(231, 147, 200); margin: 0px; border-spacing: 1px; font-family: monospace; font-weight: normal&quot;&gt;0&lt;&#x2F;td&gt;
  &lt;&#x2F;tr&gt;
&lt;&#x2F;table&gt;
&lt;p&gt;The first byte is now &lt;code&gt;2&lt;&#x2F;code&gt; as we have two evolution steps. The next one still defines that the original part of the data is 8 bytes long, the third byte shows that this time the new &lt;em&gt;z&lt;&#x2F;em&gt; field is taking only 1 byte (as it was set to &lt;code&gt;None&lt;&#x2F;code&gt;). The header is now containing two more bytes, as described above: the first &lt;code&gt;1&lt;&#x2F;code&gt; means a field has been made optional, and the second points to the field.&lt;&#x2F;p&gt;
&lt;p&gt;This can be still loaded by the very first point serializer (or even as the coordinate pair tuple), as everything after the first two coordinates would be skipped. It can also be loaded as a &lt;code&gt;Point&lt;&#x2F;code&gt; with non-optional z coordinate, but only if the serialized data is a &lt;code&gt;Some&lt;&#x2F;code&gt;. So in the above example it would lead to a deserialization error. The change is fully backward compatible so our latest deserializer can still load all the variants we have seen before.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;removing-a-field&quot;&gt;Removing a field&lt;&#x2F;h3&gt;
&lt;p&gt;The final special data evolution step supported by the library is &lt;em&gt;removing&lt;&#x2F;em&gt; a field completely. This is more limited than the previous ones though - backward compatibility is easy, newer versions of the deserializer just have to skip the removed fields which they can easily do. But forward compatibility is only possible if the removed field was an &lt;strong&gt;option field&lt;&#x2F;strong&gt; - that&#x27;s the only type &lt;code&gt;desert&lt;&#x2F;code&gt; can automatically provide a default value, &lt;code&gt;None&lt;&#x2F;code&gt; for.&lt;&#x2F;p&gt;
&lt;p&gt;The binary header for removing a field needs to store the actual &lt;em&gt;field name&lt;&#x2F;em&gt; because it cannot otherwise identify the field which is not actually in the rest of the data set. To make this more space-efficient, &lt;code&gt;desert&lt;&#x2F;code&gt; uses string deduplication and only needs to serialize the actual field name once.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;sum-types&quot;&gt;Sum types&lt;&#x2F;h3&gt;
&lt;p&gt;Scala 2 sealed trait hierarchies and Scala 3 enums are simply serialized with the same techniques mentioned above, but with a &lt;em&gt;constructor ID&lt;&#x2F;em&gt; serialized as a prefix to the binary. Constructor identifiers are associated in order - as the constructors appear in the source code. This means that adding new constructors is backward and forward compatible, as long as they are added as the &lt;em&gt;last&lt;&#x2F;em&gt; constructor. Otherwise the identifiers will be rearranged and binary compatibility breaks.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;transients&quot;&gt;Transients&lt;&#x2F;h3&gt;
&lt;p&gt;It is possible to make a previously non-transient field transient and maintain binary compatibility. The rules are the same as for &lt;em&gt;removing&lt;&#x2F;em&gt; a field.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;type-registry&quot;&gt;Type registry&lt;&#x2F;h3&gt;
&lt;p&gt;As mentioned earlier, a &lt;em&gt;type registry&lt;&#x2F;em&gt; can be used to associate identifiers to types, and then serialize arbitrary values using these identifiers. Maintaining the stability of this mapping is also very important when evolving data types. What if we want to delete a type which was added to the type registry because we never want to use it again, and we already migrated our serialized data and we are sure we will never encounter that ID again during deserialization?&lt;&#x2F;p&gt;
&lt;p&gt;We still cannot just simply remove the entry from the type registry, because it will break all the following identifiers as they get assigned sequentially. The library has a solution for this - it is possible to registry empty placeholders where we previously had an actual type - it will maintain the identifier order, but will lead to a runtime error when that identifier is encountered during deserialization.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;&#x2F;h2&gt;
&lt;p&gt;In this post I summarized the key features of the &lt;code&gt;desert&lt;&#x2F;code&gt; serialization library, and explained in detail how it supports changes into the data model while trying to keep maximal backward and forward compatibility.&lt;&#x2F;p&gt;
&lt;p&gt;In the next post I will show how the same library can be implemented for &lt;strong&gt;Rust&lt;&#x2F;strong&gt;, how the Scala solution maps into different concepts in the other language and what difficulties I&#x27;ve encountered during the migration process.&lt;&#x2F;p&gt;
</content>
        
    </entry>
</feed>
