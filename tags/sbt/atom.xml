<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <title>vigoo&#x27;s software development blog - sbt</title>
    <link rel="self" type="application/atom+xml" href="https://blog.vigoo.dev/tags/sbt/atom.xml"/>
    <link rel="alternate" type="text/html" href="https://blog.vigoo.dev"/>
    <generator uri="https://www.getzola.org/">Zola</generator>
    <updated>2020-09-23T00:00:00+00:00</updated>
    <id>https://blog.vigoo.dev/tags/sbt/atom.xml</id>
    <entry xml:lang="en">
        <title>Code generation in ZIO-AWS</title>
        <published>2020-09-23T00:00:00+00:00</published>
        <updated>2020-09-23T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Daniel Vigovszky
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://blog.vigoo.dev/posts/zioaws-code-generation/"/>
        <id>https://blog.vigoo.dev/posts/zioaws-code-generation/</id>
        
        <content type="html" xml:base="https://blog.vigoo.dev/posts/zioaws-code-generation/">&lt;p&gt;I have recently published a set of libraries, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;vigoo&#x2F;zio-aws&quot;&gt;&lt;strong&gt;zio-aws&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;, aiming to provide a better interface for working with &lt;em&gt;AWS services&lt;&#x2F;em&gt; from &lt;a href=&quot;https:&#x2F;&#x2F;zio.dev&#x2F;&quot;&gt;ZIO&lt;&#x2F;a&gt; applications. For more information about how the ZIO &lt;em&gt;interface&lt;&#x2F;em&gt; works and how to get started with these libraries, read the repository&#x27;s README. In this post, I will focus on how these libraries are generated from the schema provided by the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;aws&#x2F;aws-sdk-java-v2&quot;&gt;AWS Java SDK v2&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;generating-code&quot;&gt;Generating code&lt;&#x2F;h2&gt;
&lt;p&gt;I wanted to cover &lt;em&gt;all&lt;&#x2F;em&gt; AWS services at once. This means client libraries for more than 200 services, so the only possible approach was to &lt;em&gt;generate&lt;&#x2F;em&gt; these libraries on top of a small hand-written core.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;schema&quot;&gt;Schema&lt;&#x2F;h3&gt;
&lt;p&gt;The first thing we need for generating code is a source schema. This is the model that we use to create the source code from. It is usually constructed by some kind of DSL or more directly described by a JSON or YAML or similar data model. In the case of &lt;strong&gt;zio-aws&lt;&#x2F;strong&gt; this was already defined in the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;aws&#x2F;aws-sdk-java-v2&quot;&gt;AWS Java SDK v2&lt;&#x2F;a&gt; project. The way it works is:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;There is a &lt;code&gt;codegen&lt;&#x2F;code&gt; project, published in the &lt;code&gt;software.amazon.awssdk&lt;&#x2F;code&gt; group among the client libraries, that contains the Java classes used for generating the Java SDK itself. This contains the data model classes for parsing the actual schema as well.&lt;&#x2F;li&gt;
&lt;li&gt;In the AWS Java SDK v2 repository, the schema is located in the subdirectory called &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;aws&#x2F;aws-sdk-java-v2&#x2F;tree&#x2F;master&#x2F;services&quot;&gt;&lt;code&gt;services&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;. There is a directory for each AWS service and it contains among other things some relevant &lt;em&gt;JSON&lt;&#x2F;em&gt; schema files:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;service-2.json&lt;&#x2F;code&gt; is the main schema of the service, describing the data structures and operations&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;paginators-1.json&lt;&#x2F;code&gt; describes the operations that the Java SDK creates a &lt;em&gt;paginator interface&lt;&#x2F;em&gt; for&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;customization.config&lt;&#x2F;code&gt; contains extra information, including changes to be applied on top of the service model&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Fortunately, these are also embedded in the generated &lt;em&gt;AWS Java SDK&lt;&#x2F;em&gt; libraries as resources, so getting &lt;em&gt;all client libraries&lt;&#x2F;em&gt; on the classpath gives us an easy way to get the corresponding schemas as well&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;I decided to use the low-level data classes from the AWS &lt;code&gt;codegen&lt;&#x2F;code&gt; library to parse these files and using that build a higher-level model that can be then used as an input for the &lt;em&gt;code generator&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;This is encapsulated in a &lt;em&gt;ZIO layer&lt;&#x2F;em&gt; called &lt;code&gt;Loader&lt;&#x2F;code&gt;, which has two functions:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;findModels&lt;&#x2F;span&gt;&lt;span&gt;(): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ZIO&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Blocking&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Throwable&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Set&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ModelId&lt;&#x2F;span&gt;&lt;span&gt;]]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;loadCodegenModel&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ModelId&lt;&#x2F;span&gt;&lt;span&gt;): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ZIO&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Blocking&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Throwable&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;C2jModels&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The first one, &lt;code&gt;findModels&lt;&#x2F;code&gt; uses the &lt;code&gt;ClassLoader&lt;&#x2F;code&gt; to enumerate all &lt;code&gt;codegen-resources&lt;&#x2F;code&gt; folders on the &lt;em&gt;classpath&lt;&#x2F;em&gt; and just returns a set of &lt;code&gt;ModelId&lt;&#x2F;code&gt;s. &lt;code&gt;ModelId&lt;&#x2F;code&gt; is a pair of a model name (such as &lt;code&gt;s3&lt;&#x2F;code&gt;) and an optional submodule name (for example &lt;code&gt;dynamodb:dynamodbstreams&lt;&#x2F;code&gt;).&lt;&#x2F;p&gt;
&lt;p&gt;Then for each detected model we can load it with the &lt;code&gt;loadCodegenModel&lt;&#x2F;code&gt; function, &lt;code&gt;C2jModels&lt;&#x2F;code&gt; is a class from the AWS &lt;code&gt;codegen&lt;&#x2F;code&gt; library.&lt;&#x2F;p&gt;
&lt;p&gt;Figuring out how to interpret these data structures, and how to map them to the generated Java API was the hardest part, but it&#x27;s out of scope for this post. Our next topic here is how we generate code from our &lt;em&gt;model&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;scalameta&quot;&gt;Scalameta&lt;&#x2F;h3&gt;
&lt;p&gt;There are several possibilities to generate source code and I tried many of them during the past years. Let&#x27;s see some examples:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Using a general-purpose text template engine. An example we used at &lt;a href=&quot;https:&#x2F;&#x2F;prezi.com&quot;&gt;Prezi&lt;&#x2F;a&gt; is the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bkiers&#x2F;Liqp&quot;&gt;Java implementation of the Liquid templating engine&lt;&#x2F;a&gt;. Another example is the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;OpenAPITools&#x2F;openapi-generator&quot;&gt;OpenAPI generator project&lt;&#x2F;a&gt; that uses &lt;a href=&quot;https:&#x2F;&#x2F;mustache.github.io&#x2F;&quot;&gt;Mustache&lt;&#x2F;a&gt; templates to generate server and client code from OpenAPI specifications.&lt;&#x2F;li&gt;
&lt;li&gt;Generating from code with some general-purpose pretty-printing library. With this approach, we are using the pretty-printer library&#x27;s composability features to create source code building blocks, and map the code generator model to these constructs. It is easier to express complex logic in this case, as we don&#x27;t have to encode it in a limited dynamic template model. On the other hand, reading the code generator&#x27;s source and imagining the output is not easy, and nothing enforces that the pretty-printer building blocks are actually creating valid source code.&lt;&#x2F;li&gt;
&lt;li&gt;If the target language has an AST with a pretty-printing feature, we can map the model to the AST directly and just pretty print at the end. With this, we get a much more efficient development cycle, as the generated code is at least guaranteed to be syntactically correct. But the AST can be far from how the target language&#x27;s textual representation looks like, which makes it difficult to read and write this code.&lt;&#x2F;li&gt;
&lt;li&gt;With a library that supports building ASTs with &lt;em&gt;quasiquotes&lt;&#x2F;em&gt;, we can build the AST fragments with a syntax that is very close to the generated target language. For &lt;em&gt;Scala&lt;&#x2F;em&gt;, a library that supports this and is used in a lot of tooling projects is &lt;a href=&quot;https:&#x2F;&#x2F;scalameta.org&#x2F;&quot;&gt;Scalameta&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;I wanted to try using &lt;em&gt;Scalameta&lt;&#x2F;em&gt; ever since I met Devon Stewart and he mentioned how he uses it in &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;twilio&#x2F;guardrail&#x2F;&quot;&gt;guardrail&lt;&#x2F;a&gt;. Finally, this was a perfect use case to do so!&lt;&#x2F;p&gt;
&lt;p&gt;To get an understanding of what kind of Scala language constructs can be built with &lt;em&gt;quasiquotes&lt;&#x2F;em&gt; with &lt;em&gt;Scalameta&lt;&#x2F;em&gt;, check &lt;a href=&quot;https:&#x2F;&#x2F;scalameta.org&#x2F;docs&#x2F;trees&#x2F;quasiquotes.html&quot;&gt;the list of them in the official documentation&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;We get a good mix of both worlds with this. It is possible to express complex template logic in real code, creating higher-level constructs, taking advantage of the full power of Scala. On the other hand, the actual &lt;em&gt;quasiquoted&lt;&#x2F;em&gt; fragments are still close to the code generator&#x27;s target language (which is in this case also Scala).&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s see a short example of this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;private def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;generateMap&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;m&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Model&lt;&#x2F;span&gt;&lt;span&gt;): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ZIO&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;GeneratorContext&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;GeneratorFailure&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ModelWrapper&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;keyModel &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span&gt; get(m.shape.getMapKeyType.getShape)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;valueModel &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span&gt; get(m.shape.getMapValueType.getShape)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;keyT &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;- &lt;&#x2F;span&gt;&lt;span&gt;TypeMapping.toWrappedType(keyModel)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;valueT &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;- &lt;&#x2F;span&gt;&lt;span&gt;TypeMapping.toWrappedType(valueModel)
&lt;&#x2F;span&gt;&lt;span&gt;  } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;yield &lt;&#x2F;span&gt;&lt;span&gt;ModelWrapper(
&lt;&#x2F;span&gt;&lt;span&gt;    code &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;List(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;q&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&amp;quot;&amp;quot;type ${&lt;&#x2F;span&gt;&lt;span&gt;m.asType&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;} = Map[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;$keyT&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;$valueT&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;]&amp;quot;&amp;quot;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  )
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;For each &lt;em&gt;AWS&lt;&#x2F;em&gt; service-specific &lt;em&gt;model type&lt;&#x2F;em&gt; we generate some kind of wrapper code into the ZIO service client library. This is done by processing the schema model to an intermediate format where for each such wrapper, we have a &lt;code&gt;ModelWrapper&lt;&#x2F;code&gt; value that already has the &lt;em&gt;Scalameta AST&lt;&#x2F;em&gt; for that particular wrapper. The above code fragment creates this for &lt;em&gt;map types&lt;&#x2F;em&gt;, which is a simple type alias for a Scala &lt;code&gt;Map&lt;&#x2F;code&gt;. It&#x27;s a &lt;code&gt;ZIO&lt;&#x2F;code&gt; function, taking advantage of passing around the context in the &lt;em&gt;environment&lt;&#x2F;em&gt; and safely handling generator failures, while the actual generated code part in the &lt;code&gt;q&quot;&quot;&quot;...&quot;&quot;&quot;&lt;&#x2F;code&gt; remained quite readable.&lt;&#x2F;p&gt;
&lt;p&gt;Then the whole &lt;em&gt;model package&lt;&#x2F;em&gt; can be expressed like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;primitiveModels &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;- &lt;&#x2F;span&gt;&lt;span&gt;ZIO.foreach(primitiveModels.toList.sortBy(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;.name))(generateModel)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;models &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;- &lt;&#x2F;span&gt;&lt;span&gt;ZIO.foreach(complexModels.toList.sortBy(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;.name))(generateModel)
&lt;&#x2F;span&gt;&lt;span&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;yield &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;q&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&amp;quot;&amp;quot;package &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;$fullPkgName&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt; {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;            import scala.jdk.CollectionConverters._
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;            import java.time.Instant
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;            import zio.{Chunk, ZIO}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;            import software.amazon.awssdk.core.SdkBytes
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;            ..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;$parentModuleImport
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;            package object model {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;              object primitives {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;                ..${&lt;&#x2F;span&gt;&lt;span&gt;primitiveModels.flatMap(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;.code)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;              }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;              ..${&lt;&#x2F;span&gt;&lt;span&gt;models.flatMap(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;.code)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;            }}&amp;quot;&amp;quot;&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This can be then &lt;em&gt;pretty printed&lt;&#x2F;em&gt; simply with&lt;code&gt;.toString&lt;&#x2F;code&gt; and saved to a &lt;code&gt;.scala&lt;&#x2F;code&gt; file.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;building-the-libraries&quot;&gt;Building the libraries&lt;&#x2F;h2&gt;
&lt;p&gt;We have a way to collect the service models and generate source code from that, but we still have to use that generated code somehow. In &lt;code&gt;zio-aws&lt;&#x2F;code&gt; the goal was to generate a separate &lt;em&gt;client library&lt;&#x2F;em&gt; for each AWS service. At the time of writing, there were &lt;strong&gt;235&lt;&#x2F;strong&gt; such services. The generated libraries have to be built and published to &lt;em&gt;Sonatype&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;first-version&quot;&gt;First version&lt;&#x2F;h3&gt;
&lt;p&gt;In the first version I simply wired together the above described &lt;code&gt;loader&lt;&#x2F;code&gt; and &lt;code&gt;generator&lt;&#x2F;code&gt; module into a &lt;code&gt;ZIO&lt;&#x2F;code&gt; &lt;em&gt;command line&lt;&#x2F;em&gt; app, using &lt;a href=&quot;https:&#x2F;&#x2F;vigoo.github.io&#x2F;clipp&#x2F;docs&#x2F;&quot;&gt;clipp&lt;&#x2F;a&gt; for command line parsing. It&#x27;s &lt;code&gt;main&lt;&#x2F;code&gt; was really just something like the following:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;app &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= for &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;svcs &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span&gt; config.parameters[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Parameters&lt;&#x2F;span&gt;&lt;span&gt;].map(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;.serviceList)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;ids &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span&gt; svcs &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;match &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span&gt;Some(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;ids&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;ZIO.succeed(ids.toSet)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span&gt;None &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; loader.findModels().mapError(ReflectionError)
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;- &lt;&#x2F;span&gt;&lt;span&gt;ZIO.foreachPar(ids) { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;model &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span&gt; loader.loadCodegenModel(id).mapError(ReflectionError)
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span&gt; generator.generateServiceCode(id, model).mapError(GeneratorError)
&lt;&#x2F;span&gt;&lt;span&gt;    } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;yield &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span&gt; generator.generateBuildSbt(ids).mapError(GeneratorError)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span&gt; generator.copyCoreProject().mapError(GeneratorError)
&lt;&#x2F;span&gt;&lt;span&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;yield &lt;&#x2F;span&gt;&lt;span&gt;ExitCode.success
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;cfg &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; config.fromArgsWithUsageInfo(args, Parameters.spec).mapError(ParserError)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;modules &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; loader.live ++ (cfg &amp;gt;+&amp;gt; generator.live)
&lt;&#x2F;span&gt;&lt;span&gt;app.provideCustomLayer(modules)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Then created a &lt;em&gt;multi-module&lt;&#x2F;em&gt; &lt;code&gt;sbt&lt;&#x2F;code&gt; project with the following modules:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;zio-aws-codegen&lt;&#x2F;code&gt; the CLI code generator we were talking about so far&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;zio-aws-core&lt;&#x2F;code&gt; holding the common part of all AWS service wrapper libraries. This contains things like how to translate AWS pagination into &lt;code&gt;ZStream&lt;&#x2F;code&gt; etc.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;zio-aws-akka-http&lt;&#x2F;code&gt;, &lt;code&gt;zio-aws-http4s&lt;&#x2F;code&gt; and &lt;code&gt;zio-aws-netty&lt;&#x2F;code&gt; are the supported &lt;em&gt;HTTP layers&lt;&#x2F;em&gt;, all depend on &lt;code&gt;zio-aws-core&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;I also created a first &lt;em&gt;example&lt;&#x2F;em&gt; project in a separate &lt;code&gt;sbt&lt;&#x2F;code&gt; project, that demonstrated the use of some of the generated AWS client libraries. With this primitive setup, building everything from scratch and running the example took the following steps:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;sbt compile&lt;&#x2F;code&gt; the root project&lt;&#x2F;li&gt;
&lt;li&gt;manually running &lt;code&gt;zio-aws-codegen&lt;&#x2F;code&gt; to generate &lt;em&gt;all client libs at once&lt;&#x2F;em&gt; to a separate directory, with a corresponding &lt;code&gt;build.sbt&lt;&#x2F;code&gt; including all these projects in a single &lt;code&gt;sbt&lt;&#x2F;code&gt; project&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;sbt publishLocal&lt;&#x2F;code&gt; in the generated &lt;code&gt;sbt&lt;&#x2F;code&gt; project&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;sbt run&lt;&#x2F;code&gt; in the &lt;em&gt;examples&lt;&#x2F;em&gt; project&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;For the second, manual step I created some &lt;em&gt;custom sbt tasks&lt;&#x2F;em&gt; called &lt;code&gt;generateAll&lt;&#x2F;code&gt;, &lt;code&gt;buildAll&lt;&#x2F;code&gt;, and &lt;code&gt;publishLocalAll&lt;&#x2F;code&gt;, that downloaded an &lt;code&gt;sbt-launch-*.jar&lt;&#x2F;code&gt; and used it to run the code generator and fork an &lt;code&gt;sbt&lt;&#x2F;code&gt; to build the generated project.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;code&gt;generateAll&lt;&#x2F;code&gt; task was quite simple:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span&gt;generateAll := Def.taskDyn {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;root &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; baseDirectory.value.getAbsolutePath
&lt;&#x2F;span&gt;&lt;span&gt;  Def.task {
&lt;&#x2F;span&gt;&lt;span&gt;    (codegen &#x2F; Compile &#x2F; run).toTask(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot; --target-root ${&lt;&#x2F;span&gt;&lt;span&gt;root&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;}&#x2F;generated --source-root ${&lt;&#x2F;span&gt;&lt;span&gt;root&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;} --version &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;$zioAwsVersion&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt; --zio-version &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;$zioVersion&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt; --zio-rs-version &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;$zioReactiveStreamsInteropVersion&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;).value
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}.value
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Launching a second &lt;code&gt;sbt&lt;&#x2F;code&gt; took more effort:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span&gt;buildAll := Def.taskDyn {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; generateAll.value
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;generatedRoot &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; baseDirectory.value &#x2F; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;generated&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;launcherVersion &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; sbtVersion.value
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;launcher &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;sbt-launch-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;$launcherVersion&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;.jar&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;launcherFile &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; generatedRoot &#x2F; launcher
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  Def.task[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Unit&lt;&#x2F;span&gt;&lt;span&gt;] {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(!launcherFile.exists) {
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;u &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; url(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;https:&#x2F;&#x2F;oss.sonatype.org&#x2F;content&#x2F;repositories&#x2F;public&#x2F;org&#x2F;scala-sbt&#x2F;sbt-launch&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;$launcherVersion&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&#x2F;sbt-launch-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;$launcherVersion&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;.jar&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;      sbt.io.Using.urlInputStream(u) { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;inputStream &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        IO.transfer(inputStream, launcherFile)
&lt;&#x2F;span&gt;&lt;span&gt;      }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;fork &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ForkRun&lt;&#x2F;span&gt;&lt;span&gt;(ForkOptions()
&lt;&#x2F;span&gt;&lt;span&gt;      .withWorkingDirectory(generatedRoot))
&lt;&#x2F;span&gt;&lt;span&gt;    fork.run(
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;xsbt.boot.Boot&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;      classpath &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; launcherFile :: Nil,
&lt;&#x2F;span&gt;&lt;span&gt;      options &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;compile&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt; :: Nil,
&lt;&#x2F;span&gt;&lt;span&gt;      log &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; streams.value.log
&lt;&#x2F;span&gt;&lt;span&gt;    )
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}.value
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;With these extra tasks, I released the first version of the library manually, but there was a lot of annoying difficulties:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Having to switch between various &lt;code&gt;sbt&lt;&#x2F;code&gt; projects&lt;&#x2F;li&gt;
&lt;li&gt;The need to &lt;code&gt;publishLocal&lt;&#x2F;code&gt; the generated artifacts in order to build the examples, or any kind of integration tests that I planned to add&lt;&#x2F;li&gt;
&lt;li&gt;The only way to build only those client libraries that are needed for the examples&#x2F;tests was to build and publish them manually, as this dependency was not tracked at all between the unrelated &lt;code&gt;sbt&lt;&#x2F;code&gt; projects&lt;&#x2F;li&gt;
&lt;li&gt;Because the generated &lt;code&gt;sbt&lt;&#x2F;code&gt; project could not refer to the outer &lt;code&gt;zio-aws-core&lt;&#x2F;code&gt; project, it has to be copied into the generated project in the code generator step&lt;&#x2F;li&gt;
&lt;li&gt;Building and publishing all the &lt;strong&gt;235&lt;&#x2F;strong&gt; projects at once required about &lt;strong&gt;16Gb&lt;&#x2F;strong&gt; memory and hours of compilation time. It was too big to run on any of the (freely available) CI systems.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;proper-solution&quot;&gt;Proper solution&lt;&#x2F;h3&gt;
&lt;p&gt;When I mentioned this, &lt;em&gt;Itamar Ravid&lt;&#x2F;em&gt; recommended trying to make it an &lt;em&gt;sbt code generator&lt;&#x2F;em&gt;. &lt;code&gt;sbt&lt;&#x2F;code&gt; has built-in support for generating source code, as described &lt;a href=&quot;https:&#x2F;&#x2F;www.scala-sbt.org&#x2F;1.0&#x2F;docs&#x2F;Howto-Generating-Files.html&quot;&gt;on it&#x27;s documentation page&lt;&#x2F;a&gt;. This alone though would not be enough to cover our use case, as in &lt;code&gt;zio-aws&lt;&#x2F;code&gt; even the &lt;em&gt;set of projects&lt;&#x2F;em&gt; is dynamic and comes from the enumeration of schema models. Fortunately, there is support for that in too, through the &lt;code&gt;extraProjects&lt;&#x2F;code&gt; property of &lt;code&gt;sbt&lt;&#x2F;code&gt; &lt;em&gt;plugins&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;With these two tools, the new project layout became the following:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;zio-aws-codegen&lt;&#x2F;code&gt; is an sbt &lt;strong&gt;plugin&lt;&#x2F;strong&gt;, having it&#x27;s own &lt;code&gt;sbt&lt;&#x2F;code&gt; project in a subdirectory&lt;&#x2F;li&gt;
&lt;li&gt;the &lt;code&gt;zio-aws-core&lt;&#x2F;code&gt; and the HTTP libraries are all in the top-level project as before&lt;&#x2F;li&gt;
&lt;li&gt;examples and integration tests are also part of the top-level project&lt;&#x2F;li&gt;
&lt;li&gt;the &lt;code&gt;zio-aws-codegen&lt;&#x2F;code&gt; plugin is referenced using a &lt;code&gt;ProjectRef&lt;&#x2F;code&gt; from the outer project&lt;&#x2F;li&gt;
&lt;li&gt;the plugin adds all the &lt;em&gt;AWS service client wrapper libraries&lt;&#x2F;em&gt; to the top-level project&lt;&#x2F;li&gt;
&lt;li&gt;these projects generate their source on-demand&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;In this setup, it is possible to build any subset of the generated libraries without the need to process and compile all of them, so it needs much less memory. It is also much simpler to run tests or build examples on top of them, as the test and example projects can directly depend on the generated libraries as &lt;code&gt;sbt&lt;&#x2F;code&gt; submodules. And even developing the &lt;em&gt;code generator&lt;&#x2F;em&gt; itself is convenient - although for editing it, it has to be opened as in a separate IDE session, but otherwise, &lt;code&gt;sbt reload&lt;&#x2F;code&gt; on the top level project automatically recompiles the plugin when needed.&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s see piece by piece how we can achieve this!&lt;&#x2F;p&gt;
&lt;h4 id=&quot;project-as-a-source-dependency&quot;&gt;Project as a source dependency&lt;&#x2F;h4&gt;
&lt;p&gt;The first thing I wanted to do is having the &lt;code&gt;zio-aws-codegen&lt;&#x2F;code&gt; project converted to an &lt;code&gt;sbt&lt;&#x2F;code&gt; plugin, but still having it in the same repository and be able to use it without having to install to a local repository. Although the whole code generator code could have been added to the top level &lt;code&gt;sbt&lt;&#x2F;code&gt; project&#x27;s &lt;code&gt;project&lt;&#x2F;code&gt; source, I wanted to keep it as a separate module to be able to publish it as a library or a CLI tool in the future if needed.&lt;&#x2F;p&gt;
&lt;p&gt;This can be achieved by putting it in a subdirectory of the top level project, with a separate &lt;code&gt;build.sbt&lt;&#x2F;code&gt; that contains the&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span&gt;sbtPlugin := &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;true
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;(beside the usual ones). Then it can be referenced in the top level project&#x27;s &lt;code&gt;project&#x2F;plugins.sbt&lt;&#x2F;code&gt; in the following way:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;lazy val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;codegen &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; project
&lt;&#x2F;span&gt;&lt;span&gt;  .in(file(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;.&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;  .dependsOn(ProjectRef(file(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;..&#x2F;zio-aws-codegen&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;zio-aws-codegen&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;and enabled in the &lt;code&gt;build.sbt&lt;&#x2F;code&gt; as&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span&gt;enablePlugins(ZioAwsCodegenPlugin)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;dynamically-generating-projects&quot;&gt;Dynamically generating projects&lt;&#x2F;h4&gt;
&lt;p&gt;To generate the subprojects dynamically, we need the &lt;code&gt;Set[ModelId]&lt;&#x2F;code&gt; coming from the &lt;code&gt;loader&lt;&#x2F;code&gt; module. It is a &lt;code&gt;ZIO&lt;&#x2F;code&gt; module, so from the &lt;code&gt;sbt&lt;&#x2F;code&gt; plugin we have to use &lt;code&gt;Runtime.default.unsafeRun&lt;&#x2F;code&gt; to execute it.&lt;&#x2F;p&gt;
&lt;p&gt;As the code generator project is now an &lt;code&gt;sbt&lt;&#x2F;code&gt; plugin, all the &lt;code&gt;sbt&lt;&#x2F;code&gt; data structures are directly available, so we can just write a function that maps the &lt;code&gt;ModelId&lt;&#x2F;code&gt;s to &lt;code&gt;Project&lt;&#x2F;code&gt;s:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;protected def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;generateSbtSubprojects&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;ids&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Set&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ModelId&lt;&#x2F;span&gt;&lt;span&gt;]): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Seq&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Project&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= ???
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;One interesting part here is that some of the subprojects are depending on each other. This happens with AWS service &lt;em&gt;submodules&lt;&#x2F;em&gt;, indicated by the second parameter of &lt;code&gt;ModelId&lt;&#x2F;code&gt;. An example is &lt;code&gt;dynamodbstreams&lt;&#x2F;code&gt; that depends on &lt;code&gt;dynamodb&lt;&#x2F;code&gt;. When creating the &lt;code&gt;Project&lt;&#x2F;code&gt; values, we have to be able to &lt;code&gt;dependOn&lt;&#x2F;code&gt; on some other already generated projects, and they have to be generated in the correct order to do so.&lt;&#x2F;p&gt;
&lt;p&gt;We could do a full topological sort, but it is not necessary, here we know that the maximum depth of dependencies is 1, so it is enough to put the submodules at the end of the sequence:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;map &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; ids
&lt;&#x2F;span&gt;&lt;span&gt;  .toSeq
&lt;&#x2F;span&gt;&lt;span&gt;  .sortWith { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;aIsDependent &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; a.subModuleName &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;match &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span&gt;Some(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;!=&lt;&#x2F;span&gt;&lt;span&gt; a.name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;true
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;false
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;bIsDependent &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; b.subModuleName &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;match &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span&gt;Some(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;!=&lt;&#x2F;span&gt;&lt;span&gt; b.name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;true
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;false
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    bIsDependent || (!aIsDependent &amp;amp;&amp;amp; a.toString &amp;lt; b.toString)
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Then in order to be able get the dependencies, we do a &lt;em&gt;fold&lt;&#x2F;em&gt; on the ordered &lt;code&gt;ModelId&lt;&#x2F;code&gt;s:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span&gt;  .foldLeft(Map.empty[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ModelId&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Project&lt;&#x2F;span&gt;&lt;span&gt;]) { (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;mapping&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;deps &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; id.subModule &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;match &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span&gt;Some(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;!=&lt;&#x2F;span&gt;&lt;span&gt; id.name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;          Seq(ClasspathDependency(LocalProject(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;zio-aws-core&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;), None),
&lt;&#x2F;span&gt;&lt;span&gt;              ClasspathDependency(mapping(ModelId(id.name, Some(id.name))), None))
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;          Seq(ClasspathDependency(LocalProject(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;zio-aws-core&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;), None))
&lt;&#x2F;span&gt;&lt;span&gt;      }      
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;project &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;Project(fullName, file(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;generated&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;) &#x2F; name)
&lt;&#x2F;span&gt;&lt;span&gt;        .settings(
&lt;&#x2F;span&gt;&lt;span&gt;          libraryDependencies += &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;software.amazon.awssdk&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt; % id.name % awsLibraryVersion.value,
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;        .dependsOn(deps: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;_*&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;      mapping.updated(id, project)
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;To make it easier to work with the generated projects, we also create a project named &lt;code&gt;all&lt;&#x2F;code&gt; that aggregates all the ones generated above.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;applying-settings-to-the-generated-projects&quot;&gt;Applying settings to the generated projects&lt;&#x2F;h4&gt;
&lt;p&gt;The code generator only sets the basic settings for the generated projects: name, path and dependencies. We need a lot more, setting organization and version, all the publishing options, controlling the Scala version, etc.&lt;&#x2F;p&gt;
&lt;p&gt;I decided to keep these settings outside of the code generator plugin, in the top-level &lt;code&gt;sbt&lt;&#x2F;code&gt; project. By creating an &lt;code&gt;AutoPlugin&lt;&#x2F;code&gt; end enabling it for all projects, we can inject all the common settings for both the hand-written and the generated projects:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;object&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; Common &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span&gt;AutoPlugin &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;object&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; autoImport {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;scala212Version &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;2.12.12&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;scala213Version &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;2.13.3&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;import&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; autoImport.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;override val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;trigger &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; allRequirements
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;override val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;requires &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Sonatype
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;override lazy val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;projectSettings &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    Seq(
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;      scalaVersion := scala213Version,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;      crossScalaVersions := List(scala212Version, scala213Version),
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    )
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;source-generator-task&quot;&gt;Source generator task&lt;&#x2F;h4&gt;
&lt;p&gt;At this point, we could also add the already existing &lt;em&gt;source code generation&lt;&#x2F;em&gt; to the initialization of the plugin, and just generate all the subproject&#x27;s all source files every time the &lt;code&gt;sbt&lt;&#x2F;code&gt; project is loaded. With this number of generated projects though, it would have been a very big startup overhead and would not allow us to split the build (at least not the code generation part) on CI, to solve the memory and build time issues.&lt;&#x2F;p&gt;
&lt;p&gt;As &lt;code&gt;sbt&lt;&#x2F;code&gt; has built-in support for defining &lt;em&gt;source generator tasks&lt;&#x2F;em&gt;, we can do much better!&lt;&#x2F;p&gt;
&lt;p&gt;Instead of generating the source codes in one step, we define a &lt;code&gt;generateSources&lt;&#x2F;code&gt; task and add it to each &lt;em&gt;generated subproject&lt;&#x2F;em&gt; as a &lt;em&gt;source generator&lt;&#x2F;em&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span&gt;Compile &#x2F; sourceGenerators += generateSources.taskValue,
&lt;&#x2F;span&gt;&lt;span&gt;awsLibraryId := id.toString
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;code&gt;awsLibraryId&lt;&#x2F;code&gt; is a custom property that we the &lt;code&gt;generateSources&lt;&#x2F;code&gt; task can use to determine which schema to use for the code generation.&lt;&#x2F;p&gt;
&lt;p&gt;The first part of this task is to gather the information from the project it got applied on, including the custom &lt;code&gt;awsLibraryId&lt;&#x2F;code&gt; property:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;lazy val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;generateSources &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span&gt;  Def.task {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;log &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; streams.value.log
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;idStr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; awsLibraryId.value
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;ModelId.parse(idStr) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;match &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span&gt;Left(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;failure&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; sys.error(failure)
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span&gt;Right(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; value
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;targetRoot &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;(sourceManaged in Compile).value
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;travisSrc &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; travisSource.value
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;travisDst &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; travisTarget.value
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;parallelJobs &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; travisParallelJobs.value
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;From these, we create a &lt;code&gt;Parameters&lt;&#x2F;code&gt; data structure to pass to the &lt;code&gt;generator&lt;&#x2F;code&gt; module. This is what we used to construct with &lt;code&gt;clipp&lt;&#x2F;code&gt; from CLI arguments:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;params &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;Parameters(
&lt;&#x2F;span&gt;&lt;span&gt;      targetRoot &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;Path.fromJava(targetRoot.toPath),
&lt;&#x2F;span&gt;&lt;span&gt;      travisSource &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;Path.fromJava(travisSrc.toPath),
&lt;&#x2F;span&gt;&lt;span&gt;      travisTarget &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;Path.fromJava(travisDst.toPath),
&lt;&#x2F;span&gt;&lt;span&gt;      parallelTravisJobs &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; parallelJobs
&lt;&#x2F;span&gt;&lt;span&gt;    )
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And finally, construct the &lt;code&gt;ZIO&lt;&#x2F;code&gt; environment, load a &lt;strong&gt;single&lt;&#x2F;strong&gt; schema model, and generate the library&#x27;s source code:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span&gt;    zio.Runtime.default.unsafeRun {
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;cfg &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;ZLayer.succeed(params)
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;env &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; loader.live ++ (cfg &amp;gt;+&amp;gt; generator.live)
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;task &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;- &lt;&#x2F;span&gt;&lt;span&gt;ZIO.effect(log.info(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;Generating sources for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;$id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;model &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span&gt; loader.loadCodegenModel(id)
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;files &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span&gt; generator.generateServiceCode(id, model)
&lt;&#x2F;span&gt;&lt;span&gt;        } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;yield&lt;&#x2F;span&gt;&lt;span&gt; files.toSeq
&lt;&#x2F;span&gt;&lt;span&gt;      task.provideCustomLayer(env).catchAll { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;generatorError &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        ZIO.effect(log.error(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;Code generator failure: ${&lt;&#x2F;span&gt;&lt;span&gt;generatorError&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;}&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)).as(Seq.empty)
&lt;&#x2F;span&gt;&lt;span&gt;      }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;code&gt;generateServiceCode&lt;&#x2F;code&gt; function returns a &lt;code&gt;Set[File]&lt;&#x2F;code&gt; value containing all the generated source files. This is the result of the &lt;em&gt;source generator task&lt;&#x2F;em&gt;, and &lt;code&gt;sbt&lt;&#x2F;code&gt; uses this information to add the generated files to the compilation.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;referencing-the-generated-projects&quot;&gt;Referencing the generated projects&lt;&#x2F;h4&gt;
&lt;p&gt;When defining downstream projects in the &lt;code&gt;build.sbt&lt;&#x2F;code&gt;, such as integration tests and other examples, we have to refer to the generated projects somehow. There is no value of type &lt;code&gt;Project&lt;&#x2F;code&gt; in scope to do so, but we can do it easily by name using &lt;code&gt;LocalProject&lt;&#x2F;code&gt;. The following example shows how the &lt;code&gt;example1&lt;&#x2F;code&gt; subproject does this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;lazy val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;example1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;Project(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;example1&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, file(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;examples&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;) &#x2F; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;example1&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  .dependsOn(
&lt;&#x2F;span&gt;&lt;span&gt;    core,
&lt;&#x2F;span&gt;&lt;span&gt;    http4s,
&lt;&#x2F;span&gt;&lt;span&gt;    netty,
&lt;&#x2F;span&gt;&lt;span&gt;    LocalProject(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;zio-aws-elasticbeanstalk&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;    LocalProject(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;zio-aws-ec2&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  )
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;parallel-build-on-travis-ci&quot;&gt;Parallel build on Travis CI&lt;&#x2F;h4&gt;
&lt;p&gt;The last thing that I wanted to solve is building the full &lt;code&gt;zio-aws&lt;&#x2F;code&gt; suite on a CI. I am using &lt;a href=&quot;https:&#x2F;&#x2F;travis-ci.org&#x2F;&quot;&gt;Travis CI&lt;&#x2F;a&gt; for my private projects, so that&#x27;s what I built it for. The idea is to split the set of &lt;em&gt;service client libraries&lt;&#x2F;em&gt; to chunks and create &lt;a href=&quot;https:&#x2F;&#x2F;docs.travis-ci.com&#x2F;user&#x2F;build-matrix&#x2F;&quot;&gt;build matrix&lt;&#x2F;a&gt; to run those in parallel. The tricky part is that the set of generated service libraries is dynamic, collected by the code generator.&lt;&#x2F;p&gt;
&lt;p&gt;To solve this, I started to generate the &lt;code&gt;.travis.yml&lt;&#x2F;code&gt;  build descriptor as well. The &lt;em&gt;hand-written&lt;&#x2F;em&gt; part has been moved to &lt;code&gt;.travis.base.yml&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;language&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;scala
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;services&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;docker
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;scala&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;2.12.12
&lt;&#x2F;span&gt;&lt;span&gt;  - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;2.13.3
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;cache&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;directories&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;$HOME&#x2F;.cache&#x2F;coursier
&lt;&#x2F;span&gt;&lt;span&gt;    - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;$HOME&#x2F;.ivy2&#x2F;cache
&lt;&#x2F;span&gt;&lt;span&gt;    - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;$HOME&#x2F;.sbt
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;env&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;COMMANDS=&amp;quot;clean zio-aws-core&#x2F;test zio-aws-akka-http&#x2F;test zio-aws-http4s&#x2F;test zio-aws-netty&#x2F;test&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;COMMANDS=&amp;quot;clean examples&#x2F;compile&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;COMMANDS=&amp;quot;clean integtests&#x2F;test&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;before_install&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;if [ &amp;quot;$COMMANDS&amp;quot; = &amp;quot;clean integtests&#x2F;test&amp;quot; ]; then docker pull localstack&#x2F;localstack; fi
&lt;&#x2F;span&gt;&lt;span&gt;  - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;if [ &amp;quot;$COMMANDS&amp;quot; = &amp;quot;clean integtests&#x2F;test&amp;quot; ]; then docker run -d -p 4566:4566 --env SERVICES=s3,dynamodb --env START_WEB=0 localstack&#x2F;localstack; fi
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;script&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;sbt ++$TRAVIS_SCALA_VERSION -jvm-opts travis&#x2F;jvmopts $COMMANDS
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I use the &lt;code&gt;COMMANDS&lt;&#x2F;code&gt; environment variable to define the parallel sets of &lt;code&gt;sbt&lt;&#x2F;code&gt; commands here. There are three predefined sets: building &lt;code&gt;zio-aws-core&lt;&#x2F;code&gt; and the HTTP implementations, building the &lt;em&gt;example projects&lt;&#x2F;em&gt; and running the &lt;em&gt;integration test&lt;&#x2F;em&gt;. The last two involve generating actual service client code and building them - but only the few that are necessary, so it is not an issue to do that redundantly.&lt;&#x2F;p&gt;
&lt;p&gt;The real &lt;code&gt;.travis.yml&lt;&#x2F;code&gt; file is then generated by running a task &lt;em&gt;manually&lt;&#x2F;em&gt;, &lt;code&gt;sbt generateTravisYaml&lt;&#x2F;code&gt;. It is implemented in the &lt;code&gt;zio-aws-codegen&lt;&#x2F;code&gt; plugin and it loads the &lt;code&gt;.travis.base.yml&lt;&#x2F;code&gt; file and extends the &lt;code&gt;env&lt;&#x2F;code&gt; section with a set of &lt;code&gt;COMMANDS&lt;&#x2F;code&gt; variants, each compiling a subset of the generated subprojects.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;Travis CI can now build &lt;code&gt;zio-aws&lt;&#x2F;code&gt; and run its integration tests. A build runs for hours, but it is stable, and consists of 22 parallel jobs to build all the libraries for both Scala 2.12 and 2.13. At the same time, developing the code generator and the other subprojects and tests became really convenient.&lt;&#x2F;p&gt;
</content>
        
    </entry>
</feed>
