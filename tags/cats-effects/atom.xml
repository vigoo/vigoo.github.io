<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <title>vigoo&#x27;s software development blog - cats effects</title>
    <link rel="self" type="application/atom+xml" href="https://blog.vigoo.dev/tags/cats-effects/atom.xml"/>
    <link rel="alternate" type="text/html" href="https://blog.vigoo.dev"/>
    <generator uri="https://www.getzola.org/">Zola</generator>
    <updated>2019-08-13T00:00:00+00:00</updated>
    <id>https://blog.vigoo.dev/tags/cats-effects/atom.xml</id>
    <entry xml:lang="en">
        <title>prox part 3 - effect abstraction and ZIO</title>
        <published>2019-08-13T00:00:00+00:00</published>
        <updated>2019-08-13T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Daniel Vigovszky
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://blog.vigoo.dev/posts/prox-3-zio/"/>
        <id>https://blog.vigoo.dev/posts/prox-3-zio/</id>
        
        <content type="html" xml:base="https://blog.vigoo.dev/posts/prox-3-zio/">&lt;h2 id=&quot;blog-post-series&quot;&gt;Blog post series&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;blog.vigoo.dev&#x2F;posts&#x2F;prox-1-types&#x2F;&quot;&gt;Part 1 - type level programming&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;blog.vigoo.dev&#x2F;posts&#x2F;prox-2-io-akkastreams&#x2F;&quot;&gt;Part 2 - akka streams with cats effect&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;blog.vigoo.dev&#x2F;posts&#x2F;prox-3-zio&#x2F;&quot;&gt;Part 3 - effect abstraction and ZIO&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;blog.vigoo.dev&#x2F;posts&#x2F;prox-4-simplify&#x2F;&quot;&gt;Part 4 - simplified redesign&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;intro&quot;&gt;Intro&lt;&#x2F;h2&gt;
&lt;p&gt;The &lt;a href=&quot;https:&#x2F;&#x2F;blog.vigoo.dev&#x2F;posts&#x2F;prox-3-zio&#x2F;2019-02-10-prox-1-types.html&quot;&gt;first post&lt;&#x2F;a&gt; introduced the &lt;em&gt;prox library&lt;&#x2F;em&gt; and demonstrated the advanced type level programming techniques it uses. Then in the &lt;a href=&quot;https:&#x2F;&#x2F;blog.vigoo.dev&#x2F;posts&#x2F;prox-3-zio&#x2F;2019-03-07-prox-2-io-akkastreams.html&quot;&gt;second part&lt;&#x2F;a&gt; of this series we experimented with replacing the &lt;em&gt;streaming library&lt;&#x2F;em&gt; from &lt;a href=&quot;https:&#x2F;&#x2F;fs2.io&#x2F;&quot;&gt;fs2&lt;&#x2F;a&gt; to &lt;a href=&quot;https:&#x2F;&#x2F;doc.akka.io&#x2F;docs&#x2F;akka&#x2F;2.5&#x2F;stream&#x2F;&quot;&gt;Akka Streams&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;In both cases the library used &lt;a href=&quot;https:&#x2F;&#x2F;typelevel.org&#x2F;cats-effect&#x2F;&quot;&gt;cats-effect&lt;&#x2F;a&gt; for describing side effects. But it did not really take advantage of &lt;em&gt;cats-effect&lt;&#x2F;em&gt;&#x27;s effect abstraction: it explicitly defined everything to be a computation in &lt;a href=&quot;https:&#x2F;&#x2F;typelevel.org&#x2F;cats-effect&#x2F;datatypes&#x2F;io.html&quot;&gt;&lt;code&gt;IO&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;, cats-effect&#x27;s implementation of describing effectful computations.&lt;&#x2F;p&gt;
&lt;p&gt;But we can do better! By not relying on &lt;code&gt;IO&lt;&#x2F;code&gt; but the various type classes the &lt;em&gt;cats-effect&lt;&#x2F;em&gt; library provides we can make &lt;em&gt;prox&lt;&#x2F;em&gt; work with any kind of effect library out of the box. One such example is &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;zio&#x2F;zio&quot;&gt;ZIO&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;effect-abstraction&quot;&gt;Effect abstraction&lt;&#x2F;h2&gt;
&lt;p&gt;Let&#x27;s see an example of how &lt;code&gt;IO&lt;&#x2F;code&gt; used to be used in the library! The following function is in the &lt;code&gt;Start&lt;&#x2F;code&gt; type class, and it starts a process or piped process group:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;apply&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;process&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;PN&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;dontStartOutput&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Boolean = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;blocker&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Blocker&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;         (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;implicit &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;contextShift&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ContextShift&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;IO&lt;&#x2F;span&gt;&lt;span&gt;]): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;IO&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RunningProcesses&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We can observe two things here:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;The function returns an effectful computation in &lt;code&gt;IO&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;An implicit &lt;em&gt;context shifter&lt;&#x2F;em&gt; is needed by the implementations which are calling some streaming functions needing it.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;To make it independent of the effect library implementation we have to get rid of &lt;code&gt;IO&lt;&#x2F;code&gt; and use a generic type instead, let&#x27;s call it &lt;code&gt;F&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;apply&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;process&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;PN&lt;&#x2F;span&gt;&lt;span&gt;, 
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;dontStartOutput&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Boolean = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;, 
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;blocker&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Blocker&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;         (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;implicit
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;concurrent&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Concurrent&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;F&lt;&#x2F;span&gt;&lt;span&gt;],
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;contextShift&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ContextShift&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;F&lt;&#x2F;span&gt;&lt;span&gt;]): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;F&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RunningProcesses&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Beside using &lt;code&gt;F&lt;&#x2F;code&gt; instead of &lt;code&gt;IO&lt;&#x2F;code&gt; everywhere we also have a new requirement, our context type (&lt;code&gt;F&lt;&#x2F;code&gt;) have to have an implementation of the &lt;a href=&quot;https:&#x2F;&#x2F;typelevel.org&#x2F;cats-effect&#x2F;typeclasses&#x2F;concurrent.html&quot;&gt;&lt;code&gt;Concurrent&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; type class.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;Cats-effect&lt;&#x2F;em&gt; defines a hierarchy of type classes to deal with effectful computations. At the time of writing it looks like this:
&lt;img src=&quot;https:&#x2F;&#x2F;typelevel.org&#x2F;cats-effect&#x2F;img&#x2F;cats-effect-typeclasses.svg&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Read the &lt;a href=&quot;https:&#x2F;&#x2F;typelevel.org&#x2F;cats-effect&#x2F;typeclasses&#x2F;&quot;&gt;official documentation&lt;&#x2F;a&gt; for more information.&lt;&#x2F;p&gt;
&lt;p&gt;Prox is based on the &lt;code&gt;ProcessNode&lt;&#x2F;code&gt; type which has two implementations, a single &lt;code&gt;Process&lt;&#x2F;code&gt; or a set of processes piped together to a &lt;code&gt;PipedProcess&lt;&#x2F;code&gt;. Because these types store their I&#x2F;O redirection within themselves, they also have to be enriched with a context type parameter.&lt;&#x2F;p&gt;
&lt;p&gt;For example &lt;code&gt;Process&lt;&#x2F;code&gt; will look like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; Process&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;F&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Out&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Err&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;OutResult&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ErrResult&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;IRS &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RedirectionState&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ORS &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RedirectionState&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ERS &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RedirectionState&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;command&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;arguments&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;],
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;workingDirectory&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Path&lt;&#x2F;span&gt;&lt;span&gt;],
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;inputSource&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ProcessInputSource&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;F&lt;&#x2F;span&gt;&lt;span&gt;],
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;outputTarget&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ProcessOutputTarget&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;F&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Out&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;OutResult&lt;&#x2F;span&gt;&lt;span&gt;],
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;errorTarget&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ProcessErrorTarget&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;F&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Err&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ErrResult&lt;&#x2F;span&gt;&lt;span&gt;],
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;environmentVariables&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Map&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;],
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;removedEnvironmentVariables&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Set&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;])
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span&gt;ProcessNode[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Out&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Err&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;IRS&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ORS&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ERS&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The context parameter (&lt;code&gt;F&lt;&#x2F;code&gt;) is needed because the &lt;em&gt;input source&lt;&#x2F;em&gt; and &lt;em&gt;output target&lt;&#x2F;em&gt; are all representing effectful code such as writing to the standard output, reading from a file, or passing data through concurrent streams.&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s see some examples of how the abstract types of &lt;em&gt;cats-effect&lt;&#x2F;em&gt; can be used to describe the computation, when we cannot rely on &lt;code&gt;IO&lt;&#x2F;code&gt; itself!&lt;&#x2F;p&gt;
&lt;p&gt;The most basic operation is to &lt;em&gt;delay the execution&lt;&#x2F;em&gt; of some code that does not use the effect abstractions. This is how we wrap the Java process API, for example.&lt;&#x2F;p&gt;
&lt;p&gt;While with the original implementation of &lt;em&gt;prox&lt;&#x2F;em&gt; it was done by using the &lt;code&gt;IO&lt;&#x2F;code&gt; constructor:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span&gt;IO {
&lt;&#x2F;span&gt;&lt;span&gt;    systemProcess.isAlive
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;with an arbitrary &lt;code&gt;F&lt;&#x2F;code&gt; we only need to require that it has an implementation of the &lt;code&gt;Sync&lt;&#x2F;code&gt; type class:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;private class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; WrappedProcess&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;F&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Sync&lt;&#x2F;span&gt;&lt;span&gt;,  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;and then use the &lt;code&gt;delay&lt;&#x2F;code&gt; function:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span&gt;Sync[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;F&lt;&#x2F;span&gt;&lt;span&gt;].delay {
&lt;&#x2F;span&gt;&lt;span&gt;    systemProcess.isAlive
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Similarily the &lt;code&gt;Concurrent&lt;&#x2F;code&gt; type class can be used to start a concurrent computation on a &lt;em&gt;fiber&lt;&#x2F;em&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span&gt;Concurrent[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;F&lt;&#x2F;span&gt;&lt;span&gt;].start(stream.compile.toVector)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;type-level&quot;&gt;Type level&lt;&#x2F;h2&gt;
&lt;p&gt;This would be it - except that we need one more thing because of the type level techniques described in the &lt;a href=&quot;https:&#x2F;&#x2F;blog.vigoo.dev&#x2F;posts&#x2F;prox-3-zio&#x2F;2019-02-10-prox-1-types.html&quot;&gt;first post&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;To understand the problem, let&#x27;s see how the &lt;em&gt;output redirection&lt;&#x2F;em&gt; operator works. It is implemented as an &lt;em&gt;extension method&lt;&#x2F;em&gt; on the &lt;code&gt;ProcessNode&lt;&#x2F;code&gt; type:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;implicit class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; ProcessNodeOutputRedirect&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;PN &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ProcessNode&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;NotRedirected&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;]](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;processNode&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;PN&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;[F[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;], To, NewOut, NewOutResult, Result &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ProcessNode[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;, Redirected, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;]]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;to&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: To)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;implicit
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;target&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: CanBeProcessOutputTarget.Aux[F, To, NewOut, NewOutResult],
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;redirectOutput&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: RedirectOutput.Aux[F, PN, To, NewOut, NewOutResult, Result]): Result &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;      redirectOutput(processNode, to)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This extension method basically just finds the appropriate type class implementations and then call it to alter the process node to register the output redirection:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;we are redirecting the output of &lt;code&gt;processNode&lt;&#x2F;code&gt; (of type &lt;code&gt;PN&lt;&#x2F;code&gt;) to &lt;code&gt;to&lt;&#x2F;code&gt; (of type &lt;code&gt;To&lt;&#x2F;code&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;target&lt;&#x2F;code&gt; is the &lt;code&gt;CanBeProcessOutputTarget&lt;&#x2F;code&gt; implementation, containing the actual code to set up the redirection&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;redirectOutput&lt;&#x2F;code&gt; is the process node type specific implementation of the &lt;code&gt;RedirectOutput&lt;&#x2F;code&gt; interface, knowing how to set up the redirection of a &lt;code&gt;Process&lt;&#x2F;code&gt; or a &lt;code&gt;PipedProcess&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;This code would compile, but we won&#x27;t be able to use it. For example for the following code:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span&gt;running &amp;lt;- (Process[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;IO&lt;&#x2F;span&gt;&lt;span&gt;](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;echo&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, List(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;Hello world!&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)) &amp;gt; tempFile.toPath).start(blocker)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;It fails with not being able to resolve the implicits correctly. The exact error of course depends much on the context but one example for the above line could be:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#383a42;&quot;&gt;&lt;code&gt;&lt;span&gt;[error] prox&#x2F;src&#x2F;test&#x2F;scala&#x2F;io&#x2F;github&#x2F;vigoo&#x2F;prox&#x2F;ProcessSpecs.scala:95:63: diverging implicit expansion for type cats.effect.Concurrent[F]
&lt;&#x2F;span&gt;&lt;span&gt;[error] starting with method catsIorTConcurrent in object Concurrent
&lt;&#x2F;span&gt;&lt;span&gt;[error]         running &amp;lt;- (Process[IO](&amp;quot;echo&amp;quot;, List(&amp;quot;Hello world!&amp;quot;)) &amp;gt; tempFile.toPath).start(blocker)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This does not really help understanding the real problem though. As we have seen earlier, in this library the &lt;code&gt;Process&lt;&#x2F;code&gt; types have to be parameterized with the context as well, because they store their redirection logic within themselves. That&#x27;s why we specify it explicitly in the example to be &lt;code&gt;IO&lt;&#x2F;code&gt;: &lt;code&gt;Process[IO](...)&lt;&#x2F;code&gt;. What we would expect is that by tying &lt;code&gt;F[_]&lt;&#x2F;code&gt; to &lt;code&gt;IO&lt;&#x2F;code&gt; at the beginning, all the subsequent operations such as the &lt;code&gt;&amp;gt;&lt;&#x2F;code&gt; redirection would respect this and the context gets inferred to be &lt;code&gt;IO&lt;&#x2F;code&gt; everywhere in the expression.&lt;&#x2F;p&gt;
&lt;p&gt;The compiler cannot do this. If we check the definition of &lt;code&gt;&amp;gt;&lt;&#x2F;code&gt; again, you can see that there is no connection expressed between the type &lt;code&gt;PN&lt;&#x2F;code&gt; (the actual process node type) and &lt;code&gt;F&lt;&#x2F;code&gt; which is used as a type parameter for the implicit parameters.&lt;&#x2F;p&gt;
&lt;p&gt;The fix is to link the two, and we have a technique exactly for this that I described earlier: the &lt;em&gt;aux pattern&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;First let&#x27;s write some code that, in compile time, can &quot;extract&quot; the context type from a process node type:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;trait&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; ContextOf&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;PN&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Context[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;object&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; ContextOf {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Aux[PN, F[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;]] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ContextOf[PN] {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Context[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;F[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;apply&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;[PN &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ProcessNode[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;], F[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;]](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;implicit &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;contextOf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: ContextOf.Aux[PN, F]): Aux[PN, F] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; contextOf
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;implicit def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;contextOfProcess&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;[F[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;], Out, Err, OutResult, ErrResult, IRS &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RedirectionState, ORS &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RedirectionState, ERS &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RedirectionState]:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  Aux[Process[F, Out, Err, OutResult, ErrResult, IRS, ORS, ERS], F] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ContextOf[Process[F, Out, Err, OutResult, ErrResult, IRS, ORS, ERS]] {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;override type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Context[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;F[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;implicit def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;contextOfPipedProcess&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;[
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  F[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;],
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  Out, Err,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  PN1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ProcessNode[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;],
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  PN2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ProcessNode[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;],
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  IRS &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RedirectionState, ORS &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RedirectionState, ERS &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RedirectionState]:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  Aux[PipedProcess[F, Out, Err, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Byte&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;, PN1, PN2, IRS, ORS, ERS], F] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ContextOf[PipedProcess[F, Out, Err, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Byte&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;, PN1, PN2, IRS, ORS, ERS]] {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;override type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Context[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;F[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Both &lt;code&gt;Process&lt;&#x2F;code&gt; and &lt;code&gt;PipedProcess&lt;&#x2F;code&gt; have the context as their first type parameter. By creating the &lt;code&gt;ContextOf&lt;&#x2F;code&gt; type class and the corresponding &lt;code&gt;Aux&lt;&#x2F;code&gt; type we can extend the &lt;code&gt;&amp;gt;&lt;&#x2F;code&gt; operator to &lt;em&gt;require&lt;&#x2F;em&gt; such a connection (a way to get a &lt;code&gt;F[_]&lt;&#x2F;code&gt; context out of a type &lt;code&gt;PN&lt;&#x2F;code&gt;) in compile time, and with the aux pattern it unifies the type parameters and the context type gets &lt;em&gt;chained&lt;&#x2F;em&gt; through all the subsequent calls as we desired:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;F&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;To&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;NewOut&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;NewOutResult&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Result &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ProcessNode&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Redirected&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;]]
&lt;&#x2F;span&gt;&lt;span&gt;    (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;to&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;To&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;implicit
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;contextOf&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ContextOf&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Aux&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;PN&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;F&lt;&#x2F;span&gt;&lt;span&gt;],
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;target&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;CanBeProcessOutputTarget&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Aux&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;F&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;To&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;NewOut&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;NewOutResult&lt;&#x2F;span&gt;&lt;span&gt;],
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;redirectOutput&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RedirectOutput&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Aux&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;F&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;PN&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;To&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;NewOut&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;NewOutResult&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Result&lt;&#x2F;span&gt;&lt;span&gt;]): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Result &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;      redirectOutput(processNode, to)
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;zio&quot;&gt;ZIO&lt;&#x2F;h2&gt;
&lt;p&gt;Now that everything is in place, we can try out whether &lt;em&gt;prox&lt;&#x2F;em&gt; is really working with other effect libraries such as &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;zio&#x2F;zio&quot;&gt;ZIO&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;ZIO&lt;&#x2F;em&gt; has a compatibility layer for &lt;em&gt;cats-effect&lt;&#x2F;em&gt;. It&#x27;s the implementation of the type classes cats-effect provides. It is in an extra library called &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;zio&#x2F;interop-cats&quot;&gt;zio-interop-cats&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;For running processes with &lt;em&gt;prox&lt;&#x2F;em&gt; we can use the following variants of the &lt;code&gt;ZIO&lt;&#x2F;code&gt; type:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;RIO[-R, +A]&lt;&#x2F;code&gt; which is an alias for &lt;code&gt;ZIO[R, scala.Throwable, A]&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;or &lt;code&gt;Task[A]&lt;&#x2F;code&gt; which is an alias for &lt;code&gt;ZIO[scala.Any, scala.Throwable, A]&lt;&#x2F;code&gt; if we don&#x27;t take advantage of the environment parameter &lt;code&gt;R&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;This in fact assuming the correct context only means switching &lt;code&gt;IO&lt;&#x2F;code&gt; to &lt;code&gt;RIO&lt;&#x2F;code&gt; or &lt;code&gt;Task&lt;&#x2F;code&gt; in the type parameter for &lt;code&gt;Process&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;import&lt;&#x2F;span&gt;&lt;span&gt; zio.interop.catz.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;Blocker[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RIO&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Console&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span&gt;]].use { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;blocker &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span&gt; console.putStrLn(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;Starting external process...&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;- &lt;&#x2F;span&gt;&lt;span&gt;(Process[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Task&lt;&#x2F;span&gt;&lt;span&gt;](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;echo&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, List(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;Hello world!&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)) &amp;gt; tempFile.toPath).start(blocker)
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;  } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;yield &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;A nice way to have everything set up for this is to use the interop library&#x27;s &lt;a href=&quot;https:&#x2F;&#x2F;zio.dev&#x2F;docs&#x2F;interop&#x2F;interop_catseffect#cats-app&quot;&gt;&lt;code&gt;CatsApp&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; trait as an entrypoint for the application.&lt;&#x2F;p&gt;
&lt;p&gt;This brings all the necessary implicits in scope and requires you to implement the following function as the entry point of the application:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;run&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;args&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;]): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ZIO&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Environment&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Nothing&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Int&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
        
    </entry>
</feed>
