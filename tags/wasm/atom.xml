<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <title>vigoo&#x27;s software development blog - wasm</title>
    <link rel="self" type="application/atom+xml" href="https://blog.vigoo.dev/tags/wasm/atom.xml"/>
    <link rel="alternate" type="text/html" href="https://blog.vigoo.dev"/>
    <generator uri="https://www.getzola.org/">Zola</generator>
    <updated>2025-09-19T00:00:00+00:00</updated>
    <id>https://blog.vigoo.dev/tags/wasm/atom.xml</id>
    <entry xml:lang="en">
        <title>Golem 1.3&#x27;s new JavaScript engine</title>
        <published>2025-09-19T00:00:00+00:00</published>
        <updated>2025-09-19T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Daniel Vigovszky
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://blog.vigoo.dev/posts/golem-new-js-engine/"/>
        <id>https://blog.vigoo.dev/posts/golem-new-js-engine/</id>
        
        <content type="html" xml:base="https://blog.vigoo.dev/posts/golem-new-js-engine/">&lt;p&gt;As we are rapidly approaching the release data for Golem 1.3, a major update, I&#x27;m going to publish a series of small posts talking about some of the technical details of this new release. In this first one, let&#x27;s talk about the &lt;em&gt;new JavaScript engine&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;javascript-support-in-previous-versions&quot;&gt;JavaScript support in previous versions&lt;&#x2F;h2&gt;
&lt;p&gt;In previous Golem versions we tried to support JavaScript (and TypeScript) using the &quot;official&quot; way of using these languages in the WASM Component Model: using the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bytecodealliance&#x2F;ComponentizeJS&quot;&gt;ComponentizeJs project&lt;&#x2F;a&gt;. This embeds a special version of the &lt;a href=&quot;https:&#x2F;&#x2F;spidermonkey.dev&quot;&gt;SpiderMonkey JS engine&lt;&#x2F;a&gt;, called StarlingMonkey in a WASM component together with the user&#x27;s JS code, and generates import and export bindings based on the component model interface definition (WIT). In addition to this, ComponentizeJs also does a &lt;em&gt;preinitialization step&lt;&#x2F;em&gt; - basically pre-running and snapshotting parts of the resulting component compile time to make the component&#x27;s initialization time quicker.&lt;&#x2F;p&gt;
&lt;p&gt;Although this all sounds very good, this project is still considered &lt;em&gt;experimental&lt;&#x2F;em&gt; and we ran into serious issues with it, especially around it&#x27;s implementation of &lt;code&gt;fetch&lt;&#x2F;code&gt; and async boundaries. We reported these issues, and also tried to fix some of them ourselves, but working on this project is extremely difficult and we did not reach a point where our users would be guaranteed to be able to build on top of these core JS APIs.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-new-engine&quot;&gt;The new engine&lt;&#x2F;h2&gt;
&lt;p&gt;Instead trying to fix ComponentizeJs or waiting for others to do so, we decided to try to &lt;em&gt;replace it&lt;&#x2F;em&gt; for the next Golem release. This worked out so well that we were able to refocus our language support to be primarily TypeScript for the next release.&lt;&#x2F;p&gt;
&lt;p&gt;So what did I do?&lt;&#x2F;p&gt;
&lt;p&gt;The goal was to have a similar solution - take the user&#x27;s JS and an interface definition (&lt;a href=&quot;https:&#x2F;&#x2F;component-model.bytecodealliance.org&#x2F;design&#x2F;wit.html&quot;&gt;WIT&lt;&#x2F;a&gt;) and get a WebAssembly component implementing this interface by running the user&#x27;s JavaScript code. But we wanted something that is significantly easier to work with, and easier to extend with more and more &quot;build-in&quot; JS APIs. This is important for us as we want people to be able to use as many existing libraries in their Golem applications as possible. There must be a trade-off somewhere, of course - and there are two that I&#x27;m going to talk about in details. First, our new engine supposed to have worse performance than ComponentizeJs, although it has not been benchmarked yet; and the second one is the need of a Rust compiler toolchain to convert the JavaScript code to WASM. This, however, is not affecting Golem users due to some other changes we introduced; more about it later.&lt;&#x2F;p&gt;
&lt;p&gt;So with all these constraints, I ended up creating &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;golemcloud&#x2F;wasm-rquickjs&quot;&gt;wasm-rquickjs&lt;&#x2F;a&gt;, with the following properties:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;It&#x27;s built on the &lt;a href=&quot;https:&#x2F;&#x2F;quickjs-ng.github.io&#x2F;quickjs&#x2F;&quot;&gt;QuickJS-NG engine&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;But, to make it much easier to maintain and extend, it is using this engine through Rust, using the excellent &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;DelSkayn&#x2F;rquickjs&quot;&gt;rquickjs crate&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;It generates glue code to bridge the JS world with the Rust bindings generated by &lt;code&gt;wit-bindgen-rust&lt;&#x2F;code&gt; for the component model exports and imports&lt;&#x2F;li&gt;
&lt;li&gt;And also defines a growing set of built-in JS APIs, some implemented from scratch, others by taking various open-source polyfill libraries&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The result is a CLI tool (&lt;code&gt;wasm-rquickjs-cli&lt;&#x2F;code&gt;) and embeddable Rust library that can take a WIT world, a JS file, and ends up generating a standalone Rust crate that, when compiled using &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bytecodealliance&#x2F;cargo-component&quot;&gt;cargo-component&lt;&#x2F;a&gt;, emits the WASM that we need.&lt;&#x2F;p&gt;
&lt;p&gt;It also support emitting TypeScript module definitions for all the imports and exports of the component.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;details&quot;&gt;Details&lt;&#x2F;h2&gt;
&lt;p&gt;To understand why I chose to go with generating Rust crates and using the above mentioned &lt;code&gt;rquickjs&lt;&#x2F;code&gt; library, let&#x27;s take a closer look at how things are done within &lt;code&gt;wasm-rquickjs&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;defining-built-in-apis&quot;&gt;Defining built-in APIs&lt;&#x2F;h3&gt;
&lt;p&gt;We wanted to be able to easily increase the set of supported built-in APIs to have increased compatibility with the existing JS ecosystem. Some of these APIs can be introduced with pure JS polyfill libraries, but many of them requires to be somehow implemented on top of imported WebAssemby system interfaces (WASI). A good example can be implementing (a subset of) the &lt;code&gt;node:fs&lt;&#x2F;code&gt; API to work with files and filesystems.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;code&gt;rquickjs&lt;&#x2F;code&gt; crate really makes this very easy to do - it has a convenient way to bind native Rust functions into the JavaScript context, and it also solves the difficult problem of bridging the world of JS promises with &lt;em&gt;async Rust&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;This means we can write Rust functions in which we can use the Rust standard library or any other imported WIT bindings and then call these functions from JS. For example we can define a &lt;code&gt;read_file&lt;&#x2F;code&gt; function that exposes &lt;code&gt;std::fs::read&lt;&#x2F;code&gt; for JavaScript:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;rquickjs&lt;&#x2F;span&gt;&lt;span&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;function&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;read_file&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;path&lt;&#x2F;span&gt;&lt;span&gt;: String, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;ctx&lt;&#x2F;span&gt;&lt;span&gt;: Ctx&amp;lt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;) -&amp;gt;   List&amp;lt;(Option&amp;lt;TypedArray&amp;lt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;gt;, Option&amp;lt;String&amp;gt;)&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; path &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;Path::new(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;path);
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;match &lt;&#x2F;span&gt;&lt;span&gt;std::fs::read(path) {
&lt;&#x2F;span&gt;&lt;span&gt;    Ok(bytes) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; typed_array &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span&gt;        TypedArray::new_copy(ctx.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;clone&lt;&#x2F;span&gt;&lt;span&gt;(), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;bytes)
&lt;&#x2F;span&gt;&lt;span&gt;          .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;expect&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;Failed to create TypedArray&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;      List((Some(typed_array), None))
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    Err(err) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; error_message &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;format!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;Failed to read file &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;{path:?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;{err}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;      List((None, Some(error_message)))
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Then the actual JavaScript API can be implemented in JS itself, using these native functions:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;js&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-js &quot;&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;export function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;readFile&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;path&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;optionsOrCallback&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;callback&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;    } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;contents&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;read_file&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;path&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;error &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;undefined&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;buffer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Buffer&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;from&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;contents&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;callback&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;buffer&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;        } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;callback&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;undefined&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This makes it really convenient to add support for more and more APIs, and as mentioned earlier, these native functions can be &lt;code&gt;async&lt;&#x2F;code&gt; Rust functions too, which simply translates to async JS functions.&lt;&#x2F;p&gt;
&lt;p&gt;For example, part of the &lt;code&gt;fetch&lt;&#x2F;code&gt; implementation is sending the request body asynchronously:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;js&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-js &quot;&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;async function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;sendBody&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;bodyWriter&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;body&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;reader &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;body&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;getReader&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;while &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;done&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= await &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;reader&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;read&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;done&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;break&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;await &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;bodyWriter&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;writeRequestBodyChunk&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;bodyWriter&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;finishBody&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;code&gt;writeRequestBodyChunk&lt;&#x2F;code&gt; method is a native Rust method defined like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;rquickjs&lt;&#x2F;span&gt;&lt;span&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;methods&lt;&#x2F;span&gt;&lt;span&gt;(rename_all &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;camelCase&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;WrappedRequestBodyWriter {
&lt;&#x2F;span&gt;&lt;span&gt;    #[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;qjs&lt;&#x2F;span&gt;&lt;span&gt;(constructor)]
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;new&lt;&#x2F;span&gt;&lt;span&gt;() -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Self &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        WrappedRequestBodyWriter { writer: None }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;pub&lt;&#x2F;span&gt;&lt;span&gt; async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;write_request_body_chunk&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;amp;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;chunk&lt;&#x2F;span&gt;&lt;span&gt;: TypedArray&amp;lt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;implementing-imports&quot;&gt;Implementing imports&lt;&#x2F;h3&gt;
&lt;p&gt;With the above technique, we could have a precompiled WASM JS engine that is capable of running user code while providing them a fix set of supported APIs. This is what a similar project, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;second-state&#x2F;wasmedge-quickjs&quot;&gt;wasmedge-quickjs&lt;&#x2F;a&gt; does.&lt;&#x2F;p&gt;
&lt;p&gt;But &lt;code&gt;wasm-rquickjs&lt;&#x2F;code&gt; does not stop here - it uses the same method of defining JS modules with native Rust bindings to define a JS module for &lt;em&gt;each imported WIT interface&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;So a code generator takes the WIT imports, and emits Rust code in the style of the above examples that exposes these WIT imports to JavaScript by calling the Rust WIT bindings, generated by &lt;code&gt;wit-bindgen-rust&lt;&#x2F;code&gt; (this happens automatically under the hood when using the already mentioned &lt;code&gt;cargo-component&lt;&#x2F;code&gt; build tool).&lt;&#x2F;p&gt;
&lt;p&gt;Every data type WIT supports is mapped to a specific JS construct, and &lt;em&gt;resources&lt;&#x2F;em&gt; are mapped to JS classes. The following example shows the generated function for one of the exported functions of &lt;code&gt;golem:llm&lt;&#x2F;code&gt; &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;golemcloud&#x2F;golem-ai&quot;&gt;from the Golem AI libraries&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;rquickjs&lt;&#x2F;span&gt;&lt;span&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;function&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;send&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;messages&lt;&#x2F;span&gt;&lt;span&gt;: Vec&amp;lt;crate::bindings::golem::llm::llm::Message&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;config&lt;&#x2F;span&gt;&lt;span&gt;: crate::bindings::golem::llm::llm::Config,
&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; crate::bindings::golem::llm::llm::ChatEvent {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; result: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;crate&lt;&#x2F;span&gt;&lt;span&gt;::bindings::golem::llm::llm::ChatEvent &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= crate&lt;&#x2F;span&gt;&lt;span&gt;::bindings::golem::llm::llm::send(
&lt;&#x2F;span&gt;&lt;span&gt;        messages.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;into_iter&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;v&lt;&#x2F;span&gt;&lt;span&gt;| v).collect::&amp;lt;Vec&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;as_slice&lt;&#x2F;span&gt;&lt;span&gt;(),
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;config,
&lt;&#x2F;span&gt;&lt;span&gt;    );
&lt;&#x2F;span&gt;&lt;span&gt;    result
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This simply uses &lt;code&gt;rquickjs&lt;&#x2F;code&gt;&#x27;s native binding macro to do the hard work, and calls the generated Rust bindings under the hood.&lt;&#x2F;p&gt;
&lt;p&gt;Of course to make this work, &lt;code&gt;rquickjs&lt;&#x2F;code&gt; also needs to know how to encode these data types, such as the LLM &lt;code&gt;Message&lt;&#x2F;code&gt;, as JS. So the code generator also emits instances of the &lt;code&gt;ToJs&lt;&#x2F;code&gt; and &lt;code&gt;FromJs&lt;&#x2F;code&gt; type classes, such as:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;impl&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;#39;js&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; rquickjs::IntoJs&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;#39;js&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;crate::bindings::golem::llm::llm::Message {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;into_js&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;ctx&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;rquickjs::Ctx&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;#39;js&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;  ) -&amp;gt; rquickjs::Result&amp;lt;rquickjs::Value&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;#39;js&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; obj &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;rquickjs::Object::new(ctx.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;clone&lt;&#x2F;span&gt;&lt;span&gt;())&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; role: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;crate&lt;&#x2F;span&gt;&lt;span&gt;::bindings::golem::llm::llm::Role &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.role;
&lt;&#x2F;span&gt;&lt;span&gt;    obj.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;set&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;role&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, role)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;    Ok(obj.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;into_value&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;impl&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;#39;js&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; rquickjs::FromJs&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;#39;js&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;crate::bindings::golem::llm::llm::Message {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;from_js&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_ctx&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;rquickjs::Ctx&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;#39;js&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;: rquickjs::Value&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;#39;js&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;  ) -&amp;gt; rquickjs::Result&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Self&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; obj &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;rquickjs::Object::from_value(value)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; role: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;crate&lt;&#x2F;span&gt;&lt;span&gt;::bindings::golem::llm::llm::Role &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; obj.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;role&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The main difficulty was not generating these JS mappings - it was matching the expected signatures of &lt;code&gt;wit-bindgen-rust&lt;&#x2F;code&gt;, as it has some complex rules for deciding when to pass things by value or by reference.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;implementing-exports&quot;&gt;Implementing exports&lt;&#x2F;h3&gt;
&lt;p&gt;For all the exported interfaces in a component&#x27;s WIT definition, &lt;code&gt;wit-bindgen-rust&lt;&#x2F;code&gt; generates a &lt;em&gt;trait&lt;&#x2F;em&gt; to be implemented. We expect the JS developers to implement all these imports with some well defined rules (interfaces becoming exported objects, kebab-case names becoming camel cased, etc.). With the assumption that the user&#x27;s JS code implements all the exports, &lt;code&gt;wasm-rquickjs&lt;&#x2F;code&gt; can generate implementations for these rust traits that are calling into the QuickJS engine, running these functions.&lt;&#x2F;p&gt;
&lt;p&gt;Part of the problem is very similar to what we have with imports - converting from the Rust types (coming from the WIT types) to JS types. This is done using the same conversion type classes we already talked about.&lt;&#x2F;p&gt;
&lt;p&gt;When setting up the JS context, we always store a reference to the user&#x27;s module in a global variable, so the generated export code can easily access it:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; module: Object &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; ctx.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;globals&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;userModule&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;expect&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;Failed to get userModule&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;There are similar global helper tables for tracking the class instances for WIT resource instances.&lt;&#x2F;p&gt;
&lt;p&gt;Once we have the module object, we can apply the naming rules and find the function value and call it with &lt;code&gt;rquickjs&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;call_with_this&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;#39;js&lt;&#x2F;span&gt;&lt;span&gt;, A, R&amp;gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;ctx&lt;&#x2F;span&gt;&lt;span&gt;: Ctx&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;#39;js&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;function&lt;&#x2F;span&gt;&lt;span&gt;: Function&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;#39;js&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;: Object&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;#39;js&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;args&lt;&#x2F;span&gt;&lt;span&gt;: A,
&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; rquickjs::Result&amp;lt;R&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;where
&lt;&#x2F;span&gt;&lt;span&gt;    A: IntoArgs&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;#39;js&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    R: FromJs&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;#39;js&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; num &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; args.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;num_args&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; accum_args &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;Args::new(ctx.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;clone&lt;&#x2F;span&gt;&lt;span&gt;(), num &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    accum_args.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;(this)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    args.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;into_args&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;amp;mut&lt;&#x2F;span&gt;&lt;span&gt; accum_args)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    function.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;call_arg&lt;&#x2F;span&gt;&lt;span&gt;(accum_args)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;A nice property we can offer is that we don&#x27;t have to constrain the user to always implement the exported functions as async JavaScript functions. We can simply check the return value before trying to convert it to the Rust equivalent whether it is a &lt;code&gt;Promise&lt;&#x2F;code&gt; or not. And if it is, we can just &lt;code&gt;await&lt;&#x2F;code&gt; it in the Rust code!&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; value.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;is_promise&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; promise: Promise &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; value.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;into_promise&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; promise_future &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; promise.into_future::&amp;lt;R&amp;gt;();
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt; promise_future.await {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;async-all-the-way-down&quot;&gt;Async all the way down&lt;&#x2F;h3&gt;
&lt;p&gt;This seamless integration of the JS and Rust async world is a key component in making &lt;code&gt;wasm-rquickjs&lt;&#x2F;code&gt; easy to work with. But it&#x27;s not enough that &lt;code&gt;rquickjs&lt;&#x2F;code&gt; implements the boundary between JS and Rust. The end result is a WASM component, which is single threaded and only provides a very specific set of system APIs to build on; we cannot just use Tokio for example as our Rust runtime (at the time of writing). At the bottom of all the Rust and JS async stacks, there is single small WASI API supporting all this: &lt;code&gt;wasi:io&#x2F;poll&lt;&#x2F;code&gt;. &lt;a href=&quot;https:&#x2F;&#x2F;blog.yoshuawuyts.com&#x2F;building-an-async-runtime-for-wasi&#x2F;&quot;&gt;Yoshua Wuyts has an excellent blog post&lt;&#x2F;a&gt; about the topic. &lt;code&gt;wasm-rquickjs&lt;&#x2F;code&gt; builds on his &lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;wasi-async-runtime&#x2F;latest&#x2F;wasi_async_runtime&#x2F;&quot;&gt;&lt;code&gt;wasi_async_runtime&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; crate (and soon will be migrated to the newer &lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;wstd&#x2F;latest&#x2F;wstd&#x2F;&quot;&gt;&lt;code&gt;wstd&lt;&#x2F;code&gt; crate&lt;&#x2F;a&gt;).&lt;&#x2F;p&gt;
&lt;h2 id=&quot;trade-offs&quot;&gt;Trade-offs&lt;&#x2F;h2&gt;
&lt;p&gt;As I mentioned in the introduction, this approach naturally comes with some trade-offs when comparing to ComponentizeJs.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;performance&quot;&gt;Performance&lt;&#x2F;h3&gt;
&lt;p&gt;We are not doing any precompilation at the moment, so component initialization time for bigger projects is definitely supposed to be slower. On the other hand the engine itself is much smaller than the modified SpiderMonkey in ComponentizeJs, so this may balance out the difference in some cases. I also expect SpiderMonkey to be faster in general than QuickJS, although this is not as clear &lt;a href=&quot;https:&#x2F;&#x2F;cfallin.org&#x2F;blog&#x2F;2023&#x2F;10&#x2F;11&#x2F;spidermonkey-pbl&#x2F;&quot;&gt;because SpiderMonkey also has to run in interpreter mode&lt;&#x2F;a&gt; on WASM.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;rust-compilation&quot;&gt;Rust compilation&lt;&#x2F;h3&gt;
&lt;p&gt;A more serious trade-off is that by generating a Rust crate, we force the JS&#x2F;TS users to have a Rust tool-chain available and compile these generated crates to WASM.&lt;&#x2F;p&gt;
&lt;p&gt;We&#x27;ve spent a lot of effort in the past year hiding the complexity of having these build tools, and especially having the &lt;em&gt;correct version&lt;&#x2F;em&gt; of WASM &#x2F; component model related tools automatically set up and invoked by hiding the component creating process in Golem&#x27;s own CLI interface.&lt;&#x2F;p&gt;
&lt;p&gt;Still, having to set up Rust to just run a simple JavaScript snippet on Golem is too much to ask. We worked around this issue by not allowing users to work directly on the component model level anymore - no WIT, no composition for them. This way we can embed a precompiled WASM binary in our tooling that can be combined with the user&#x27;s JavaScript code to form a final WASM component. I am going to write a separate post about this decision and its technical details.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;golemcloud&#x2F;wasm-rquickjs&#x2F;&quot;&gt;wasm-rquickjs&lt;&#x2F;a&gt; turned out to be a very capable alternative for ComponentizeJs, that is much easier to iterate on. It is a standalone project, completely usable outside of Golem; if the above two trade-offs are acceptable, it provides a nice experience of writing JavaScript or TypeScript code for the WASM Component Model.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>[Video] Golem powered by WebAssembly @ Wasm I&#x2F;O 2025</title>
        <published>2025-04-04T00:00:00+00:00</published>
        <updated>2025-04-04T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Daniel Vigovszky
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://blog.vigoo.dev/posts/golem-powered-by-wasm/"/>
        <id>https://blog.vigoo.dev/posts/golem-powered-by-wasm/</id>
        
        <content type="html" xml:base="https://blog.vigoo.dev/posts/golem-powered-by-wasm/">&lt;p&gt;My talk at &lt;a href=&quot;https:&#x2F;&#x2F;www.wasm.io&quot;&gt;Wasm I&#x2F;O 2025&lt;&#x2F;a&gt; explaining how &lt;a href=&quot;https:&#x2F;&#x2F;golem.cloud&quot;&gt;Golem&lt;&#x2F;a&gt; is built on WebAssembly and the Component Model.&lt;&#x2F;p&gt;
&lt;iframe width=&quot;800&quot; height=&quot;450&quot; src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;_oEhuFjTyeQ?si=zYPcpJLasEBV-vGE&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&quot; referrerpolicy=&quot;strict-origin-when-cross-origin&quot; allowfullscreen&gt;&lt;&#x2F;iframe&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Using MoonBit with Golem Cloud</title>
        <published>2025-01-03T00:00:00+00:00</published>
        <updated>2025-01-03T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Daniel Vigovszky
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://blog.vigoo.dev/posts/moonbit-with-golem/"/>
        <id>https://blog.vigoo.dev/posts/moonbit-with-golem/</id>
        
        <content type="html" xml:base="https://blog.vigoo.dev/posts/moonbit-with-golem/">&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.moonbitlang.com&quot;&gt;MoonBit&lt;&#x2F;a&gt;, a new programming language has been open sourced a few weeks ago - see &lt;a href=&quot;https:&#x2F;&#x2F;www.moonbitlang.com&#x2F;blog&#x2F;compiler-opensource&quot;&gt;this blog post&lt;&#x2F;a&gt;. MoonBit is an exciting modern programming language that natively supports WebAssembly, including the component model - this makes it a perfect fit for writing applications for &lt;a href=&quot;https:&#x2F;&#x2F;golem.cloud&quot;&gt;Golem Cloud&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;In this post I&#x27;m exploring the current state of MoonBit and whether it is ready for writing Golem components, by implementing an example application more complex than a simple &quot;hello world&quot; example.&lt;&#x2F;p&gt;
&lt;p&gt;The application to be implemented is a simple collaborative list editor - on the &lt;a href=&quot;https:&#x2F;&#x2F;youtu.be&#x2F;11Cig1iH6S0&quot;&gt;launch event of Golem 1.0&lt;&#x2F;a&gt; I have live-coded the same example using three different programming languages (TypeScript, Rust and Go) for the three main modules it requires. In this post I am implementing all three using &lt;strong&gt;MoonBit&lt;&#x2F;strong&gt;, including the e-mail sending feature that was omitted from the live demo due to time constraints.&lt;&#x2F;p&gt;
&lt;p&gt;The application can handle an arbitrary number of simultaneously open &lt;strong&gt;lists&lt;&#x2F;strong&gt;. Each list consists of a list of string items. These items can be appended, inserted and deleted simultaneously by multiple users; the current list state can be queried any time, as well as the active connections (users who can perform editing operations on the list). Modification is only allowed for connected editors, and there is a &lt;code&gt;poll&lt;&#x2F;code&gt; function exposed for them which returns the new changes since the last poll call. Lists can be archived, in which case they are no longer editable and their contents are saved in a separate &lt;strong&gt;list archive&lt;&#x2F;strong&gt;. Then the list itself can be deleted, its last state remains stored forever in the archive. An additional feature is that if a list is &lt;em&gt;not archived&lt;&#x2F;em&gt; and there were no changes for a certain period of time, all the connected editors are notified by sending an &lt;strong&gt;email&lt;&#x2F;strong&gt; to them.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;golem-architecture&quot;&gt;Golem Architecture&lt;&#x2F;h2&gt;
&lt;p&gt;In Golem a good architecture to run this is to have three different &lt;strong&gt;golem components&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;the list&lt;&#x2F;li&gt;
&lt;li&gt;the archive&lt;&#x2F;li&gt;
&lt;li&gt;the email notifier&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;These are compiled WebAssembly components, each exporting a distinct set of functions. Golem provides APIs to invoke these functions from the external world (for example mapping them to a HTTP API) and also allows &lt;strong&gt;workers&lt;&#x2F;strong&gt; (instances of these components) to invoke each other. A component can have an arbitrary number of instances, each such worker being identified by a unique name.&lt;&#x2F;p&gt;
&lt;p&gt;We can use this feature to have a very simple and straightforward implementation of the list editor - each document (editable list) will be mapped to its own worker, identified by the list&#x27;s identifier. This way our list component only has to deal with a single list; scaling it up to handle multiple (possibly even millions) of lists is done automatically by Golem.&lt;&#x2F;p&gt;
&lt;p&gt;For archiving lists, we want to store each archived list in a single place - so we are going to have only a single instance of our archive component, where each archived list information is sent to. This singleton worker can store the archived lists in some database if needed - but because Golem&#x27;s durable execution guarantees, it is enough to just store them in memory (one important exception is if we want to store a really large amount of archived lists not fitting in a single worker&#x27;s memory). Golem guarantees that the worker&#x27;s state is restored in any case of failure or rescaling event so the archive component can really remain very simple.&lt;&#x2F;p&gt;
&lt;p&gt;Finally, because Golem workers are single threaded and does not support async calls overlapping with its invocations at the moment, we need a third component to implement the delayed email sending functionality. There will be an &lt;strong&gt;email sending worker&lt;&#x2F;strong&gt; corresponding to each &lt;strong&gt;list worker&lt;&#x2F;strong&gt; and this worker will be suspended for an extended period of time (the amount we want to wait before sending out the email). Again, because of Golem&#x27;s durable execution feature we can just &quot;sleep&quot; for an arbitrary long time in this component and we don&#x27;t need to care about what can happen to our execution environment during that long period.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;initial-moonbit-implementation&quot;&gt;Initial MoonBit implementation&lt;&#x2F;h2&gt;
&lt;p&gt;Before going into details of how to develop Golem components with MoonBit, let&#x27;s try to implement the above described components in this new language, without any Golem or WebAssembly specifics.&lt;&#x2F;p&gt;
&lt;p&gt;First we create a new &lt;code&gt;lib&lt;&#x2F;code&gt; project using &lt;code&gt;moon new&lt;&#x2F;code&gt;. This creates a new &lt;strong&gt;project&lt;&#x2F;strong&gt; with a single &lt;strong&gt;package&lt;&#x2F;strong&gt;. To match our architecture let&#x27;s start by creating multiple packages, one for each component to develop (&lt;code&gt;list&lt;&#x2F;code&gt;, &lt;code&gt;archive&lt;&#x2F;code&gt;, &lt;code&gt;email&lt;&#x2F;code&gt;)&lt;&#x2F;p&gt;
&lt;p&gt;We create a folder for each package, with a &lt;code&gt;moon.pkg.json&lt;&#x2F;code&gt; in each:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;json&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-json &quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;import&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: [
&lt;&#x2F;span&gt;&lt;span&gt;    ]
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;list-model&quot;&gt;List model&lt;&#x2F;h3&gt;
&lt;p&gt;Let&#x27;s start by modelling our &lt;strong&gt;list&lt;&#x2F;strong&gt;. The edited &quot;document&quot; itself is just an array of strings:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;moonbit&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-moonbit &quot;&gt;&lt;code class=&quot;language-moonbit&quot; data-lang=&quot;moonbit&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;Document {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;items&lt;&#x2F;span&gt;&lt;span&gt;: Array[String]
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We can implement &lt;strong&gt;methods&lt;&#x2F;strong&gt; on &lt;code&gt;Document&lt;&#x2F;code&gt; corresponding to the document editing operations we want to support. On this level we don&#x27;t care about collaborative editing or connected users, just model our document as a pure data structure:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;moonbit&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-moonbit &quot;&gt;&lt;code class=&quot;language-moonbit&quot; data-lang=&quot;moonbit&quot;&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F;&#x2F;| Creates an empty document
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;pub&lt;&#x2F;span&gt;&lt;span&gt; fn Document::new() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;Document {
&lt;&#x2F;span&gt;&lt;span&gt;  { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;items&lt;&#x2F;span&gt;&lt;span&gt;: [] }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F;&#x2F;| Adds a new item to the document
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;pub&lt;&#x2F;span&gt;&lt;span&gt; fn add(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt; : Document, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;item&lt;&#x2F;span&gt;&lt;span&gt; : String) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;Unit {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.items.search(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;item&lt;&#x2F;span&gt;&lt;span&gt;).is_empty() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.items.push(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;item&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F;&#x2F;| Deletes an item from the document
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;pub&lt;&#x2F;span&gt;&lt;span&gt; fn delete(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt; : Document, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;item&lt;&#x2F;span&gt;&lt;span&gt; : String) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;Unit {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.items &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.items.filter(fn(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span&gt;) { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;item &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span&gt; })
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F;&#x2F;| Inserts an item to the document after an existing item. If `after` is not in the document, the new item is inserted at the end.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;pub&lt;&#x2F;span&gt;&lt;span&gt; fn insert(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt; : Document, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;after&lt;&#x2F;span&gt;&lt;span&gt;~ : String, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;~ : String) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;Unit {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;index &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.items.search(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;after&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;match &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;index&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    Some(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;index&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.items.insert(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;index &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    None &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.add(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F;&#x2F;| Gets a view of the document&amp;#39;s items
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;pub&lt;&#x2F;span&gt;&lt;span&gt; fn get(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt; : Document) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;ArrayView[String] {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.items[:]
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F;&#x2F;| Iterates the items in the document
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;pub&lt;&#x2F;span&gt;&lt;span&gt; fn iter(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt; : Document) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;Iter[String] {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.items.iter()
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We can also use MoonBit&#x27;s built-in test feature to write unit tests for this. The following test contains an assertion that the initial document is empty:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;moonbit&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-moonbit &quot;&gt;&lt;code class=&quot;language-moonbit&quot; data-lang=&quot;moonbit&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;test &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;new document is empty&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;empty &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;Document::new()
&lt;&#x2F;span&gt;&lt;span&gt;  assert_eq!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;empty&lt;&#x2F;span&gt;&lt;span&gt;.items, [])
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;With the &lt;code&gt;inspect&lt;&#x2F;code&gt; function tests can use &lt;strong&gt;snapshot values&lt;&#x2F;strong&gt; to compare values with. The &lt;code&gt;moon&lt;&#x2F;code&gt; CLI tool and the IDE integration provides a way to automatically update the snapshot values (the &lt;code&gt;content=&lt;&#x2F;code&gt; part) in these test functions when needed:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;moonbit&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-moonbit &quot;&gt;&lt;code class=&quot;language-moonbit&quot; data-lang=&quot;moonbit&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;test &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;basic document operations&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;doc &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;Document::new()
&lt;&#x2F;span&gt;&lt;span&gt;    ..add(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    ..add(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;y&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    ..add(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;z&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    ..insert(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;after&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;y&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;w&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    ..insert(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;after&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    ..delete(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;z&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    ..delete(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  inspect!(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;doc&lt;&#x2F;span&gt;&lt;span&gt;.get(),
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;content&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;#|[&amp;quot;x&amp;quot;, &amp;quot;y&amp;quot;, &amp;quot;w&amp;quot;, &amp;quot;b&amp;quot;]
&lt;&#x2F;span&gt;&lt;span&gt;    ,
&lt;&#x2F;span&gt;&lt;span&gt;  )
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;list-editor-state&quot;&gt;List editor state&lt;&#x2F;h3&gt;
&lt;p&gt;The next step is to implement the editor state management on top of this &lt;code&gt;Document&lt;&#x2F;code&gt; type. As a reminder, we decided that every instance (Golem worker) of the list component will be only responsible for editing a single list. So we don&#x27;t need to care about storing and indexing the lists, or routing connections to the corresponding node where the list state is - this is all going to be managed by Golem.&lt;&#x2F;p&gt;
&lt;p&gt;What we need to do, however, is write stateful code to handle connecting and disconnecting users (&quot;editors&quot;), adding some validation on top of the document editing API so only connected editors can make changes, and collect change events for the polling API.&lt;&#x2F;p&gt;
&lt;p&gt;We can start by defining a new datatype holding our document editing state:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;moonbit&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-moonbit &quot;&gt;&lt;code class=&quot;language-moonbit&quot; data-lang=&quot;moonbit&quot;&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F;&#x2F;| Document state
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;State {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;document&lt;&#x2F;span&gt;&lt;span&gt; : Document
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;connected&lt;&#x2F;span&gt;&lt;span&gt; : Map[ConnectionId, EditorState]
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;last_connection_id&lt;&#x2F;span&gt;&lt;span&gt; : ConnectionId
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;archived&lt;&#x2F;span&gt;&lt;span&gt; : Bool
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;email_deadline&lt;&#x2F;span&gt;&lt;span&gt; : @datetime.DateTime
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;email_recipients&lt;&#x2F;span&gt;&lt;span&gt; : Array[EmailAddress]
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Beside the actual document we are going to store:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;A map of connected editors, with some per-editor state associated with them&lt;&#x2F;li&gt;
&lt;li&gt;The last used connection ID so we can always generate a new unique one&lt;&#x2F;li&gt;
&lt;li&gt;Whether the document has been archived or not&lt;&#x2F;li&gt;
&lt;li&gt;When should we send out the email notification, and to what recipients&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;So far we have only defined the &lt;code&gt;Document&lt;&#x2F;code&gt; type so let&#x27;s continue by specifying all these other types used in &lt;code&gt;State&lt;&#x2F;code&gt;s fields.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;ConnectionId&lt;&#x2F;code&gt; is going to be a &lt;strong&gt;newtype&lt;&#x2F;strong&gt; wrapping an integer:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;moonbit&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-moonbit &quot;&gt;&lt;code class=&quot;language-moonbit&quot; data-lang=&quot;moonbit&quot;&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F;&#x2F;| Identifier of a connected editor
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;ConnectionId Int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Eq&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Hash&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F;&#x2F;| Generates a next unique connection ID
&lt;&#x2F;span&gt;&lt;span&gt;fn next(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt; : ConnectionId) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;ConnectionId {
&lt;&#x2F;span&gt;&lt;span&gt;  ConnectionId(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;._ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We want to use this type as a &lt;strong&gt;key&lt;&#x2F;strong&gt; of a &lt;code&gt;Map&lt;&#x2F;code&gt; so we need instances of the &lt;code&gt;Eq&lt;&#x2F;code&gt; and &lt;code&gt;Hash&lt;&#x2F;code&gt; type classes. MoonBit can derive it for us automatically for newtypes. In addition to that, we also define a method called &lt;code&gt;next&lt;&#x2F;code&gt; that generates a new connection ID with an incremented value.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;code&gt;EditorState&lt;&#x2F;code&gt; structure holds information for each connected editor. To keep things simple, we only store the editor&#x27;s &lt;strong&gt;email address&lt;&#x2F;strong&gt; and a buffer of change events since the last call to &lt;code&gt;poll&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;An email address is a newtype of a &lt;code&gt;String&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;moonbit&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-moonbit &quot;&gt;&lt;code class=&quot;language-moonbit&quot; data-lang=&quot;moonbit&quot;&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F;&#x2F;| Email address of a connected editor
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;EmailAddress String
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;code&gt;Change&lt;&#x2F;code&gt; enum describes the possible changes made to the document:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;moonbit&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-moonbit &quot;&gt;&lt;code class=&quot;language-moonbit&quot; data-lang=&quot;moonbit&quot;&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F;&#x2F;| An observable change of the edited document
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;enum &lt;&#x2F;span&gt;&lt;span&gt;Change {
&lt;&#x2F;span&gt;&lt;span&gt;  Added(String)
&lt;&#x2F;span&gt;&lt;span&gt;  Deleted(String)
&lt;&#x2F;span&gt;&lt;span&gt;  Inserted(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;after&lt;&#x2F;span&gt;&lt;span&gt;~ : String, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;~ : String)
&lt;&#x2F;span&gt;&lt;span&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Show&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Deriving &lt;code&gt;Show&lt;&#x2F;code&gt; (or implementing it by hand) makes it possible to use the &lt;code&gt;inspect&lt;&#x2F;code&gt; test function to compare string snapshots of array of changes with the results of our &lt;code&gt;poll&lt;&#x2F;code&gt; function.&lt;&#x2F;p&gt;
&lt;p&gt;Finally, let&#x27;s define &lt;code&gt;EditorState&lt;&#x2F;code&gt; using these two new types:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;moonbit&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-moonbit &quot;&gt;&lt;code class=&quot;language-moonbit&quot; data-lang=&quot;moonbit&quot;&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F;&#x2F;| State per connected editor
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;EditorState {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;email&lt;&#x2F;span&gt;&lt;span&gt; : EmailAddress
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;events&lt;&#x2F;span&gt;&lt;span&gt; : Array[Change]
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;code&gt;email&lt;&#x2F;code&gt; field never changes of a connected editor - but the &lt;code&gt;events&lt;&#x2F;code&gt; array is, as every call to &lt;code&gt;poll&lt;&#x2F;code&gt; will reset this so the next poll returns only the new changes. To be able to do this, we have to mark it as &lt;code&gt;mut&lt;&#x2F;code&gt;-able.&lt;&#x2F;p&gt;
&lt;p&gt;The last new type we need to introduce for &lt;code&gt;State&lt;&#x2F;code&gt; is something representing a point in time. MoonBit&#x27;s &lt;code&gt;core&lt;&#x2F;code&gt; standard library does not have currently anything for this, but there is already a package database, &lt;a href=&quot;https:&#x2F;&#x2F;mooncakes.io&quot;&gt;mooncakes&lt;&#x2F;a&gt;, with published MoonBit packages. Here we can find a &lt;a href=&quot;https:&#x2F;&#x2F;mooncakes.io&#x2F;docs&#x2F;#&#x2F;suiyunonghen&#x2F;datetime&#x2F;&quot;&gt;package called &lt;code&gt;datetime&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;. Adding it to our project can be done with the &lt;code&gt;moon&lt;&#x2F;code&gt; CLI:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;moon&lt;&#x2F;span&gt;&lt;span&gt; add suiyunonghen&#x2F;datetime
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;and then importing it into the &lt;code&gt;list&lt;&#x2F;code&gt; package by modifying its &lt;code&gt;moon.pkg.json&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;json&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-json &quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;import&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: [
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;suiyunonghen&#x2F;datetime&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    ]
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;With this we can refer to the &lt;code&gt;DateTime&lt;&#x2F;code&gt; type in this package using &lt;code&gt;@datetime.DateTime&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Before starting to implement methods for &lt;code&gt;State&lt;&#x2F;code&gt;, we have to think about error handling too - some of the operations on &lt;code&gt;State&lt;&#x2F;code&gt; may fail, for example if a wrong connection ID is used, or a document editing operation comes in for an already archived list. MoonBit has built-in support for error handling, and it starts by defining our own error type in the following way:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;moonbit&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-moonbit &quot;&gt;&lt;code class=&quot;language-moonbit&quot; data-lang=&quot;moonbit&quot;&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F;&#x2F;| Error type for editor state operations
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;type! &lt;&#x2F;span&gt;&lt;span&gt;EditorError {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F;&#x2F;| Error returned when an invalid connection ID is used
&lt;&#x2F;span&gt;&lt;span&gt;  InvalidConnection(ConnectionId)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F;&#x2F;| Error when trying to modify an already archived document
&lt;&#x2F;span&gt;&lt;span&gt;  AlreadyArchived
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;With this we are ready to implement the collaborative list editor! I&#x27;m not going to list &lt;em&gt;all&lt;&#x2F;em&gt; the methods of &lt;code&gt;State&lt;&#x2F;code&gt; in this post, but the full source code is available &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;vigoo&#x2F;golem-moonbit-example&quot;&gt;on GitHub&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;code&gt;connect&lt;&#x2F;code&gt; method associates a new connection ID with the connected user, and also returns the current document state. This is important to be able to use the results of &lt;code&gt;poll&lt;&#x2F;code&gt; - the returned list of changes have to be applied to exactly this document state on the client side.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;moonbit&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-moonbit &quot;&gt;&lt;code class=&quot;language-moonbit&quot; data-lang=&quot;moonbit&quot;&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F;&#x2F;| Connects a new editor
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;pub&lt;&#x2F;span&gt;&lt;span&gt; fn connect(
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt; : State,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;email&lt;&#x2F;span&gt;&lt;span&gt; : EmailAddress
&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; (ConnectionId, ArrayView[String]) {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;connection_id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.last_connection_id.next()
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.last_connection_id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;connection_id
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.connected.set(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;connection_id&lt;&#x2F;span&gt;&lt;span&gt;, EditorState::new(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;email&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;  (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;connection_id&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.document.get())
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;em&gt;editing operations&lt;&#x2F;em&gt; are more interesting. They build on top of the editing operations we already defined for &lt;code&gt;Document&lt;&#x2F;code&gt;, but in addition to that, they all perform the following tasks:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Validating the connection ID&lt;&#x2F;li&gt;
&lt;li&gt;Validating that the document is not archived yet&lt;&#x2F;li&gt;
&lt;li&gt;Adding a &lt;code&gt;Change&lt;&#x2F;code&gt; event to each connected editor&#x27;s state&lt;&#x2F;li&gt;
&lt;li&gt;Updating the &lt;code&gt;email_deadline&lt;&#x2F;code&gt; and &lt;code&gt;email_recipients&lt;&#x2F;code&gt; fields, as each editing operation &lt;em&gt;resets&lt;&#x2F;em&gt; the timeout for sending out the emails&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Let&#x27;s go through these steps one by one. For validations, we define two helper methods as we want to reuse them in all editing methods:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;moonbit&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-moonbit &quot;&gt;&lt;code class=&quot;language-moonbit&quot; data-lang=&quot;moonbit&quot;&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F;&#x2F;| Fails if the document is archived
&lt;&#x2F;span&gt;&lt;span&gt;fn ensure_not_archived(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt; : State) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;Unit!EditorError {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;guard not&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.archived) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;else&lt;&#x2F;span&gt;&lt;span&gt; { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;raise &lt;&#x2F;span&gt;&lt;span&gt;AlreadyArchived }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F;&#x2F;| Fails if the given `connection_id` is not in the connection map
&lt;&#x2F;span&gt;&lt;span&gt;fn ensure_is_connected(
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt; : State,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;connection_id&lt;&#x2F;span&gt;&lt;span&gt; : ConnectionId
&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;Unit!EditorError {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;guard &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.connected.contains(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;connection_id&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;else&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;raise &lt;&#x2F;span&gt;&lt;span&gt;InvalidConnection(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;connection_id&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;code&gt;Unit!EditorError&lt;&#x2F;code&gt; result type indicates that these methods can fail with &lt;code&gt;EditorError&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;We can also define a helper method for adding a change event to each connected editor&#x27;s state:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;moonbit&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-moonbit &quot;&gt;&lt;code class=&quot;language-moonbit&quot; data-lang=&quot;moonbit&quot;&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F;&#x2F;| Adds a change event to each connected editor&amp;#39;s state
&lt;&#x2F;span&gt;&lt;span&gt;fn add_event(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt; : State, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;change&lt;&#x2F;span&gt;&lt;span&gt; : Change) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;Unit {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;editor_state &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.connected.values() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;editor_state&lt;&#x2F;span&gt;&lt;span&gt;.events.push(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;change&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And finally one for resetting the email-sending deadline and list of recipients:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;moonbit&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-moonbit &quot;&gt;&lt;code class=&quot;language-moonbit&quot; data-lang=&quot;moonbit&quot;&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F;&#x2F;| Updates the `email_deadline` and `email_recipients` fields after an update.
&lt;&#x2F;span&gt;&lt;span&gt;fn update_email_properties(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt; : State) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;Unit {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;now &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;@datetime.DateTime::from_unix_mseconds(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; TODO
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;send_at &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;now&lt;&#x2F;span&gt;&lt;span&gt;.inc_hour(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;12&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;email_list &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.connected_editors()
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.email_deadline &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;send_at
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.email_recipients &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;email_list
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Note that the &lt;code&gt;datetime&lt;&#x2F;code&gt; library we imported has no concept of getting the &lt;em&gt;current&lt;&#x2F;em&gt; date and time which we need for this function to work properly. We are going to address this problem once we start targeting WebAssembly (and Golem) as getting the current system time is something depending on the target platform.&lt;&#x2F;p&gt;
&lt;p&gt;With these helper functions, implementing the editor functions, for example &lt;code&gt;add&lt;&#x2F;code&gt;, is straightforward:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;moonbit&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-moonbit &quot;&gt;&lt;code class=&quot;language-moonbit&quot; data-lang=&quot;moonbit&quot;&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F;&#x2F;| Adds a new element to the document as a connected editor
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;pub&lt;&#x2F;span&gt;&lt;span&gt; fn add(
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt; : State,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;connection_id&lt;&#x2F;span&gt;&lt;span&gt; : ConnectionId,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt; : String
&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;Unit!EditorError {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.ensure_not_archived!()
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.ensure_is_connected!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;connection_id&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.document.add(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.add_event(Change::Added(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.update_email_properties()
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Implementing &lt;code&gt;poll&lt;&#x2F;code&gt; is also easy, as we already maintain the list of changes per connection, we just need to reset it after each call:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;moonbit&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-moonbit &quot;&gt;&lt;code class=&quot;language-moonbit&quot; data-lang=&quot;moonbit&quot;&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F;&#x2F;| Returns the list of changes occurred since the last call to poll
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;pub&lt;&#x2F;span&gt;&lt;span&gt; fn poll(
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt; : State,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;connection_id&lt;&#x2F;span&gt;&lt;span&gt; : ConnectionId
&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;Array[Change]!EditorError {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;match &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.connected.get(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;connection_id&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    Some(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;editor_state&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;events &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;editor_state&lt;&#x2F;span&gt;&lt;span&gt;.events
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;editor_state&lt;&#x2F;span&gt;&lt;span&gt;.events &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; []
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;events
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    None &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; raise &lt;&#x2F;span&gt;&lt;span&gt;InvalidConnection(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;connection_id&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;list-archiving&quot;&gt;List archiving&lt;&#x2F;h3&gt;
&lt;p&gt;As mentioned in the introduction, we are going to have a singleton Golem worker to store &lt;strong&gt;archived lists&lt;&#x2F;strong&gt;. At this point we are still not having anything Golem or WebAssembly specific, like RPC calls, so let&#x27;s just implement the list archive store in the simplest possible way. As I wrote earlier, we can simply store the archived lists in memory, and Golem will take care of persisting it.&lt;&#x2F;p&gt;
&lt;p&gt;We don&#x27;t want to reuse the same &lt;code&gt;Document&lt;&#x2F;code&gt; type as it represents a live, editable document. Instead we define a few new types in the &lt;code&gt;archive&lt;&#x2F;code&gt; package:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;moonbit&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-moonbit &quot;&gt;&lt;code class=&quot;language-moonbit&quot; data-lang=&quot;moonbit&quot;&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F;&#x2F;| Unique name of a document
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;DocumentName String &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Eq&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Hash&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F;&#x2F;| Show instance for DocumentName
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Show &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;DocumentName &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;with &lt;&#x2F;span&gt;&lt;span&gt;output(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;logger&lt;&#x2F;span&gt;&lt;span&gt;) { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;._.output(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;logger&lt;&#x2F;span&gt;&lt;span&gt;) }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F;&#x2F;| A single archived immutable document, encapsulating the document&amp;#39;s name and its items
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;ArchivedDocument {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt; : DocumentName
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;items&lt;&#x2F;span&gt;&lt;span&gt; : Array[String]
&lt;&#x2F;span&gt;&lt;span&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Show&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F;&#x2F;| Archive is a list of archived documents
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;Archive {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;documents&lt;&#x2F;span&gt;&lt;span&gt; : Map[DocumentName, ArchivedDocument]
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;All we need is an &lt;code&gt;insert&lt;&#x2F;code&gt; method and a way to iterate all the archived documents:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;moonbit&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-moonbit &quot;&gt;&lt;code class=&quot;language-moonbit&quot; data-lang=&quot;moonbit&quot;&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F;&#x2F;| Archives a named document
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;pub&lt;&#x2F;span&gt;&lt;span&gt; fn insert(
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt; : Archive,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt; : DocumentName,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;items&lt;&#x2F;span&gt;&lt;span&gt; : Array[String]
&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;Unit {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.documents.set(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;, { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;items&lt;&#x2F;span&gt;&lt;span&gt; })
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F;&#x2F;| Iterates all the archived documents
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;pub&lt;&#x2F;span&gt;&lt;span&gt; fn iter(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt; : Archive) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;Iter[ArchivedDocument] {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.documents.values()
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;With this done, we first implement the list archiving in the &lt;code&gt;list&lt;&#x2F;code&gt; package using simple method calls. Later we are going to replace it with Golem&#x27;s own &lt;em&gt;Worker to Worker communication&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;As there will be a singleton archive worker, we can simulate this for now by having a top-level &lt;code&gt;Archive&lt;&#x2F;code&gt; instance in the &lt;code&gt;archive&lt;&#x2F;code&gt; package:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#383a42;&quot;&gt;&lt;code&gt;&lt;span&gt;pub let archive: Archive = Archive::new()
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And calling this in our &lt;code&gt;State::archive&lt;&#x2F;code&gt; method:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;moonbit&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-moonbit &quot;&gt;&lt;code class=&quot;language-moonbit&quot; data-lang=&quot;moonbit&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;pub&lt;&#x2F;span&gt;&lt;span&gt; fn archive(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt; : State) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;Unit {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.archived &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;true
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;@archive.DocumentName(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;TODO&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  @archive.archive.insert(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.document.iter().to_array())
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Note that so far we have no way to know the document&#x27;s name in &lt;code&gt;State&lt;&#x2F;code&gt; - we did not store it anywhere. This is intentional, as we discussed earlier the &lt;strong&gt;worker name&lt;&#x2F;strong&gt; will be used as the document&#x27;s unique identifier. Getting the worker&#x27;s name will be done in a Golem specific way once we get there.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;sending-an-email&quot;&gt;Sending an email&lt;&#x2F;h3&gt;
&lt;p&gt;We already prepared some part of the email sending logic in the &lt;code&gt;State&lt;&#x2F;code&gt; type: it has a &lt;em&gt;deadline&lt;&#x2F;em&gt; and a list of &lt;em&gt;recipients&lt;&#x2F;em&gt;. The idea is that we start an &lt;strong&gt;email sending worker&lt;&#x2F;strong&gt; when a new list is created, and this runs in parallel to our editing session, in a loop. In this loop it first queries the deadline and list of recipients from our list editing state, and then just sleeps until that given deadline. When it wakes up (after 12 hours), it queries the list again, and if it is &lt;em&gt;past&lt;&#x2F;em&gt; the deadline, it means there were no further editing operations in the meantime. Then it sends the notification emails to the list of recipients.&lt;&#x2F;p&gt;
&lt;p&gt;There is no library on &lt;a href=&quot;https:&#x2F;&#x2F;mooncakes.io&quot;&gt;mooncakes&lt;&#x2F;a&gt; yet for sending emails or even for making HTTP requests, so this is something we will have to do ourselves. Also, spawning the worker to run it in parallel is something Golem specific, so at this point we are not going to implement anything for the &lt;code&gt;email&lt;&#x2F;code&gt; package. We will get back to it once the rest of the application is already compiled as Golem components.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;compiling-as-golem-components&quot;&gt;Compiling as Golem Components&lt;&#x2F;h2&gt;
&lt;p&gt;It is time to try to compile our code as &lt;strong&gt;Golem components&lt;&#x2F;strong&gt; - these are WebAssembly components (using the &lt;a href=&quot;https:&#x2F;&#x2F;component-model.bytecodealliance.org&quot;&gt;component model&lt;&#x2F;a&gt;) exporting an API described with the Wasm Interface Type (WIT) language.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;bindings&quot;&gt;Bindings&lt;&#x2F;h3&gt;
&lt;p&gt;In the current world of the WASM component model, components are defined in a spec-first way - first we write the WIT files describing types and exported interfaces, and then use a &lt;em&gt;binding generator&lt;&#x2F;em&gt; to generate language-specific glue code from them. Fortunately the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bytecodealliance&#x2F;wit-bindgen&quot;&gt; &lt;code&gt;wit-bindgen&lt;&#x2F;code&gt; tool&lt;&#x2F;a&gt; already has MoonBit support, so we can start by installing the latest version:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#383a42;&quot;&gt;&lt;code&gt;&lt;span&gt;cargo install wit-bindgen-cli
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Note that Golem&#x27;s documentation recommends an older, specific version of &lt;code&gt;wit-bindgen&lt;&#x2F;code&gt; - but that version did not support MoonBit yet. The new version should work well but the example codes for Golem were not tested with it.&lt;&#x2F;p&gt;
&lt;p&gt;We will reuse the WIT definitions that were created for the Golem 1.0 launch demo.&lt;&#x2F;p&gt;
&lt;p&gt;For the &lt;code&gt;list&lt;&#x2F;code&gt; component, it is the following:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;wit&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-wit &quot;&gt;&lt;code class=&quot;language-wit&quot; data-lang=&quot;wit&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;package &lt;&#x2F;span&gt;&lt;span&gt;demo:lst;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;interface &lt;&#x2F;span&gt;&lt;span&gt;api {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;record &lt;&#x2F;span&gt;&lt;span&gt;connection {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;u64
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;record &lt;&#x2F;span&gt;&lt;span&gt;insert-params {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;after&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;string
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;variant &lt;&#x2F;span&gt;&lt;span&gt;change {
&lt;&#x2F;span&gt;&lt;span&gt;    added(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;    deleted(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;    inserted(insert-params)
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;func&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;c&lt;&#x2F;span&gt;&lt;span&gt;: connection, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;-&amp;gt; result&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;delete&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;func&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;c&lt;&#x2F;span&gt;&lt;span&gt;: connection, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;-&amp;gt; result&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;insert&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;func&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;c&lt;&#x2F;span&gt;&lt;span&gt;: connection, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;after&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;-&amp;gt; result&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;func&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;-&amp;gt; list&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;poll&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;func&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;c&lt;&#x2F;span&gt;&lt;span&gt;: connection) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;-&amp;gt; result&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;list&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;change&amp;gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;connect&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;func&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;email&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;-&amp;gt; tuple&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;connection, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;list&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;disconnect&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;func&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;c&lt;&#x2F;span&gt;&lt;span&gt;: connection) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;-&amp;gt; result&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;connected-editors&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;func&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;-&amp;gt; list&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;archive&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;func&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;is-archived&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;func&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;-&amp;gt; bool&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;interface &lt;&#x2F;span&gt;&lt;span&gt;email-query {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;deadline&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;func&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;-&amp;gt; option&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;u64&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;recipients&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;func&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;-&amp;gt; list&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;world &lt;&#x2F;span&gt;&lt;span&gt;lst  {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; .. imports to be explained later ..
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;export &lt;&#x2F;span&gt;&lt;span&gt;api;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;export &lt;&#x2F;span&gt;&lt;span&gt;email-query;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This interface definition exports two APIs - one is the public API of our list editors, very similar to the methods we already implemented for the &lt;code&gt;State&lt;&#x2F;code&gt; type. The other is an internal API for the &lt;code&gt;email&lt;&#x2F;code&gt; component to query the deadline and recipients as it was explained earlier.&lt;&#x2F;p&gt;
&lt;p&gt;For simplicity, we are using &lt;code&gt;string&lt;&#x2F;code&gt; as an error type on the public API.&lt;&#x2F;p&gt;
&lt;p&gt;For the &lt;code&gt;archive&lt;&#x2F;code&gt; component, we define a much simpler interface:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;wit&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-wit &quot;&gt;&lt;code class=&quot;language-wit&quot; data-lang=&quot;wit&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;package &lt;&#x2F;span&gt;&lt;span&gt;demo:archive;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;interface &lt;&#x2F;span&gt;&lt;span&gt;api {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;record &lt;&#x2F;span&gt;&lt;span&gt;archived-list {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;items&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;list&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;store&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;func&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;items&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;list&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;);
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;get-all&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;func&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;-&amp;gt; list&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;archived-list&amp;gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;world &lt;&#x2F;span&gt;&lt;span&gt;archive {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; .. imports to be explained later ..
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;export &lt;&#x2F;span&gt;&lt;span&gt;api;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And finally, for the &lt;code&gt;email&lt;&#x2F;code&gt; component:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;wit&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-wit &quot;&gt;&lt;code class=&quot;language-wit&quot; data-lang=&quot;wit&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;package &lt;&#x2F;span&gt;&lt;span&gt;demo:email;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;interface &lt;&#x2F;span&gt;&lt;span&gt;api {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;golem:rpc&#x2F;types@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;0.1.0&lt;&#x2F;span&gt;&lt;span&gt;.{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;uri&lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;send-email&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;func&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;list-uri&lt;&#x2F;span&gt;&lt;span&gt;: uri);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;world &lt;&#x2F;span&gt;&lt;span&gt;email {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; .. imports to be explained later ..
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;export &lt;&#x2F;span&gt;&lt;span&gt;api;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Here we are using a Golem specific type: &lt;code&gt;uri&lt;&#x2F;code&gt;. This is needed because the &lt;code&gt;email&lt;&#x2F;code&gt; workers need to call the specific &lt;code&gt;list&lt;&#x2F;code&gt; worker it was spawned from. The details of this will be explained later.&lt;&#x2F;p&gt;
&lt;p&gt;These WIT definitions need to be put in &lt;code&gt;wit&lt;&#x2F;code&gt; directories of each package, and dependencies in subdirectories of &lt;code&gt;wit&#x2F;deps&lt;&#x2F;code&gt;. Check the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;vigoo&#x2F;golem-moonbit-example&quot;&gt;repository&lt;&#x2F;a&gt; for reference.&lt;&#x2F;p&gt;
&lt;p&gt;We started with defining a single MoonBit &lt;strong&gt;module&lt;&#x2F;strong&gt; (identified by &lt;code&gt;moon.mod.json&lt;&#x2F;code&gt; in the root) and just created &lt;code&gt;list&lt;&#x2F;code&gt;, &lt;code&gt;email&lt;&#x2F;code&gt; and &lt;code&gt;archive&lt;&#x2F;code&gt; as internal packages. At this point we have to change this because we need to have a separate module for each chunk of code we want to compile to a separate Golem component. By running &lt;code&gt;wit-bindgen&lt;&#x2F;code&gt; in each of the three subdirectories (shown below), it actually generates module definitions for us.&lt;&#x2F;p&gt;
&lt;p&gt;We reorganize the directory structure a bit, moving &lt;code&gt;src&#x2F;archive&lt;&#x2F;code&gt; to &lt;code&gt;archive&lt;&#x2F;code&gt; etc, and moving the previously written source code to &lt;code&gt;archive&#x2F;src&lt;&#x2F;code&gt;. This way the generated bindings and our hand-written implementation will be put next to each other. We can also delete the top-level module definition JSON.&lt;&#x2F;p&gt;
&lt;p&gt;Now in all the three directories we can generate the bindings:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;wit-bindgen&lt;&#x2F;span&gt;&lt;span&gt; moonbit wit
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Note that once we start modifying the generated &lt;code&gt;stub.wit&lt;&#x2F;code&gt; files, running this command again will overwrite our changes. To avoid that, it can be run in the following way:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;wit-bindgen&lt;&#x2F;span&gt;&lt;span&gt; moonbit wit&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt; --ignore-stub
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;With this done,&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;moon&lt;&#x2F;span&gt;&lt;span&gt; build&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt; --target&lt;&#x2F;span&gt;&lt;span&gt; wasm
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;will compile a WASM module for us in &lt;code&gt;.&#x2F;target&#x2F;wasm&#x2F;release&#x2F;build&#x2F;gen&#x2F;gen.wasm&lt;&#x2F;code&gt;. This is not yet a WASM &lt;strong&gt;component&lt;&#x2F;strong&gt; - so it&#x27;s not ready to be used directly in Golem. To do so, we will have to use another command line tool, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bytecodealliance&#x2F;wasm-tools&quot;&gt;&lt;code&gt;wasm-tools&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; to convert this module into a component that self-describes its higher level exported interface.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;wit-dependencies&quot;&gt;WIT dependencies&lt;&#x2F;h3&gt;
&lt;p&gt;We are going to need to depend on some WIT packages, some from WASI (WebAssembly System Interface) to access things like environment variables and the current date&#x2F;time, and some Golem specific ones to implement worker-to-worker communication.&lt;&#x2F;p&gt;
&lt;p&gt;The simplest way to get the appropriate version of all the dependencies Golem provides is to use Golem&#x27;s &quot;all&quot; packaged interfaces with the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bytecodealliance&#x2F;wit-deps&quot;&gt;&lt;code&gt;wit-deps&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; tool.&lt;&#x2F;p&gt;
&lt;p&gt;So first we install &lt;code&gt;wit-deps&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;cargo&lt;&#x2F;span&gt;&lt;span&gt; install wit-deps-cli
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And create a &lt;code&gt;deps.toml&lt;&#x2F;code&gt; file in each &lt;code&gt;wit&lt;&#x2F;code&gt; directory we have created with the following contents:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;toml&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-toml &quot;&gt;&lt;code class=&quot;language-toml&quot; data-lang=&quot;toml&quot;&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;all &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;https:&#x2F;&#x2F;github.com&#x2F;golemcloud&#x2F;golem-wit&#x2F;archive&#x2F;main.tar.gz&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And finally we run the following command to fill the &lt;code&gt;wit&#x2F;deps&lt;&#x2F;code&gt; directory:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;wit-deps&lt;&#x2F;span&gt;&lt;span&gt; update
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;implementing-the-exports&quot;&gt;Implementing the exports&lt;&#x2F;h3&gt;
&lt;p&gt;Before setting up this compilation chain let&#x27;s see how we can connect the generated bindings with our existing code. Let&#x27;s start with the &lt;code&gt;archive&lt;&#x2F;code&gt; component, as it is the simplest one.&lt;&#x2F;p&gt;
&lt;p&gt;The binding generator creates a &lt;code&gt;stub.mbt&lt;&#x2F;code&gt; file at &lt;code&gt;archive&#x2F;gen&#x2F;interface&#x2F;demo&#x2F;archive&#x2F;api&#x2F;stub.mbt&lt;&#x2F;code&gt; with the two exported functions to be implemented. Here we face the usual question when working with code generators: we have a definition of &lt;code&gt;archived-list&lt;&#x2F;code&gt; in WIT and the binding generator generated the following MoonBit definition from it:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;moonbit&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-moonbit &quot;&gt;&lt;code class=&quot;language-moonbit&quot; data-lang=&quot;moonbit&quot;&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; Generated by `wit-bindgen` 0.36.0. DO NOT EDIT!
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;pub struct &lt;&#x2F;span&gt;&lt;span&gt;ArchivedList {
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt; : String; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;items&lt;&#x2F;span&gt;&lt;span&gt; : Array[String]
&lt;&#x2F;span&gt;&lt;span&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;But we already defined a very similar structure called &lt;code&gt;ArchivedDocument&lt;&#x2F;code&gt;! The only differences are the use of the &lt;code&gt;DocumentName&lt;&#x2F;code&gt; newtype and that our version was deriving a &lt;code&gt;Show&lt;&#x2F;code&gt; instance. We could decide to give up using the newtype, and use the generated type in our business logic, or we could keep the generated types separated from our actual code. (This is not really specific to MoonBit or the WASM tooling, we face the same issue with any code generator based approach).&lt;&#x2F;p&gt;
&lt;p&gt;In this post I will keep the generated code separate from our already written business logic, and just show how to implement the necessary conversions to implement the &lt;code&gt;stub.mbt&lt;&#x2F;code&gt; file(s).&lt;&#x2F;p&gt;
&lt;p&gt;The first exported function to implement is called &lt;code&gt;store&lt;&#x2F;code&gt;. We can implement it by just calling &lt;code&gt;insert&lt;&#x2F;code&gt; on our singleton top level &lt;code&gt;Archive&lt;&#x2F;code&gt; as we did before when we directly wired the &lt;code&gt;archive&lt;&#x2F;code&gt; package to the &lt;code&gt;list&lt;&#x2F;code&gt; package:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;moonbit&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-moonbit &quot;&gt;&lt;code class=&quot;language-moonbit&quot; data-lang=&quot;moonbit&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;pub&lt;&#x2F;span&gt;&lt;span&gt; fn store(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt; : String, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;items&lt;&#x2F;span&gt;&lt;span&gt; : Array[String]) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;Unit {
&lt;&#x2F;span&gt;&lt;span&gt;      @src.archive.insert(@src.DocumentName(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;items&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Note that we need to import our main &lt;code&gt;archive&lt;&#x2F;code&gt; source in the stub&#x27;s package JSON:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;json&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-json &quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;import&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: [
&lt;&#x2F;span&gt;&lt;span&gt;        { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;path&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;demo&#x2F;archive&#x2F;ffi&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;alias&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;ffi&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;},
&lt;&#x2F;span&gt;&lt;span&gt;        { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;path&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;demo&#x2F;archive&#x2F;src&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;alias&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;src&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;    ]
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The second function to be implemented needs to convert between the two representations of an archived document:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;moonbit&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-moonbit &quot;&gt;&lt;code class=&quot;language-moonbit&quot; data-lang=&quot;moonbit&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;pub&lt;&#x2F;span&gt;&lt;span&gt; fn get_all() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;Array[ArchivedList] {
&lt;&#x2F;span&gt;&lt;span&gt;  @src.archive
&lt;&#x2F;span&gt;&lt;span&gt;  .iter()
&lt;&#x2F;span&gt;&lt;span&gt;  .map(fn(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;archived&lt;&#x2F;span&gt;&lt;span&gt;) { { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;archived&lt;&#x2F;span&gt;&lt;span&gt;.name._, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;items&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;archived&lt;&#x2F;span&gt;&lt;span&gt;.items } })
&lt;&#x2F;span&gt;&lt;span&gt;  .to_array()
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Note that for this to work, we also have to make the previously defined &lt;code&gt;struct ArchivedDocument&lt;&#x2F;code&gt; a &lt;code&gt;pub struct&lt;&#x2F;code&gt; otherwise we cannot access it&#x27;s &lt;code&gt;name&lt;&#x2F;code&gt; and &lt;code&gt;items&lt;&#x2F;code&gt; fields from the stub package.&lt;&#x2F;p&gt;
&lt;p&gt;(Note: at the time of writing https:&#x2F;&#x2F;github.com&#x2F;bytecodealliance&#x2F;wit-bindgen&#x2F;pull&#x2F;1100 was not merged yet, and it is needed for the binding generator to produce working code with Golem wasm-rpc; Until it is merged, it is possible to compile the fork and use it directly)&lt;&#x2F;p&gt;
&lt;p&gt;The same way we can implement the two generated stubs in the &lt;code&gt;list&lt;&#x2F;code&gt; module (in &lt;code&gt;list&#x2F;gen&#x2F;interface&#x2F;demo&#x2F;lst&#x2F;api&#x2F;stub.mbt&lt;&#x2F;code&gt; and &lt;code&gt;list&#x2F;gen&#x2F;interface&#x2F;demo&#x2F;lst&#x2F;emailQuery&#x2F;stub.mbt&lt;&#x2F;code&gt;) using our existing implementation of &lt;code&gt;State&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;One interesting details is how we can map the &lt;code&gt;EditorError&lt;&#x2F;code&gt; failures into the string errors used in the WIT definition. First we define a &lt;code&gt;to_string&lt;&#x2F;code&gt; method for &lt;code&gt;EditorError&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;moonbit&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-moonbit &quot;&gt;&lt;code class=&quot;language-moonbit&quot; data-lang=&quot;moonbit&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;pub&lt;&#x2F;span&gt;&lt;span&gt; fn to_string(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt; : EditorError) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;String {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;match &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    InvalidConnection(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;Invalid connection ID: \{id._}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    AlreadyArchived &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;Document is already archived&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Then use &lt;code&gt;?&lt;&#x2F;code&gt; and &lt;code&gt;map_err&lt;&#x2F;code&gt; in the stubs:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;moonbit&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-moonbit &quot;&gt;&lt;code class=&quot;language-moonbit&quot; data-lang=&quot;moonbit&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;pub&lt;&#x2F;span&gt;&lt;span&gt; fn add(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;c&lt;&#x2F;span&gt;&lt;span&gt; : Connection, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt; : String) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;Result[Unit, String] {
&lt;&#x2F;span&gt;&lt;span&gt;  @src.state
&lt;&#x2F;span&gt;&lt;span&gt;  .add?(to_connection_id(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;c&lt;&#x2F;span&gt;&lt;span&gt;), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  .map_err(fn(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;err&lt;&#x2F;span&gt;&lt;span&gt;) { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;err&lt;&#x2F;span&gt;&lt;span&gt;.to_string() })
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;using-host-functions&quot;&gt;Using host functions&lt;&#x2F;h3&gt;
&lt;p&gt;When we implemented the &lt;code&gt;update_email_properties&lt;&#x2F;code&gt; function earlier, we could not properly query the current time to calculate the proper deadline. Now that we are targeting Golem, we can use the WebAssembly system interface (WASI) to access things like the system time. One way would be to use the published &lt;a href=&quot;https:&#x2F;&#x2F;mooncakes.io&#x2F;docs&#x2F;#&#x2F;yamajik&#x2F;wasi-bindings&#x2F;&quot;&gt;&lt;code&gt;wasi-bindings&lt;&#x2F;code&gt; package&lt;&#x2F;a&gt; but as we are already generating bindings from WIT anyway, we can just use our own generated bindings to imported host functions.&lt;&#x2F;p&gt;
&lt;p&gt;First, we need to import the WASI wall-clock interface into our WIT world:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;wit&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-wit &quot;&gt;&lt;code class=&quot;language-wit&quot; data-lang=&quot;wit&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;world &lt;&#x2F;span&gt;&lt;span&gt;lst  {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;export &lt;&#x2F;span&gt;&lt;span&gt;api;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;export &lt;&#x2F;span&gt;&lt;span&gt;email-query;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;wasi:clocks&#x2F;wall-clock@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;0.2.0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Then we regenerate the bindings (make sure to use &lt;code&gt;--ignore-stub&lt;&#x2F;code&gt; to avoid rewriting our stub implementation!) and import it into our main (&lt;code&gt;src&lt;&#x2F;code&gt;) package:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;json&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-json &quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;import&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: [
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;suiyunonghen&#x2F;datetime&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;path&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;demo&#x2F;lst&#x2F;interface&#x2F;wasi&#x2F;clocks&#x2F;wallClock&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;alias&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;wallClock&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;    ]
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;With that we can call the WASI &lt;code&gt;now&lt;&#x2F;code&gt; function to query the current system time, and convert it to the &lt;code&gt;datetime&lt;&#x2F;code&gt; module&#x27;s &lt;code&gt;DateTime&lt;&#x2F;code&gt; type which we were using before:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;moonbit&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-moonbit &quot;&gt;&lt;code class=&quot;language-moonbit&quot; data-lang=&quot;moonbit&quot;&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F;&#x2F;| Queries the WASI wall clock and returns it as a @datetime.DateTime
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F;&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F;&#x2F; Note that DateTime has only millisecond precision
&lt;&#x2F;span&gt;&lt;span&gt;fn now() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;@datetime.DateTime {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;wasi_now &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;@wallClock.now()
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;base_ms &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;wasi_now&lt;&#x2F;span&gt;&lt;span&gt;.seconds.reinterpret_as_int64() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;1000&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;nano_ms &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;wasi_now&lt;&#x2F;span&gt;&lt;span&gt;.nanoseconds.reinterpret_as_int() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&#x2F; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;1000000&lt;&#x2F;span&gt;&lt;span&gt;).to_int64();
&lt;&#x2F;span&gt;&lt;span&gt;  @datetime.DateTime::from_unix_mseconds(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;base_ms &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;nano_ms&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;golem-app-manifest&quot;&gt;Golem app manifest&lt;&#x2F;h2&gt;
&lt;p&gt;In the next step of our implementation we will have to connect our two existing components: &lt;code&gt;list&lt;&#x2F;code&gt; and &lt;code&gt;archive&lt;&#x2F;code&gt; in a way that &lt;code&gt;list&lt;&#x2F;code&gt; can do remote procedure calls to &lt;code&gt;archive&lt;&#x2F;code&gt;. With the same technique we will be able to implement the third component, &lt;code&gt;email&lt;&#x2F;code&gt; which needs to be both called &lt;em&gt;from&lt;&#x2F;em&gt;&lt;code&gt; list&lt;&#x2F;code&gt; (when started) and called back (when getting the deadline and recipients).&lt;&#x2F;p&gt;
&lt;p&gt;Golem has tooling supporting this - but before trying to use it, let&#x27;s convert our project into a &lt;strong&gt;golem application&lt;&#x2F;strong&gt; described by &lt;strong&gt;app manifests&lt;&#x2F;strong&gt;. This will enable us to use &lt;code&gt;golem-cli&lt;&#x2F;code&gt; to generate the necessary files for worker-to-worker communication, and will also make it easier to deploy the compiled components into Golem.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;the-build-steps&quot;&gt;The build steps&lt;&#x2F;h3&gt;
&lt;p&gt;To build a single MoonBit module into a Golem component, without any worker-to-worker communication involved, we have to perform the following steps:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;(Optionally) regenerate the WIT bindings with &lt;code&gt;wit-bindgen ... --ignore-stub&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Compile the MoonBit source code into a WASM module with &lt;code&gt;moon build --target wasm&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Embed the WIT specification into a custom WASM section using &lt;code&gt;wasm-tools component embed&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Convert the WASM module into a WASM &lt;em&gt;component&lt;&#x2F;em&gt; using &lt;code&gt;wasm-tools component new&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;When we will start to use worker-to-worker communication it will require even more steps, as we are going to generate stub WIT interfaces, and compile and link multiple WASM components. An earlier version of this was &lt;a href=&quot;https:&#x2F;&#x2F;blog.vigoo.dev&#x2F;posts&#x2F;w2w-communication-golem&#x2F;&quot;&gt;described in the Worker to Worker communication in Golem&lt;&#x2F;a&gt; blog post last year.&lt;&#x2F;p&gt;
&lt;p&gt;The Golem app manifest and the corresponding CLI tool, introduced with &lt;strong&gt;Golem 1.1&lt;&#x2F;strong&gt;, automates all these steps for us.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;manifest-template&quot;&gt;Manifest template&lt;&#x2F;h3&gt;
&lt;p&gt;We start by creating a root app manifest, &lt;code&gt;golem.yaml&lt;&#x2F;code&gt;, in the root of our project. We start by setting up a temporary directory and a shared directory for the WIT dependencies we previously fetched with &lt;code&gt;wit-deps&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;# Schema for IDEA:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;# $schema: https:&#x2F;&#x2F;schema.golem.cloud&#x2F;app&#x2F;golem&#x2F;1.1.0&#x2F;golem.schema.json
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;# Schema for vscode-yaml
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;# yaml-language-server: $schema=https:&#x2F;&#x2F;schema.golem.cloud&#x2F;app&#x2F;golem&#x2F;1.1.0&#x2F;golem.schema.json
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;tempDir&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;target&#x2F;golem-temp
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;witDeps&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt; - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;common-wit&#x2F;deps
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;By moving our previous &lt;code&gt;deps.toml&lt;&#x2F;code&gt; into &lt;code&gt;common-wit&lt;&#x2F;code&gt; and doing a &lt;code&gt;wit-deps update&lt;&#x2F;code&gt; in the root, we can fill up this &lt;code&gt;deps&lt;&#x2F;code&gt; directory with all the WASI and Golem APIs we need.&lt;&#x2F;p&gt;
&lt;p&gt;Then we define a &lt;strong&gt;template&lt;&#x2F;strong&gt; for building MoonBit components with Golem CLI. In the template, we are going to define two &lt;strong&gt;profiles&lt;&#x2F;strong&gt; - one for doing a &lt;strong&gt;release&lt;&#x2F;strong&gt; build and one for &lt;strong&gt;debug&lt;&#x2F;strong&gt;. In the post I&#x27;m only going to show the release build.&lt;&#x2F;p&gt;
&lt;p&gt;It starts by specifying some directory names and where the final WASM files will be placed:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;templates&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;moonbit&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;profiles&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;release&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;sourceWit&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;wit
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;generatedWit&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;wit-generated
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;componentWasm&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;..&#x2F;target&#x2F;release&#x2F;{{ componentName }}.wasm
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;linkedWasm&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;..&#x2F;target&#x2F;release&#x2F;{{ componentName }}-linked.wasm
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;These directories are relative to the components subdirectories (for example &lt;code&gt;archive&lt;&#x2F;code&gt;) so what we say here is that once all the components are built, they al will be put in the root &lt;code&gt;target&#x2F;release&lt;&#x2F;code&gt; directory.&lt;&#x2F;p&gt;
&lt;p&gt;Then we specify the &lt;strong&gt;build steps&lt;&#x2F;strong&gt;, described in the previous section:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;build&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;command&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;wit-bindgen moonbit wit-generated --ignore-stub --derive-error --derive-show
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;sources&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;            - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;wit-generated
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;targets&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;            - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;ffi
&lt;&#x2F;span&gt;&lt;span&gt;            - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;interface
&lt;&#x2F;span&gt;&lt;span&gt;            - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;world
&lt;&#x2F;span&gt;&lt;span&gt;        - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;command&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;moon build --target wasm
&lt;&#x2F;span&gt;&lt;span&gt;        - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;command&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;wasm-tools component embed wit-generated target&#x2F;wasm&#x2F;release&#x2F;build&#x2F;gen&#x2F;gen.wasm -o ..&#x2F;target&#x2F;release&#x2F;{{ componentName }}.module.wasm --encoding utf16
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;mkdirs&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;            - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;..&#x2F;target&#x2F;release
&lt;&#x2F;span&gt;&lt;span&gt;        - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;command&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;wasm-tools component new ..&#x2F;target&#x2F;release&#x2F;{{ componentName }}.module.wasm -o ..&#x2F;target&#x2F;release&#x2F;{{ componentName }}.wasm
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Finally, we can define additional directories to be cleaned by the &lt;code&gt;golem app clean&lt;&#x2F;code&gt; command, and we can even define custom commands to be executed with &lt;code&gt;golem app xxx&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;clean&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;target
&lt;&#x2F;span&gt;&lt;span&gt;        - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;wit-generated
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;customCommands&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;update-deps&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;          - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;command&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;wit-deps update
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;dir&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;..
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;regenerate-stubs&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;          - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;command&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;wit-bindgen moonbit wit-generated
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;With this set, we can add a new &lt;em&gt;MoonBit module&lt;&#x2F;em&gt;* to this &lt;strong&gt;Golem project&lt;&#x2F;strong&gt; by creating a &lt;code&gt;golem.yaml&lt;&#x2F;code&gt; in its directory - so &lt;code&gt;archive&#x2F;golem.yaml&lt;&#x2F;code&gt; and &lt;code&gt;list&#x2F;golem.yaml&lt;&#x2F;code&gt; for now.&lt;&#x2F;p&gt;
&lt;p&gt;In these sub-manifests we can use the above defined template to tell Golem that this is a MoonBit module. It is possible to mix Golem components written in different languages in a single application.&lt;&#x2F;p&gt;
&lt;p&gt;For example the &lt;code&gt;archive&lt;&#x2F;code&gt; component&#x27;s manifest will look like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;# Schema for IDEA:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;# $schema: https:&#x2F;&#x2F;schema.golem.cloud&#x2F;app&#x2F;golem&#x2F;1.1.0&#x2F;golem.schema.json
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;# Schema for vscode-yaml
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;# yaml-language-server: $schema=https:&#x2F;&#x2F;schema.golem.cloud&#x2F;app&#x2F;golem&#x2F;1.1.0&#x2F;golem.schema.json
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;components&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;archive&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;template&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;moonbit
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;building-the-components&quot;&gt;Building the components&lt;&#x2F;h3&gt;
&lt;p&gt;With this set, the whole application (with its two already written components) can be compiled by simply saying&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#383a42;&quot;&gt;&lt;code&gt;&lt;span&gt;golem app build
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;There are a few organizational things to do first, as &lt;code&gt;golem app build&lt;&#x2F;code&gt; does some transformations on the WIT definitions. This means that our previously written &lt;strong&gt;stubs&lt;&#x2F;strong&gt; are a wrong place. The easiest way to fix this is to delete all the wit-bindgen generated directories (but first backup the hand-written stubs!) and then copy back the stubs into the new directories created. We are not going to discuss this in more details here. The blog post incrementally discovers how to build Golem applications with MoonBit and introduces the app manifest in a late stage, but the recommended way is to start immediately with an app manifest and then there is no need to do these fixes.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;first-try&quot;&gt;First try&lt;&#x2F;h3&gt;
&lt;p&gt;Running the build command results in two WASM files that are ready to be used with Golem! Although they are not able to communicate with each other yet (so the archiving functionality does not work), it is already possible to try them out with Golem.&lt;&#x2F;p&gt;
&lt;p&gt;To do so, we can start Golem locally by downloading the latest release of &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;golemcloud&#x2F;golem&#x2F;releases&#x2F;tag&#x2F;v1.1.0&quot;&gt;single-executable Golem&lt;&#x2F;a&gt; or using our hosted Golem Cloud. With the &lt;code&gt;golem&lt;&#x2F;code&gt; binary, we just use the following command to start up the services locally:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; golem start&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt; -vv
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Then, from the root of our project, we can upload the two compiled components using the same command:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; golem component add&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt; --component-name&lt;&#x2F;span&gt;&lt;span&gt; archive
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;Added&lt;&#x2F;span&gt;&lt;span&gt; new component archive
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;Component&lt;&#x2F;span&gt;&lt;span&gt; URN:     urn:component:bde2da89-75a8-4adf-953f-33b360c978d0
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;Component&lt;&#x2F;span&gt;&lt;span&gt; name:    archive
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;Component&lt;&#x2F;span&gt;&lt;span&gt; version: 0
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;Component&lt;&#x2F;span&gt;&lt;span&gt; size:    9.35 KiB
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;Created&lt;&#x2F;span&gt;&lt;span&gt; at:        2025-01-03 15:09:05.166785 UTC
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;Exports:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;demo:archive-interface&#x2F;api.&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;get-all}&lt;&#x2F;span&gt;&lt;span&gt;() -&amp;gt; list&amp;lt;record { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;name:&lt;&#x2F;span&gt;&lt;span&gt; string, items: list&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;string&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; }&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;demo:archive-interface&#x2F;api.{store&lt;&#x2F;span&gt;&lt;span&gt;}(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;name:&lt;&#x2F;span&gt;&lt;span&gt; string, items: list&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;string&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;and&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; golem component add&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt; --component-name&lt;&#x2F;span&gt;&lt;span&gt; list
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;Added&lt;&#x2F;span&gt;&lt;span&gt; new component list
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;Component&lt;&#x2F;span&gt;&lt;span&gt; URN:     urn:component:b6420554-62b5-4902-8994-89c692a937f7
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;Component&lt;&#x2F;span&gt;&lt;span&gt; name:    list
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;Component&lt;&#x2F;span&gt;&lt;span&gt; version: 0
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;Component&lt;&#x2F;span&gt;&lt;span&gt; size:    28.46 KiB
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;Created&lt;&#x2F;span&gt;&lt;span&gt; at:        2025-01-03 15:09:09.743733 UTC
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;Exports:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;demo:lst-interface&#x2F;api.{add&lt;&#x2F;span&gt;&lt;span&gt;}(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;c:&lt;&#x2F;span&gt;&lt;span&gt; record { id: u64 }, value: string) -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; result&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;_, string&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;demo:lst-interface&#x2F;api.&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;archive}&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;  demo:lst-interface&#x2F;api.{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;connect&lt;&#x2F;span&gt;&lt;span&gt;}(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;email:&lt;&#x2F;span&gt;&lt;span&gt; string) -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; tuple&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;record { id: u64 }, list&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;string&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;demo:lst-interface&#x2F;api.&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;connected-editors}&lt;&#x2F;span&gt;&lt;span&gt;() -&amp;gt; list&amp;lt;string&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  demo:lst-interface&#x2F;api.{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;delete&lt;&#x2F;span&gt;&lt;span&gt;}(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;c:&lt;&#x2F;span&gt;&lt;span&gt; record { id: u64 }, value: string) -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; result&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;_, string&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;demo:lst-interface&#x2F;api.{disconnect&lt;&#x2F;span&gt;&lt;span&gt;}(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;c:&lt;&#x2F;span&gt;&lt;span&gt; record { id: u64 }) -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; result&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;_, string&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;demo:lst-interface&#x2F;api.&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;get}&lt;&#x2F;span&gt;&lt;span&gt;() -&amp;gt; list&amp;lt;string&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  demo:lst-interface&#x2F;api.{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;insert&lt;&#x2F;span&gt;&lt;span&gt;}(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;c:&lt;&#x2F;span&gt;&lt;span&gt; record { id: u64 }, after: string, value: string) -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; result&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;_, string&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;demo:lst-interface&#x2F;api.&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;is-archived}&lt;&#x2F;span&gt;&lt;span&gt;() -&amp;gt; bool
&lt;&#x2F;span&gt;&lt;span&gt;  demo:lst-interface&#x2F;api.{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;poll&lt;&#x2F;span&gt;&lt;span&gt;}(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;c:&lt;&#x2F;span&gt;&lt;span&gt; record { id: u64 }) -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; result&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;list&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;variant { added(string), deleted(string), inserted(record { after: string, value: string }) }&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;, string&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;demo:lst-interface&#x2F;email-query.&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;deadline}&lt;&#x2F;span&gt;&lt;span&gt;() -&amp;gt; option&amp;lt;u64&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  demo:lst-interface&#x2F;email-query.{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;recipients}&lt;&#x2F;span&gt;&lt;span&gt;() -&amp;gt; list&amp;lt;string&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We can try out the &lt;code&gt;archive&lt;&#x2F;code&gt; component by first invoking the &lt;code&gt;store&lt;&#x2F;code&gt; function, and then the &lt;code&gt;get-all&lt;&#x2F;code&gt; function, using the CLI&#x27;s &lt;code&gt;worker invoke-and-await&lt;&#x2F;code&gt; command:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; golem worker invoke-and-await&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt; --worker&lt;&#x2F;span&gt;&lt;span&gt; urn:worker:bde2da89-75a8-4adf-953f-33b360c978d0&#x2F;archive&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt; --function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;#39;demo:archive-interface&#x2F;api.{store}&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt; --arg &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;#39;&amp;quot;list1&amp;quot;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt; --arg &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;#39;[&amp;quot;x&amp;quot;, &amp;quot;y&amp;quot;, &amp;quot;z&amp;quot;]&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;Empty&lt;&#x2F;span&gt;&lt;span&gt; result.
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; golem worker invoke-and-await&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt; --worker&lt;&#x2F;span&gt;&lt;span&gt; urn:worker:bde2da89-75a8-4adf-953f-33b360c978d0&#x2F;archive&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt; --function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;#39;demo:archive-interface&#x2F;api.{get-all}&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;Invocation&lt;&#x2F;span&gt;&lt;span&gt; results in WAVE format:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;#39;[{name: &amp;quot;list1&amp;quot;, items: [&amp;quot;x&amp;quot;, &amp;quot;y&amp;quot;, &amp;quot;z&amp;quot;]}]&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Similarly we can try out the &lt;code&gt;list&lt;&#x2F;code&gt; component, keeping in mind that the &lt;strong&gt;worker name&lt;&#x2F;strong&gt; is the list name:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;When we try out list, we get an error (and if we used the &lt;code&gt;debug&lt;&#x2F;code&gt; profile - using &lt;code&gt;--build-profile debug&lt;&#x2F;code&gt; then we also get a nice call stack):&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#383a42;&quot;&gt;&lt;code&gt;&lt;span&gt;Failed to create worker b6420554-62b5-4902-8994-89c692a937f7&#x2F;list6: Failed to instantiate worker -1&#x2F;b6420554-62b5-4902-8994-89c692a937f7&#x2F;list6: error while executing at wasm backtrace:
&lt;&#x2F;span&gt;&lt;span&gt;    0: 0x19526 - wit-component:shim!indirect-wasi:clocks&#x2F;wall-clock@0.2.0-now
&lt;&#x2F;span&gt;&lt;span&gt;    1: 0x414b - &amp;lt;unknown&amp;gt;!demo&#x2F;lst&#x2F;interface&#x2F;wasi&#x2F;clocks&#x2F;wallClock.wasmImportNow
&lt;&#x2F;span&gt;&lt;span&gt;    2: 0x4165 - &amp;lt;unknown&amp;gt;!demo&#x2F;lst&#x2F;interface&#x2F;wasi&#x2F;clocks&#x2F;wallClock.now
&lt;&#x2F;span&gt;&lt;span&gt;    3: 0x42c1 - &amp;lt;unknown&amp;gt;!demo&#x2F;lst&#x2F;src.now
&lt;&#x2F;span&gt;&lt;span&gt;    4: 0x433d - &amp;lt;unknown&amp;gt;!@demo&#x2F;lst&#x2F;src.State::update_email_properties
&lt;&#x2F;span&gt;&lt;span&gt;    5: 0x440e - &amp;lt;unknown&amp;gt;!@demo&#x2F;lst&#x2F;src.State::new
&lt;&#x2F;span&gt;&lt;span&gt;    6: 0x5d81 - &amp;lt;unknown&amp;gt;!*init*&#x2F;38
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The reason is we are creating a global variable of &lt;code&gt;State&lt;&#x2F;code&gt; and in its constructor we are tryting to call a WASI function (to get the current date-time). This is too early for that; so let&#x27;s modify the &lt;code&gt;State::new&lt;&#x2F;code&gt; method to not call any host functions:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;moonbit&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-moonbit &quot;&gt;&lt;code class=&quot;language-moonbit&quot; data-lang=&quot;moonbit&quot;&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F;&#x2F;| Creates a new empty document editing state
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;pub&lt;&#x2F;span&gt;&lt;span&gt; fn State::new() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;State {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;state &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;document&lt;&#x2F;span&gt;&lt;span&gt;: Document::new(),
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;connected&lt;&#x2F;span&gt;&lt;span&gt;: Map::new(),
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;last_connection_id&lt;&#x2F;span&gt;&lt;span&gt;: ConnectionId(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;archived&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;email_deadline&lt;&#x2F;span&gt;&lt;span&gt;: @datetime.DateTime::from_unix_mseconds(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; Note: can&amp;#39;t use now() here because it will run in initialization-time (due to the global `state` variable)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;email_recipients&lt;&#x2F;span&gt;&lt;span&gt;: [],
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;state
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This fixes the issue! Now we can create and play with our collaboratively editable lists:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; golem worker start&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt; --component&lt;&#x2F;span&gt;&lt;span&gt; urn:component:b6420554-62b5-4902-8994-89c692a937f7&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt; --worker-name&lt;&#x2F;span&gt;&lt;span&gt; list7
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;Added&lt;&#x2F;span&gt;&lt;span&gt; worker list7
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;Worker&lt;&#x2F;span&gt;&lt;span&gt; URN:    urn:worker:b6420554-62b5-4902-8994-89c692a937f7&#x2F;list7
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;Component&lt;&#x2F;span&gt;&lt;span&gt; URN: urn:component:b6420554-62b5-4902-8994-89c692a937f7
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;Worker&lt;&#x2F;span&gt;&lt;span&gt; name:   list7
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; golem worker invoke-and-await&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt; --component&lt;&#x2F;span&gt;&lt;span&gt; urn:component:b6420554-62b5-4902-8994-89c692a937f7&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt; --worker-name&lt;&#x2F;span&gt;&lt;span&gt; list7&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt; --function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;#39;demo:lst-interface&#x2F;api.{connect}&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt; --arg &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;#39;&amp;quot;demo@vigoo.dev&amp;quot;&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;Invocation&lt;&#x2F;span&gt;&lt;span&gt; results in WAVE format:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;#39;({id: 1}, [])&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; golem worker invoke-and-await&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt; --component&lt;&#x2F;span&gt;&lt;span&gt; urn:component:b6420554-62b5-4902-8994-89c692a937f7&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt; --worker-name&lt;&#x2F;span&gt;&lt;span&gt; list7&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt; --function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;#39;demo:lst-interface&#x2F;api.{add}&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt; --arg &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;#39;{ id: 1}&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt; --arg &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;#39;&amp;quot;a&amp;quot;&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;Invocation&lt;&#x2F;span&gt;&lt;span&gt; results in WAVE format:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt; ok
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; golem worker invoke-and-await&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt; --component&lt;&#x2F;span&gt;&lt;span&gt; urn:component:b6420554-62b5-4902-8994-89c692a937f7&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt; --worker-name&lt;&#x2F;span&gt;&lt;span&gt; list7&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt; --function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;#39;demo:lst-interface&#x2F;api.{add}&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt; --arg &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;#39;{ id: 1}&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt; --arg &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;#39;&amp;quot;b&amp;quot;&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;Invocation&lt;&#x2F;span&gt;&lt;span&gt; results in WAVE format:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt; ok
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; golem worker invoke-and-await&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt; --component&lt;&#x2F;span&gt;&lt;span&gt; urn:component:b6420554-62b5-4902-8994-89c692a937f7&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt; --worker-name&lt;&#x2F;span&gt;&lt;span&gt; list7&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt; --function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;#39;demo:lst-interface&#x2F;api.{connect}&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt; --arg &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;#39;&amp;quot;demo2@vigoo.dev&amp;quot;&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;Invocation&lt;&#x2F;span&gt;&lt;span&gt; results in WAVE format:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;#39;({id: 2}, [&amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;])&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;worker-to-worker-communication&quot;&gt;Worker to Worker communication&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;list-calling-archive&quot;&gt;List calling archive&lt;&#x2F;h3&gt;
&lt;p&gt;The first worker-to-worker communication we want to set up is the &lt;code&gt;list&lt;&#x2F;code&gt; component calling the &lt;code&gt;archive&lt;&#x2F;code&gt; component - basically, when we call &lt;code&gt;archive()&lt;&#x2F;code&gt; on the list, it needs to call &lt;code&gt;store&lt;&#x2F;code&gt; in a singleton archive worker, sending its data to it.&lt;&#x2F;p&gt;
&lt;p&gt;The first step is to simply state this dependency in the app manifest of &lt;code&gt;list&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;components&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;list&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;template&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;moonbit
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;dependencies&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;list&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;wasm-rpc
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;target&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;archive
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Running &lt;code&gt;golem app build&lt;&#x2F;code&gt; after this will run a lot of new build steps - including generating and compiling some Rust source code, which is something that will no longer be needed in the next release of Golem.&lt;&#x2F;p&gt;
&lt;p&gt;We are not going into details of what is generated for worker to worker communication in this post - what is important is that after this change, and running build once, we can &lt;strong&gt;import&lt;&#x2F;strong&gt; a generated &lt;strong&gt;stub&lt;&#x2F;strong&gt; of our &lt;code&gt;archive&lt;&#x2F;code&gt; component in our &lt;code&gt;list&lt;&#x2F;code&gt; component&#x27;s moonbit package:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;json&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-json &quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;import&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: [
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;suiyunonghen&#x2F;datetime&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;path&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;demo&#x2F;lst&#x2F;interface&#x2F;wasi&#x2F;clocks&#x2F;wallClock&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;alias&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;wallClock&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;},
&lt;&#x2F;span&gt;&lt;span&gt;        { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;path&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;demo&#x2F;lst&#x2F;interface&#x2F;demo&#x2F;archive_stub&#x2F;stubArchive&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;alias&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;stubArchive&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;},
&lt;&#x2F;span&gt;&lt;span&gt;        { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;path&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;demo&#x2F;lst&#x2F;interface&#x2F;golem&#x2F;rpc&#x2F;types&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;alias&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;rpcTypes&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;    ]
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Then we can add the following code into our &lt;code&gt;archive&lt;&#x2F;code&gt; function to call the remote worker:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;moonbit&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-moonbit &quot;&gt;&lt;code class=&quot;language-moonbit&quot; data-lang=&quot;moonbit&quot;&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;archive_component_id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;bde2da89-75a8-4adf-953f-33b360c978d0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; TODO
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;archive &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;@stubArchive.Api::api({ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;urn:worker:\{archive_component_id}&#x2F;archive&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;});
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;TODO&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; TODO
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;archive&lt;&#x2F;span&gt;&lt;span&gt;.blocking_store(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.document.iter().to_array())
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In line 2 we construct the remote interface by pointing to a specific &lt;strong&gt;worker&lt;&#x2F;strong&gt;, by using the component ID and the worker&#x27;s name. (In the next Golem release this is going to be simplified by being able to use the component&#x27;s name instead). In line 5 we call the remote &lt;code&gt;store&lt;&#x2F;code&gt; function.&lt;&#x2F;p&gt;
&lt;p&gt;What is missing are two things:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;We should not hard-code the archive component&#x27;s ID as it is automatically generated when the component is first uploaded to Golem&lt;&#x2F;li&gt;
&lt;li&gt;We need to know our own &lt;strong&gt;worker name&lt;&#x2F;strong&gt; to be used as the list&#x27;s name&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The solution to both is to use &lt;strong&gt;environment variables&lt;&#x2F;strong&gt; - Golem automatically sets the &lt;code&gt;GOLEM_WORKER_NAME&lt;&#x2F;code&gt; environment variable to the worker&#x27;s name, and we can manually provide values to workers through custom environment variables. This allows us to inject the component ID from the outside (until a more sophisticated configuration feature is added in Golem 1.2).&lt;&#x2F;p&gt;
&lt;p&gt;We have already seen how we can use WASI to query the current date&#x2F;time; we can use another WASI interface to get environment variables. So once again, we add an import to our WIT file:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;wit&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-wit &quot;&gt;&lt;code class=&quot;language-wit&quot; data-lang=&quot;wit&quot;&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;wasi:cli&#x2F;environment@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;0.2.0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Then run &lt;code&gt;golem app build&lt;&#x2F;code&gt; to regenerate the bindings, and import it in the &lt;code&gt;list&#x2F;src&lt;&#x2F;code&gt; MoonBit package:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;json&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-json &quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span&gt;        { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;path&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;demo&#x2F;lst&#x2F;interface&#x2F;wasi&#x2F;cli&#x2F;environment&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;alias&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;environment&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;and implement a helper function to get a specific key from the environment variables:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;moonbit&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-moonbit &quot;&gt;&lt;code class=&quot;language-moonbit&quot; data-lang=&quot;moonbit&quot;&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F;&#x2F;| Gets an environment variable using WASI
&lt;&#x2F;span&gt;&lt;span&gt;fn get_env(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;key&lt;&#x2F;span&gt;&lt;span&gt; : String) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;String? {
&lt;&#x2F;span&gt;&lt;span&gt;  @environment.get_environment()
&lt;&#x2F;span&gt;&lt;span&gt;  .iter()
&lt;&#x2F;span&gt;&lt;span&gt;  .find_first(fn(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;pair&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;pair&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;key
&lt;&#x2F;span&gt;&lt;span&gt;  })
&lt;&#x2F;span&gt;&lt;span&gt;  .map(fn(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;pair&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;pair&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span&gt;  })
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We can use this to get the worker&#x27;s name and the archive component ID:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;moonbit&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-moonbit &quot;&gt;&lt;code class=&quot;language-moonbit&quot; data-lang=&quot;moonbit&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;archive_component_id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;get_env(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;ARCHIVE_COMPONENT_ID&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;).or(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;unknown&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;get_env(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;GOLEM_WORKER_NAME&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;).or(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;unknown&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;When starting the list workers, we have to explicitly specify &lt;code&gt;ARCHIVE_COMPONENT_ID&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; golem worker start&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt; --component&lt;&#x2F;span&gt;&lt;span&gt; urn:component:b6420554-62b5-4902-8994-89c692a937f7&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt; --worker-name&lt;&#x2F;span&gt;&lt;span&gt; list10&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt; --env &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;ARCHIVE_COMPONENT_ID=bde2da89-75a8-4adf-953f-33b360c978d0&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;With that we can try connecting to the list, adding some items and then calling &lt;code&gt;archive&lt;&#x2F;code&gt; on it, and finally calling &lt;code&gt;get-all&lt;&#x2F;code&gt; on the archive worker - we can see that the remote procedure call works!&lt;&#x2F;p&gt;
&lt;h3 id=&quot;list-and-email&quot;&gt;List and email&lt;&#x2F;h3&gt;
&lt;p&gt;We haven&#x27;t implemented the third component of the application yet - the one responsible for sending an email after some deadline. Setting up the component and the worker-to-worker communication works exactly the same as it was demonstrated above. The app manifest supports circular dependencies, so we can add say that &lt;code&gt;list&lt;&#x2F;code&gt; depends on &lt;code&gt;email&lt;&#x2F;code&gt; via &lt;code&gt;wasm-rpc&lt;&#x2F;code&gt;, and also &lt;code&gt;email&lt;&#x2F;code&gt; depends on &lt;code&gt;list&lt;&#x2F;code&gt; via &lt;code&gt;wasm-rpc&lt;&#x2F;code&gt;. We need to communicate in both directions.&lt;&#x2F;p&gt;
&lt;p&gt;We will have to use the WASI &lt;code&gt;monotonic-clock&lt;&#x2F;code&gt; interface&#x27;s &lt;code&gt;subscribe-instant&lt;&#x2F;code&gt; function to &lt;strong&gt;sleep&lt;&#x2F;strong&gt; until the given deadline.&lt;&#x2F;p&gt;
&lt;p&gt;Without showing all the details, here is the MoonBit code implementing the single &lt;code&gt;send-email&lt;&#x2F;code&gt; function we defined in the &lt;code&gt;email.wit&lt;&#x2F;code&gt; file:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;moonbit&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-moonbit &quot;&gt;&lt;code class=&quot;language-moonbit&quot; data-lang=&quot;moonbit&quot;&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F;&#x2F;| Structure holding an email sender&amp;#39;s configuration
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;pub&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;all&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;Email {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;list_worker_urn&lt;&#x2F;span&gt;&lt;span&gt; : String
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F;&#x2F;| Run the email sending loop
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;pub&lt;&#x2F;span&gt;&lt;span&gt; fn run(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt; : Email) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;Unit {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;while &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;match &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.get_deadline() {
&lt;&#x2F;span&gt;&lt;span&gt;      Some(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;epoch_ms&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;now &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;@wallClock.now()
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;now_ms &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;now&lt;&#x2F;span&gt;&lt;span&gt;.seconds &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;1000 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;+
&lt;&#x2F;span&gt;&lt;span&gt;          (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;now&lt;&#x2F;span&gt;&lt;span&gt;.nanoseconds.reinterpret_as_int() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&#x2F; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;1000000&lt;&#x2F;span&gt;&lt;span&gt;).to_uint64()
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;duration_ms &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;epoch_ms&lt;&#x2F;span&gt;&lt;span&gt;.reinterpret_as_int64() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;-
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;now_ms&lt;&#x2F;span&gt;&lt;span&gt;.reinterpret_as_int64()
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;duration_ms &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;          sleep(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;duration_ms&lt;&#x2F;span&gt;&lt;span&gt;.reinterpret_as_uint64())
&lt;&#x2F;span&gt;&lt;span&gt;        } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;else&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;          send_emails(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.get_recipients())
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;continue
&lt;&#x2F;span&gt;&lt;span&gt;      }
&lt;&#x2F;span&gt;&lt;span&gt;      None &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; break
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We use the &lt;code&gt;wall-clock&lt;&#x2F;code&gt; interface again to query the current time and calculate the duration to sleep for based on the deadline got from the corresponding list worker. The &lt;code&gt;get_deadline&lt;&#x2F;code&gt; and &lt;code&gt;get_recipients&lt;&#x2F;code&gt; methods are just using Golem&#x27;s Worker to Worker communication as shown before:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;moonbit&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-moonbit &quot;&gt;&lt;code class=&quot;language-moonbit&quot; data-lang=&quot;moonbit&quot;&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F;&#x2F;| Get the current deadline from the associated list worker
&lt;&#x2F;span&gt;&lt;span&gt;fn get_deadline(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt; : Email) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;UInt64? {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;api &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;@stubLst.EmailQuery::email_query({ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.list_worker_urn })
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;api&lt;&#x2F;span&gt;&lt;span&gt;.blocking_deadline()
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F;&#x2F;| Get the current list of recipients from the associated list worker
&lt;&#x2F;span&gt;&lt;span&gt;fn get_recipients(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt; : Email) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;Array[String] {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;api &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;@stubLst.EmailQuery::email_query({ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.list_worker_urn })
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;api&lt;&#x2F;span&gt;&lt;span&gt;.blocking_recipients()
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The two remaining interesting part are sleeping and sending emails.&lt;&#x2F;p&gt;
&lt;p&gt;We can &lt;strong&gt;sleep&lt;&#x2F;strong&gt; by calling the &lt;code&gt;subscribe-duration&lt;&#x2F;code&gt; function in the WASI &lt;code&gt;monotonic-clock&lt;&#x2F;code&gt; package to get a pollable, and then poll for it. As we only pass a single pollable to the list, it won&#x27;t return until the deadline we want to wait for expires:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;moonbit&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-moonbit &quot;&gt;&lt;code class=&quot;language-moonbit&quot; data-lang=&quot;moonbit&quot;&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F;&#x2F;| Sleep for the given amount of milliseconds
&lt;&#x2F;span&gt;&lt;span&gt;fn sleep(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;ms&lt;&#x2F;span&gt;&lt;span&gt; : UInt64) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;Unit {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;ns &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;ms &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;1000000
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;pollable &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;@monotonicClock.subscribe_duration(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;ns&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;@poll.poll([&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;pollable&lt;&#x2F;span&gt;&lt;span&gt;])
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;On the &lt;code&gt;list&lt;&#x2F;code&gt; side, we don&#x27;t want to block until this email sending loop runs - as it would block our list from receiving new requests. The generated RPC stubs support this, we simply use the non-blocking version on the generated &lt;code&gt;Api&lt;&#x2F;code&gt; type:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;moonbit&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-moonbit &quot;&gt;&lt;code class=&quot;language-moonbit&quot; data-lang=&quot;moonbit&quot;&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;if not&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.email_worker_started) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;email_component_id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;get_env(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;EMAIL_COMPONENT_ID&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;).or(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;unknown&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;get_env(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;GOLEM_WORKER_NAME&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;).or(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;unknown&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;self_component_id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;get_env(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;GOLEM_COMPONENT_ID&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;).or(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;unknown&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;api &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;@stubEmail.Api::api({ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;urn:worker:\{email_component_id}:\{name}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;})
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;api&lt;&#x2F;span&gt;&lt;span&gt;.send_email({ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;urn:worker:\{self_component_id}:\{name}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;})
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.email_worker_started  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;sending-emails&quot;&gt;Sending emails&lt;&#x2F;h2&gt;
&lt;p&gt;Sending actual emails is a bit more difficult, as there are no HTTP client libraries in the MoonBit ecosystem at the moment. But Golem implements the WASI HTTP interface, so we can use the already demonstrated techniques to import WASI HTTP through WIT, generate bindings for it, and then use it from MoonBit code to send emails through a third party provider.&lt;&#x2F;p&gt;
&lt;p&gt;In the example we are going to use &lt;a href=&quot;https:&#x2F;&#x2F;sendgrid.com&#x2F;en-us&quot;&gt;Sendgrid&lt;&#x2F;a&gt; as a provider. This means we have to send a HTTP &lt;strong&gt;POST&lt;&#x2F;strong&gt; request to &lt;code&gt;https:&#x2F;&#x2F;api.sendgrid.com&#x2F;v3&#x2F;mail&#x2F;send&lt;&#x2F;code&gt; with a pre-configured authorization header, and a JSON body describing our email sending request.&lt;&#x2F;p&gt;
&lt;p&gt;First we are going to define a few helper constants and functions to assemble the parts of the requests:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;moonbit&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-moonbit &quot;&gt;&lt;code class=&quot;language-moonbit&quot; data-lang=&quot;moonbit&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span&gt;AUTHORITY : String &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;api.sendgrid.com&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span&gt;PATH : String &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;v3&#x2F;mail&#x2F;send&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;type! &lt;&#x2F;span&gt;&lt;span&gt;HttpClientError String
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The payload is a JSON, which can be constructed using MoonBit&#x27;s built-in JSON literal feature. However in the WASI HTTP interface we have to write it out as a byte array. MoonBit strings are UTF-16 but SendGrid requires the payload to be in UTF-8. Unfortunately there isn&#x27;t any string encoding library available for MoonBit yet, so we write a simple function that fails if any of the characters is not ASCII:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;moonbit&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-moonbit &quot;&gt;&lt;code class=&quot;language-moonbit&quot; data-lang=&quot;moonbit&quot;&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F;&#x2F;| Converts a string to ASCII byte array if all characters are ASCII characters, otherwise fails
&lt;&#x2F;span&gt;&lt;span&gt;fn string_to_ascii(
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;what&lt;&#x2F;span&gt;&lt;span&gt; : String,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt; : String
&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;FixedArray[Byte]!HttpClientError {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;result &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;FixedArray::makei(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;.length(), fn(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;) { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;#39; &amp;#39;&lt;&#x2F;span&gt;&lt;span&gt; })
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;ch &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;ch&lt;&#x2F;span&gt;&lt;span&gt;.to_int() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;256&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;result&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;ch&lt;&#x2F;span&gt;&lt;span&gt;.to_int().to_byte()
&lt;&#x2F;span&gt;&lt;span&gt;    } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;else&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;raise &lt;&#x2F;span&gt;&lt;span&gt;HttpClientError(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;The \{what} contains non-ASCII characters&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;result
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;With this we can construct the payload and we can also read the sendgrid API key from an environment variable:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;moonbit&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-moonbit &quot;&gt;&lt;code class=&quot;language-moonbit&quot; data-lang=&quot;moonbit&quot;&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F;&#x2F;| Constructs a SendGrid send message payload as an ASCII byte array
&lt;&#x2F;span&gt;&lt;span&gt;fn payload(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;recipients&lt;&#x2F;span&gt;&lt;span&gt; : Array[String]) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;FixedArray[Byte]!HttpClientError {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;email_addresses &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;recipients
&lt;&#x2F;span&gt;&lt;span&gt;    .iter()
&lt;&#x2F;span&gt;&lt;span&gt;    .map(fn(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;email&lt;&#x2F;span&gt;&lt;span&gt;) { { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;email&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;email&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;email&lt;&#x2F;span&gt;&lt;span&gt; } })
&lt;&#x2F;span&gt;&lt;span&gt;    .to_array()
&lt;&#x2F;span&gt;&lt;span&gt;    .to_json()
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;from&lt;&#x2F;span&gt;&lt;span&gt; : Json &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;email&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;demo@vigoo.dev&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;Daniel Vigovszky&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt; }
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;json&lt;&#x2F;span&gt;&lt;span&gt; : Json &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;personalizations&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: [{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;to&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;email_addresses&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;cc&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: [], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;bcc&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: [] }],
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;from&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;from&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;subject&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;Collaborative list editor warning&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;content&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: [
&lt;&#x2F;span&gt;&lt;span&gt;      {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;type&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;text&#x2F;html&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;p&amp;gt;The list opened for editing has not been changed in the last 12 hours&amp;lt;&#x2F;p&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;      },
&lt;&#x2F;span&gt;&lt;span&gt;    ],
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;json_str &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;json&lt;&#x2F;span&gt;&lt;span&gt;.to_string()
&lt;&#x2F;span&gt;&lt;span&gt;  string_to_ascii!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;constructed JSON body&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;json_str&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F;&#x2F;| Gets the SENDGRID_API_KEY environment variable as an  ASCII byte array
&lt;&#x2F;span&gt;&lt;span&gt;fn authorization_header() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;FixedArray[Byte]!HttpClientError {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;key_str &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;@environment.get_environment()
&lt;&#x2F;span&gt;&lt;span&gt;    .iter()
&lt;&#x2F;span&gt;&lt;span&gt;    .find_first(fn(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;pair&lt;&#x2F;span&gt;&lt;span&gt;) { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;pair&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;SENDGRID_API_KEY&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt; })
&lt;&#x2F;span&gt;&lt;span&gt;    .map(fn(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;pair&lt;&#x2F;span&gt;&lt;span&gt;) { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;pair&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt; })
&lt;&#x2F;span&gt;&lt;span&gt;    .unwrap()
&lt;&#x2F;span&gt;&lt;span&gt;  string_to_ascii!(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;provided authorization header via SENDGRID_API_KEY&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;key_str&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;  )
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The next step is to create the data structures for sending out the HTTP request. In WASI HTTP, outgoing requests are modeled as WIT &lt;strong&gt;resources&lt;&#x2F;strong&gt;, which means we have to construct them with a constructor and call various methods to set properties of the request. All these methods have a &lt;code&gt;Result&lt;&#x2F;code&gt; result type so our code is going to be quite verbose:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;moonbit&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-moonbit &quot;&gt;&lt;code class=&quot;language-moonbit&quot; data-lang=&quot;moonbit&quot;&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;headers &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;@httpTypes.Fields::fields()
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;headers
&lt;&#x2F;span&gt;&lt;span&gt;  .append(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;Authorization&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, authorization_header!())
&lt;&#x2F;span&gt;&lt;span&gt;  .map_err(fn(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    HttpClientError(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;Failed to set Authorization header: \{error}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  })
&lt;&#x2F;span&gt;&lt;span&gt;  .unwrap_or_error!()
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;request &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;@httpTypes.OutgoingRequest::outgoing_request(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;headers&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;request
&lt;&#x2F;span&gt;&lt;span&gt;  .set_authority(Some(AUTHORITY))
&lt;&#x2F;span&gt;&lt;span&gt;  .map_err(fn(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;) { HttpClientError(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;Failed to set request authority&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;) })
&lt;&#x2F;span&gt;&lt;span&gt;  .unwrap_or_error!()
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;request
&lt;&#x2F;span&gt;&lt;span&gt;  .set_method(@httpTypes.Method::Post)
&lt;&#x2F;span&gt;&lt;span&gt;  .map_err(fn(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;) { HttpClientError(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;Failed to set request method&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;) })
&lt;&#x2F;span&gt;&lt;span&gt;  .unwrap_or_error!()
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;request
&lt;&#x2F;span&gt;&lt;span&gt;  .set_path_with_query(Some(PATH))
&lt;&#x2F;span&gt;&lt;span&gt;  .map_err(fn(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;) { HttpClientError(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;Failed to set request path&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;) })
&lt;&#x2F;span&gt;&lt;span&gt;  .unwrap_or_error!()
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;request
&lt;&#x2F;span&gt;&lt;span&gt;  .set_scheme(Some(@httpTypes.Scheme::Https))
&lt;&#x2F;span&gt;&lt;span&gt;  .map_err(fn(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;) { HttpClientError(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;Failed to set request scheme&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;) })
&lt;&#x2F;span&gt;&lt;span&gt;  .unwrap_or_error!()
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;outgoing_body &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;request
&lt;&#x2F;span&gt;&lt;span&gt;    .body()
&lt;&#x2F;span&gt;&lt;span&gt;    .map_err(fn(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;) { HttpClientError(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;Failed to get the outgoing body&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;) })
&lt;&#x2F;span&gt;&lt;span&gt;    .unwrap_or_error!()
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;stream &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;outgoing_body
&lt;&#x2F;span&gt;&lt;span&gt;    .write()
&lt;&#x2F;span&gt;&lt;span&gt;    .map_err(fn(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;      HttpClientError(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;Failed to open the outgoing body stream&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    })
&lt;&#x2F;span&gt;&lt;span&gt;    .unwrap_or_error!()
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;stream
&lt;&#x2F;span&gt;&lt;span&gt;    .blocking_write_and_flush(payload!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;recipients&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;    .map_err(fn(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;      HttpClientError(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;Failed to write request body: \{error}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    })
&lt;&#x2F;span&gt;&lt;span&gt;    .unwrap_or_error!()
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;outgoing_body
&lt;&#x2F;span&gt;&lt;span&gt;    .finish(None)
&lt;&#x2F;span&gt;&lt;span&gt;    .map_err(fn(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;) { HttpClientError(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;Failed to close the outgoing body&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;) })
&lt;&#x2F;span&gt;&lt;span&gt;    .unwrap_or_error!()
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;At this point we have our &lt;code&gt;request&lt;&#x2F;code&gt; variable initialized with everything we need, so we can call the &lt;code&gt;handle&lt;&#x2F;code&gt; function to initiate the HTTP request:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;moonbit&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-moonbit &quot;&gt;&lt;code class=&quot;language-moonbit&quot; data-lang=&quot;moonbit&quot;&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;future_incoming_response &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;@outgoingHandler.handle(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;request&lt;&#x2F;span&gt;&lt;span&gt;, None)
&lt;&#x2F;span&gt;&lt;span&gt;    .map_err(fn(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span&gt;) { HttpClientError(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;Failed to send request: \{error}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;) })
&lt;&#x2F;span&gt;&lt;span&gt;    .unwrap_or_error!()
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Sending a request is an async operation and what we have a result here is just a handle for a future value we have to await somehow. As we don&#x27;t want to do anything else in parallel in this example, we just write a loop that awaits for the result and checks for errors:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;moonbit&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-moonbit &quot;&gt;&lt;code class=&quot;language-moonbit&quot; data-lang=&quot;moonbit&quot;&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;while &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;match &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;future_incoming_response&lt;&#x2F;span&gt;&lt;span&gt;.get() {
&lt;&#x2F;span&gt;&lt;span&gt;      Some(Ok(Ok(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;response&lt;&#x2F;span&gt;&lt;span&gt;))) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;status &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;response&lt;&#x2F;span&gt;&lt;span&gt;.status()
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;status &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;200 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;amp;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;status &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;300&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;break
&lt;&#x2F;span&gt;&lt;span&gt;        } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;else&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;raise &lt;&#x2F;span&gt;&lt;span&gt;HttpClientError(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;Http request returned with status \{status}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;      }
&lt;&#x2F;span&gt;&lt;span&gt;      Some(Ok(Err(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;code&lt;&#x2F;span&gt;&lt;span&gt;))) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;raise &lt;&#x2F;span&gt;&lt;span&gt;HttpClientError(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;Http request failed with \{code}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;      Some(Err(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;)) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; raise &lt;&#x2F;span&gt;&lt;span&gt;HttpClientError(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;Http request failed&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;      None &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;pollable &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;future_incoming_response&lt;&#x2F;span&gt;&lt;span&gt;.subscribe()
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;@poll.poll([&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;pollable&lt;&#x2F;span&gt;&lt;span&gt;])
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;      }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We are ignoring the response body in this example - but in other applications, &lt;code&gt;response&lt;&#x2F;code&gt; could be used to open an incoming body stream and read chunks from it.&lt;&#x2F;p&gt;
&lt;p&gt;With this we implemented the simplest possible way to call the SendGrid API for sending an e-mail using WASI HTTP provided by Golem.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;debugging&quot;&gt;Debugging&lt;&#x2F;h2&gt;
&lt;p&gt;When compiled to debug (using &lt;code&gt;golem app build --build-profile debug&lt;&#x2F;code&gt;), Golem shows a nice stack trace when something goes wrong in a MoonBit component. Another useful way to observe a worker is to write a &lt;strong&gt;log&lt;&#x2F;strong&gt; in it, which can be realtime watched (or queried later) using tools like &lt;code&gt;golem worker connect&lt;&#x2F;code&gt; or the Golem Console.&lt;&#x2F;p&gt;
&lt;p&gt;The best way to write logs from MoonBit is to use the WASI Logging interface. We can import it as usual in our WITs:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;wit&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-wit &quot;&gt;&lt;code class=&quot;language-wit&quot; data-lang=&quot;wit&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;wasi:logging&#x2F;logging;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;and then to our MoonBit packages:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;json&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-json &quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;demo&#x2F;archive&#x2F;interface&#x2F;wasi&#x2F;logging&#x2F;logging&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;and then write out log messages of various levels from our application logic:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;moonbit&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-moonbit &quot;&gt;&lt;code class=&quot;language-moonbit&quot; data-lang=&quot;moonbit&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;recipients &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.get_recipients();
&lt;&#x2F;span&gt;&lt;span&gt;@logging.log(@logging.Level::INFO, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;Sending emails to recipients: \{recipients}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;match &lt;&#x2F;span&gt;&lt;span&gt;send_emails?(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;recipients&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;  Ok(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;@logging.log(@logging.Level::INFO, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;Sending emails succeeded&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  Err(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;@logging.log(@logging.Level::ERROR, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;Failed to send emails: \{error}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;MoonBit is a nice new language that is quite powerful and expressive, and seems to be a very good fit for developing applications for Golem. The resulting WASM binaries are very small - a few tens of kilobytes for this application (only increased by the generated Rust stubs - but those are going away soon). A few things in the language felt a little bit inconvenient - but maybe it is just a matter of personal taste - mostly the JSON files describing MoonBit packages, the anonymous function syntax and the way the built-in formatter organizes things. I&#x27;m sure some of these, especially the tooling, will greatly improve in the future.&lt;&#x2F;p&gt;
&lt;p&gt;The support for WASM and the Component Model are still in an early stage - but working. It requires many manual steps, but fortunately Golem&#x27;s app manifest feature can automate most of this for us. Still the generated directory structure of &lt;code&gt;wit-bindgen moonbit&lt;&#x2F;code&gt; felt a little overwhelming first.&lt;&#x2F;p&gt;
&lt;p&gt;I hope the MoonBit ecosystem will get some useful libraries in the near future, convenient wappers for WASI and WASI HTTP, (and Golem specific ones!), string encoding utilities, etc. As there are not many libraries yet, it is very easy to find something useful to work on.&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;m looking forward to have official support for MoonBit in Golem, such as templates for the &lt;code&gt;golem new ...&lt;&#x2F;code&gt; command and extensive documentation on our website.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>[Video] Golem and the WASM Component Model @ LambdaConf 2024</title>
        <published>2024-06-16T00:00:00+00:00</published>
        <updated>2024-06-16T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Daniel Vigovszky
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://blog.vigoo.dev/posts/golem-and-the-wasm-component-model/"/>
        <id>https://blog.vigoo.dev/posts/golem-and-the-wasm-component-model/</id>
        
        <content type="html" xml:base="https://blog.vigoo.dev/posts/golem-and-the-wasm-component-model/">&lt;p&gt;My talk at &lt;a href=&quot;https:&#x2F;&#x2F;www.lambdaconf.us&quot;&gt;LambdaConf 2024&lt;&#x2F;a&gt; explaining how &lt;a href=&quot;https:&#x2F;&#x2F;golem.cloud&quot;&gt;Golem&lt;&#x2F;a&gt; takes advantage of the WebAssembly Component Model.&lt;&#x2F;p&gt;
&lt;iframe width=&quot;800&quot; height=&quot;450&quot; src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;g5uUQSByvI4?si=lxlQgFztHp94WjrU&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&quot; referrerpolicy=&quot;strict-origin-when-cross-origin&quot; allowfullscreen&gt;&lt;&#x2F;iframe&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Zig and the WASM Component Model</title>
        <published>2024-05-09T00:00:00+00:00</published>
        <updated>2024-05-09T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Daniel Vigovszky
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://blog.vigoo.dev/posts/zig-wasm-component-model/"/>
        <id>https://blog.vigoo.dev/posts/zig-wasm-component-model/</id>
        
        <content type="html" xml:base="https://blog.vigoo.dev/posts/zig-wasm-component-model/">&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;golem.cloud&quot;&gt;Golem&lt;&#x2F;a&gt; always considered &lt;a href=&quot;https:&#x2F;&#x2F;ziglang.org&quot;&gt;Zig&lt;&#x2F;a&gt; a supported language, but until now the only documented way to use it was to compile a program with a single &lt;code&gt;main&lt;&#x2F;code&gt; function into a &lt;em&gt;core WebAssembly module&lt;&#x2F;em&gt; and then wrap that as a component that can be uploaded to Golem for execution. This is very limiting, as in order to take full advantage of Golem (and any other part of the evolving &lt;em&gt;WASM Component Model ecosystem&lt;&#x2F;em&gt;) a Zig program must have definitions for both &lt;em&gt;importing&lt;&#x2F;em&gt; and &lt;em&gt;exporting&lt;&#x2F;em&gt; functions and data types in order to be a usable component.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;binding-generators&quot;&gt;Binding generators&lt;&#x2F;h2&gt;
&lt;p&gt;For many supported languages the workflow is to write a &lt;strong&gt;WIT&lt;&#x2F;strong&gt; file, which is the Component Model&#x27;s &lt;a href=&quot;https:&#x2F;&#x2F;component-model.bytecodealliance.org&#x2F;design&#x2F;wit.html&quot;&gt;interface definition language&lt;&#x2F;a&gt; and then use a &lt;em&gt;binding generator&lt;&#x2F;em&gt;, such as &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bytecodealliance&#x2F;wit-bindgen&#x2F;&quot;&gt;wit-bindgen&lt;&#x2F;a&gt; to create statically typed representation of the component&#x27;s imports and exports in the targeted language.&lt;&#x2F;p&gt;
&lt;p&gt;The binding generator does not support Zig, but it does support C. So the best we can do with existing tooling is to use the C binding generator and Zig&#x27;s excellent C interoperability together to be able to create WASM components with Zig.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-steps&quot;&gt;The steps&lt;&#x2F;h2&gt;
&lt;p&gt;The primary steps are the following:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Define&lt;&#x2F;strong&gt; the component&#x27;s interface using WIT&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Generate&lt;&#x2F;strong&gt; C bindings from this definition&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Implement&lt;&#x2F;strong&gt; the exported functions in Zig, potentially using other imported interfaces and data types available through the generated binding&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Compile&lt;&#x2F;strong&gt; the whole project into WASM&lt;&#x2F;li&gt;
&lt;li&gt;As Zig&#x27;s standard library still uses &lt;em&gt;WASI Preview 1&lt;&#x2F;em&gt;, and outputs a single WASM module, we also have to &lt;strong&gt;compose&lt;&#x2F;strong&gt; our resulting module with an &lt;em&gt;adapter component&lt;&#x2F;em&gt; in order to get a WASM component depending on &lt;em&gt;WASI Preview 2&lt;&#x2F;em&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The first step is manual work - although we may eventually get code-first approaches in some languages where the WIT interface is generated as part as the build flow, it is not the case for Zig at the moment.&lt;&#x2F;p&gt;
&lt;p&gt;For generating the bindings we use &lt;code&gt;wit-bindgen&lt;&#x2F;code&gt;, and once the implementation is done we compile the Zig source code, together with the generated C bindings into a WASM module using zig&#x27;s build system (&lt;code&gt;zig build&lt;&#x2F;code&gt;).&lt;&#x2F;p&gt;
&lt;p&gt;Finally we can use &lt;code&gt;wasm-tools compose&lt;&#x2F;code&gt; to take this WASM module and an appropriate version of a Preview1 adapter such as &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;golemcloud&#x2F;golem-wit&#x2F;blob&#x2F;main&#x2F;adapters&#x2F;tier1&#x2F;wasi_snapshot_preview1.wasm&quot;&gt;the one we provide for Golem&lt;&#x2F;a&gt; to get the final component that&#x27;s ready to be used with Golem.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;zig-s-build-system&quot;&gt;Zig&#x27;s build system&lt;&#x2F;h2&gt;
&lt;p&gt;Executing all these steps manually is not convenient but fortunately we can integrate all the steps within Zig&#x27;s &lt;em&gt;build system&lt;&#x2F;em&gt;. Let&#x27;s see how!&lt;&#x2F;p&gt;
&lt;p&gt;We need to write a custom &lt;code&gt;build.zig&lt;&#x2F;code&gt; in the following way. First, let&#x27;s do some imports and start defining our build flow:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;zig&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-zig &quot;&gt;&lt;code class=&quot;language-zig&quot; data-lang=&quot;zig&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; std &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= @import&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;std&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; Builder &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; std.build.Builder;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; CrossTarget &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; std.zig.CrossTarget;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;build&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;*Builder&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;!void &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The first non-manual thing on our list of steps is &lt;strong&gt;generating&lt;&#x2F;strong&gt; the C bindings. Let&#x27;s define a build step that just runs &lt;code&gt;wit-bindgen&lt;&#x2F;code&gt; for us:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;zig&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-zig &quot;&gt;&lt;code class=&quot;language-zig&quot; data-lang=&quot;zig&quot;&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; bindgen &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; b.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;addSystemCommand&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;.{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;wit-bindgen&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;c&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;--autodrop-borrows&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;yes&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, 
&lt;&#x2F;span&gt;&lt;span&gt;    	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;.&#x2F;wit&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;--out-dir&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;src&#x2F;bindings&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;});
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This is just a description of running the binding generator, not integrated within the build flow yet. The next step is &lt;strong&gt;compiling&lt;&#x2F;strong&gt; our Zig and C files into WASM.&lt;&#x2F;p&gt;
&lt;p&gt;First we define it as an &lt;em&gt;executable target&lt;&#x2F;em&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;zig&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-zig &quot;&gt;&lt;code class=&quot;language-zig&quot; data-lang=&quot;zig&quot;&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; optimize &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; b.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;standardOptimizeOption&lt;&#x2F;span&gt;&lt;span&gt;(.{
&lt;&#x2F;span&gt;&lt;span&gt;        .preferred_optimize_mode &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; .ReleaseSmall&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    });
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; wasm &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; b.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;addExecutable&lt;&#x2F;span&gt;&lt;span&gt;(.{ 
&lt;&#x2F;span&gt;&lt;span&gt;    	.name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;main&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;      .root_source_file &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; .{ .path &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;src&#x2F;main.zig&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;}, 
&lt;&#x2F;span&gt;&lt;span&gt;      .target &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; .{
&lt;&#x2F;span&gt;&lt;span&gt;        .cpu_arch &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; .wasm32&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        .os_tag &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; .wasi&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    	}, 
&lt;&#x2F;span&gt;&lt;span&gt;    	.optimize &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; optimize 
&lt;&#x2F;span&gt;&lt;span&gt;    });
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This already defines we want to use WASM and target WASI and points to our root source file. We are not done yet though, as if we run the binding generator step defined above, we will end up having a couple of files generated in our &lt;code&gt;src&#x2F;bindings&lt;&#x2F;code&gt; directory:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#383a42;&quot;&gt;&lt;code&gt;&lt;span&gt;λ l src&#x2F;bindings
&lt;&#x2F;span&gt;&lt;span&gt;.rw-r--r-- 909 vigoo  9 May 09:34 zig3.c
&lt;&#x2F;span&gt;&lt;span&gt;.rw-r--r-- 371 vigoo  9 May 09:34 zig3.h
&lt;&#x2F;span&gt;&lt;span&gt;.rw-r--r-- 299 vigoo  9 May 09:34 zig3_component_type.o
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;code&gt;.c&lt;&#x2F;code&gt;&#x2F;&lt;code&gt;.h&lt;&#x2F;code&gt; pair contains the generated binding, while the object file holds the binary representation of the WIT interface it was generated from.&lt;&#x2F;p&gt;
&lt;p&gt;We need to add the C source and the object file into our build, and the header file to the include file paths. As the name of the generated files depend on the WIT file&#x27;s contents, we need to list all files in this &lt;code&gt;bindings&lt;&#x2F;code&gt; directory and mutate our &lt;code&gt;wasm&lt;&#x2F;code&gt; build target according to what we find:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;zig&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-zig &quot;&gt;&lt;code class=&quot;language-zig&quot; data-lang=&quot;zig&quot;&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; binding_root &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; b.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;pathFromRoot&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;src&#x2F;bindings&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;var&lt;&#x2F;span&gt;&lt;span&gt; binding_root_dir &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= try&lt;&#x2F;span&gt;&lt;span&gt; std.fs.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;cwd&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;openIterableDir&lt;&#x2F;span&gt;&lt;span&gt;(binding_root, .{});
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;defer&lt;&#x2F;span&gt;&lt;span&gt; binding_root_dir.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;close&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;var&lt;&#x2F;span&gt;&lt;span&gt; it &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= try&lt;&#x2F;span&gt;&lt;span&gt; binding_root_dir.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;walk&lt;&#x2F;span&gt;&lt;span&gt;(b.allocator);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;while &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;try&lt;&#x2F;span&gt;&lt;span&gt; it.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;next&lt;&#x2F;span&gt;&lt;span&gt;()) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt;entry&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;switch &lt;&#x2F;span&gt;&lt;span&gt;(entry.kind) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;            .file &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; path &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; b.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;pathJoin&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;.{ binding_root, entry.path });
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(std.mem.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;endsWith&lt;&#x2F;span&gt;&lt;span&gt;(u8, entry.basename, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;.c&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)) {
&lt;&#x2F;span&gt;&lt;span&gt;                    wasm.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;addCSourceFile&lt;&#x2F;span&gt;&lt;span&gt;(.{ .file &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; .{ .path &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; path }, .flags &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; &amp;amp;.{} });
&lt;&#x2F;span&gt;&lt;span&gt;                } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;else if &lt;&#x2F;span&gt;&lt;span&gt;(std.mem.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;endsWith&lt;&#x2F;span&gt;&lt;span&gt;(u8, entry.basename, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;.o&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)) {
&lt;&#x2F;span&gt;&lt;span&gt;                    wasm.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;addObjectFile&lt;&#x2F;span&gt;&lt;span&gt;(.{ .path &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; path });
&lt;&#x2F;span&gt;&lt;span&gt;                }
&lt;&#x2F;span&gt;&lt;span&gt;            },
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;else =&amp;gt; continue&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This registers all the &lt;code&gt;.c&lt;&#x2F;code&gt; and &lt;code&gt;.o&lt;&#x2F;code&gt; files from the generated bindings, but we still need to add the whole directory as an include path:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;zig&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-zig &quot;&gt;&lt;code class=&quot;language-zig&quot; data-lang=&quot;zig&quot;&gt;&lt;span&gt;    wasm.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;addIncludePath&lt;&#x2F;span&gt;&lt;span&gt;(.{ .path &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; binding_root });
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;and enable linking with &lt;code&gt;libc&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;zig&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-zig &quot;&gt;&lt;code class=&quot;language-zig&quot; data-lang=&quot;zig&quot;&gt;&lt;span&gt;    wasm.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;linkLibC&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now that we defined two build steps - the generating the bindings and compiling to a WASM module - we define the third step which is &lt;strong&gt;composing&lt;&#x2F;strong&gt; the generated module and the preview1 adapter into a WASM component:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;zig&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-zig &quot;&gt;&lt;code class=&quot;language-zig&quot; data-lang=&quot;zig&quot;&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; adapter &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; b.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;option&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    	[]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; u8, 
&lt;&#x2F;span&gt;&lt;span&gt;    	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;adapter&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, 
&lt;&#x2F;span&gt;&lt;span&gt;    	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;Path to the Golem Tier1 WASI adapter&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;orelse &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;adapters&#x2F;tier1&#x2F;wasi_snapshot_preview1.wasm&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; out &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= try&lt;&#x2F;span&gt;&lt;span&gt; std.fmt.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;allocPrint&lt;&#x2F;span&gt;&lt;span&gt;(b.allocator, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;zig-out&#x2F;bin&#x2F;{s}&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, .{wasm.out_filename});
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; component &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; b.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;addSystemCommand&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;.{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;wasm-tools&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;component&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;new&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, out, 
&lt;&#x2F;span&gt;&lt;span&gt;    	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;-o&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;zig-out&#x2F;bin&#x2F;component.wasm&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;--adapt&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, adapter });
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Here we provide a way to override the path to the adapter WASM using &lt;code&gt;zig build -Dadapter=xxx&lt;&#x2F;code&gt; but default to &lt;code&gt;adapters&#x2F;tier1&#x2F;wasi_snapshot_preview1.wasm&lt;&#x2F;code&gt; in case it is not specified.&lt;&#x2F;p&gt;
&lt;p&gt;The final step is to set up dependencies between these build steps and wire them to the main build flow:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;zig&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-zig &quot;&gt;&lt;code class=&quot;language-zig&quot; data-lang=&quot;zig&quot;&gt;&lt;span&gt;    wasm.step.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;dependOn&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;bindgen.step);
&lt;&#x2F;span&gt;&lt;span&gt;    component.step.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;dependOn&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;wasm.step);
&lt;&#x2F;span&gt;&lt;span&gt;    b.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;installArtifact&lt;&#x2F;span&gt;&lt;span&gt;(wasm);
&lt;&#x2F;span&gt;&lt;span&gt;    b.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;getInstallStep&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;dependOn&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;component.step);
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;trying-it-out&quot;&gt;Trying it out&lt;&#x2F;h2&gt;
&lt;p&gt;Let&#x27;s try this out by implementing a simple counter component. We start with the first step - defining our WIT file, putting it into &lt;code&gt;wit&#x2F;counter.wit&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;wit&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-wit &quot;&gt;&lt;code class=&quot;language-wit&quot; data-lang=&quot;wit&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;package &lt;&#x2F;span&gt;&lt;span&gt;golem:example;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;interface &lt;&#x2F;span&gt;&lt;span&gt;api {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;func&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;u64&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;func&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;-&amp;gt; u64&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;world &lt;&#x2F;span&gt;&lt;span&gt;counter {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;export &lt;&#x2F;span&gt;&lt;span&gt;api;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We also save the above defined build script as &lt;code&gt;build.zig&lt;&#x2F;code&gt; (full version &lt;a href=&quot;https:&#x2F;&#x2F;gist.github.com&#x2F;vigoo&#x2F;19ed4b5d3e47ca2f5f1258d1ae8b28a4&quot;&gt;available here&lt;&#x2F;a&gt;) and then write an initial  &lt;code&gt;src&#x2F;main.zig&lt;&#x2F;code&gt; file:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;zig&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-zig &quot;&gt;&lt;code class=&quot;language-zig&quot; data-lang=&quot;zig&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; std &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= @import&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;std&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;anyerror!void &lt;&#x2F;span&gt;&lt;span&gt;{}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Let&#x27;s place the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;golemcloud&#x2F;golem-wit&#x2F;raw&#x2F;main&#x2F;adapters&#x2F;tier1&#x2F;wasi_snapshot_preview1.wasm&quot;&gt;adapter WASM&lt;&#x2F;a&gt; as well in the &lt;code&gt;adapters&#x2F;tier1&lt;&#x2F;code&gt; directory, and then try to compile this:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#383a42;&quot;&gt;&lt;code&gt;&lt;span&gt;λ zig build --summary all                                                                                 ...
&lt;&#x2F;span&gt;&lt;span&gt;zig build-exe main Debug wasm32-wasi: error: the following command failed with 2 compilation errors:
&lt;&#x2F;span&gt;&lt;span&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;error: wasm-ld: &#x2F;Users&#x2F;vigoo&#x2F;projects&#x2F;demo&#x2F;counter&#x2F;zig-cache&#x2F;o&#x2F;a212123ad3dcf4839747c2bd77f7ef4e&#x2F;counter.o:
&lt;&#x2F;span&gt;&lt;span&gt;undefined symbol: exports_golem_example_api_add
&lt;&#x2F;span&gt;&lt;span&gt;error: wasm-ld: &#x2F;Users&#x2F;vigoo&#x2F;projects&#x2F;demo&#x2F;counter&#x2F;zig-cache&#x2F;o&#x2F;a212123ad3dcf4839747c2bd77f7ef4e&#x2F;counter.o:
&lt;&#x2F;span&gt;&lt;span&gt;undefined symbol: exports_golem_example_api_get
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;It fails because we defined two exported functions: &lt;code&gt;api&#x2F;add&lt;&#x2F;code&gt; and &lt;code&gt;api&#x2F;get&lt;&#x2F;code&gt; in our WIT file but haven&#x27;t implemented them yet. Let&#x27;s do that:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;zig&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-zig &quot;&gt;&lt;code class=&quot;language-zig&quot; data-lang=&quot;zig&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;state&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;u64 = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;export fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;exports_golem_example_api_add&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;u64&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; stdout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; std.io.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;getStdOut&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;writer&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    stdout.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;Adding {} to state&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0997b3;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, .{value}) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;catch unreachable&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    state &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;+=&lt;&#x2F;span&gt;&lt;span&gt; value;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;export fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;exports_golem_example_api_get&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;u64 &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; state;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Then compile it:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#383a42;&quot;&gt;&lt;code&gt;&lt;span&gt;λ zig build --summary all
&lt;&#x2F;span&gt;&lt;span&gt;Generating &amp;quot;src&#x2F;bindings&#x2F;counter.c&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;Generating &amp;quot;src&#x2F;bindings&#x2F;counter.h&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;Generating &amp;quot;src&#x2F;bindings&#x2F;counter_component_type.o&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;Build Summary: 5&#x2F;5 steps succeeded
&lt;&#x2F;span&gt;&lt;span&gt;install success
&lt;&#x2F;span&gt;&lt;span&gt;├─ install main cached
&lt;&#x2F;span&gt;&lt;span&gt;│  └─ zig build-exe main Debug wasm32-wasi cached 9ms MaxRSS:29M
&lt;&#x2F;span&gt;&lt;span&gt;│     └─ run wit-bindgen success 3ms MaxRSS:3M
&lt;&#x2F;span&gt;&lt;span&gt;└─ run wasm-tools success 11ms MaxRSS:8M
&lt;&#x2F;span&gt;&lt;span&gt;   └─ zig build-exe main Debug wasm32-wasi (+1 more reused dependencies)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;and we can verify our resulting &lt;code&gt;zig-out&#x2F;component.wasm&lt;&#x2F;code&gt; using &lt;code&gt;wasm-tools&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#383a42;&quot;&gt;&lt;code&gt;&lt;span&gt;λ wasm-tools print --skeleton zig-out&#x2F;bin&#x2F;component.wasm 
&lt;&#x2F;span&gt;&lt;span&gt;(component
&lt;&#x2F;span&gt;&lt;span&gt;  ...
&lt;&#x2F;span&gt;&lt;span&gt;  (instance (;11;) (instantiate 0
&lt;&#x2F;span&gt;&lt;span&gt;      (with &amp;quot;import-func-add&amp;quot; (func 16))
&lt;&#x2F;span&gt;&lt;span&gt;      (with &amp;quot;import-func-get&amp;quot; (func 17))
&lt;&#x2F;span&gt;&lt;span&gt;    )
&lt;&#x2F;span&gt;&lt;span&gt;  )
&lt;&#x2F;span&gt;&lt;span&gt;  (export (;12;) &amp;quot;golem:example&#x2F;api&amp;quot; (instance 11))
&lt;&#x2F;span&gt;&lt;span&gt;  (@producers
&lt;&#x2F;span&gt;&lt;span&gt;    (processed-by &amp;quot;wit-component&amp;quot; &amp;quot;0.20.1&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;  )
&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;using-imports&quot;&gt;Using imports&lt;&#x2F;h2&gt;
&lt;p&gt;After this simple example let&#x27;s try &lt;em&gt;importing&lt;&#x2F;em&gt; some interface and using that from our Zig code. What we are going to do is every time our counter changes, we are going to also save that value to an external key-value store. This is usually not something you need to do when writing a Golem application, because your program will be durable anyway - you can just keep the counter in memory. But it is a simple enough example to demonstrate how to use imported interfaces from Zig.&lt;&#x2F;p&gt;
&lt;p&gt;First let&#x27;s add some additional WIT files into &lt;code&gt;wit&#x2F;deps&lt;&#x2F;code&gt; from the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;golemcloud&#x2F;golem-wit&quot;&gt;golem-wit repository&lt;&#x2F;a&gt; (Note that the WASI Key-Value interface is defined &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;WebAssembly&#x2F;wasi-keyvalue&quot;&gt;here&lt;&#x2F;a&gt;, the &lt;code&gt;golem-wit&lt;&#x2F;code&gt; repo just stores the exact version of its definitions which is currently implemented by Golem ).&lt;&#x2F;p&gt;
&lt;p&gt;We need the following directory tree:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#383a42;&quot;&gt;&lt;code&gt;&lt;span&gt;λ tree wit
&lt;&#x2F;span&gt;&lt;span&gt;wit
&lt;&#x2F;span&gt;&lt;span&gt;├── counter.wit
&lt;&#x2F;span&gt;&lt;span&gt;└── deps
&lt;&#x2F;span&gt;&lt;span&gt;    ├── io
&lt;&#x2F;span&gt;&lt;span&gt;    │   ├── error.wit
&lt;&#x2F;span&gt;&lt;span&gt;    │   ├── poll.wit
&lt;&#x2F;span&gt;&lt;span&gt;    │   ├── streams.wit
&lt;&#x2F;span&gt;&lt;span&gt;    │   └── world.wit
&lt;&#x2F;span&gt;&lt;span&gt;    └── keyvalue
&lt;&#x2F;span&gt;&lt;span&gt;        ├── atomic.wit
&lt;&#x2F;span&gt;&lt;span&gt;        ├── caching.wit
&lt;&#x2F;span&gt;&lt;span&gt;        ├── error.wit
&lt;&#x2F;span&gt;&lt;span&gt;        ├── eventual-batch.wit
&lt;&#x2F;span&gt;&lt;span&gt;        ├── eventual.wit
&lt;&#x2F;span&gt;&lt;span&gt;        ├── handle-watch.wit
&lt;&#x2F;span&gt;&lt;span&gt;        ├── types.wit
&lt;&#x2F;span&gt;&lt;span&gt;        └── world.wit
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;4 directories, 13 files
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Then we can import the key-value interface to &lt;code&gt;counter.wit&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;wit&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-wit &quot;&gt;&lt;code class=&quot;language-wit&quot; data-lang=&quot;wit&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;package &lt;&#x2F;span&gt;&lt;span&gt;golem:example;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;interface &lt;&#x2F;span&gt;&lt;span&gt;api {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;func&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;u64&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;func&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;-&amp;gt; u64&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;world &lt;&#x2F;span&gt;&lt;span&gt;counter {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;wasi:keyvalue&#x2F;eventual@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;0.1.0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;export &lt;&#x2F;span&gt;&lt;span&gt;api;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;By recompiling the project we can verify everything still works, and we will also get our new bindings generated in the C source.&lt;&#x2F;p&gt;
&lt;p&gt;Before implementing writing to the key-value store in Zig, let&#x27;s just take a look at the WIT interface of &lt;code&gt;wasi:keyvalue&#x2F;eventual@0.1.0&lt;&#x2F;code&gt; to understand what we will have to do:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;wit&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-wit &quot;&gt;&lt;code class=&quot;language-wit&quot; data-lang=&quot;wit&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;interface &lt;&#x2F;span&gt;&lt;span&gt;eventual {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;set&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;func&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;bucket&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;borrow&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;bucket&amp;gt;, 
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;key&lt;&#x2F;span&gt;&lt;span&gt;: key, 
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;outgoing-value&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;borrow&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;outgoing-value&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  ) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;-&amp;gt; result&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;, error&amp;gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We will need to pass a &lt;code&gt;bucket&lt;&#x2F;code&gt; and an &lt;code&gt;outgoing-value&lt;&#x2F;code&gt;, both being &lt;em&gt;WIT resources&lt;&#x2F;em&gt; so we first need to create them, then borrow references of them for the &lt;code&gt;set&lt;&#x2F;code&gt; call, and finally drop them.&lt;&#x2F;p&gt;
&lt;p&gt;The bucket resource can be constructed with a static function called &lt;code&gt;open-bucket&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;wit&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-wit &quot;&gt;&lt;code class=&quot;language-wit&quot; data-lang=&quot;wit&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;resource &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;bucket &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;open-bucket&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;static func&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;-&amp;gt; result&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;bucket, error&amp;gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Searching for this in the generated C bindings reveals the following:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;extern bool &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;wasi_keyvalue_types_static_bucket_open_bucket&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;  counter_string_t &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;, 
&lt;&#x2F;span&gt;&lt;span&gt;  wasi_keyvalue_types_own_bucket_t &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;ret&lt;&#x2F;span&gt;&lt;span&gt;, 
&lt;&#x2F;span&gt;&lt;span&gt;  wasi_keyvalue_types_own_error_t &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;err
&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We will have to drop the created bucket with&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;extern void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;wasi_keyvalue_types_bucket_drop_own&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;  wasi_keyvalue_types_own_bucket_t handle
&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;With all this information let&#x27;s try to open a bucket in Zig by directly using the generated C bindings. First we need to import the C headers:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;zig&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-zig &quot;&gt;&lt;code class=&quot;language-zig&quot; data-lang=&quot;zig&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; c &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= @cImport&lt;&#x2F;span&gt;&lt;span&gt;({
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;@cDefine&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;_NO_CRT_STDIO_INLINE&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;1&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;@cInclude&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;counter.h&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;});
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We also define an initial error type for our function for using later:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;zig&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-zig &quot;&gt;&lt;code class=&quot;language-zig&quot; data-lang=&quot;zig&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span&gt;KVError &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= error &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    FailedToOpenBucket,
&lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Then start implementing the store function by first storing the bucket&#x27;s name in &lt;code&gt;counter_string_t&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;zig&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-zig &quot;&gt;&lt;code class=&quot;language-zig&quot; data-lang=&quot;zig&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;record_state&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;anyerror!void &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; stdout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; std.io.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;getStdOut&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;writer&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;bucket_name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;c.counter_string_t = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;undefined&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    c.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;counter_string_dup&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;bucket_name, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;state&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;defer&lt;&#x2F;span&gt;&lt;span&gt; c.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;counter_string_free&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;bucket_name);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;and then invoking the &lt;code&gt;wasi_keyvalue_types_static_bucket_open_bucket&lt;&#x2F;code&gt; function:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;zig&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-zig &quot;&gt;&lt;code class=&quot;language-zig&quot; data-lang=&quot;zig&quot;&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;bucket&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;c.wasi_keyvalue_types_own_bucket_t = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;undefined&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;bucket_err&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;c.wasi_keyvalue_wasi_keyvalue_error_own_error_t = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;undefined&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(c.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;wasi_keyvalue_types_static_bucket_open_bucket&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;bucket_name, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;bucket, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;bucket_err)) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;defer&lt;&#x2F;span&gt;&lt;span&gt; c.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;wasi_keyvalue_types_bucket_drop_own&lt;&#x2F;span&gt;&lt;span&gt;(bucket);
&lt;&#x2F;span&gt;&lt;span&gt;        
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; TODO
&lt;&#x2F;span&gt;&lt;span&gt;    } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;defer&lt;&#x2F;span&gt;&lt;span&gt; c.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;wasi_keyvalue_wasi_keyvalue_error_error_drop_own&lt;&#x2F;span&gt;&lt;span&gt;(bucket_err);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;try&lt;&#x2F;span&gt;&lt;span&gt; stdout.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;Failed to open bucket&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0997b3;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, .{});
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; KVError.FailedToOpenBucket;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now that we have an open bucket we want to call the &lt;code&gt;set&lt;&#x2F;code&gt; function to update a key&#x27;s value:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;extern bool &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;wasi_keyvalue_eventual_set&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;  wasi_keyvalue_eventual_borrow_bucket_t &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;bucket&lt;&#x2F;span&gt;&lt;span&gt;, 
&lt;&#x2F;span&gt;&lt;span&gt;  wasi_keyvalue_eventual_key_t &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;key&lt;&#x2F;span&gt;&lt;span&gt;, 
&lt;&#x2F;span&gt;&lt;span&gt;  wasi_keyvalue_eventual_borrow_outgoing_value_t &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;outgoing_value&lt;&#x2F;span&gt;&lt;span&gt;, 
&lt;&#x2F;span&gt;&lt;span&gt;  wasi_keyvalue_eventual_own_error_t &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;err
&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We already have our bucket, but we &lt;em&gt;own&lt;&#x2F;em&gt; it and we need to pass a &lt;em&gt;borrowed&lt;&#x2F;em&gt; bucket to this function. What&#x27;s the difference? There is no difference in the actual value - both just store a &lt;em&gt;handle&lt;&#x2F;em&gt; to a resource that exists in the runtime engine, but we still have to borrow the owned value using the &lt;code&gt;wasi_keyvalue_types_borrow_bucket&lt;&#x2F;code&gt; function. The &lt;code&gt;wasi_keyvalue_eventual_key_t&lt;&#x2F;code&gt; type is just an alias for &lt;code&gt;counter_string_t&lt;&#x2F;code&gt; and &lt;code&gt;wasi_keyvalue_eventual_borrow_outgoing_value_t&lt;&#x2F;code&gt; is another resource we need to construct first. Let&#x27;s put this together!&lt;&#x2F;p&gt;
&lt;p&gt;First we borrow the owned bucket:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;zig&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-zig &quot;&gt;&lt;code class=&quot;language-zig&quot; data-lang=&quot;zig&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;var&lt;&#x2F;span&gt;&lt;span&gt; borrowed_bucket &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; c.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;wasi_keyvalue_types_borrow_bucket&lt;&#x2F;span&gt;&lt;span&gt;(bucket);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;defer&lt;&#x2F;span&gt;&lt;span&gt; c.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;wasi_keyvalue_types_bucket_drop_borrow&lt;&#x2F;span&gt;&lt;span&gt;(borrowed_bucket);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Then we create an &lt;em&gt;outgoing value&lt;&#x2F;em&gt; that&#x27;s going to be stored in the key-value store:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;zig&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-zig &quot;&gt;&lt;code class=&quot;language-zig&quot; data-lang=&quot;zig&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;var&lt;&#x2F;span&gt;&lt;span&gt; outgoing_value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; c.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;wasi_keyvalue_types_static_outgoing_value_new_outgoing_value&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;defer&lt;&#x2F;span&gt;&lt;span&gt; c.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;wasi_keyvalue_types_outgoing_value_drop_own&lt;&#x2F;span&gt;&lt;span&gt;(outgoing_value);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;var&lt;&#x2F;span&gt;&lt;span&gt; borrowed_outgoing_value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; c.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;wasi_keyvalue_types_borrow_outgoing_value&lt;&#x2F;span&gt;&lt;span&gt;(outgoing_value);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;defer&lt;&#x2F;span&gt;&lt;span&gt; c.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;wasi_keyvalue_types_outgoing_value_drop_borrow&lt;&#x2F;span&gt;&lt;span&gt;(borrowed_outgoing_value);
&lt;&#x2F;span&gt;&lt;span&gt;        
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;body&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;c.counter_string_t = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;undefined&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;var&lt;&#x2F;span&gt;&lt;span&gt; value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= try&lt;&#x2F;span&gt;&lt;span&gt; std.fmt.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;allocPrint&lt;&#x2F;span&gt;&lt;span&gt;(gpa.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;allocator&lt;&#x2F;span&gt;&lt;span&gt;(), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;{d}&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, .{state});
&lt;&#x2F;span&gt;&lt;span&gt;c.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;counter_string_set&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;body, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;@ptrCast&lt;&#x2F;span&gt;&lt;span&gt;(value));
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;defer&lt;&#x2F;span&gt;&lt;span&gt; c.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;counter_string_free&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;body);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;write_err&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;c.wasi_keyvalue_types_own_error_t = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;undefined&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span&gt;c.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;wasi_keyvalue_types_method_outgoing_value_outgoing_value_write_body_sync&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    borrowed_outgoing_value, 
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;@ptrCast&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;body),
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;bucket_err)) {
&lt;&#x2F;span&gt;&lt;span&gt;        
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;defer&lt;&#x2F;span&gt;&lt;span&gt; c.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;wasi_keyvalue_wasi_keyvalue_error_error_drop_own&lt;&#x2F;span&gt;&lt;span&gt;(write_err);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;try&lt;&#x2F;span&gt;&lt;span&gt; stdout.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;Failed to set outgoing value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0997b3;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, .{});
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; KVError.FailedToSetKey;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Also we need to create a string for holding the &lt;em&gt;key&lt;&#x2F;em&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;zig&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-zig &quot;&gt;&lt;code class=&quot;language-zig&quot; data-lang=&quot;zig&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;key&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;c.counter_string_t = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;undefined&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;c.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;counter_string_dup&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;key, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;latest&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;defer&lt;&#x2F;span&gt;&lt;span&gt; c.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;counter_string_free&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;key);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And finally call the &lt;code&gt;set&lt;&#x2F;code&gt; function:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;zig&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-zig &quot;&gt;&lt;code class=&quot;language-zig&quot; data-lang=&quot;zig&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;set_err&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;c.wasi_keyvalue_eventual_own_error_t = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;undefined&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span&gt;c.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;wasi_keyvalue_eventual_set&lt;&#x2F;span&gt;&lt;span&gt;(borrowed_bucket, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;key, borrowed_outgoing_value, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;set_err)) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;try&lt;&#x2F;span&gt;&lt;span&gt; stdout.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;Failed to set key&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0997b3;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, .{});
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; KVError.FailedToSetKey;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;With this implementation we can compile our new version of our WASM component which now also depends on &lt;code&gt;wasi:keyvalue&lt;&#x2F;code&gt; and stores the latest value in a remote storage every time it gets updated.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-s-next&quot;&gt;What&#x27;s next?&lt;&#x2F;h2&gt;
&lt;p&gt;With the above technique we have a way to impelment WASM components in Zig, but working with the generated C bindings is a bit inconvenient. It would be nice to have a more idiomatic Zig interface to the component model, and maybe it can be achieved just by using Zig&#x27;s metaprogramming features without having to create a Zig specific binding generator in addition to the existing ones.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Worker to Worker communication in Golem</title>
        <published>2024-03-08T00:00:00+00:00</published>
        <updated>2024-03-08T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Daniel Vigovszky
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://blog.vigoo.dev/posts/w2w-communication-golem/"/>
        <id>https://blog.vigoo.dev/posts/w2w-communication-golem/</id>
        
        <content type="html" xml:base="https://blog.vigoo.dev/posts/w2w-communication-golem/">&lt;p&gt;This article was originally posted at &lt;a href=&quot;https:&#x2F;&#x2F;www.golem.cloud&#x2F;post&#x2F;worker-to-worker-communication&quot;&gt;the Golem Cloud Blog&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Golem Cloud&#x27;s first developer preview &lt;a href=&quot;https:&#x2F;&#x2F;www.golem.cloud&#x2F;post&#x2F;unveiling-golem-cloud&quot;&gt;has been unveiled in August&lt;&#x2F;a&gt;, and just a month ago, we released &lt;a href=&quot;https:&#x2F;&#x2F;www.golem.cloud&#x2F;post&#x2F;golem-goes-open-source&quot;&gt;an open-source version of Golem&lt;&#x2F;a&gt;. Workers, the fundamental primitive in Golem, expose a typed interface that can be invoked through the REST API or the command line tools, but until today, calling a worker from &lt;em&gt;another worker&lt;&#x2F;em&gt; was neither easy nor type-safe.&lt;&#x2F;p&gt;
&lt;p&gt;With the latest release of Golem and the &lt;code&gt;golem-cli&lt;&#x2F;code&gt; tool, we finally have a first-class, typed way to invoke one worker from another, using any of the supported guest languages!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;golem-wasm-rpc&quot;&gt;Golem WASM RPC&lt;&#x2F;h2&gt;
&lt;p&gt;Golem&#x27;s new worker to worker communication feature consists of two major layers:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;A low-level, dynamic worker invocation API exposed as a Golem &lt;strong&gt;host function&lt;&#x2F;strong&gt; to all workers. This interface is not type safe. Rather, it matches the capabilities of the external REST API, allowing a worker to invoke any method on any other worker with any parameters. However, it avoids the overhead of setting up an HTTP connection and will be optimized in the future.&lt;&#x2F;li&gt;
&lt;li&gt;The ability to generate &lt;strong&gt;stubs&lt;&#x2F;strong&gt; for having a completely type-safe, language-independent remote worker invocation for any supported language having a WIT-based binding generator.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;With the new stub generator commands integrated into Golem&#x27;s command line tool (&lt;code&gt;golem-cli&lt;&#x2F;code&gt;) worker to worker communication is now a simple and fully type-safe experience.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;a-full-example&quot;&gt;A full example&lt;&#x2F;h2&gt;
&lt;p&gt;To demonstrate how this new feature works, we will take one of the first Golem example projects, the &lt;strong&gt;shopping cart&lt;&#x2F;strong&gt;, and extend it with worker-to-worker communication. The original shopping-cart project defines a worker for each shopping cart of an online web store, with exported functions to add items to the cart and eventually check out and finish the shopping process.&lt;&#x2F;p&gt;
&lt;p&gt;In this example, we introduce a second &lt;strong&gt;worker template&lt;&#x2F;strong&gt;, one that will be used to create a single &lt;strong&gt;worker&lt;&#x2F;strong&gt; for each online shopper. This worker will keep a log of all the purchases of the user it belongs to. We will extend the shopping cart&#x27;s &lt;code&gt;checkout&lt;&#x2F;code&gt; function with a remote worker invocation to add a new entry to the account&#x27;s purchase log.&lt;&#x2F;p&gt;
&lt;p&gt;First, let&#x27;s make sure we have the latest version of &lt;code&gt;golem-cli&lt;&#x2F;code&gt;, if using the open-source Golem version, or &lt;code&gt;golem-cloud-cli&lt;&#x2F;code&gt;, if using the hosted version. It must have the new &lt;code&gt;stubgen&lt;&#x2F;code&gt; subcommand, to check let&#x27;s run &lt;code&gt;golem-cli stubgen --help&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;WASM&lt;&#x2F;span&gt;&lt;span&gt; RPC stub generator
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;Usage:&lt;&#x2F;span&gt;&lt;span&gt; golem-cli stubgen &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;OPTIONS&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;] &amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;COMMAND&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;Commands:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;generate&lt;&#x2F;span&gt;&lt;span&gt;              Generate a Rust RPC stub crate for a WASM component
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;build&lt;&#x2F;span&gt;&lt;span&gt;                 Build an RPC stub for a WASM component
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;add-stub-dependency&lt;&#x2F;span&gt;&lt;span&gt;   Adds a generated stub as a dependency to another WASM component
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;compose&lt;&#x2F;span&gt;&lt;span&gt;               Compose a WASM component with a generated stub WASM
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;initialize-workspace&lt;&#x2F;span&gt;&lt;span&gt;  Initializes a Golem-specific cargo-make configuration in a Cargo workspace for automatically generating stubs and composing results
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;help&lt;&#x2F;span&gt;&lt;span&gt;                  Print this message or the help of the given subcommand(s)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;Options:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;-v, --verbose&lt;&#x2F;span&gt;&lt;span&gt;...  Increase logging verbosity
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;-q, --quiet&lt;&#x2F;span&gt;&lt;span&gt;...    Decrease logging verbosity
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;-h, --help&lt;&#x2F;span&gt;&lt;span&gt;        Print help
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;preparing-the-example&quot;&gt;Preparing the example&lt;&#x2F;h3&gt;
&lt;p&gt;We are going to create two different &lt;strong&gt;Golem templates&lt;&#x2F;strong&gt;, and have the source codes of both of them in a single &lt;strong&gt;Cargo workspace&lt;&#x2F;strong&gt;. This is not required—they could live in completely separate places—but it allows using our built-in cargo-make support, which currently gives us the best possible developer experience for worker-to-worker communication.&lt;&#x2F;p&gt;
&lt;p&gt;First, let&#x27;s use the &lt;code&gt;golem-cli new&lt;&#x2F;code&gt; command to take the &lt;strong&gt;shopping-cart example&lt;&#x2F;strong&gt; and generate a new template source from it:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; golem-cli new&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt; --example&lt;&#x2F;span&gt;&lt;span&gt; rust-shopping-cart&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt; --template-name&lt;&#x2F;span&gt;&lt;span&gt; shopping-cart-rpc
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;See&lt;&#x2F;span&gt;&lt;span&gt; the documentation about installing common tooling: https:&#x2F;&#x2F;golem.cloud&#x2F;learn&#x2F;rust
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;Compile&lt;&#x2F;span&gt;&lt;span&gt; the Rust component with cargo-component:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;cargo&lt;&#x2F;span&gt;&lt;span&gt; component build&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt; --release
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;The&lt;&#x2F;span&gt;&lt;span&gt; result in target&#x2F;wasm32-wasi&#x2F;release&#x2F;shopping_cart_rpc.wasm is ready to be used with Golem!
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;code&gt;shopping-cart-rpc&lt;&#x2F;code&gt; directory now contains a single Rust crate, which can be compiled to WASM using &lt;code&gt;cargo component build&lt;&#x2F;code&gt;. We need two different WASMs (two Golem templates) so as a first step, we convert the generated Cargo project to a &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;book&#x2F;ch14-03-cargo-workspaces.html&quot;&gt;&lt;strong&gt;cargo workspace&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;First, create two sub-directories for the two templates we will use:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; mkdir&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt; -pv&lt;&#x2F;span&gt;&lt;span&gt; shopping-cart
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;shopping-cart
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; mkdir&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt; -pv&lt;&#x2F;span&gt;&lt;span&gt; purchase-history
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;purchase-history
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Then, move the generated shopping cart source code into the &lt;code&gt;shopping-cart&lt;&#x2F;code&gt; subdirectory:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; mv&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt; -v&lt;&#x2F;span&gt;&lt;span&gt; src shopping-cart
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;src&lt;&#x2F;span&gt;&lt;span&gt; -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; shopping-cart&#x2F;src
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; mv&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt; -v&lt;&#x2F;span&gt;&lt;span&gt; wit shopping-cart
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;wit&lt;&#x2F;span&gt;&lt;span&gt; -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; shopping-cart&#x2F;wit
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; mv&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt; -v&lt;&#x2F;span&gt;&lt;span&gt; Cargo.toml shopping-cart
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;Cargo.toml&lt;&#x2F;span&gt;&lt;span&gt; -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; shopping-cart&#x2F;Cargo.toml
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We can copy the whole contents of the &lt;code&gt;shopping-cart&lt;&#x2F;code&gt; directory to the &lt;code&gt;purchase-history&lt;&#x2F;code&gt; directory too:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; cp&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt; -rv&lt;&#x2F;span&gt;&lt;span&gt; shopping-cart&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt; purchase-history
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;shopping-cart&#x2F;Cargo.toml&lt;&#x2F;span&gt;&lt;span&gt; -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; purchase-history&#x2F;Cargo.toml
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;shopping-cart&#x2F;src&lt;&#x2F;span&gt;&lt;span&gt; -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; purchase-history&#x2F;src
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;shopping-cart&#x2F;src&#x2F;lib.rs&lt;&#x2F;span&gt;&lt;span&gt; -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; purchase-history&#x2F;src&#x2F;lib.rs
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;shopping-cart&#x2F;wit&lt;&#x2F;span&gt;&lt;span&gt; -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; purchase-history&#x2F;wit
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;shopping-cart&#x2F;wit&#x2F;shopping-cart-rpc.wit&lt;&#x2F;span&gt;&lt;span&gt; -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; purchase-history&#x2F;wit&#x2F;shopping-cart-rpc.wit
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Then we create a new &lt;code&gt;Cargo.toml&lt;&#x2F;code&gt; file in the root, pointing to the two sub-projects:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;toml&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-toml &quot;&gt;&lt;code class=&quot;language-toml&quot; data-lang=&quot;toml&quot;&gt;&lt;span&gt;[workspace]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;resolver &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;2&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;members &lt;&#x2F;span&gt;&lt;span&gt;= [
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;shopping-cart&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;purchase-history&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Next, modify the &lt;code&gt;name&lt;&#x2F;code&gt; property in both sub-project&#x27;s &lt;code&gt;Cargo.toml&lt;&#x2F;code&gt;. In &lt;code&gt;shopping-cart&#x2F;Cargo.toml&lt;&#x2F;code&gt;, it should be:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;toml&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-toml &quot;&gt;&lt;code class=&quot;language-toml&quot; data-lang=&quot;toml&quot;&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;name &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;shopping-cart&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;while in the other&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;toml&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-toml &quot;&gt;&lt;code class=&quot;language-toml&quot; data-lang=&quot;toml&quot;&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;name &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;purchase-history&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;It&#x27;s also recommended that you rename the WIT file in both the &lt;code&gt;wit&lt;&#x2F;code&gt; directories to a file name that corresponds to the given sub-project&#x27;s name, but it does not have any effect on the compilation—it just makes working on the source code easier.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; mv shopping-cart&#x2F;wit&#x2F;shopping-cart-rpc.wit shopping-cart&#x2F;wit&#x2F;shopping-cart.wit
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; mv purchase-history&#x2F;wit&#x2F;shopping-cart-rpc.wit purchase-history&#x2F;wit&#x2F;purchase-history.wit
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;At this point running &lt;code&gt;cargo component build&lt;&#x2F;code&gt; in the root will compile both identical sub-projects, creating two different WASM files (but both containing the shopping cart implementation for now):&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; cargo component build
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;Creating&lt;&#x2F;span&gt;&lt;span&gt; component &#x2F;Users&#x2F;vigoo&#x2F;projects&#x2F;demo&#x2F;shopping-cart-rpc&#x2F;target&#x2F;wasm32-wasi&#x2F;debug&#x2F;purchase_history.wasm
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;Creating&lt;&#x2F;span&gt;&lt;span&gt; component &#x2F;Users&#x2F;vigoo&#x2F;projects&#x2F;demo&#x2F;shopping-cart-rpc&#x2F;target&#x2F;wasm32-wasi&#x2F;debug&#x2F;shopping_cart.wasm
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;implementing-the-purchase-history-template&quot;&gt;Implementing the purchase history template&lt;&#x2F;h3&gt;
&lt;p&gt;Before talking about &lt;em&gt;worker-to-worker communication&lt;&#x2F;em&gt;, let&#x27;s just implement a simple version of the &lt;strong&gt;purchase history template&lt;&#x2F;strong&gt;. Each worker of this template will correspond to a &lt;strong&gt;user&lt;&#x2F;strong&gt; of the system, the worker name being equal to the user&#x27;s identifier. We only need two exported functions, one for recording a purchase, and one for getting all the previous purchases.&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s completely replace &lt;code&gt;purchase-history&#x2F;wit&#x2F;purchase-history.wit&lt;&#x2F;code&gt; with the following interface definition:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;wit&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-wit &quot;&gt;&lt;code class=&quot;language-wit&quot; data-lang=&quot;wit&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;package &lt;&#x2F;span&gt;&lt;span&gt;shopping:purchase-history;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;interface &lt;&#x2F;span&gt;&lt;span&gt;api {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;record &lt;&#x2F;span&gt;&lt;span&gt;product-item {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;product-id&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;price&lt;&#x2F;span&gt;&lt;span&gt;: float32,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;quantity&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;record &lt;&#x2F;span&gt;&lt;span&gt;order {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;order-id&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;items&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;list&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;product-item&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;total&lt;&#x2F;span&gt;&lt;span&gt;: float32,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;timestamp&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;u64&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;add-order&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;func&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;order&lt;&#x2F;span&gt;&lt;span&gt;: order) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;get-orders&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;func&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;-&amp;gt; list&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;order&amp;gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;world &lt;&#x2F;span&gt;&lt;span&gt;purchase-history {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;export &lt;&#x2F;span&gt;&lt;span&gt;api;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Our &lt;code&gt;product-item&lt;&#x2F;code&gt; and &lt;code&gt;order&lt;&#x2F;code&gt; types are the same that we have in the shopping-cart WIT. In a next step, we will remove them from the shopping-cart WIT, and import them from this component&#x27;s interface definition!&lt;&#x2F;p&gt;
&lt;p&gt;Running &lt;code&gt;cargo component build&lt;&#x2F;code&gt; now will print a couple of errors, as we did not update the &lt;code&gt;purchase-history&lt;&#x2F;code&gt; module&#x27;s Rust source code yet:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; cargo component build
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;error[E0433]:&lt;&#x2F;span&gt;&lt;span&gt; failed to resolve: could not find `&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;golem&lt;&#x2F;span&gt;&lt;span&gt;` in `&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;exports&lt;&#x2F;span&gt;&lt;span&gt;`
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;--&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; purchase-history&#x2F;src&#x2F;lib.rs:3:31
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;|
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;3 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;use&lt;&#x2F;span&gt;&lt;span&gt; crate::bindings::exports::golem::template::api::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;*;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;|                               &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;^^^^^&lt;&#x2F;span&gt;&lt;span&gt; could not find `&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;golem&lt;&#x2F;span&gt;&lt;span&gt;` in `&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;exports&lt;&#x2F;span&gt;&lt;span&gt;`
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;A simple implementation of this can be the following code replacing the existing &lt;code&gt;lib.rs&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;mod &lt;&#x2F;span&gt;&lt;span&gt;bindings;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;use crate&lt;&#x2F;span&gt;&lt;span&gt;::bindings::exports::shopping::purchase_history::api::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;Component;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;State {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;orders&lt;&#x2F;span&gt;&lt;span&gt;: Vec&amp;lt;Order&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;static mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;STATE&lt;&#x2F;span&gt;&lt;span&gt;: State &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; State {
&lt;&#x2F;span&gt;&lt;span&gt;    orders: Vec::new()
&lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;with_state&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;T&amp;gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;: impl FnOnce(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;mut State&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; T) -&amp;gt; T {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; result &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= unsafe &lt;&#x2F;span&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;amp;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;STATE&lt;&#x2F;span&gt;&lt;span&gt;) };
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; result;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;Guest &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;Component {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;add_order&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;order&lt;&#x2F;span&gt;&lt;span&gt;: Order) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;with_state&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;state&lt;&#x2F;span&gt;&lt;span&gt;| {
&lt;&#x2F;span&gt;&lt;span&gt;            state.orders.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span&gt;(order);
&lt;&#x2F;span&gt;&lt;span&gt;        });
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;get_orders&lt;&#x2F;span&gt;&lt;span&gt;() -&amp;gt; Vec&amp;lt;Order&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;with_state&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;state&lt;&#x2F;span&gt;&lt;span&gt;| {
&lt;&#x2F;span&gt;&lt;span&gt;            state.orders.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;clone&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;        })
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;With this, &lt;code&gt;cargo component build&lt;&#x2F;code&gt; now compiles the new &lt;code&gt;purchase_history.wasm&lt;&#x2F;code&gt; for us.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;worker-to-worker-communication&quot;&gt;Worker to worker communication&lt;&#x2F;h3&gt;
&lt;p&gt;At this point, the only outstanding task in our example is to &lt;strong&gt;invoke the appropriate purchase history worker&lt;&#x2F;strong&gt; in the &lt;code&gt;checkout&lt;&#x2F;code&gt; implementation of the shopping cart.&lt;&#x2F;p&gt;
&lt;p&gt;To find all the available options for doing this, check the &lt;a href=&quot;https:&#x2F;&#x2F;learn.golem.cloud&#x2F;docs&#x2F;rpc&quot;&gt;Worker-to-Worker communication&#x27;s documentation&lt;&#x2F;a&gt;. In this example, we have both the target (the purchase history) and the caller (the shopping cart) in &lt;strong&gt;the same cargo workspace&lt;&#x2F;strong&gt;, so we can use Golem&#x27;s &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;sagiegurari&#x2F;cargo-make&quot;&gt;cargo-make&lt;&#x2F;a&gt; based solution for enabling communication between the different sub-projects of the workspace.&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s initialize this using &lt;code&gt;golem-cli&lt;&#x2F;code&gt; (or &lt;code&gt;golem-cloud-cli&lt;&#x2F;code&gt;):&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; golem-cli stubgen initialize-workspace&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt; --targets&lt;&#x2F;span&gt;&lt;span&gt; purchase-history&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt; --callers&lt;&#x2F;span&gt;&lt;span&gt; shopping-cart
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;Writing&lt;&#x2F;span&gt;&lt;span&gt; cargo-make Makefile to &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&#x2F;Users&#x2F;vigoo&#x2F;projects&#x2F;demo&#x2F;shopping-cart-rpc&#x2F;Makefile.toml&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;Generating&lt;&#x2F;span&gt;&lt;span&gt; initial stub for purchase-history
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;Generating&lt;&#x2F;span&gt;&lt;span&gt; stub WIT to &#x2F;Users&#x2F;vigoo&#x2F;projects&#x2F;demo&#x2F;shopping-cart-rpc&#x2F;purchase-history-stub&#x2F;wit&#x2F;_stub.wit
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;Copying&lt;&#x2F;span&gt;&lt;span&gt; root package shopping:purchasehistory
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;Users&#x2F;vigoo&#x2F;projects&#x2F;demo&#x2F;shopping-cart-rpc&#x2F;purchase-history&#x2F;wit&#x2F;purchase-history.wit to &#x2F;Users&#x2F;vigoo&#x2F;projects&#x2F;demo&#x2F;shopping-cart-rpc&#x2F;purchase-history-stub&#x2F;wit&#x2F;deps&#x2F;shopping_purchasehistory&#x2F;purchase-history.wit
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;Writing&lt;&#x2F;span&gt;&lt;span&gt; wasm-rpc.wit to &#x2F;Users&#x2F;vigoo&#x2F;projects&#x2F;demo&#x2F;shopping-cart-rpc&#x2F;purchase-history-stub&#x2F;wit&#x2F;deps&#x2F;wasm-rpc
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;Generating&lt;&#x2F;span&gt;&lt;span&gt; Cargo.toml to &#x2F;Users&#x2F;vigoo&#x2F;projects&#x2F;demo&#x2F;shopping-cart-rpc&#x2F;purchase-history-stub&#x2F;Cargo.toml
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;Generating&lt;&#x2F;span&gt;&lt;span&gt; stub source to &#x2F;Users&#x2F;vigoo&#x2F;projects&#x2F;demo&#x2F;shopping-cart-rpc&#x2F;purchase-history-stub&#x2F;src&#x2F;lib.rs
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;Writing&lt;&#x2F;span&gt;&lt;span&gt; updated Cargo.toml to &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&#x2F;Users&#x2F;vigoo&#x2F;projects&#x2F;demo&#x2F;shopping-cart-rpc&#x2F;Cargo.toml&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;As a next step, we check if the generated artifacts work, by running &lt;strong&gt;cargo make&lt;&#x2F;strong&gt; to execute the full build flow. It contains custom steps invoking &lt;code&gt;golem-cli&lt;&#x2F;code&gt; to implement the typed worker-to-worker communication.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; cargo make build-flow
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;Creating&lt;&#x2F;span&gt;&lt;span&gt; component &#x2F;Users&#x2F;vigoo&#x2F;projects&#x2F;demo&#x2F;shopping-cart-rpc&#x2F;target&#x2F;wasm32-wasi&#x2F;debug&#x2F;purchase_history.wasm
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;Creating&lt;&#x2F;span&gt;&lt;span&gt; component &#x2F;Users&#x2F;vigoo&#x2F;projects&#x2F;demo&#x2F;shopping-cart-rpc&#x2F;target&#x2F;wasm32-wasi&#x2F;debug&#x2F;shopping_cart.wasm
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;Creating&lt;&#x2F;span&gt;&lt;span&gt; component &#x2F;Users&#x2F;vigoo&#x2F;projects&#x2F;demo&#x2F;shopping-cart-rpc&#x2F;target&#x2F;wasm32-wasi&#x2F;debug&#x2F;purchase_history_stub.wasm
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;[cargo-make]&lt;&#x2F;span&gt;&lt;span&gt; INFO - Execute Command: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;wasm-rpc-stubgen&amp;quot; &amp;quot;compose&amp;quot; &amp;quot;--source-wasm&amp;quot; &amp;quot;target&#x2F;wasm32-wasi&#x2F;debug&#x2F;shopping_cart.wasm&amp;quot; &amp;quot;--stub-wasm&amp;quot; &amp;quot;target&#x2F;wasm32-wasi&#x2F;debug&#x2F;purchase_history_stub.wasm&amp;quot; &amp;quot;--dest-wasm&amp;quot; &amp;quot;target&#x2F;wasm32-wasi&#x2F;debug&#x2F;shopping_cart_composed.wasm&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;Error:&lt;&#x2F;span&gt;&lt;span&gt; no dependencies of component `&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;target&#x2F;wasm32-wasi&#x2F;debug&#x2F;shopping_cart.wasm&lt;&#x2F;span&gt;&lt;span&gt;` were found
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Don&#x27;t worry about the failure at the end - it will be fixed in the next step.&lt;&#x2F;p&gt;
&lt;p&gt;There are several changes in our workspace after running this command:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;We have a &lt;code&gt;Makefile.toml&lt;&#x2F;code&gt; file describing custom build tasks related to worker to worker communication&lt;&#x2F;li&gt;
&lt;li&gt;We have a completely new sub-project called &lt;code&gt;purchase-history-stub&lt;&#x2F;code&gt; which is added to the Cargo workspace&lt;&#x2F;li&gt;
&lt;li&gt;The &lt;code&gt;shopping-cart&#x2F;wit&#x2F;deps&lt;&#x2F;code&gt; directory now contains three dependencies: the original purchase history module, the generated stub interface, and the general purpose &lt;code&gt;wasm-rpc&lt;&#x2F;code&gt; package.&lt;&#x2F;li&gt;
&lt;li&gt;These dependencies are also registered in &lt;code&gt;shopping-cart&#x2F;Cargo.toml&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Before further explaining what these generated stubs are, let&#x27;s finish our example. We need to modify the &lt;strong&gt;shopping cart&lt;&#x2F;strong&gt; template&#x27;s interface definition (&lt;code&gt;shopping-cart&#x2F;wit&#x2F;shopping-cart.wit&lt;&#x2F;code&gt;) to import the generated stub, and to reuse the data types defined for the purchase history template instead of redefining them.&lt;&#x2F;p&gt;
&lt;p&gt;The updated WIT file would look like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;wit&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-wit &quot;&gt;&lt;code class=&quot;language-wit&quot; data-lang=&quot;wit&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;package &lt;&#x2F;span&gt;&lt;span&gt;shopping:cart;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;interface &lt;&#x2F;span&gt;&lt;span&gt;api {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;shopping:purchase-history&#x2F;api.{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;product-item&lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;shopping:purchase-history&#x2F;api.{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;order&lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;record &lt;&#x2F;span&gt;&lt;span&gt;order-confirmation {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;order-id&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;variant &lt;&#x2F;span&gt;&lt;span&gt;checkout-result {
&lt;&#x2F;span&gt;&lt;span&gt;    error(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;    success(order-confirmation),
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;initialize-cart&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;func&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;user-id&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;add-item&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;func&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;item&lt;&#x2F;span&gt;&lt;span&gt;: product-item) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;remove-item&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;func&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;product-id&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;update-item-quantity&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;func&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;product-id&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;quantity&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;checkout&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;func&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;checkout-result;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;get-cart-contents&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;func&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;-&amp;gt; list&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;product-item&amp;gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;world &lt;&#x2F;span&gt;&lt;span&gt;shopping-cart {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;shopping:purchase-history-stub&#x2F;stub-purchase-history;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;export &lt;&#x2F;span&gt;&lt;span&gt;api;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;There are three changes:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;We renamed the package from the default &lt;code&gt;golem:template&lt;&#x2F;code&gt; to &lt;code&gt;shopping:cart&lt;&#x2F;code&gt; to make it more consistent with the other packages&lt;&#x2F;li&gt;
&lt;li&gt;We deleted the definition of &lt;code&gt;product-item&lt;&#x2F;code&gt; and &lt;code&gt;order&lt;&#x2F;code&gt;, and instead importing them from the &lt;code&gt;shopping:purchase-history&lt;&#x2F;code&gt; package.&lt;&#x2F;li&gt;
&lt;li&gt;We added the &lt;code&gt;import&lt;&#x2F;code&gt; statement in the &lt;code&gt;world&lt;&#x2F;code&gt;, which loads the generated &lt;strong&gt;stub&lt;&#x2F;strong&gt; into the template&#x27;s world, so we can call it from the Rust code to initiate remote calls to the &lt;code&gt;purchase-history&lt;&#x2F;code&gt; workers.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Because of the change of the package name, we have to update the import in &lt;code&gt;lib.rs&lt;&#x2F;code&gt; :&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;use crate&lt;&#x2F;span&gt;&lt;span&gt;::bindings::exports::shopping::cart::api::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The only remaining step is to extend the &lt;code&gt;checkout&lt;&#x2F;code&gt; function with the remote worker invocation!&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;use crate&lt;&#x2F;span&gt;&lt;span&gt;::bindings::shopping::purchase_history::api::{Order};
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;use crate&lt;&#x2F;span&gt;&lt;span&gt;::bindings::shopping::purchase_history_stub::stub_purchase_history;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;use crate&lt;&#x2F;span&gt;&lt;span&gt;::bindings::golem::rpc::types::Uri;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;checkout&lt;&#x2F;span&gt;&lt;span&gt;() -&amp;gt; CheckoutResult {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;dispatch_order&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; Defining the order to be saved in history
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; order &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; Order {
&lt;&#x2F;span&gt;&lt;span&gt;        items: state.items.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;clone&lt;&#x2F;span&gt;&lt;span&gt;(),
&lt;&#x2F;span&gt;&lt;span&gt;        order_id: order_id.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;clone&lt;&#x2F;span&gt;&lt;span&gt;(),
&lt;&#x2F;span&gt;&lt;span&gt;        timestamp: std::time::SystemTime::now().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;duration_since&lt;&#x2F;span&gt;&lt;span&gt;(std::time::SystemTime::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;UNIX_EPOCH&lt;&#x2F;span&gt;&lt;span&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;as_secs&lt;&#x2F;span&gt;&lt;span&gt;(),
&lt;&#x2F;span&gt;&lt;span&gt;        total: state.items.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;iter&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;item&lt;&#x2F;span&gt;&lt;span&gt;| item.price &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt; item.quantity &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;as f32&lt;&#x2F;span&gt;&lt;span&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;sum&lt;&#x2F;span&gt;&lt;span&gt;(),
&lt;&#x2F;span&gt;&lt;span&gt;    };
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; Constructing the remote worker&amp;#39;s URI
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; template_id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span&gt;  		std::env::var(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;PURCHASE_HISTORY_TEMPLATE_ID&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  			.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;expect&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;PURCHASE_HISTORY_TEMPLATE_ID not set&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; uri &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; Uri {
&lt;&#x2F;span&gt;&lt;span&gt;        value: format!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;worker:&#x2F;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;{template_id}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, state.user_id),
&lt;&#x2F;span&gt;&lt;span&gt;    };
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; Connecdting to the remote worker and invoking it
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; history &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;stub_purchase_history::Api::new(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;uri);
&lt;&#x2F;span&gt;&lt;span&gt;    history.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;add_order&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;order);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;With all these changes, running &lt;code&gt;cargo make&lt;&#x2F;code&gt; again will succeed:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; cargo make build-flow
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;Writing&lt;&#x2F;span&gt;&lt;span&gt; composed component to &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;target&#x2F;wasm32-wasi&#x2F;debug&#x2F;shopping_cart_composed.wasm&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;[cargo-make]&lt;&#x2F;span&gt;&lt;span&gt; INFO - Build Done in 7.38 seconds.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We first created the &lt;code&gt;Order&lt;&#x2F;code&gt; value to be saved in the remote purchase history. Then we get an &lt;strong&gt;environment variable&lt;&#x2F;strong&gt; to figure out the Golem &lt;em&gt;template-id&lt;&#x2F;em&gt; of the purchase history template. This is something we need to record when uploading the template to Golem, and set it to all shopping cart worker&#x27;s when creating them. The remote URI consists of the template identifier and the &lt;em&gt;worker name&lt;&#x2F;em&gt;, and in our example the worker name is the same as the &lt;strong&gt;user id&lt;&#x2F;strong&gt; that the shopping cart belongs to. This guarantees that we will have a distinct purchase history worker for each user.&lt;&#x2F;p&gt;
&lt;p&gt;When we have the URI, we just instantiate the &lt;strong&gt;generated stub&lt;&#x2F;strong&gt; for by passing the remote worker&#x27;s URI—and we get an interface that corresponds to the remote worker&#x27;s exported interface! This way we can just call &lt;code&gt;add_order&lt;&#x2F;code&gt; on it, passing the constructed order value.&lt;&#x2F;p&gt;
&lt;p&gt;Everything else is handled by Golem. If this was the first order of the user, a new purchase history worker is created. Otherwise, the existing worker will be targeted, which is likely already in a suspended state, not actively in any worker executor&#x27;s memory. Golem restores the worker&#x27;s state and invokes the &lt;code&gt;add_order&lt;&#x2F;code&gt; function on them, which adds the new order to the list of orders for that user, in a fully durable way, without the need for a database.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;how-does-it-work&quot;&gt;How does it work?&lt;&#x2F;h3&gt;
&lt;p&gt;The generated cargo-make makefile just wraps a couple of &lt;code&gt;golem-cli stubgen&lt;&#x2F;code&gt; commands.&lt;&#x2F;p&gt;
&lt;p&gt;First, &lt;code&gt;stubgen generate&lt;&#x2F;code&gt; creates a new Rust crate for each &lt;strong&gt;target&lt;&#x2F;strong&gt; that has a similar interface as the original worker, but all the exported functions and interfaces are wrapped in a resource, which has to be instantiated with a &lt;strong&gt;worker URI&lt;&#x2F;strong&gt;. This generated crate can be compiled to a WASM file (or &lt;code&gt;stubgen build&lt;&#x2F;code&gt; can do that automatically) and it also contains a &lt;strong&gt;WIT&lt;&#x2F;strong&gt; file describing this interface.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;code&gt;stubgen add-stub-dependency&lt;&#x2F;code&gt; command takes this generated interface specification and &lt;strong&gt;adds it&lt;&#x2F;strong&gt; to an other worker&#x27;s &lt;code&gt;wit&lt;&#x2F;code&gt; folder—making it a &lt;em&gt;dependency&lt;&#x2F;em&gt; of that worker. So the caller worker is not depending directly on the target worker, it depends on the &lt;strong&gt;generated stub&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;If we compile this caller worker to WASM, it will not only require host functions provided by Golem (such as the WASI interfaces or Golem specific APIs) but it will also require an &lt;strong&gt;implementation&lt;&#x2F;strong&gt; of the stub interface. That&#x27;s where the generated Rust crate comes into the picture—its compiled WASM &lt;strong&gt;implements&lt;&#x2F;strong&gt; (exports) the stub interface while the caller WASM &lt;strong&gt;requires&lt;&#x2F;strong&gt; (imports) it. WASM components can be composed so by combining the two we can get a result WASM that no longer tries to import the stub interface—it is going to be wired within the component—only the other dependencies the original modules had.&lt;&#x2F;p&gt;
&lt;p&gt;One way to do this composition is to use &lt;code&gt;wasm-tools compose&lt;&#x2F;code&gt;, but it is more convenient to use &lt;code&gt;golem-cli&lt;&#x2F;code&gt; (or &lt;code&gt;golem-cloud-cli&lt;&#x2F;code&gt;)&#x27;s built-in command for it, called &lt;code&gt;stubgen compose&lt;&#x2F;code&gt;. This is the last step the generated cargo-make file performs when running the &lt;code&gt;build-flow&lt;&#x2F;code&gt; task.&lt;&#x2F;p&gt;
&lt;p&gt;The following diagram demonstrates how the component&#x27;s in the example are interacting with each other:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;w2w-comm.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;We have seen how the new Golem tools enable simple, fully-typed communication between &lt;strong&gt;workers&lt;&#x2F;strong&gt;. Although the above demonstrated &lt;code&gt;cargo-make&lt;&#x2F;code&gt;-based build is Rust specific, the other &lt;code&gt;stubgen&lt;&#x2F;code&gt; commands are not: they can be used with any language that has WIT binding generator support (see &lt;a href=&quot;https:&#x2F;&#x2F;learn.golem.cloud&#x2F;docs&#x2F;building-templates&#x2F;tier-2&quot;&gt;Golem&#x27;s Tier 2 languages&lt;&#x2F;a&gt;)—Rust, C, Go, JavaScript, Python and Scala.js.&lt;&#x2F;p&gt;
&lt;p&gt;The remote calls are not only simple to use, they are also efficient, and they get translated to direct function calls when the source and the target workers are running on the same &lt;strong&gt;worker executor&lt;&#x2F;strong&gt;. They are also fully durable, as all other external interaction running on Golem. This means we don&#x27;t have to worry about failures when calling remote workers. Additionally, Golem applies retry policies in case of transient failures, and it makes sure that a remote invocation only happens once.&lt;&#x2F;p&gt;
&lt;p&gt;This feature is ready to use both in the &lt;a href=&quot;http:&#x2F;&#x2F;github.com&#x2F;golemcloud&#x2F;golem&quot;&gt;open source&lt;&#x2F;a&gt; and the &lt;a href=&quot;https:&#x2F;&#x2F;www.golem.cloud&#x2F;&quot;&gt;cloud version&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</content>
        
    </entry>
</feed>
