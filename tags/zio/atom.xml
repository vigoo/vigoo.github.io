<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <title>vigoo&#x27;s software development blog - zio</title>
    <link rel="self" type="application/atom+xml" href="https://blog.vigoo.dev/tags/zio/atom.xml"/>
    <link rel="alternate" type="text/html" href="https://blog.vigoo.dev"/>
    <generator uri="https://www.getzola.org/">Zola</generator>
    <updated>2023-09-07T00:00:00+00:00</updated>
    <id>https://blog.vigoo.dev/tags/zio/atom.xml</id>
    <entry xml:lang="en">
        <title>Generating a Rust client library for ZIO Http endpoints</title>
        <published>2023-09-07T00:00:00+00:00</published>
        <updated>2023-09-07T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Daniel Vigovszky
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://blog.vigoo.dev/posts/generating-a-rust-client-library-for-zio-http-endpoints/"/>
        <id>https://blog.vigoo.dev/posts/generating-a-rust-client-library-for-zio-http-endpoints/</id>
        
        <content type="html" xml:base="https://blog.vigoo.dev/posts/generating-a-rust-client-library-for-zio-http-endpoints/">&lt;p&gt;We at &lt;a href=&quot;https:&#x2F;&#x2F;golem.cloud&quot;&gt;Golem Cloud&lt;&#x2F;a&gt; built our first developer preview on top of the ZIO ecosystem, including &lt;a href=&quot;https:&#x2F;&#x2F;github.io&#x2F;zio&#x2F;zio-http&quot;&gt;ZIO Http&lt;&#x2F;a&gt; for defining and implementing our server&#x27;s REST API. By using &lt;strong&gt;ZIO Http&lt;&#x2F;strong&gt; we immediately had the ability to call our endpoints using endpoint &lt;strong&gt;client&lt;&#x2F;strong&gt;s, which allowed us to develop the first version of Golem&#x27;s &lt;strong&gt;CLI tool&lt;&#x2F;strong&gt; very rapidly.&lt;&#x2F;p&gt;
&lt;p&gt;Although very convenient for development, &lt;em&gt;using&lt;&#x2F;em&gt; a CLI tool built with Scala for the JVM is not a pleasant experience for the users due to the slow startup time. One possible solution is to compile to native using &lt;a href=&quot;https:&#x2F;&#x2F;www.graalvm.org&#x2F;22.0&#x2F;reference-manual&#x2F;native-image&#x2F;&quot;&gt;GraalVM Native Image&lt;&#x2F;a&gt; but it is very hard to set up and even when it works, it is extremely fragile - further changes to the code or updated dependencies can break it causing unexpected extra maintenance cost. After some initial experiments we dropped this idea - and instead chose to reimplement the CLI using &lt;strong&gt;Rust&lt;&#x2F;strong&gt; - a language being a much better fit for command line tools, and also already an important technology in our Golem stack.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;zio-http&quot;&gt;ZIO Http&lt;&#x2F;h2&gt;
&lt;p&gt;If we rewrite &lt;code&gt;golem-cli&lt;&#x2F;code&gt; to Rust, we lose the convenience of using  &lt;strong&gt;endpoint definitions&lt;&#x2F;strong&gt; (written in Scala with ZIO Http, the ones we have for implementing the server) for calling our API, and we would also lose all the &lt;strong&gt;types&lt;&#x2F;strong&gt; used in these APIs as they are all defined as Scala case classes and enums. Just to have more context, let&#x27;s take a look at one of the endpoints!&lt;&#x2F;p&gt;
&lt;p&gt;A ZIO Http &lt;strong&gt;endpoint&lt;&#x2F;strong&gt; is just a definition of a single endpoint of a HTTP API, describing the routing as well the inputs and outputs of it:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;getWorkerMetadata &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span&gt;    Endpoint(GET &#x2F; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;v1&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt; &#x2F; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;templates&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt; &#x2F; rawTemplateId &#x2F; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;workers&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt; &#x2F; workerName)
&lt;&#x2F;span&gt;&lt;span&gt;      .header(Auth.tokenSecret)
&lt;&#x2F;span&gt;&lt;span&gt;      .outErrorCodec(errorCodec)
&lt;&#x2F;span&gt;&lt;span&gt;      .out[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;WorkerMetadata&lt;&#x2F;span&gt;&lt;span&gt;] ?? Doc.p(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;Get the current worker status and metadata&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Let&#x27;s see what we have here:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;the endpoint is reached by sending a &lt;strong&gt;GET&lt;&#x2F;strong&gt; request&lt;&#x2F;li&gt;
&lt;li&gt;the request &lt;strong&gt;path&lt;&#x2F;strong&gt; consists of some static segments as well as the &lt;em&gt;template id&lt;&#x2F;em&gt; and the &lt;em&gt;worker name&lt;&#x2F;em&gt;&lt;&#x2F;li&gt;
&lt;li&gt;it also requires an &lt;strong&gt;authorization header&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;we define the kind of errors it can return&lt;&#x2F;li&gt;
&lt;li&gt;and finally it defines that the response&#x27;s &lt;strong&gt;body&lt;&#x2F;strong&gt; will contain a JSON representation (default in ZIO Http) of a type called &lt;code&gt;WorkerMetadata&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;What are &lt;code&gt;rawTemplateId&lt;&#x2F;code&gt; and &lt;code&gt;workerName&lt;&#x2F;code&gt;? These are so called &lt;strong&gt;path codecs&lt;&#x2F;strong&gt;, defined in a common place so they can be reused in multiple endpoints. They allow us to have dynamic parts of the request path mapped to specific types - so when we implement the endpoint (or call it in a client) we don&#x27;t have to pass strings and we can directly work with the business domain types, in this case &lt;code&gt;RawTemplateId&lt;&#x2F;code&gt; and &lt;code&gt;WorkerName&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The simplest way to define path codecs is to &lt;strong&gt;transform&lt;&#x2F;strong&gt; an existing one:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;workerName&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;PathCodec&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;WorkerName&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span&gt;  string(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;worker-name&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;).transformOrFailLeft(WorkerName.make(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;).toErrorEither, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;.value)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Here the &lt;code&gt;make&lt;&#x2F;code&gt; function is a &lt;strong&gt;ZIO Prelude&lt;&#x2F;strong&gt; &lt;a href=&quot;https:&#x2F;&#x2F;zio.github.io&#x2F;zio-prelude&#x2F;docs&#x2F;functionaldatatypes&#x2F;validation&quot;&gt;&lt;code&gt;Validation&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; which we have to convert to an &lt;code&gt;Either&lt;&#x2F;code&gt; for the transform function. Validations can contain more than one failures, as opposed to &lt;code&gt;Either&lt;&#x2F;code&gt;s, which allows us to compose them in a way that we can keep multiple errors instead of immediately returning with the first failure.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;code&gt;tokenSecret&lt;&#x2F;code&gt; is similar, but it is a &lt;code&gt;HeaderCodec&lt;&#x2F;code&gt; describing what type of header it is and how the value of the given header should be mapped to a specific type (a token, in this case).&lt;&#x2F;p&gt;
&lt;p&gt;What is &lt;code&gt;WorkerMetadata&lt;&#x2F;code&gt; and how does ZIO Http know how to produce a JSON from it?&lt;&#x2F;p&gt;
&lt;p&gt;It&#x27;s just a simple &lt;em&gt;case class&lt;&#x2F;em&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;final case class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; WorkerMetadata&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;workerId&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ComponentInstanceId&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;accountId&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;AccountId&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;args&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Chunk&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;],
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;env&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Map&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;],
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;status&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;InstanceStatus&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;templateVersion&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Int&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;retryCount&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Int
&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;But with an implicit &lt;strong&gt;derived&lt;&#x2F;strong&gt; &lt;strong&gt;ZIO Schema&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;object&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; WorkerMetadata {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;implicit val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;schema&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: Schema[WorkerMetadata] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;DeriveSchema.gen[WorkerMetadata]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We will talk more about ZIO Schema below - for now all we need to know is it describes the structure of Scala types, and this information can be used to serialize data into various formats, including JSON.&lt;&#x2F;p&gt;
&lt;p&gt;Once we have our endpoints defined like this, we can do several things with them - they are just data describing what an endpoint looks like!&lt;&#x2F;p&gt;
&lt;h3 id=&quot;implementing-an-endpoint&quot;&gt;Implementing an endpoint&lt;&#x2F;h3&gt;
&lt;p&gt;When developing a &lt;em&gt;server&lt;&#x2F;em&gt;, the most important thing to do with an endpoint is to &lt;strong&gt;implement&lt;&#x2F;strong&gt; it. Implementing an endpoint looks like the following:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;getWorkerMetadataImpl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span&gt;    getWorkerMetadata.implement {
&lt;&#x2F;span&gt;&lt;span&gt;      Handler.fromFunctionZIO { (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;rawTemplateId&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;workerName&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;authTokenId&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; ... ZIO program returning a WorkerMetadata
&lt;&#x2F;span&gt;&lt;span&gt;      }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;em&gt;type&lt;&#x2F;em&gt; of &lt;code&gt;getWorkerMetadataImpl&lt;&#x2F;code&gt; is &lt;code&gt;Route&lt;&#x2F;code&gt; - it is no longer just a description of what an endpoint looks like, it defines a specific HTTP route and its associated &lt;em&gt;request handler&lt;&#x2F;em&gt;, implemented by a ZIO effect (remember that ZIO effects are also values - we &lt;em&gt;describe&lt;&#x2F;em&gt; what we need to do when a request comes in, but executing it will be the responsibility of the server implementation).&lt;&#x2F;p&gt;
&lt;p&gt;The nice thing about ZIO Http endpoints is that they are completely type safe. I&#x27;ve hidden the type signature in the previous code snippets but actually &lt;code&gt;getWorkerMetadata&lt;&#x2F;code&gt; has the type:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span&gt;Endpoint[
&lt;&#x2F;span&gt;&lt;span&gt;    (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RawTemplateId&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;WorkerName&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;    (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RawTemplateId&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;WorkerName&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;TokenSecret&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;WorkerEndpointError&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;WorkerMetadata&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;None
&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Here the &lt;em&gt;second&lt;&#x2F;em&gt; type parameter defines the &lt;strong&gt;input&lt;&#x2F;strong&gt; of the request handler and the &lt;em&gt;forth&lt;&#x2F;em&gt; type parameter defines the &lt;strong&gt;output&lt;&#x2F;strong&gt; the server constructs the response from.&lt;&#x2F;p&gt;
&lt;p&gt;With these types, we really just have to implement a (ZIO) function from the input to the output:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;RawTemplateId&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;WorkerName&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;TokenSecret&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;ZIO[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Any&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;WorkerEndpointError&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;WorkerMetadata&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;and this is exactly what we pass to &lt;code&gt;Handler.fromFunctionZIO&lt;&#x2F;code&gt; in the above example.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;calling-an-endpoint&quot;&gt;Calling an endpoint&lt;&#x2F;h3&gt;
&lt;p&gt;The same endpoint values can also be used to make requests to our API from clients such as &lt;code&gt;golem-cli&lt;&#x2F;code&gt;. Taking advantage of the same type safe representation we can just call &lt;code&gt;apply&lt;&#x2F;code&gt; on the endpoint definition passing its input as a parameter to get an &lt;strong&gt;invocation&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;invocation &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; getInstanceMetadata(rawTemplateId, workerName, token)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;this invocation can be &lt;strong&gt;executed&lt;&#x2F;strong&gt; to perform the actual request using an &lt;code&gt;EndpointExecutor&lt;&#x2F;code&gt; which can be easily constructed from a ZIO Http &lt;code&gt;Client&lt;&#x2F;code&gt; and some other parameters like the URL of the remote server:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span&gt;executor(invocation).flatMap { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;workerMetadata &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; 
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;the-task&quot;&gt;The task&lt;&#x2F;h2&gt;
&lt;p&gt;So can we do anything to keep this convenient way of calling our endpoints when migrating the CLI to Rust? At the time of writing we already had more than 60 endpoints, with many complex types used in them - defining them by hand in Rust, and keeping the Scala and Rust code in sync sounds like a nightmare.&lt;&#x2F;p&gt;
&lt;p&gt;The ideal case would be to have something like this in Rust:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;async_trait&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;pub trait &lt;&#x2F;span&gt;&lt;span&gt;Worker {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;  async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;get_worker_metadata&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;template_id&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;TemplateId, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;worker_name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;WorkerName, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;authorization&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;Token) -&amp;gt; Result&amp;lt;WorkerMetadata, WorkerError&amp;gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;with an implementation that just requires the same amount of configuration as the Scala endpoint executor (server URL, etc), and all the referenced types like &lt;code&gt;WorkerMetadata&lt;&#x2F;code&gt; would be an exact clone of the Scala types just in Rust.&lt;&#x2F;p&gt;
&lt;p&gt;Fortunately we can have (almost) this by taking advantage of the declarative nature of ZIO Http and ZIO Schema!&lt;&#x2F;p&gt;
&lt;p&gt;In the rest of this post we will see how we can &lt;strong&gt;generate Rust code&lt;&#x2F;strong&gt; using a combination of ZIO libraries to automatically have all our type definitions and client implementation ready to use from the Rust version of &lt;code&gt;golem-cli&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-building-blocks&quot;&gt;The building blocks&lt;&#x2F;h2&gt;
&lt;p&gt;We want to generate from an arbitrary set of ZIO Http &lt;code&gt;Endpoint&lt;&#x2F;code&gt; definitions a &lt;strong&gt;Rust crate&lt;&#x2F;strong&gt; ready to be compiled, published and used. We will take advantage of the following libraries:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zio.dev&#x2F;zio-http&#x2F;&quot;&gt;ZIO Http&lt;&#x2F;a&gt; as the source of &lt;strong&gt;endpoint&lt;&#x2F;strong&gt; definitions&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zio.dev&#x2F;zio-schema&#x2F;&quot;&gt;ZIO Schema&lt;&#x2F;a&gt; for observing the &lt;strong&gt;type&lt;&#x2F;strong&gt; definitions&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zio.dev&#x2F;zio-parser&#x2F;&quot;&gt;ZIO Parser&lt;&#x2F;a&gt; because it has a composable &lt;strong&gt;printer&lt;&#x2F;strong&gt; concept&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zio.dev&#x2F;zio-nio&#x2F;&quot;&gt;ZIO NIO&lt;&#x2F;a&gt; for working with the &lt;strong&gt;filesystem&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zio.dev&#x2F;zio-prelude&#x2F;&quot;&gt;ZIO Prelude&lt;&#x2F;a&gt; for implementing the stateful endpoint&#x2F;type discovery in a purely functional way&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;generating-rust-code&quot;&gt;Generating Rust code&lt;&#x2F;h2&gt;
&lt;p&gt;Let&#x27;s start with the actual source code generation. This is something that can be done in many different ways - one extreme could be to just concatenate strings (or use a &lt;code&gt;StringBuilder&lt;&#x2F;code&gt;) while the other is to build a full real Rust &lt;em&gt;AST&lt;&#x2F;em&gt; and pretty print that. I had a &lt;a href=&quot;https:&#x2F;&#x2F;blog.vigoo.dev&#x2F;posts&#x2F;funscala2021-talk&#x2F;&quot;&gt;talk on Function Scala 2021 about the topic&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;For this task I chose a technique which is somewhere in the middle and provides some extent of composability while also allowing use to do just the amount of abstraction we want to. The idea is that we define a &lt;em&gt;Rust code generator model&lt;&#x2F;em&gt; which does not have to strictly follow the actual generated language&#x27;s concepts, and then define a pretty printer for this model. This way we only have to model the subset of the language we need for the code generator, and we can keep simplifications or even complete string fragments in it if that makes our life easier.&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s see how this works with some examples!&lt;&#x2F;p&gt;
&lt;p&gt;We will have to generate &lt;em&gt;type definitions&lt;&#x2F;em&gt; so we can define a Scala &lt;em&gt;enum&lt;&#x2F;em&gt; describing what kind of type definitions we want to generate:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span&gt;enum RustDef:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span&gt;TypeAlias(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Name&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;typ&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RustType&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;derives&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Chunk&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RustType&lt;&#x2F;span&gt;&lt;span&gt;])
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span&gt;Newtype(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Name&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;typ&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RustType&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;derives&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Chunk&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RustType&lt;&#x2F;span&gt;&lt;span&gt;])
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span&gt;Struct(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Name&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;fields&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Chunk&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RustDef&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Field&lt;&#x2F;span&gt;&lt;span&gt;], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;derives&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Chunk&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RustType&lt;&#x2F;span&gt;&lt;span&gt;], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;isPublic&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Boolean&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span&gt;Enum(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Name&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;cases&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Chunk&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RustDef&lt;&#x2F;span&gt;&lt;span&gt;], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;derives&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Chunk&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RustType&lt;&#x2F;span&gt;&lt;span&gt;])
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span&gt;Impl(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;tpe&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RustType&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;functions&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Chunk&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RustDef&lt;&#x2F;span&gt;&lt;span&gt;])
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span&gt;ImplTrait(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;implemented&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RustType&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;forType&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RustType&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;functions&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Chunk&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RustDef&lt;&#x2F;span&gt;&lt;span&gt;])
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span&gt;Function(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Name&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;parameters&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Chunk&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RustDef&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Parameter&lt;&#x2F;span&gt;&lt;span&gt;], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;returnType&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RustType&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;body&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;isPublic&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Boolean&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We can make this as convenient to use as we want, for example adding constructors like:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;struct&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Name&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;fields&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Field&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RustDef
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;code&gt;Name&lt;&#x2F;code&gt; is an opaque string type with extension methods to convert between various cases like pascal case, snake case, etc. &lt;code&gt;RustType&lt;&#x2F;code&gt; is a similar &lt;em&gt;enum&lt;&#x2F;em&gt; to &lt;code&gt;RustDef&lt;&#x2F;code&gt;, containing all the different type descriptions we will have to use. But it is definitely not how a proper Rust parser would define what a type is - for example we can have a &lt;code&gt;RustType.Option&lt;&#x2F;code&gt; as a shortcut for wrapping a Rust type in Rust&#x27;s own option type, just because it makes our code generator simpler to write.&lt;&#x2F;p&gt;
&lt;p&gt;So once we have this model (which in practice evolves together with the code generator, usually starting with a few simple case classes) we can use &lt;strong&gt;ZIO Parser&lt;&#x2F;strong&gt;&#x27;s printer feature to define composable elements constructing Rust source code.&lt;&#x2F;p&gt;
&lt;p&gt;We start by defining a module and a type alias for our printer:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;object&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; Rust&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;Rust[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Printer&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Char&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;and then just define building blocks - what these building blocks are depends completely on us, and the only thing it affects is how well you can compose them. Having very small building blocks may reduce the readability of the code generator, but using too large chunks reduces their composability and makes it harder to change or refactor.&lt;&#x2F;p&gt;
&lt;p&gt;We can define some short aliases for often used characters or string fragments:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;gt&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Rust&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Any&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;Printer.print(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;&amp;#39;&amp;gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;lt&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Rust&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Any&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;Printer.print(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;&amp;#39;&amp;lt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;bracketed&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;inner&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Rust&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;]): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Rust&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span&gt;  lt ~ inner ~ gt
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;and we have to define &lt;code&gt;Rust&lt;&#x2F;code&gt; printers for each of our model types. For example for the &lt;code&gt;RustType&lt;&#x2F;code&gt; enum it could be something like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;typename&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Rust&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RustType&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;Printer.byValue:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span&gt;RustType.Primitive(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;)             &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; str(name)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span&gt;RustType.Option(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;inner&lt;&#x2F;span&gt;&lt;span&gt;)               &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; typename(RustType.Primitive(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;Option&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)) ~ bracketed(typename(inner))
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span&gt;RustType.Vec(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;inner&lt;&#x2F;span&gt;&lt;span&gt;)                  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; typename(RustType.Primitive(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;Vec&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)) ~ bracketed(typename(inner))
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span&gt;RustType.SelectFromModule(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;path&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;typ&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;Printer.anyString.repeatWithSep(dcolon)(path) ~ dcolon ~ typename(typ)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span&gt;RustType.Parametric(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;params&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    str(name) ~ bracketed(typename.repeatWithSep(comma)(params))
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We can see that &lt;code&gt;typename&lt;&#x2F;code&gt; uses itself to recursively generate inner type names, for example when generating type parameters of tuple members. It also demonstrates that we can extract patterns such as &lt;code&gt;bracketed&lt;&#x2F;code&gt; to simplify our printer definitions and eliminate repetition.&lt;&#x2F;p&gt;
&lt;p&gt;Another nice feature we get by using a general purpose printer library like ZIO Parser is that we can use the built-in combinators to get printers for new types. One example is the sequential composition of printers. For example the following fragment:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;p &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; str(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;pub &amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;) ~ name ~ str(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;) ~ typename
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;would have the type &lt;code&gt;Rust[(Name, RustType)]&lt;&#x2F;code&gt; and we can even make that a printer of a case class like:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;final case class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; PublicField&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Name&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;typ&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RustType&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;p2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; p.from[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;PublicField&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;where &lt;code&gt;p2&lt;&#x2F;code&gt; will have the type &lt;code&gt;Rust[PublicField&lt;&#x2F;code&gt;].&lt;&#x2F;p&gt;
&lt;p&gt;Another very useful combinator is &lt;strong&gt;repetition&lt;&#x2F;strong&gt;. For example if we have a printer for an enum&#x27;s case:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;enumCase&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Rust&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RustDef&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;we can simply use one of the repetition combinators to make a printer for a &lt;em&gt;list of enum cases&lt;&#x2F;em&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;enumCases&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Rust&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Chunk&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RustDef&lt;&#x2F;span&gt;&lt;span&gt;]] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; enumCase.*
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;or as in the &lt;code&gt;typename&lt;&#x2F;code&gt; example above:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span&gt;typename.repeatWithSep(comma)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;to have a &lt;code&gt;Rust[Chunk[RustType]]&lt;&#x2F;code&gt; that inserts a comma between each element when printed.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;inspecting-the-scala-types&quot;&gt;Inspecting the Scala types&lt;&#x2F;h2&gt;
&lt;p&gt;As we have seen the &lt;em&gt;endpoint DSL&lt;&#x2F;em&gt; uses &lt;strong&gt;ZIO Schema&lt;&#x2F;strong&gt; to capture information about the types being used in the endpoints (usually as request or response bodies, serialized into JSON). We can use the same information to generate &lt;strong&gt;Rust types&lt;&#x2F;strong&gt; from our Scala types!&lt;&#x2F;p&gt;
&lt;p&gt;The core data type defined by the ZIO Schema library is called &lt;code&gt;Schema&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;sealed trait&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; Schema&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Schema describes the structure of a Scala type &lt;code&gt;A&lt;&#x2F;code&gt; in a way we can inspect it from regular Scala code. Let&#x27;s imagine we have &lt;code&gt;Schema[WorkerMetadata]&lt;&#x2F;code&gt; coming from our endpoint definition and we have to generate an equivalent Rust &lt;code&gt;struct&lt;&#x2F;code&gt; with the same field names and field types.&lt;&#x2F;p&gt;
&lt;p&gt;The first thing to notice is that type definitions are recursive. Unless &lt;code&gt;WorkerMetadata&lt;&#x2F;code&gt; only contains fields of &lt;em&gt;primitive types&lt;&#x2F;em&gt; such as integer or string, our job does not end with generating a single Rust struct - we need to recursively generate all the other types &lt;code&gt;WorkerMetadata&lt;&#x2F;code&gt; is depending on! To capture this fact let&#x27;s introduce a type that represents everything we have to extract from a single (or a set of) schemas in order to generate Rust types from them:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;final case class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; RustModel&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;typeRefs&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Map&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Schema&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span&gt;], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RustType&lt;&#x2F;span&gt;&lt;span&gt;], 
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;definitions&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Chunk&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RustDef&lt;&#x2F;span&gt;&lt;span&gt;], 
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;requiredCrates&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Set&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Crate&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We have &lt;code&gt;typeRefs&lt;&#x2F;code&gt; which associates a &lt;code&gt;RustType&lt;&#x2F;code&gt; with a schema so we can use it in future steps of our code generator to refer to a generated type in our Rust codebase. We have a list of &lt;code&gt;RustDef&lt;&#x2F;code&gt; values which are the generated type definitions, ready to be printed with out &lt;code&gt;Rust&lt;&#x2F;code&gt; pretty printer. And finally we can also gather a set of required extra rust &lt;em&gt;crates&lt;&#x2F;em&gt;, because some of the types considered &lt;em&gt;primitive types&lt;&#x2F;em&gt; by ZIO Schema are not having proper representations in the Rust standard library, only in external crates. Examples are UUIDs and various date&#x2F;time types.&lt;&#x2F;p&gt;
&lt;p&gt;So our job now is to write a function of&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;fromSchemas&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;schemas&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Seq&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Schema&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span&gt;]]): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Either&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RustModel&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;code&gt;Either&lt;&#x2F;code&gt; result type is used to indicate failures. Even if we write a transformation that can produce from any &lt;code&gt;Schema&lt;&#x2F;code&gt; a proper &lt;code&gt;RustModel&lt;&#x2F;code&gt;, we always have to have an error result when working with ZIO Schema because it has an explicit failure case called &lt;code&gt;Schema.Fail&lt;&#x2F;code&gt;. If we process a schema and end up with a &lt;code&gt;Fail&lt;&#x2F;code&gt; node, we can&#x27;t do anything else than fail our code generator.&lt;&#x2F;p&gt;
&lt;p&gt;There are many important details to consider when implementing this function, but let&#x27;s just see first what the actual &lt;code&gt;Schema&lt;&#x2F;code&gt; type looks like. When we have a value of &lt;code&gt;Schema[?]&lt;&#x2F;code&gt; we can pattern match on it and implement the following cases:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Schema.Primitive&lt;&#x2F;code&gt; describes a primitive type - there are a lot of primitive types defined by ZIO Schema&#x27;s &lt;code&gt;StandardType&lt;&#x2F;code&gt; enum&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Schema.Enum&lt;&#x2F;code&gt; describes a type with multiple cases (a &lt;em&gt;sum type&lt;&#x2F;em&gt;) such as a &lt;code&gt;sealed trait&lt;&#x2F;code&gt; or &lt;code&gt;enum&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Schema.Record&lt;&#x2F;code&gt; describes a type with multiple fields (a &lt;em&gt;product type&lt;&#x2F;em&gt;) such as a &lt;code&gt;case class&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Schema.Map&lt;&#x2F;code&gt; represents a &lt;em&gt;map&lt;&#x2F;em&gt; with a key and value type&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Schema.Sequence&lt;&#x2F;code&gt; represents a &lt;em&gt;sequence&lt;&#x2F;em&gt; of items of a given element type&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Schema.Set&lt;&#x2F;code&gt; is a &lt;em&gt;set&lt;&#x2F;em&gt; of items of a given element type&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Schema.Optional&lt;&#x2F;code&gt; represents an &lt;em&gt;optional&lt;&#x2F;em&gt; type (like an &lt;code&gt;Option[T]&lt;&#x2F;code&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Schema.Either&lt;&#x2F;code&gt; is a special case of sum types representing either one or the other type (like an &lt;code&gt;Either[A, B]&lt;&#x2F;code&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Schema.Lazy&lt;&#x2F;code&gt; is used to safely encode recursive types, it contains a function that evaluates into an inner &lt;code&gt;Schema&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Schema.Dynamic&lt;&#x2F;code&gt; represents a type that is dynamic - like a &lt;code&gt;JSON&lt;&#x2F;code&gt; value&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Schema.Transform&lt;&#x2F;code&gt; assigns a transformation function that converts a &lt;em&gt;value&lt;&#x2F;em&gt; of a type represented by the schema to a value of some other type. As we have no way to inspect these functions (they are compiled Scala functions) in our code generator, this is not very interesting for us now.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Schema.Fail&lt;&#x2F;code&gt; as already mentioned represents a failure in describing the data type&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;When traversing a &lt;code&gt;Schema&lt;&#x2F;code&gt; recursively (for any reason), it is important to keep in mind that it &lt;em&gt;can&lt;&#x2F;em&gt; encode recursive types! A simple example is a binary tree:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;final case class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; Tree&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;label&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;left&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Tree&lt;&#x2F;span&gt;&lt;span&gt;], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;right&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Tree&lt;&#x2F;span&gt;&lt;span&gt;])
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We can construct a &lt;code&gt;Schema[Tree[A]]&lt;&#x2F;code&gt; if we have a &lt;code&gt;Schema[A]&lt;&#x2F;code&gt;. This will be something like (pseudo-code):&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;lazy val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;tree&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Schema&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Tree&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span&gt;  Schema.Record(
&lt;&#x2F;span&gt;&lt;span&gt;    Field(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;label&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, Schema[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;]),
&lt;&#x2F;span&gt;&lt;span&gt;    Field(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;left&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, Schema.Optional(Schema.Lazy(() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; tree))),
&lt;&#x2F;span&gt;&lt;span&gt;    Field(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;right&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, Schema.Optional(Schema.Lazy(() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; tree)))
&lt;&#x2F;span&gt;&lt;span&gt;  )
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;If we are not prepared for recursive types we can easily get into an endless loop (or stack overflow) when processing these schemas.&lt;&#x2F;p&gt;
&lt;p&gt;This is just one example of things to keep track of while converting a schema into a set of Rust definitions. If fields refer to the self type we want to use &lt;code&gt;Box&lt;&#x2F;code&gt; so to put them on the heap. We also need to keep track of if everything within a generated type derives &lt;code&gt;Ord&lt;&#x2F;code&gt; and &lt;code&gt;Hash&lt;&#x2F;code&gt; - and if yes, we should derive an instance for the same type classes for our generated type as well.&lt;&#x2F;p&gt;
&lt;p&gt;My preferred way to implement such recursive stateful transformation functions is to use &lt;strong&gt;ZIO Prelude&lt;&#x2F;strong&gt;&#x27;s &lt;code&gt;ZPure&lt;&#x2F;code&gt; type. It&#x27;s type definition looks a little scary:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;sealed trait&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; ZPure&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;W&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;S1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;S2&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;R&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;E&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;ZPure&lt;&#x2F;code&gt; describes a &lt;em&gt;purely functional computation&lt;&#x2F;em&gt; which can:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Emit log entries of type &lt;code&gt;W&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Works with an inital state of type &lt;code&gt;S1&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Results in a final state of type &lt;code&gt;S2&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Has access to some context of type &lt;code&gt;R&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Can fail with a value of &lt;code&gt;E&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Or succeed with a value of &lt;code&gt;A&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;In this case we need the state, failure and result types only, but we could also take advantage of &lt;code&gt;W&lt;&#x2F;code&gt; to log debug information within our schema transformation function.&lt;&#x2F;p&gt;
&lt;p&gt;To make it easier to work with &lt;code&gt;ZPure&lt;&#x2F;code&gt; we can introduce a &lt;em&gt;type alias&lt;&#x2F;em&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;Fx[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ZPure&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Nothing&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;State&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;State&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Any&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;where &lt;code&gt;State&lt;&#x2F;code&gt; is our own &lt;em&gt;case class&lt;&#x2F;em&gt; containing everything we need:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;final case class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; State&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;typeRefs&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Map&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Schema&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span&gt;], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RustType&lt;&#x2F;span&gt;&lt;span&gt;],
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;definitions&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Chunk&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RustDef&lt;&#x2F;span&gt;&lt;span&gt;],
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;requiredCrates&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Set&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Crate&lt;&#x2F;span&gt;&lt;span&gt;],
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;processed&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Set&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Schema&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span&gt;]],
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;stack&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Chunk&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Schema&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span&gt;]],
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;nameTypeIdMap&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Map&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Name&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Set&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;TypeId&lt;&#x2F;span&gt;&lt;span&gt;]],
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;schemaCaps&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Map&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Schema&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span&gt;], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Capabilities&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We won&#x27;t get into the details of the state type here, but I&#x27;m showing some fragments to get a feeling of working with &lt;code&gt;ZPure&lt;&#x2F;code&gt; values.&lt;&#x2F;p&gt;
&lt;p&gt;Some helper functions to manipulate the state can make our code much easier to read:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;private def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;getState&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Fx&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;State&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;ZPure.get[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;State&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;private def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;updateState&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;State &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;State&lt;&#x2F;span&gt;&lt;span&gt;): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Fx&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Unit&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;ZPure.update[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;State&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;State&lt;&#x2F;span&gt;&lt;span&gt;](f)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;For example we can use &lt;code&gt;updateState&lt;&#x2F;code&gt;  to manipulate the &lt;code&gt;stack&lt;&#x2F;code&gt; field of the state around another computation - before running it, we add a schema to the stack, after that we remove it:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;private def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;stacked&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;R&lt;&#x2F;span&gt;&lt;span&gt;](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;schema&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Schema&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;])(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Fx&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;R&lt;&#x2F;span&gt;&lt;span&gt;]): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Fx&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;R&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span&gt;  updateState(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;s &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; s.copy(stack &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; s.stack :+ schema))
&lt;&#x2F;span&gt;&lt;span&gt;    .zipRight(f)
&lt;&#x2F;span&gt;&lt;span&gt;    .zipLeft(updateState(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;s &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; s.copy(stack &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; s.stack.dropRight(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;))))
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This allows us to decide whether we have to wrap a generated field&#x27;s type in &lt;code&gt;Box&lt;&#x2F;code&gt; in the rust code:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;private def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;boxIfNeeded&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;schema&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Schema&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;]): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Fx&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RustType&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;for
&lt;&#x2F;span&gt;&lt;span&gt;    state &amp;lt;- getState
&lt;&#x2F;span&gt;&lt;span&gt;    backRef &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; state.stack.contains(schema)
&lt;&#x2F;span&gt;&lt;span&gt;    rustType &amp;lt;- getRustType(schema)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;yield if&lt;&#x2F;span&gt;&lt;span&gt; backRef then RustType.box(rustType) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;else&lt;&#x2F;span&gt;&lt;span&gt; rustType
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;By looking into &lt;code&gt;state.stack&lt;&#x2F;code&gt; we can decide if we are dealing with a recursive type or not, and make our decision regarding boxing the field.&lt;&#x2F;p&gt;
&lt;p&gt;Another example is to guard against infinite recursion when traversing the schema definition, as I explained before. We can define a helper function that just keeps track of all the visited schemas and shortcuts the computation if something has already been seen:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;private def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;ifNotProcessed&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Schema&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;])(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Fx&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Unit&lt;&#x2F;span&gt;&lt;span&gt;]): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Fx&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Unit&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span&gt;  getState.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;flatMap&lt;&#x2F;span&gt;&lt;span&gt;: state &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; state.processed.contains(value) then ZPure.unit
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;else&lt;&#x2F;span&gt;&lt;span&gt; updateState(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;.copy(processed &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; state.processed + value)).zipRight(f)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Putting all these smaller combinators together we have an easy-to-read core recursive transformation function for converting the schema:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;private def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;process&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;schema&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Schema&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;]): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Fx&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Unit&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span&gt;  ifNotProcessed(schema):
&lt;&#x2F;span&gt;&lt;span&gt;    getRustType(schema).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;flatMap&lt;&#x2F;span&gt;&lt;span&gt;: typeRef &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;      stacked(schema):
&lt;&#x2F;span&gt;&lt;span&gt;        schema &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;match
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In the end to run a &lt;code&gt;Fx[A]&lt;&#x2F;code&gt; all we need to do is to provide an initial state:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span&gt;processSchema.provideState(State.empty).runEither
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;inspecting-the-endpoints&quot;&gt;Inspecting the endpoints&lt;&#x2F;h2&gt;
&lt;p&gt;We generated Rust code for all our types but we still need to generate HTTP clients. The basic idea is the same as what we have seen so far:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Traversing the &lt;code&gt;Endpoint&lt;&#x2F;code&gt; data structure for each endpoint we have&lt;&#x2F;li&gt;
&lt;li&gt;Generate some intermediate model&lt;&#x2F;li&gt;
&lt;li&gt;Pretty print this model to Rust code&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The conversion once again is recursive, can fail, and requires keeping track of various things, so we can use &lt;code&gt;ZPure&lt;&#x2F;code&gt; to implement it. Not repeating the same details, in this section we will talk about what exactly the endpoint descriptions look like and what we have be aware of when trying to process them.&lt;&#x2F;p&gt;
&lt;p&gt;The first problem to solve is that currently ZIO Http does not have a concept of multiple endpoints. We are not composing &lt;code&gt;Endpoint&lt;&#x2F;code&gt; values into an API, instead we first &lt;strong&gt;implement&lt;&#x2F;strong&gt; them to get &lt;code&gt;Route&lt;&#x2F;code&gt; values and compose those. We can no longer inspect the endpoint definitions from the composed routes, so unfortunately we have to repeat ourselves and somehow compose our set of endpoints for our code generator.&lt;&#x2F;p&gt;
&lt;p&gt;First we can define a &lt;code&gt;RustEndpoint&lt;&#x2F;code&gt; class, similar to the &lt;code&gt;RustModel&lt;&#x2F;code&gt; earlier, containing all the necessary information to generate Rust code for a &lt;strong&gt;single endpoint&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;We can construct it with a function:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;object&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; RustEndpoint&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;fromEndpoint&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;PathInput&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Input&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Err&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Output&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Middleware &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;EndpointMiddleware&lt;&#x2F;span&gt;&lt;span&gt;](
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;endpoint&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Endpoint&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;PathInput&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Input&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Err&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Output&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Middleware&lt;&#x2F;span&gt;&lt;span&gt;],
&lt;&#x2F;span&gt;&lt;span&gt;  ): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Either&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RustEndpoint&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The second thing to notice: endpoints do not have a name! If we look back to our initial example of &lt;code&gt;getWorkerMetadata&lt;&#x2F;code&gt;, it did not have a unique name except the Scala value it was assigned to. But we can&#x27;t observe that in our code generator (without writing a macro) so here we have chosen to just get a name as a string next to the definition.&lt;&#x2F;p&gt;
&lt;p&gt;Then we can define a &lt;strong&gt;collection&lt;&#x2F;strong&gt; of &lt;code&gt;RustEndpoint&lt;&#x2F;code&gt;s:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;final case class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; RustEndpoints&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Name&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;originalEndpoints&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Chunk&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RustEndpoint&lt;&#x2F;span&gt;&lt;span&gt;])
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;and define a &lt;code&gt;++&lt;&#x2F;code&gt; operator between &lt;code&gt;RustEndpoint&lt;&#x2F;code&gt; and &lt;code&gt;RustEndpoints&lt;&#x2F;code&gt;. In the end we can use these to define APIs like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;for
&lt;&#x2F;span&gt;&lt;span&gt;      getDefaultProject &amp;lt;- fromEndpoint(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;getDefaultProject&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, ProjectEndpoints.getDefaultProject)
&lt;&#x2F;span&gt;&lt;span&gt;      getProjects       &amp;lt;- fromEndpoint(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;getProjects&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, ProjectEndpoints.getProjects)
&lt;&#x2F;span&gt;&lt;span&gt;      postProject       &amp;lt;- fromEndpoint(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;postProject&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, ProjectEndpoints.postProject)
&lt;&#x2F;span&gt;&lt;span&gt;      getProject        &amp;lt;- fromEndpoint(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;getProject&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, ProjectEndpoints.getProject)
&lt;&#x2F;span&gt;&lt;span&gt;      deleteProject     &amp;lt;- fromEndpoint(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;deleteProject&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, ProjectEndpoints.deleteProject)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;yield &lt;&#x2F;span&gt;&lt;span&gt;(getDefaultProject ++ getProjects ++ postProject ++ getProject ++ deleteProject).named(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;Project&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The collection of endpoints also have a name (&lt;code&gt;&quot;Project&quot;&lt;&#x2F;code&gt;). In the code generator we can use these to have a separate &lt;strong&gt;client&lt;&#x2F;strong&gt; (trait and implementation) for each of these groups of endpoints.&lt;&#x2F;p&gt;
&lt;p&gt;When processing a single endpoint, we need to process the following parts of data:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Inputs (&lt;code&gt;endpoint.input&lt;&#x2F;code&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;Outputs (&lt;code&gt;endpoint.output&lt;&#x2F;code&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;Errors (&lt;code&gt;endpoint.error&lt;&#x2F;code&gt;)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Everything we need is encoded in one of these three fields of an endpoint, and all three are built on the same abstraction called &lt;code&gt;HttpCodec&lt;&#x2F;code&gt;. Still there is a significant difference in what we want to do with inputs versus what we want to do with outputs and errors, so we can write two different traversals for gathering all the necessary information from them.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;inputs&quot;&gt;Inputs&lt;&#x2F;h3&gt;
&lt;p&gt;When gathering information from the inputs, we are going to run into the following cases:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;HttpCodec.Combine&lt;&#x2F;code&gt; means we have two different inputs; we need both, so we have to process both inner codecs sequentially, both extending our conversion function&#x27;s state.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;HttpCodec.Content&lt;&#x2F;code&gt; describes a &lt;strong&gt;request body&lt;&#x2F;strong&gt;. Here we have a &lt;code&gt;Schema&lt;&#x2F;code&gt; of our request body type and we can use the previously generated schema-to-rust type mapping to know how to refer to the generated rust type in our client code. It is important that in case there are &lt;strong&gt;multiple content codecs&lt;&#x2F;strong&gt;, that means the endpoint receives a &lt;code&gt;multipart&#x2F;form-data&lt;&#x2F;code&gt; body, while if there is only one codec, it accepts an &lt;code&gt;application&#x2F;json&lt;&#x2F;code&gt; representation of that.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;HttpCodec.ContentStream&lt;&#x2F;code&gt; represents a body containing a stream of a given element type. We can model this as just a &lt;code&gt;Vec&amp;lt;A&amp;gt;&lt;&#x2F;code&gt; in the Rust side, but there is one special case here - if the element is a &lt;code&gt;Byte&lt;&#x2F;code&gt;, ZIO Http expects a simple byte stream of type &lt;code&gt;application&#x2F;octet-stream&lt;&#x2F;code&gt; instead of a JSON-encoded array of bytes.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;HttpCodec.Fallback&lt;&#x2F;code&gt; this represents the case when we should either use the first codec, &lt;em&gt;or&lt;&#x2F;em&gt; the second. A special case is when the &lt;code&gt;right&lt;&#x2F;code&gt; value of &lt;code&gt;Fallback&lt;&#x2F;code&gt; is &lt;code&gt;HttpCodec.Empty&lt;&#x2F;code&gt;. This is how ZIO Http represents optional inputs! We have to handle this specially in our code generator to mark some of the input parameters of the generated API as optional parameters. We don&#x27;t support currently the other cases (when &lt;code&gt;right&lt;&#x2F;code&gt; is not empty) as it is not frequently used and was not required for the &lt;em&gt;Golem API&lt;&#x2F;em&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;HttpCodec.Header&lt;&#x2F;code&gt; means we need to send a &lt;em&gt;header&lt;&#x2F;em&gt; in the request, which can be a static (value described by the endpoint) or dynamic one (where we need to add an extra parameter to the generated function to get a value of the header). There are a couple of different primitive types supported for the value, such as string, numbers, UUIDs.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;HttpCodec.Method&lt;&#x2F;code&gt; defines the method to be used for calling the endpoint&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;HttpCodec.Path&lt;&#x2F;code&gt; describes the request path, which consists of a sequence of static and dynamic segments - for the dynamic segments the generated API need to have exposed function parameters of the appropriate type&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;HttpCodec.Query&lt;&#x2F;code&gt; similar to the header codec defines query parameters to be sent&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;HttpCodec.TransformOrFail&lt;&#x2F;code&gt; transforms a value with a Scala function - the same case as with &lt;code&gt;Schema.Transform&lt;&#x2F;code&gt;. We cannot use the Scala function in our code generator so we just need to ignore this and go to the inner codec.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;HttpCodec.Annotated&lt;&#x2F;code&gt; attaches additional information to the codecs that we are currently not using, but it could be used to get documentation strings and include them in the generated code as comments, for example.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;outputs&quot;&gt;Outputs&lt;&#x2F;h3&gt;
&lt;p&gt;For outputs we are dealing with the same &lt;code&gt;HttpCodec&lt;&#x2F;code&gt; type but there are some significant differences:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;We can ignore &lt;code&gt;Path&lt;&#x2F;code&gt;, &lt;code&gt;Method&lt;&#x2F;code&gt;, &lt;code&gt;Query&lt;&#x2F;code&gt; as they have no meaning for outputs&lt;&#x2F;li&gt;
&lt;li&gt;We could look for &lt;em&gt;output headers&lt;&#x2F;em&gt; but currently we ignore them&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Fallback&lt;&#x2F;code&gt; on the other hand needs to be properly handled for outputs (errors, especially) because this is how the different error responses are encoded.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Status&lt;&#x2F;code&gt; is combined with &lt;code&gt;Content&lt;&#x2F;code&gt; in these &lt;code&gt;Fallback&lt;&#x2F;code&gt; nodes to describe cases. This complicates the code generator because we need to record &quot;possible outputs&quot; which are only added as real output once we are sure we will not get any other piece of information for them.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;To understand the error fallback handling better, let&#x27;s take a look at how it is defined in one of Golem&#x27;s endpoint groups:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;errorCodec&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;HttpCodec&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;HttpCodecType&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Status &lt;&#x2F;span&gt;&lt;span&gt;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;HttpCodecType&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Content&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;LimitsEndpointError&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span&gt;  HttpCodec.enumeration[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;LimitsEndpointError&lt;&#x2F;span&gt;&lt;span&gt;](
&lt;&#x2F;span&gt;&lt;span&gt;    HttpCodec.error[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;LimitsEndpointError&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Unauthorized&lt;&#x2F;span&gt;&lt;span&gt;](Status.Unauthorized),
&lt;&#x2F;span&gt;&lt;span&gt;    HttpCodec.error[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;LimitsEndpointError&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ArgValidationError&lt;&#x2F;span&gt;&lt;span&gt;](Status.BadRequest),
&lt;&#x2F;span&gt;&lt;span&gt;    HttpCodec.error[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;LimitsEndpointError&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;LimitExceeded&lt;&#x2F;span&gt;&lt;span&gt;](Status.Forbidden),
&lt;&#x2F;span&gt;&lt;span&gt;    HttpCodec.error[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;LimitsEndpointError&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;InternalError&lt;&#x2F;span&gt;&lt;span&gt;](Status.InternalServerError)
&lt;&#x2F;span&gt;&lt;span&gt;  )
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This leads to a series of nested &lt;code&gt;HttpCodec.Fallback&lt;&#x2F;code&gt;, &lt;code&gt;HttpCodec.Combine&lt;&#x2F;code&gt;, &lt;code&gt;HttpCodec.Status&lt;&#x2F;code&gt; and &lt;code&gt;HttpCodec.Content&lt;&#x2F;code&gt; nodes. When processing them we first add values of possible outputs:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;final case class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; PossibleOutput&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;tpe&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RustType&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;status&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Status&lt;&#x2F;span&gt;&lt;span&gt;], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;isError&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Boolean&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;schema&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Schema&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span&gt;])
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;and once we have fully processed one branch of a &lt;code&gt;Fallback&lt;&#x2F;code&gt;, we finalize these possible outputs and make them real outputs. The way these different error cases are mapped into different case classes of a a single error type (&lt;code&gt;LimitsEndpointError&lt;&#x2F;code&gt;) also complicates things. When we reach a &lt;code&gt;HttpCodec.Content&lt;&#x2F;code&gt; referencing  &lt;code&gt;Schema[LimitsEndpointError.LimitExceeded&lt;&#x2F;code&gt;] for example, all we see is a &lt;code&gt;Schema.Record&lt;&#x2F;code&gt; - and not the parent enum! For this reason in the code generator we are explicitly defining the error ADT type:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;fromEndpoint &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;RustEndpoint.withKnownErrorAdt[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;LimitsEndpointError&lt;&#x2F;span&gt;&lt;span&gt;].zio
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;and we detect if all cases are subtypes of this error ADT and generate the client code according to that.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;the-rust-client&quot;&gt;The Rust client&lt;&#x2F;h3&gt;
&lt;p&gt;It is time to take a look at what the output of all this looks like. In this section we will examine some parts of the generated Rust code.&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s take a look at the &lt;strong&gt;Projects API&lt;&#x2F;strong&gt;. We have generated a &lt;code&gt;trait&lt;&#x2F;code&gt; for all the endpoints belonging to it:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;async_trait&lt;&#x2F;span&gt;&lt;span&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;async_trait&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;pub trait &lt;&#x2F;span&gt;&lt;span&gt;Project {
&lt;&#x2F;span&gt;&lt;span&gt;    async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;get_default_project&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;authorization&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;amp;str&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; Result&amp;lt;crate::model::Project, ProjectError&amp;gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;get_projects&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;project_name&lt;&#x2F;span&gt;&lt;span&gt;: Option&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;amp;str&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;authorization&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;amp;str&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; Result&amp;lt;Vec&amp;lt;crate::model::Project&amp;gt;, ProjectError&amp;gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;post_project&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;field0&lt;&#x2F;span&gt;&lt;span&gt;: crate::model::ProjectDataRequest, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;authorization&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;amp;str&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; Result&amp;lt;crate::model::Project, ProjectError&amp;gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;get_project&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;project_id&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;amp;str&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;authorization&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;amp;str&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; Result&amp;lt;crate::model::Project, ProjectError&amp;gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;delete_project&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;project_id&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;amp;str&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;authorization&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;amp;str&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; Result&amp;lt;(), ProjectError&amp;gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This is quite close to our original goal! One significant difference is that some type information is lost: &lt;code&gt;project_id&lt;&#x2F;code&gt; was &lt;code&gt;ProjectId&lt;&#x2F;code&gt; in Scala, and &lt;code&gt;authorization&lt;&#x2F;code&gt; was &lt;code&gt;TokenSecret&lt;&#x2F;code&gt; etc. Unfortunately with the current version of ZIO Schema these newtypes (or Scala 3 opaque types) are represented as primitive types transformed by a function. As explained earlier, we can&#x27;t inspect the transformation function so all we can do is to use the underlying primitive type&#x27;s schema here. This can be solved by introducing the concept of newtypes into ZIO Schema.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;code&gt;ProjectError&lt;&#x2F;code&gt; is a client specific generated &lt;code&gt;enum&lt;&#x2F;code&gt; which can represent a mix of internal errors (such as not being able to call the endpoint) as well as the endpoint-specific domain errors:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;pub enum &lt;&#x2F;span&gt;&lt;span&gt;ProjectError {
&lt;&#x2F;span&gt;&lt;span&gt;    RequestFailure(reqwest::Error),
&lt;&#x2F;span&gt;&lt;span&gt;    InvalidHeaderValue(reqwest::header::InvalidHeaderValue),
&lt;&#x2F;span&gt;&lt;span&gt;    UnexpectedStatus(reqwest::StatusCode),
&lt;&#x2F;span&gt;&lt;span&gt;    Status404 {
&lt;&#x2F;span&gt;&lt;span&gt;        message: String,
&lt;&#x2F;span&gt;&lt;span&gt;    },
&lt;&#x2F;span&gt;&lt;span&gt;    Status403 {
&lt;&#x2F;span&gt;&lt;span&gt;        error: String,
&lt;&#x2F;span&gt;&lt;span&gt;    },
&lt;&#x2F;span&gt;&lt;span&gt;    Status400 {
&lt;&#x2F;span&gt;&lt;span&gt;        errors: Vec&amp;lt;String&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    },
&lt;&#x2F;span&gt;&lt;span&gt;    Status500 {
&lt;&#x2F;span&gt;&lt;span&gt;        error: String,
&lt;&#x2F;span&gt;&lt;span&gt;    },
&lt;&#x2F;span&gt;&lt;span&gt;    Status401 {
&lt;&#x2F;span&gt;&lt;span&gt;        message: String,
&lt;&#x2F;span&gt;&lt;span&gt;    },
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;So why are these per-status-code error types inlined here instead of generating the error ADT as a Rust &lt;code&gt;enum&lt;&#x2F;code&gt; and using that? The reason is a difference between Scala and Rust: we have a single error ADT in Scala and we can still use its &lt;em&gt;cases&lt;&#x2F;em&gt; directly in the endpoint definition:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;sealed trait&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; ProjectEndpointError
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;object&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; ProjectEndpointError {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;final case class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; ArgValidation(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;errors&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: Chunk[String]) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ProjectEndpointError
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;HttpCodec.error[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ProjectEndpointError&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ArgValidation&lt;&#x2F;span&gt;&lt;span&gt;](Status.BadRequest),
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We &lt;em&gt;do&lt;&#x2F;em&gt; generate the corresponding &lt;code&gt;ProjectEndpointError&lt;&#x2F;code&gt; enum in Rust:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span&gt;(Debug, Clone, PartialEq, Eq, Hash, Ord, PartialOrd, serde::Serialize, serde::Deserialize)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;pub enum &lt;&#x2F;span&gt;&lt;span&gt;ProjectEndpointError {
&lt;&#x2F;span&gt;&lt;span&gt;    ArgValidation {
&lt;&#x2F;span&gt;&lt;span&gt;        errors: Vec&amp;lt;String&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    },
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;but we cannot use &lt;code&gt;ProjectEndpointError::ArgValidation&lt;&#x2F;code&gt; as a type in the above &lt;code&gt;ProjectError&lt;&#x2F;code&gt; enum. And we cannot safely do something like &lt;code&gt;Either[ClientError, ProjectEndpointError]&lt;&#x2F;code&gt; because in the endpoint DSL we just have a sequence of status code - error case pairs. There is no guarantee that one enum case is only used once in that mapping, or that every case is used at least once. For this reason the mapping from &lt;code&gt;ProjectError&lt;&#x2F;code&gt; to &lt;code&gt;ProjectEndpointError&lt;&#x2F;code&gt; is generated as a transformation function:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;ProjectError {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;to_project_endpoint_error&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; Option&amp;lt;crate::model::ProjectEndpointError&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;match &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;      ProjectError::Status400 { errors } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;Some(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;crate&lt;&#x2F;span&gt;&lt;span&gt;::model::ProjectEndpointError::ArgValidation { errors: errors.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;clone&lt;&#x2F;span&gt;&lt;span&gt;() }), 
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;For each client trait we also generate a &lt;strong&gt;live implementation&lt;&#x2F;strong&gt;, represented by a struct containing configuration for the client:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span&gt;(Clone, Debug)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;pub struct &lt;&#x2F;span&gt;&lt;span&gt;ProjectLive {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;base_url&lt;&#x2F;span&gt;&lt;span&gt;: reqwest::Url,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;allow_insecure&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;bool&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And the implementation of the client trait for these live structs are just using &lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;reqwest&#x2F;latest&#x2F;reqwest&#x2F;&quot;&gt;&lt;code&gt;reqwest&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; (a HTTP client library for Rust) to construct the request from the input parameters exactly the way the endpoint definition described:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;get_project&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;project_id&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;amp;str&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;authorization&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;amp;str&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; Result&amp;lt;Project, ProjectError&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; url &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.base_url.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;clone&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;  url.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;set_path&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;format!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;v1&#x2F;projects&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;{project_id}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; headers &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;reqwest::header::HeaderMap::new();
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;      
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; builder &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;reqwest::Client::builder();
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; client &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; builder.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;build&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; result &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; client
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;(url)
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;headers&lt;&#x2F;span&gt;&lt;span&gt;(headers)
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;send&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    .await&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt; result.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;status&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;as_u16&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;200 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; body &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; result.json::&amp;lt;crate::model::Project&amp;gt;().await&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;      Ok(body)
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;404 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; body &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; result.json::&amp;lt;ProjectEndpointErrorNotFoundPayload&amp;gt;().await&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;      Err(ProjectError::Status404 { message: body.message })
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;putting-it-all-together&quot;&gt;Putting it all together&lt;&#x2F;h2&gt;
&lt;p&gt;At this point we have seen how &lt;em&gt;ZIO Http&lt;&#x2F;em&gt; describes endpoints, how &lt;em&gt;ZIO Schema&lt;&#x2F;em&gt; encodes Scala types, how we can use &lt;em&gt;ZIO Parser&lt;&#x2F;em&gt; to have composable printers and how &lt;em&gt;ZIO Prelude&lt;&#x2F;em&gt; can help with working with state in a purely functional code. The only thing remaining is to wire everything together and define an easy to use function that, when executed, creates all the required &lt;em&gt;Rust files&lt;&#x2F;em&gt; ready to be compiled.&lt;&#x2F;p&gt;
&lt;p&gt;We can create a class for this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;final case class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; ClientCrateGenerator&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;version&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;description&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;homepage&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;endpoints&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Chunk&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RustEndpoints&lt;&#x2F;span&gt;&lt;span&gt;]):
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Here &lt;code&gt;endpoints&lt;&#x2F;code&gt; is a collection of a &lt;strong&gt;group of endpoints&lt;&#x2F;strong&gt;, as it was shown earlier. So first you can use &lt;code&gt;RustEndpoint.fromEither&lt;&#x2F;code&gt; and &lt;code&gt;++&lt;&#x2F;code&gt; to create a &lt;code&gt;RustEndpoints&lt;&#x2F;code&gt; value for each API you have, and then generate a client for all of those in one run with this class.&lt;&#x2F;p&gt;
&lt;p&gt;The first thing to do is collect &lt;em&gt;all&lt;&#x2F;em&gt; the referenced &lt;code&gt;Schema&lt;&#x2F;code&gt; from all the endpoints:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;private val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;allSchemas &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; endpoints.map(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;.endpoints.toSet.flatMap(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;.referredSchemas)).reduce(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt; union &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Then we define a ZIO function (it is an effectful function, manipulating the filesystem!) to generate the files:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;generate&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;targetDirectory&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Path&lt;&#x2F;span&gt;&lt;span&gt;): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ZIO&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Any&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Throwable&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Unit&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;for
&lt;&#x2F;span&gt;&lt;span&gt;    clientModel &amp;lt;- ZIO.fromEither(RustModel.fromSchemas(allSchemas.toSeq))
&lt;&#x2F;span&gt;&lt;span&gt;                      .mapError(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RuntimeException&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;Failed to generate client model: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;$err&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;    cargoFile &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; targetDirectory &#x2F; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;Cargo.toml&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    srcDir &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; targetDirectory &#x2F; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;src&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    libFile &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; srcDir &#x2F; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;lib.rs&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    modelFile &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; srcDir &#x2F; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;model.rs&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    requiredCrates &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; clientModel.requiredCrates union endpoints.map(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;.requiredCrates).reduce(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt; union &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt; &amp;lt;- Files.createDirectories(targetDirectory)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt; &amp;lt;- Files.createDirectories(srcDir)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt; &amp;lt;- writeCargo(cargoFile, requiredCrates)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt; &amp;lt;- writeLib(libFile)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt; &amp;lt;- writeModel(modelFile, clientModel.definitions)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt; &amp;lt;- ZIO.foreachDiscard(endpoints): endpoints &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;           &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;clientFile &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; srcDir &#x2F; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;${&lt;&#x2F;span&gt;&lt;span&gt;endpoints.name.toSnakeCase&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;}.rs&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;           writeClient(clientFile, endpoints)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;yield &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The steps are straightforward:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Create a &lt;code&gt;RustModel&lt;&#x2F;code&gt; using all the collected &lt;code&gt;Schema[?]&lt;&#x2F;code&gt; values&lt;&#x2F;li&gt;
&lt;li&gt;Create all the required directories&lt;&#x2F;li&gt;
&lt;li&gt;Write a &lt;em&gt;cargo file&lt;&#x2F;em&gt; - having all the dependencies and other metadata required to compile the Rust project&lt;&#x2F;li&gt;
&lt;li&gt;Write a &lt;em&gt;lib file&lt;&#x2F;em&gt; - this is just a series of &lt;code&gt;pub mod xyz;&lt;&#x2F;code&gt; lines, defining the generated modules which are put in different fiels&lt;&#x2F;li&gt;
&lt;li&gt;Write all the generated Rust types into a &lt;code&gt;model.rs&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;For each endpoint group create a &lt;code&gt;xyz.rs&lt;&#x2F;code&gt; module containing the client trait and implementation&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;For working with the file system - creating directories, writing data into files, we can use the [&lt;a href=&quot;https:&#x2F;&#x2F;zio.dev&#x2F;zio-nio&#x2F;&quot;&gt;ZIO NIO&lt;&#x2F;a&gt;] library providing ZIO wrapprers for all these functionalities.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;links&quot;&gt;Links&lt;&#x2F;h3&gt;
&lt;p&gt;Finally, some links:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;strong&gt;code generator&lt;&#x2F;strong&gt; is open source and available at https:&#x2F;&#x2F;github.com&#x2F;vigoo&#x2F;zio-http-rust - the code and the repository itself is not documented at the moment, except by this blog post.&lt;&#x2F;li&gt;
&lt;li&gt;The generated &lt;strong&gt;Golem client for Rust&lt;&#x2F;strong&gt; is published as a crate to https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;golem-client&lt;&#x2F;li&gt;
&lt;li&gt;The new &lt;strong&gt;Golem CLI&lt;&#x2F;strong&gt;, using the generated client, is also open sourced and can be found at https:&#x2F;&#x2F;github.com&#x2F;golemcloud&#x2F;golem-cli&lt;&#x2F;li&gt;
&lt;li&gt;Finally you can learn more about &lt;strong&gt;Golem&lt;&#x2F;strong&gt; itself at https:&#x2F;&#x2F;www.golem.cloud&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>[Video] Introducing ZIO Flow @ ZIO World 2023</title>
        <published>2023-09-06T00:00:00+00:00</published>
        <updated>2023-09-06T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Daniel Vigovszky
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://blog.vigoo.dev/posts/introducing-zio-flow/"/>
        <id>https://blog.vigoo.dev/posts/introducing-zio-flow/</id>
        
        <content type="html" xml:base="https://blog.vigoo.dev/posts/introducing-zio-flow/">&lt;p&gt;My short talk at &lt;a href=&quot;https:&#x2F;&#x2F;www.zioworld.com&#x2F;&quot;&gt;ZIO World 2023&lt;&#x2F;a&gt; about the  &lt;a href=&quot;https:&#x2F;&#x2F;zio.dev&#x2F;zio-flow&#x2F;&quot;&gt;zio-flow library&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;iframe width=&quot;800&quot; height=&quot;450&quot; src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;ujJuFd6Vvfc?si=bsh3b7f-LXFVP_v_&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&quot; allowfullscreen&gt;&lt;&#x2F;iframe&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>[Video] ZIO Parser @ ZIO World 2022</title>
        <published>2022-03-11T00:00:00+00:00</published>
        <updated>2022-03-11T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Daniel Vigovszky
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://blog.vigoo.dev/posts/zioworld-talk/"/>
        <id>https://blog.vigoo.dev/posts/zioworld-talk/</id>
        
        <content type="html" xml:base="https://blog.vigoo.dev/posts/zioworld-talk/">&lt;p&gt;My talk at &lt;a href=&quot;https:&#x2F;&#x2F;zioworld.com&#x2F;&quot;&gt;ZIO World 2022&lt;&#x2F;a&gt; introducing &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;zio&#x2F;zio-parser&quot;&gt;ZIO Parser&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;iframe width=&quot;800&quot; height=&quot;450&quot; src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;IG6SmKPPamY&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;&#x2F;iframe&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Writing kubectl plugins with ZIO K8s</title>
        <published>2021-03-07T00:00:00+00:00</published>
        <updated>2021-03-07T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Daniel Vigovszky
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://blog.vigoo.dev/posts/zio-k8s-plugins/"/>
        <id>https://blog.vigoo.dev/posts/zio-k8s-plugins/</id>
        
        <content type="html" xml:base="https://blog.vigoo.dev/posts/zio-k8s-plugins/">&lt;p&gt;Originally posted &lt;a href=&quot;https:&#x2F;&#x2F;ziverge.com&#x2F;blog&#x2F;zio-k8s-kubectl-plugin&quot;&gt;at the Ziverge blog&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Andrea Peruffo recently published &lt;a href=&quot;https:&#x2F;&#x2F;www.lightbend.com&#x2F;blog&#x2F;writing-kubectl-plugins-with-scala-or-java-with-fabric8-kubernetes-client-on-graalvm?utm_campaign=Oktopost-BLG+-+Writing+Kubectl+plugins+in+Java+or+Scala&quot;&gt;a blog post on the Lightbend blog&lt;&#x2F;a&gt; about how they migrated a &lt;code&gt;kubectl&lt;&#x2F;code&gt; plugin from Golang to Scala using the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;fabric8io&#x2F;kubernetes-client&quot;&gt;Fabric8&lt;&#x2F;a&gt; Kubernetes client and a few Scala libraries. This is a perfect use case for the &lt;a href=&quot;https:&#x2F;&#x2F;coralogix.github.io&#x2F;zio-k8s&#x2F;&quot;&gt;zio-k8s library&lt;&#x2F;a&gt; announced &lt;a href=&quot;https:&#x2F;&#x2F;coralogix.com&#x2F;log-analytics-blog&#x2F;the-coralogix-operator-a-tale-of-zio-and-kubernetes&#x2F;&quot;&gt;two weeks ago&lt;&#x2F;a&gt;, so we decided to write this post demonstrating how to implement the same example using the ZIO ecosystem.&lt;&#x2F;p&gt;
&lt;p&gt;We are going to implement the same example, originally described in the &lt;a href=&quot;https:&#x2F;&#x2F;dev.to&#x2F;ikwattro&#x2F;write-a-kubectl-plugin-in-java-with-jbang-and-fabric8-566&quot;&gt;Write a kubectl plugin in Java with JBang and fabric8&lt;&#x2F;a&gt; article, using the following libraries:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zio.dev&#x2F;&quot;&gt;ZIO&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;coralogix.github.io&#x2F;zio-k8s&#x2F;&quot;&gt;ZIO K8s&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zio.github.io&#x2F;zio-logging&#x2F;&quot;&gt;ZIO Logging&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;vigoo.github.io&#x2F;clipp&#x2F;docs&#x2F;&quot;&gt;clipp&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;sttp.softwaremill.com&#x2F;en&#x2F;latest&#x2F;&quot;&gt;sttp&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;circe.github.io&#x2F;circe&#x2F;&quot;&gt;circe&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The source code of the example &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;zivergetech&#x2F;zio-k8s-kubectl-plugin-example&quot;&gt;can be found here&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The linked blog post does a great job in explaining the benefits and difficulties of compiling to native image with GraalVM so we are not going to repeat it here. Instead, we will focus on how the implementation looks in the functional Scala world.&lt;&#x2F;p&gt;
&lt;p&gt;The example has to implement two &lt;em&gt;kubectl commands&lt;&#x2F;em&gt;: &lt;code&gt;version&lt;&#x2F;code&gt; to print its own version and &lt;code&gt;list&lt;&#x2F;code&gt; to list information about &lt;em&gt;all Pods of the Kubernetes cluster&lt;&#x2F;em&gt; in either ASCII table, JSON or YAML format.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;cli-parameters&quot;&gt;CLI parameters&lt;&#x2F;h3&gt;
&lt;p&gt;Let&#x27;s start with defining these command line options with the &lt;a href=&quot;https:&#x2F;&#x2F;vigoo.github.io&#x2F;clipp&#x2F;docs&#x2F;&quot;&gt;clipp&lt;&#x2F;a&gt; library!&lt;&#x2F;p&gt;
&lt;p&gt;First, we define the data structures that describe our parameters:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;sealed trait&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; Format
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;object&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; Format {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case object&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; Default &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Format
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case object&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; Json &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Format
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case object&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; Yaml &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Format
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;sealed trait&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; Command
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;object&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; Command {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;final case class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; ListPods(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;format&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: Format) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Command
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case object&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; Version &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Command
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;final case class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; Parameters&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;verbose&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Boolean&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;command&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Command&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;When parsing the arguments (passed as an array of strings), we need to either produce a &lt;code&gt;Parameters&lt;&#x2F;code&gt; value or fail and print some usage information.&lt;&#x2F;p&gt;
&lt;p&gt;With &lt;code&gt;clipp&lt;&#x2F;code&gt;, this is done by defining a parameter parser using its parser DSL in a &lt;em&gt;for comprehension&lt;&#x2F;em&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;spec &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_           &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span&gt; metadata(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;kubectl lp&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;verbose     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span&gt; flag(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;Verbose logging&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;&amp;#39;v&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;verbose&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;commandName &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span&gt; command(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;version&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;list&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;command     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;- 
&lt;&#x2F;span&gt;&lt;span&gt;      commandName &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;match &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;version&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; 
&lt;&#x2F;span&gt;&lt;span&gt;          pure(Command.Version)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;list&amp;quot;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;specifiedFormat &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span&gt; optional {
&lt;&#x2F;span&gt;&lt;span&gt;                                namedParameter[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Format&lt;&#x2F;span&gt;&lt;span&gt;](
&lt;&#x2F;span&gt;&lt;span&gt;                                  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;Output format&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                                  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;default|json|yaml&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                                  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;&amp;#39;o&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                                  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;output&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;                                )
&lt;&#x2F;span&gt;&lt;span&gt;                              }
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;format           &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; specifiedFormat.getOrElse(Format.Default)
&lt;&#x2F;span&gt;&lt;span&gt;          } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;yield &lt;&#x2F;span&gt;&lt;span&gt;Command.ListPods(format)
&lt;&#x2F;span&gt;&lt;span&gt;      }
&lt;&#x2F;span&gt;&lt;span&gt;  } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;yield &lt;&#x2F;span&gt;&lt;span&gt;Parameters(verbose, command)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;As we can see, it is possible to make decisions in the parser based on the previously parsed values, so each &lt;em&gt;command&lt;&#x2F;em&gt; can have a different set of arguments. In order to parse the possible &lt;em&gt;output formats&lt;&#x2F;em&gt;, we also implement the &lt;code&gt;ParameterParser&lt;&#x2F;code&gt; type class for &lt;code&gt;Format&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;implicit val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;parameterParser&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ParameterParser&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Format&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ParameterParser&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Format&lt;&#x2F;span&gt;&lt;span&gt;] {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;override def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;parse&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Either&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Format&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span&gt;      value.toLowerCase &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;match &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;default&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;Right(Format.Default)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;json&amp;quot;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;Right(Format.Json)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;yaml&amp;quot;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;Right(Format.Yaml)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_         &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;Left(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;Invalid output format &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;$value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;#39;, use &amp;#39;default&amp;#39;, &amp;#39;json&amp;#39; or &amp;#39;yaml&amp;#39;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;      }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;override def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;example&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Format &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;Format.Default
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This is all we need to bootstrap our command line application. The following main function parses the arguments and provides the parsed &lt;code&gt;Parameters&lt;&#x2F;code&gt; value to the &lt;code&gt;ZIO&lt;&#x2F;code&gt; program:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;run&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;args&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;]): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;URIO&lt;&#x2F;span&gt;&lt;span&gt;[zio.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ZEnv&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ExitCode&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;clippConfig &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; config.fromArgsWithUsageInfo(args, Parameters.spec)
&lt;&#x2F;span&gt;&lt;span&gt;  runWithParameters()
&lt;&#x2F;span&gt;&lt;span&gt;    .provideCustomLayer(clippConfig)
&lt;&#x2F;span&gt;&lt;span&gt;    .catchAll { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ParserFailure &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;ZIO.succeed(ExitCode.failure) }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;runWithParameters&lt;&#x2F;span&gt;&lt;span&gt;(): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ZIO&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ZEnv &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;with &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ClippConfig&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Parameters&lt;&#x2F;span&gt;&lt;span&gt;], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Nothing&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ExitCode&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;working-with-kubernetes&quot;&gt;Working with Kubernetes&lt;&#x2F;h3&gt;
&lt;p&gt;In &lt;code&gt;runWithParameters&lt;&#x2F;code&gt;, we have everything needed to initialize the logging and Kubernetes modules and perform the actual command. Before talking about the initialization though, let&#x27;s take a look at how we can list the pods!&lt;&#x2F;p&gt;
&lt;p&gt;We define a data type holding all the information we want to report about each pod:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; PodInfo&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;namespace&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;status&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;message&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The task now is to fetch &lt;em&gt;all pods&lt;&#x2F;em&gt; from Kubernetes and construct &lt;code&gt;PodInfo&lt;&#x2F;code&gt; values. In &lt;code&gt;zio-k8s&lt;&#x2F;code&gt; &lt;em&gt;getting a list of pods&lt;&#x2F;em&gt; is defined as a &lt;strong&gt;ZIO Stream&lt;&#x2F;strong&gt;, which under the hood sends multiple HTTP requests to Kubernetes taking advantage of its &lt;em&gt;pagination&lt;&#x2F;em&gt; capability. In this &lt;em&gt;stream&lt;&#x2F;em&gt; each element will be a &lt;code&gt;Pod&lt;&#x2F;code&gt; and we can start processing them one by one as soon they arrive over the wire. This way the implementation of the &lt;code&gt;list&lt;&#x2F;code&gt; command can be something like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;run&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;format&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Format&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= 
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span&gt; log.debug(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;Executing the list command&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span&gt; pods
&lt;&#x2F;span&gt;&lt;span&gt;            .getAll(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;namespace&lt;&#x2F;span&gt;&lt;span&gt; = None)
&lt;&#x2F;span&gt;&lt;span&gt;            .mapM(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;toModel&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;            .run(reports.sink(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;format&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;            .catchAll { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;k8sFailure &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;              console.putStrLnErr(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;Failed to get the list of pods: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;$k8sFailure&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;  } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;yield &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Let&#x27;s take a look at each line!&lt;&#x2F;p&gt;
&lt;p&gt;First, &lt;code&gt;log.debug&lt;&#x2F;code&gt; uses the &lt;em&gt;ZIO logging&lt;&#x2F;em&gt; library. We are going to initialize logging in a way that these messages only appear if the &lt;code&gt;--verbose&lt;&#x2F;code&gt; option was enabled.&lt;&#x2F;p&gt;
&lt;p&gt;Then &lt;code&gt;pods.getAll&lt;&#x2F;code&gt; is the ZIO Stream provided by the &lt;em&gt;ZIO K8s&lt;&#x2F;em&gt; library. Not providing a specific namespace means that we are getting pods from &lt;em&gt;all&lt;&#x2F;em&gt; namespaces.&lt;&#x2F;p&gt;
&lt;p&gt;With &lt;code&gt;mapM(toModel)&lt;&#x2F;code&gt; we transform each &lt;code&gt;Pod&lt;&#x2F;code&gt; in the stream to our &lt;code&gt;PodInfo&lt;&#x2F;code&gt; data structure.&lt;&#x2F;p&gt;
&lt;p&gt;Finally we &lt;code&gt;run&lt;&#x2F;code&gt; the stream into a &lt;em&gt;sink&lt;&#x2F;em&gt; that is responsible for displaying the &lt;code&gt;PodInfo&lt;&#x2F;code&gt; structures with the specific &lt;em&gt;output format&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;code&gt;Pod&lt;&#x2F;code&gt; objects returned in the stream are simple &lt;em&gt;case classes&lt;&#x2F;em&gt; containing all the information available for the given resource. Most of the fields of these case classes are &lt;em&gt;optional&lt;&#x2F;em&gt; though, even though we can be sure that in our case each pod would have a name, a namespace and a status. To make working with these data structures easier within a set of expectations, they feature &lt;em&gt;getter methods&lt;&#x2F;em&gt; that are ZIO functions either returning the field&#x27;s value, or failing if they are not specified. With these we can implement &lt;code&gt;toModel&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;toModel&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;pod&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Pod&lt;&#x2F;span&gt;&lt;span&gt;): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;IO&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;K8sFailure&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;PodInfo&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;metadata  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span&gt; pod.getMetadata
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;name      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span&gt; metadata.getName
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;namespace &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span&gt; metadata.getNamespace
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;status    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span&gt; pod.getStatus
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;phase     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span&gt; status.getPhase
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;message    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; status.message.getOrElse(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;yield &lt;&#x2F;span&gt;&lt;span&gt;PodInfo(name, namespace, phase, message)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;An alternative would be to just store the optional values in &lt;code&gt;PodInfo&lt;&#x2F;code&gt; and handle their absence in the &lt;em&gt;report sink&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s talk about the &lt;em&gt;type&lt;&#x2F;em&gt; of the above defined &lt;code&gt;run&lt;&#x2F;code&gt; function:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span&gt;ZIO[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Pods &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;with &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Console &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;with &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Logging&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Nothing&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Unit&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The ZIO &lt;em&gt;environment&lt;&#x2F;em&gt; precisely specifies the modules used by our &lt;code&gt;run&lt;&#x2F;code&gt; function:&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Module&lt;&#x2F;th&gt;&lt;th&gt;Description&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;Pods&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;for accessing K8s pods&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;Console&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;for printing &lt;em&gt;errors&lt;&#x2F;em&gt; on the standard error channel with &lt;code&gt;putStrLnErr&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;Logging&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;for emitting some debug logs&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;The error type is &lt;code&gt;Nothing&lt;&#x2F;code&gt; because it can never fail - all errors are catched and displayed for the user within the run function.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;initialization&quot;&gt;Initialization&lt;&#x2F;h3&gt;
&lt;p&gt;Now we can see that in order to run the &lt;code&gt;list&lt;&#x2F;code&gt; command in &lt;code&gt;runWithParameters&lt;&#x2F;code&gt;, we must &lt;em&gt;provide&lt;&#x2F;em&gt; &lt;code&gt;Pods&lt;&#x2F;code&gt; and &lt;code&gt;Logging&lt;&#x2F;code&gt; modules to our implementation (&lt;code&gt;Console&lt;&#x2F;code&gt; is part of the default environment and does not need to be provided).&lt;&#x2F;p&gt;
&lt;p&gt;These modules are described by &lt;em&gt;ZIO Layers&lt;&#x2F;em&gt; which can be composed together to provide the &lt;em&gt;environment&lt;&#x2F;em&gt; for running our ZIO program. In this case we need to define a &lt;em&gt;logging layer&lt;&#x2F;em&gt; and a &lt;em&gt;kubernetes pods client&lt;&#x2F;em&gt; layer and then compose the two for our &lt;code&gt;list&lt;&#x2F;code&gt; implementation.&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s start with logging:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;configuredLogging&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;verbose&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Boolean&lt;&#x2F;span&gt;&lt;span&gt;): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ZLayer&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Console &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;with &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Clock&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Nothing&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Logging&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;logLevel &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= if &lt;&#x2F;span&gt;&lt;span&gt;(verbose) LogLevel.Trace &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;LogLevel.Info
&lt;&#x2F;span&gt;&lt;span&gt;    Logging.consoleErr(logLevel) &amp;gt;&amp;gt;&amp;gt; initializeSlf4jBridge
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We create a simple ZIO console logger that will print lines to the standard error channel; the enabled log level is determined by the &lt;code&gt;verbose&lt;&#x2F;code&gt; command line argument. As this logger writes to the console and also prints timestamps, our logging layer &lt;em&gt;requires&lt;&#x2F;em&gt; &lt;code&gt;Console with Clock&lt;&#x2F;code&gt; to be able to build a &lt;code&gt;Logging&lt;&#x2F;code&gt; module. Enabling the &lt;em&gt;SLF4j bridge&lt;&#x2F;em&gt; guarantees that logs coming from third party libraries will also get logged through ZIO logging. In our example this means that when we enable verbose logging, our &lt;code&gt;kubectl&lt;&#x2F;code&gt; plugin will log the HTTP requests made by the Kubernetes library!&lt;&#x2F;p&gt;
&lt;p&gt;The second layer we must define constructs a &lt;code&gt;Pods&lt;&#x2F;code&gt; module:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;pods &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; k8sDefault &amp;gt;&amp;gt;&amp;gt; Pods.live)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;By using &lt;code&gt;k8sDefault&lt;&#x2F;code&gt; we ask &lt;code&gt;zio-k8s&lt;&#x2F;code&gt; to use the &lt;em&gt;default configuration chain&lt;&#x2F;em&gt;, which first tries to load the &lt;code&gt;kubeconfig&lt;&#x2F;code&gt; and use the active &lt;em&gt;context&lt;&#x2F;em&gt; stored in it. This is exactly what &lt;code&gt;kubectl&lt;&#x2F;code&gt; does, so it is the perfect choice when writing a &lt;code&gt;kubectl&lt;&#x2F;code&gt; plugin. Other variants provide more flexibility such as loading custom configuration with the &lt;a href=&quot;https:&#x2F;&#x2F;zio.github.io&#x2F;zio-config&#x2F;&quot;&gt;ZIO Config&lt;&#x2F;a&gt; library. Once we have a &lt;em&gt;k8s configuration&lt;&#x2F;em&gt; we just feed it to the set of resource modules we need. In this example we only need to access pods. In more complex applications this would be something like &lt;code&gt;k8sDefault &amp;gt;&amp;gt;&amp;gt; (Pods.live ++ Deployments.live ++ ...)&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;With both layers defined, we can now provide them to our command implementation:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span&gt;runCommand(parameters.command)
&lt;&#x2F;span&gt;&lt;span&gt;  .provideCustomLayer(logging ++ pods)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;output&quot;&gt;Output&lt;&#x2F;h3&gt;
&lt;p&gt;The last thing missing is the &lt;em&gt;report sink&lt;&#x2F;em&gt; that we are running the stream of pods into. We are going to define three different sinks for the three output types.&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s start with JSON!&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;sink&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Encoder&lt;&#x2F;span&gt;&lt;span&gt;]: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ZSink&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Console&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Nothing&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Unit&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span&gt;  ZSink.foreach { (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;item&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    console.putStrLn(item.asJson.printWith(Printer.spaces2SortKeys))
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The JSON sink requires &lt;code&gt;Console&lt;&#x2F;code&gt; and then for each element &lt;code&gt;T&lt;&#x2F;code&gt; it converts it to JSON and pretty prints it to console. Note that this is going to be a JSON document per each line. We could easily define a different sink that collects each element and produces a single valid JSON array of them:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;arraySink&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Encoder&lt;&#x2F;span&gt;&lt;span&gt;]: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ZSink&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Console&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Nothing&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Unit&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span&gt;    ZSink.collectAll.flatMap { (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;items&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Chunk&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span&gt;]) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;      ZSink.fromEffect {
&lt;&#x2F;span&gt;&lt;span&gt;        console.putStrLn(Json.arr(items.map(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;.asJson): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;_*&lt;&#x2F;span&gt;&lt;span&gt;).printWith(Printer.spaces2SortKeys))
&lt;&#x2F;span&gt;&lt;span&gt;      }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;code&gt;T&lt;&#x2F;code&gt; type paramter in our example will always be &lt;code&gt;PodInfo&lt;&#x2F;code&gt;. By requiring it to have an implementation of circe&#x27;s &lt;code&gt;Encoder&lt;&#x2F;code&gt; type class we can call &lt;code&gt;.asJson&lt;&#x2F;code&gt; on instances of &lt;code&gt;T&lt;&#x2F;code&gt;, encoding it into a JSON object. We can &lt;em&gt;derive&lt;&#x2F;em&gt; these encoders automatically:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;implicit val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;encoder&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Encoder&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;PodInfo&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; deriveEncoder
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Producing YAML output is exactly the same except of first converting the JSON model to YAML with &lt;code&gt;asJson.asYaml&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The third output format option is to generate ASCII tables. We implement that with the same Java library as the original post, called &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;vdmeer&#x2F;asciitable&quot;&gt;&lt;code&gt;asciitable&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;. In order to separate the specification of how to convert a &lt;code&gt;PodInfo&lt;&#x2F;code&gt; to a table from the sink implementation, we can define our own type class similar to the JSON &lt;code&gt;Encoder&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;trait&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; Tabular&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;** Initializes a table by setting properties and adding header rows
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;      *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;createTableRenderer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;(): ZManaged[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Any&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Nothing&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;, AsciiTable]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;** Adds a single item of type T to the table created with [[createTableRenderer()]]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;      *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;addRow&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;table&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: AsciiTable)(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;item&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: T): UIO[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Unit&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;** Adds the table&amp;#39;s footer and renders it to a string
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;      *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;renderTable&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;table&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: AsciiTable): UIO[String]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We can implement this for &lt;code&gt;PodInfo&lt;&#x2F;code&gt; and then use a generic sink for printing the result table, similar to the previous examples:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;sink&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span&gt;](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;implicit &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;tabular&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Tabular&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span&gt;]): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ZSink&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Console&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Nothing&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Unit&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span&gt;  ZSink.managed[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Console&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Nothing&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;AsciiTable&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Unit&lt;&#x2F;span&gt;&lt;span&gt;](tabular.createTableRenderer()) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;table &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; initialize the table
&lt;&#x2F;span&gt;&lt;span&gt;      ZSink.foreach(tabular.addRow(table)) &amp;lt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; add each row
&lt;&#x2F;span&gt;&lt;span&gt;      printResultTable[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span&gt;](table) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; print the result
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;printResultTable&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span&gt;](
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;table&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;AsciiTable
&lt;&#x2F;span&gt;&lt;span&gt;)(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;implicit &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;tabular&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Tabular&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span&gt;]): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ZSink&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Console&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Nothing&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Unit&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span&gt;  ZSink.fromEffect {
&lt;&#x2F;span&gt;&lt;span&gt;    tabular
&lt;&#x2F;span&gt;&lt;span&gt;      .renderTable(table)
&lt;&#x2F;span&gt;&lt;span&gt;      .flatMap(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;str &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; console.putStrLn(str))
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;trying-it-out&quot;&gt;Trying it out&lt;&#x2F;h3&gt;
&lt;p&gt;With the report sinks implemenented we have everything ready to try out our new &lt;code&gt;kubectl&lt;&#x2F;code&gt; plugin!&lt;&#x2F;p&gt;
&lt;p&gt;We can compile the example to &lt;em&gt;native image&lt;&#x2F;em&gt; and copy the resulting image to a location on the &lt;code&gt;PATH&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#383a42;&quot;&gt;&lt;code&gt;&lt;span&gt;sbt nativeImage
&lt;&#x2F;span&gt;&lt;span&gt;cp target&#x2F;native-image&#x2F;kubectl-lp ~&#x2F;bin
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Then use &lt;code&gt;kubectl lp&lt;&#x2F;code&gt; to access our custom functions:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;blog-ziok8s-kubectlplugin.png&quot; alt=&quot;kubectl-example&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>The Coralogix Operator: A Tale of ZIO and Kubernetes</title>
        <published>2021-02-16T00:00:00+00:00</published>
        <updated>2021-02-16T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Daniel Vigovszky
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://blog.vigoo.dev/posts/zio-k8s/"/>
        <id>https://blog.vigoo.dev/posts/zio-k8s/</id>
        
        <content type="html" xml:base="https://blog.vigoo.dev/posts/zio-k8s/">&lt;p&gt;My blog post &lt;a href=&quot;https:&#x2F;&#x2F;coralogix.com&#x2F;blog&#x2F;the-coralogix-operator-a-tale-of-zio-and-kubernetes&#x2F;&quot;&gt;published at the Coralogix blog&lt;&#x2F;a&gt; about using &lt;a href=&quot;https:&#x2F;&#x2F;coralogix.github.io&#x2F;zio-k8s&#x2F;&quot;&gt;zio-k8s&lt;&#x2F;a&gt; for writing operators.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>ZIO-AWS with ZIO Query</title>
        <published>2020-11-01T00:00:00+00:00</published>
        <updated>2020-11-01T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Daniel Vigovszky
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://blog.vigoo.dev/posts/zioaws-zioquery/"/>
        <id>https://blog.vigoo.dev/posts/zioaws-zioquery/</id>
        
        <content type="html" xml:base="https://blog.vigoo.dev/posts/zioaws-zioquery/">&lt;p&gt;A few years ago I wrote a &lt;a href=&quot;https:&#x2F;&#x2F;blog.vigoo.dev&#x2F;posts&#x2F;aws-rate-limits-prezidig&#x2F;&quot;&gt;post&lt;&#x2F;a&gt; about how I refactored one of our internal tools at &lt;a href=&quot;https:&#x2F;&#x2F;prezi.com&quot;&gt;Prezi&lt;&#x2F;a&gt;. This command line tool was able to discover a set of AWS resources and present them in a nice human readable way. The primary motivation at that time was to introduce circuit breaking to survive AWS API rate limits.&lt;&#x2F;p&gt;
&lt;p&gt;I have recently published a set of libraries, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;vigoo&#x2F;zio-aws&quot;&gt;&lt;strong&gt;zio-aws&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;, and thought it would be interesting to rewrite this tool on top of it, and use this opportunity to try out &lt;a href=&quot;https:&#x2F;&#x2F;zio.github.io&#x2F;zio-query&#x2F;&quot;&gt;&lt;strong&gt;ZIO Query&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; on a real-world example. In this post I&#x27;m going to show step by step how to build an efficient and easily extensible query tool with the help of &lt;em&gt;ZIO&lt;&#x2F;em&gt; libraries. The full source can be found &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;vigoo&#x2F;aws-query&quot;&gt;on GitHub&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-task&quot;&gt;The task&lt;&#x2F;h2&gt;
&lt;p&gt;The CLI tool we build will get an arbitrary string as an input, and search for it in various AWS resources. Once it has a match, it has to traverse a graph of these resources and finally pretty-print all the gathered information to the console.&lt;&#x2F;p&gt;
&lt;img src=&quot;&#x2F;images&#x2F;awsquery-1.png&quot;&#x2F;&gt;
&lt;p&gt;The provided input could mean any of the following:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;An &lt;strong&gt;EC2&lt;&#x2F;strong&gt; &lt;em&gt;instance ID&lt;&#x2F;em&gt;&lt;&#x2F;li&gt;
&lt;li&gt;An &lt;strong&gt;ELB&lt;&#x2F;strong&gt; (load balancer)&#x27;s &lt;em&gt;name&lt;&#x2F;em&gt;&lt;&#x2F;li&gt;
&lt;li&gt;An &lt;strong&gt;ElasticBeanstalk&lt;&#x2F;strong&gt; &lt;em&gt;environment name&lt;&#x2F;em&gt; or &lt;em&gt;ID&lt;&#x2F;em&gt;&lt;&#x2F;li&gt;
&lt;li&gt;An &lt;strong&gt;ElasticBeanstalk&lt;&#x2F;strong&gt; &lt;em&gt;application name&lt;&#x2F;em&gt;&lt;&#x2F;li&gt;
&lt;li&gt;An &lt;strong&gt;ASG&lt;&#x2F;strong&gt; (auto-scaling group) &lt;em&gt;ID&lt;&#x2F;em&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;For the level of detail to be reported I copied the original tool. This means finding all the related resources in the above sets (plus among &lt;em&gt;launch configurations&lt;&#x2F;em&gt;) but only include a single &lt;em&gt;EC2 instance&lt;&#x2F;em&gt; in the output if it was explicitly queried. So for example if the search term matches an &lt;em&gt;ELB&lt;&#x2F;em&gt; that belongs to an &lt;em&gt;ElasticBeanstalk environment&lt;&#x2F;em&gt;, the report will contain the &lt;em&gt;EB app&lt;&#x2F;em&gt; and all its other environments as well, but won&#x27;t show individual instances. This choice does not affect the design and could be easily changed or extended with additional resource types.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;aws-client&quot;&gt;AWS client&lt;&#x2F;h2&gt;
&lt;p&gt;For querying the above mentioned resources, we have to call four different AWS services. The &lt;code&gt;zio-aws&lt;&#x2F;code&gt; project adds a streaming ZIO wrapper for &lt;em&gt;all&lt;&#x2F;em&gt; the libraries in &lt;a href=&quot;https:&#x2F;&#x2F;docs.aws.amazon.com&#x2F;sdk-for-java&#x2F;v2&#x2F;developer-guide&#x2F;welcome.html&quot;&gt;AWS Java SDK v2&lt;&#x2F;a&gt;, each published as separate artifact:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span&gt;libraryDependencies ++= Seq(
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;io.github.vigoo&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt; %% &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;zio-aws-autoscaling&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt; % zioAwsVersion,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;io.github.vigoo&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt; %% &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;zio-aws-ec2&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt; % zioAwsVersion,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;io.github.vigoo&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt; %% &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;zio-aws-elasticloadbalancing&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt; % zioAwsVersion,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;io.github.vigoo&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt; %% &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;zio-aws-elasticbeanstalk&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt; % zioAwsVersion
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;io.github.vigoo&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt; %% &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;zio-aws-netty&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt; % zioAwsVersion,    
&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In addition to loading the necessary client libraries, we also need one of the &lt;em&gt;http implementations&lt;&#x2F;em&gt;, in this case I chose the default &lt;em&gt;Netty&lt;&#x2F;em&gt;. Other possibilities are &lt;em&gt;akka-http&lt;&#x2F;em&gt; and &lt;em&gt;http4s&lt;&#x2F;em&gt;. If your application already uses one of these for other HTTP communications you may want to use them to share their configuration and pools.&lt;&#x2F;p&gt;
&lt;p&gt;The client libraries have a &lt;code&gt;ZStream&lt;&#x2F;code&gt; API for all the operations that either support streaming (like for example S3 download&#x2F;upload) or pagination, and &lt;code&gt;ZIO&lt;&#x2F;code&gt; wrapper for non-streaming simple operations. Instead of using the Java SDK&#x27;s builders, the requests are described by &lt;em&gt;case classes&lt;&#x2F;em&gt;, and the &lt;em&gt;result&lt;&#x2F;em&gt; types have convenience accessors to handle the nullable results.&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s see some examples!&lt;&#x2F;p&gt;
&lt;p&gt;We can get information about &lt;em&gt;EB applications&lt;&#x2F;em&gt; with the &lt;em&gt;ElasticBeanstalk&lt;&#x2F;em&gt; API&#x27;s &lt;a href=&quot;https:&#x2F;&#x2F;docs.aws.amazon.com&#x2F;elasticbeanstalk&#x2F;latest&#x2F;api&#x2F;API_DescribeApplications.html&quot;&gt;&lt;code&gt;DescribeApplications&lt;&#x2F;code&gt; operation&lt;&#x2F;a&gt;. This is defined like the following in &lt;code&gt;zio-aws-elasticbeanstalk&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;describeApplications&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;request&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;DescribeApplicationsRequest&lt;&#x2F;span&gt;&lt;span&gt;): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ZIO&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ElasticBeanstalk&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;AwsError&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;DescribeApplicationsResponse&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ReadOnly&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;ApplicationName &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;String
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; DescribeApplicationsRequest&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;applicationNames&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Iterable&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ApplicationName&lt;&#x2F;span&gt;&lt;span&gt;]])
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; DescribeApplicationsResponse&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;applications &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Iterable&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ApplicationDescription&lt;&#x2F;span&gt;&lt;span&gt;]])
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;object&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; DescribeApplicationsResponse {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;trait&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; ReadOnly {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;editable&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: DescribeApplicationsResponse
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;applicationsValue&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: Option[List[ApplicationDescription.ReadOnly]]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;applications&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: ZIO[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Any&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;, AwsError, List[ApplicationDescription.ReadOnly]]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;A few things to notice here:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;The client function requires the &lt;code&gt;ElasticBeanstalk&lt;&#x2F;code&gt; module. We will see how to set up the dependencies in the &lt;em&gt;Putting all together&lt;&#x2F;em&gt; section.&lt;&#x2F;li&gt;
&lt;li&gt;The primitive types defined by the AWS schema are currently simple type aliases. In the future they will be probably replaced by &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;zio&#x2F;zio-prelude&quot;&gt;zio-prelude&lt;&#x2F;a&gt;&#x27;s &lt;em&gt;newtypes&lt;&#x2F;em&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;Each wrapper type has a &lt;code&gt;ReadOnly&lt;&#x2F;code&gt; trait and a &lt;em&gt;case class&lt;&#x2F;em&gt;. The case classes are used as input, and the read-only interfaces as outputs. This way the result provided by the Java SDK can be accessed directly and it only has to be rewrapped in the case class if it is passed to another call as input.&lt;&#x2F;li&gt;
&lt;li&gt;In many cases the AWS SDK describes fields as optional even if in normal circumstances it would never be &lt;code&gt;None&lt;&#x2F;code&gt;. To make it more convenient to work with these, the &lt;code&gt;ReadOnly&lt;&#x2F;code&gt; interface contains &lt;em&gt;accessor functions&lt;&#x2F;em&gt; which fail with &lt;code&gt;FieldIsNone&lt;&#x2F;code&gt; in case the field did not have any value. The pure optional values can be accessed with the &lt;code&gt;xxxValue&lt;&#x2F;code&gt; variants. See &lt;code&gt;applications&lt;&#x2F;code&gt; and &lt;code&gt;applicationsValue&lt;&#x2F;code&gt; in the above example.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;For operations support pagination, the wrapper functions return a stream. The actual first AWS call happens when the stream is first pulled. An example for this that we have to use in this application is the &lt;em&gt;EC2&lt;&#x2F;em&gt; API&#x27;s &lt;a href=&quot;https:&#x2F;&#x2F;docs.aws.amazon.com&#x2F;AWSEC2&#x2F;latest&#x2F;APIReference&#x2F;API_DescribeInstances.html&quot;&gt;&lt;code&gt;DescribeInstances&lt;&#x2F;code&gt; operation&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;describeInstances&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;request&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;DescribeInstancesRequest&lt;&#x2F;span&gt;&lt;span&gt;): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ZStream&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Ec2&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;AwsError&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Reservation&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ReadOnly&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The pagination can be controlled by setting the &lt;code&gt;MaxResults&lt;&#x2F;code&gt; property in &lt;code&gt;DescribeInstancesRequest&lt;&#x2F;code&gt;. For the user of the &lt;code&gt;describeInstances&lt;&#x2F;code&gt; function this is completely transparent, the returned stream will gather all the results, possibly by performing multiple AWS requests.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;queries&quot;&gt;Queries&lt;&#x2F;h2&gt;
&lt;p&gt;We could implement the resource discovery directly using the low level AWS wrappers described above, using ZIO&#x27;s tools to achieve concurrency. There are several things to consider though:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;We don&#x27;t know what resource we are looking for, so we should start multiple queries in parallel to find a match as soon as possible&lt;&#x2F;li&gt;
&lt;li&gt;Some queries return additional data that could be reused later. For example it is not possible to search for an ELB by a instance ID contained by it; for that we have to query &lt;em&gt;all&lt;&#x2F;em&gt; load balancers and check the members on client side.&lt;&#x2F;li&gt;
&lt;li&gt;There are AWS operations that support querying multiple entities, for example by providing a list of IDs to look for&lt;&#x2F;li&gt;
&lt;li&gt;We should minimize the number of calls to AWS, both for performance reasons, and to avoid getting rate limited&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;We can achieve all this by expressing our AWS queries with a higher level abstraction, delegating the execution to a library called &lt;a href=&quot;https:&#x2F;&#x2F;zio.github.io&#x2F;zio-query&#x2F;&quot;&gt;ZIO Query&lt;&#x2F;a&gt;. This library let us define composable &lt;em&gt;queries&lt;&#x2F;em&gt; to arbitrary &lt;em&gt;data sources&lt;&#x2F;em&gt;, and it automatically provides &lt;em&gt;pipelining&lt;&#x2F;em&gt;, &lt;em&gt;batching&lt;&#x2F;em&gt; and &lt;em&gt;caching&lt;&#x2F;em&gt;. A perfect match for the problem we have to solve here.&lt;&#x2F;p&gt;
&lt;p&gt;To be able to cache results that became available as a side effect of a query, we need a &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;zio&#x2F;zio-query&#x2F;pull&#x2F;105&quot;&gt;recent improvement&lt;&#x2F;a&gt; that is not published yet, so &lt;code&gt;aws-query&lt;&#x2F;code&gt; currently uses a snapshot release of &lt;code&gt;zio-query&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span&gt;libraryDependencies += &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;dev.zio&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt; %% &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;zio-query&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt; % &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;0.2.5+12-c41557f7-SNAPSHOT&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The first step is to define custom &lt;em&gt;data sources&lt;&#x2F;em&gt;. Data sources must implement a function &lt;code&gt;runAll&lt;&#x2F;code&gt; with the following signature:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;runAll&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;requests&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Chunk&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Chunk&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;]]): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ZIO&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;R&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Nothing&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;CompletedRequestMap&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Here &lt;code&gt;A&lt;&#x2F;code&gt; is the &lt;em&gt;request type&lt;&#x2F;em&gt; specific to a given data source (extending &lt;code&gt;Request[E, A]&lt;&#x2F;code&gt;, and the returned &lt;code&gt;CompletedRequestMap&lt;&#x2F;code&gt; will store an &lt;code&gt;Either[E, A]&lt;&#x2F;code&gt; result for each request. The two nested chunks model sequential and parallel execution: the requests in the inner chunks can be executed in parallel, while these batches contained by the outer chunk must be performed sequentially. In practice we won&#x27;t implement this method but use &lt;code&gt;DataSource.Batched&lt;&#x2F;code&gt; that is a simplified version that can perform requests in parallel but does not make further optimizations on the requests to be performed sequentially.&lt;&#x2F;p&gt;
&lt;p&gt;What should belong to one data source?  It could be a single data source for all the AWS queries, or one per service, or one per resource type. The best choice in this case is to have one for each resource type, for the following reasons:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;There are no opportunities to do any cross-resource-type caching. For example when we are querying EC2 instances, we won&#x27;t fetch auto scaling groups as a side effect.&lt;&#x2F;li&gt;
&lt;li&gt;If all requests are about the same data type, implementing the data source is much simpler&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Let&#x27;s see a simple example. EC2 instances can be queried by &lt;em&gt;instance ID&lt;&#x2F;em&gt; with the &lt;a href=&quot;https:&#x2F;&#x2F;docs.aws.amazon.com&#x2F;AWSEC2&#x2F;latest&#x2F;APIReference&#x2F;API_DescribeInstances.html&quot;&gt;&lt;code&gt;DescribeInstances&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; operation, and it supports querying for multiple IDs in a single request. We first define a &lt;em&gt;request type&lt;&#x2F;em&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; GetEc2Instance&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;InstanceId&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span&gt;Request[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;AwsError&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Instance&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ReadOnly&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Then the data source:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;ec2InstancesDataSource&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;DataSource&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Logging &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;with &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Ec2&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;GetEc2Instance&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= 
&lt;&#x2F;span&gt;&lt;span&gt;  DataSource.Batched.make(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;ec2&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;) { (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;requests&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Chunk&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;GetEc2Instance&lt;&#x2F;span&gt;&lt;span&gt;]) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;import&lt;&#x2F;span&gt;&lt;span&gt; AwsDataSource.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;result &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span&gt; ec2.describeInstances(DescribeInstancesRequest(instanceIds &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;Some(requests.map(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;.id))))
&lt;&#x2F;span&gt;&lt;span&gt;        .mapM(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;.instances)
&lt;&#x2F;span&gt;&lt;span&gt;        .flatMap(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;instances &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;ZStream.fromIterable(instances))
&lt;&#x2F;span&gt;&lt;span&gt;        .foldM(CompletedRequestMap.empty) { (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;resultMap&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;item&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;instanceId &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span&gt; item.instanceId
&lt;&#x2F;span&gt;&lt;span&gt;          } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;yield&lt;&#x2F;span&gt;&lt;span&gt; resultMap.insert(GetEc2Instance(instanceId))(Right(item))
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        .recordFailures(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;DescribeInstances&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, requests)
&lt;&#x2F;span&gt;&lt;span&gt;    } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;yield&lt;&#x2F;span&gt;&lt;span&gt; result
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Here &lt;code&gt;requests&lt;&#x2F;code&gt; holds a set of &lt;code&gt;GetEc2Instance&lt;&#x2F;code&gt; requests to be performed in parallel. We can simply do this by taking all the &lt;em&gt;instance IDs&lt;&#x2F;em&gt; from these requests and performing a single &lt;code&gt;describeInstances&lt;&#x2F;code&gt; AWS call. The result, as I explained before, is a &lt;code&gt;ZStream&lt;&#x2F;code&gt; of instances. We have to construct a &lt;code&gt;CompletedRequestMap&lt;&#x2F;code&gt; holding one entry for each request in &lt;code&gt;requests&lt;&#x2F;code&gt;. To do this we &lt;code&gt;foldM&lt;&#x2F;code&gt; the stream, using the &lt;code&gt;instanceId&lt;&#x2F;code&gt; accessor function to reconstruct the request value for each item in the result stream.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;code&gt;.recordFailures&lt;&#x2F;code&gt; function is a helper extension method defined in &lt;code&gt;AwsDataSource&lt;&#x2F;code&gt;. It catches all errors and produces a &lt;code&gt;CompletedRequestMap&lt;&#x2F;code&gt; where all requested items are recorded as failures:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;recordFailures&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;description&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;, 
&lt;&#x2F;span&gt;&lt;span&gt;                      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;requests&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Iterable&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Request&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;AwsError&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;]]): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ZIO&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;R&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Nothing&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;CompletedRequestMap&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span&gt;  f.catchAll { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;error &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    log.error(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;$description&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt; failed with &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;$error&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;) *&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;      ZIO.succeed {
&lt;&#x2F;span&gt;&lt;span&gt;        requests.foldLeft(CompletedRequestMap.empty) { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;resultMap&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;req&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;          resultMap.insert(req)(Left(error))
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;      }
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This is necessary because the data source requires a function of type &lt;code&gt;Chunk[A] =&amp;gt; ZIO[R, Nothing, CompletedRequestMap]&lt;&#x2F;code&gt; that cannot fail.&lt;&#x2F;p&gt;
&lt;p&gt;With the data source defined, we can define primitive &lt;em&gt;queries&lt;&#x2F;em&gt; on it:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;getEc2Instance&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;InstanceId&lt;&#x2F;span&gt;&lt;span&gt;): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ZQuery&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Logging &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;with &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Ec2&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;AwsError&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Instance&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ReadOnly&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span&gt;  ZQuery.fromRequest(GetEc2Instance(id))(ec2InstancesDataSource)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;A more complex example is &lt;code&gt;ebEnvDataSource&lt;&#x2F;code&gt;, the data source of &lt;em&gt;ElasticBeanstalk environments&lt;&#x2F;em&gt;. For this resource, we have different request types:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;sealed trait&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; EbEnvRequest&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span&gt;Request[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;AwsError&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; GetEnvironmentByName&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;EnvironmentName&lt;&#x2F;span&gt;&lt;span&gt;) 
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span&gt;EbEnvRequest[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;EnvironmentDescription&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ReadOnly&lt;&#x2F;span&gt;&lt;span&gt;]]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; GetEnvironmentById&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;EnvironmentId&lt;&#x2F;span&gt;&lt;span&gt;) 
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span&gt;EbEnvRequest[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;EnvironmentDescription&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ReadOnly&lt;&#x2F;span&gt;&lt;span&gt;]]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; GetEnvironmentByApplicationName&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ApplicationName&lt;&#x2F;span&gt;&lt;span&gt;) 
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span&gt;EbEnvRequest[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;EnvironmentDescription&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ReadOnly&lt;&#x2F;span&gt;&lt;span&gt;]]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In the data source implementation we get a &lt;code&gt;Chunk&lt;&#x2F;code&gt; of &lt;code&gt;EbEnvRequest&lt;&#x2F;code&gt; to be performed in parallel. We start it by separating it per request type:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;byName &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; requests.collect { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span&gt;GetEnvironmentByName(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; name }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;byId &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; requests.collect { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span&gt;GetEnvironmentById(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; id }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;byAppName &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; requests.collect { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span&gt;GetEnvironmentByApplicationName(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; name }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Then for each of these collections, if not empty, we can perform a &lt;code&gt;describeEnvironments&lt;&#x2F;code&gt; AWS call and then fold the result stream to create partial &lt;code&gt;CompletedRequestMap&lt;&#x2F;code&gt; values. What is interesting here is that if we already queried an environment by either name or id or it&#x27;s application name, we already know both its identifier and name, so we can store additional items in &lt;code&gt;CompletedRequestMap&lt;&#x2F;code&gt; that will be cached and reused in future queries. For example this is how the query by-id gets processed:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span&gt;resultMap &amp;lt;- elasticbeanstalk
&lt;&#x2F;span&gt;&lt;span&gt;  .describeEnvironments(DescribeEnvironmentsRequest(environmentIds &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;Some(byId)))
&lt;&#x2F;span&gt;&lt;span&gt;  .foldM(initialResultMap) { (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;resultMap&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;item&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span&gt; item.environmentName
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span&gt; item.environmentId
&lt;&#x2F;span&gt;&lt;span&gt;    } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;yield&lt;&#x2F;span&gt;&lt;span&gt; resultMap
&lt;&#x2F;span&gt;&lt;span&gt;        .insert(GetEnvironmentById(id))(Right(Some(item)))
&lt;&#x2F;span&gt;&lt;span&gt;        .insert(GetEnvironmentByName(name))(Right(Some(item)))
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;  .recordFailures(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;DescribeEnvironmentRequest(id)&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, byId.map(GetEnvironmentById))
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;For all three request types we describe the computation to create a partial &lt;code&gt;CompletedRequestMap&lt;&#x2F;code&gt; for them. Then we can implement the data source by executing these (maximum) three queries in parallel and combining the results:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span&gt;byNameResultMap
&lt;&#x2F;span&gt;&lt;span&gt;  .zipWithPar(byIdResultMap)(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt; ++ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  .zipWithPar(byAppNameResultMap)(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt; ++ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;There are some cases where being able to query &lt;em&gt;all&lt;&#x2F;em&gt; instances of a given resource is also a requirement. An example is &lt;em&gt;load balancers&lt;&#x2F;em&gt;, where the only way to find if an ELB contains a given &lt;em&gt;EC2 instance&lt;&#x2F;em&gt; is to query &lt;em&gt;all&lt;&#x2F;em&gt; ELBs and check their members. There are a few more cases that require a very similar implementation, so it makes sense extracting it to a common place. We define an &lt;code&gt;AllOrPerItem&lt;&#x2F;code&gt; trait that defines the specifics per use case:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;trait&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; AllOrPerItem&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;R&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Req&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Item&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: String
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;isGetAll&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;request&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: Req): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Boolean
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;isPerItem&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;request&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: Req): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Boolean
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;allReq&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: Req
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;itemToReq&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;item&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: Item): ZIO[R, AwsError, Req]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;getAll&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;(): ZStream[R, AwsError, Item]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;getSome&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;reqs&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: Set[Req]): ZStream[R, AwsError, Item]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;processAdditionalRequests&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;requests&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: Chunk[Req], 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;                                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;partialResult&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: CompletedRequestMap): ZIO[R, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Nothing&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;, CompletedRequestMap] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    ZIO.succeed(partialResult)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;By implementing these one-liners the actual data source implementation can be a shared code defined in &lt;code&gt;AllOrPerItem.make&lt;&#x2F;code&gt;. It&#x27;s very similar to the examples already seen. If any of the requests is the &lt;em&gt;get all request&lt;&#x2F;em&gt;, that&#x27;s the only thing to be performed, and all the result items will be cached. Otherwise a single batched request is made.&lt;&#x2F;p&gt;
&lt;p&gt;These primitive &lt;code&gt;ZQuery&lt;&#x2F;code&gt;s then can be composed to more complex queries. For example the following code:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;instance &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span&gt; ec2query.getEc2Instance(instanceId)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;imageId &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;- &lt;&#x2F;span&gt;&lt;span&gt;ZQuery.fromEffect(instance.imageId)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;imgElb &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;- &lt;&#x2F;span&gt;&lt;span&gt;(ec2query.getImage(imageId) &amp;lt;&amp;amp;&amp;gt; elbquery.loadBalancerOf(instanceId))
&lt;&#x2F;span&gt;&lt;span&gt;  (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;image&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;elb&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; imgElb
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;elbReport &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span&gt; optionally(elb)(getElbReport)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;result &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;yield&lt;&#x2F;span&gt;&lt;span&gt; result    
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This is part of the definition of a query of type &lt;code&gt;ZQuery[QueryEnv, AwsError, LinkedReport[Ec2InstanceKey, Ec2InstanceReport]]&lt;&#x2F;code&gt;. We will talk about &lt;code&gt;QueryEnv&lt;&#x2F;code&gt; and &lt;code&gt;LinkedReport&lt;&#x2F;code&gt; later, for now it&#x27;s enough to understand that this is a more complex query that provides an &lt;em&gt;EC2 instance report&lt;&#x2F;em&gt;; the data type that will be used to render the human-readable output. The query first gets an EC2 instance by &lt;em&gt;instance ID&lt;&#x2F;em&gt;. Then with &lt;code&gt;ZQuery.fromEffect&lt;&#x2F;code&gt; we lift a &lt;code&gt;ZIO&lt;&#x2F;code&gt; effect to the query. In this case this is a &lt;code&gt;zio-aws&lt;&#x2F;code&gt; &lt;em&gt;accessor function&lt;&#x2F;em&gt; that fails if &lt;code&gt;imageId&lt;&#x2F;code&gt; is &lt;code&gt;None&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;By this we express that we &lt;em&gt;expect&lt;&#x2F;em&gt; that &lt;code&gt;imageId&lt;&#x2F;code&gt; is always specified, and if not, we fail the &lt;em&gt;whole query&lt;&#x2F;em&gt;. Then we use &lt;code&gt;&amp;lt;&amp;amp;&amp;gt;&lt;&#x2F;code&gt; (it&#x27;s alias is &lt;code&gt;zipPar&lt;&#x2F;code&gt;) to perform two queries &lt;strong&gt;in parallel&lt;&#x2F;strong&gt;: getting an EC2 image and finding the load balancer containing the instance. Once both queries are finished, we optionally generate a &lt;em&gt;load balancer report&lt;&#x2F;em&gt; (if we have found an ELB link) and then we construct the result.&lt;&#x2F;p&gt;
&lt;p&gt;Here &lt;code&gt;optionally&lt;&#x2F;code&gt; is a simple helper function that makes our query more readable. It could have been written as &lt;code&gt;elb.fold(ZQuery.none)(getElbReport)&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Another useful combinator on &lt;code&gt;ZQuery&lt;&#x2F;code&gt; is &lt;code&gt;collectAllPar&lt;&#x2F;code&gt; that runs a subquery on each item of a collection in parallel:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;elbNames &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;- &lt;&#x2F;span&gt;&lt;span&gt;ZQuery.fromEffect(asg.loadBalancerNames)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;result &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;- &lt;&#x2F;span&gt;&lt;span&gt;ZQuery.collectAllPar(elbNames.map(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; elbquery.getLoadBalancer(name) &amp;gt;&amp;gt;= getElbReport))
&lt;&#x2F;span&gt;&lt;span&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;yield&lt;&#x2F;span&gt;&lt;span&gt; result
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;As I mentioned earlier, we have no way to know what resource we are looking for (in fact we could for example detect EC2 &lt;em&gt;instance IDs&lt;&#x2F;em&gt; by a pattern but let&#x27;s ignore that for now). So on top level we simply start _all the possible queries &lt;strong&gt;at once&lt;&#x2F;strong&gt; and let print all the non-failing ones:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;renderers &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;- &lt;&#x2F;span&gt;&lt;span&gt;ZQuery.collectAllPar(possibleQueries).run
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;- &lt;&#x2F;span&gt;&lt;span&gt;ZIO.foreach_(renderers.flatten)(identity)
&lt;&#x2F;span&gt;&lt;span&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;yield &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Where &lt;code&gt;possibleQueries&lt;&#x2F;code&gt; is a where we list all the queries we want to support, tied to the &lt;em&gt;renderer&lt;&#x2F;em&gt; to show it on the console.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;report-cache&quot;&gt;Report cache&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;em&gt;ZIO Query&lt;&#x2F;em&gt; solves caching and optimizes the requests on the AWS resource level, but we still have a problem. The queries form a cyclic graph. For example an &lt;em&gt;EC2 instance&lt;&#x2F;em&gt; holds a link to its &lt;em&gt;load balancer&lt;&#x2F;em&gt;, that holds a link to the &lt;em&gt;EB environment&lt;&#x2F;em&gt; it is defined in. The environment refers back to the ELB, and it also links to the &lt;em&gt;EB app&lt;&#x2F;em&gt; and the application has again links to all the &lt;em&gt;environments&lt;&#x2F;em&gt; it contains.&lt;&#x2F;p&gt;
&lt;p&gt;We want to collect all these resources exactly once, and there is a chance that parallel queries reach to the same resource. To solve this we can add an extra &lt;em&gt;caching layer&lt;&#x2F;em&gt; on top of &lt;em&gt;ZIO Query&lt;&#x2F;em&gt;. Let&#x27;s define this caching layer as a ZIO &lt;em&gt;module&lt;&#x2F;em&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;object&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; ReportCache {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;trait&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; Service {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;storeIfNew&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;[A &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Report](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;reportKey&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: ReportKey, 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;                                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;query&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: ZQuery[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Any&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;, AwsError, A]): ZQuery[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Any&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;, AwsError, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Boolean&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;retrieve&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;[A &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Report](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;key&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: ReportKey): ZIO[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Any&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;, AwsError, Option[A]]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;code&gt;storeIfNew&lt;&#x2F;code&gt; function is a &lt;em&gt;query&lt;&#x2F;em&gt;, to be used in high level queries to shortcut cycles in case a given report is already stored in the cache. We can define a helper function &lt;code&gt;cached&lt;&#x2F;code&gt; like the following:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;protected def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;cached&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;R &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ReportCache &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;with &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Logging&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;B &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Report&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;K &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ReportKey&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;  (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;input&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;keyFn&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;A &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ZIO&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Any&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;AwsError&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;K&lt;&#x2F;span&gt;&lt;span&gt;])
&lt;&#x2F;span&gt;&lt;span&gt;  (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;query&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;K &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ZQuery&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;R&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;AwsError&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;B&lt;&#x2F;span&gt;&lt;span&gt;]): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ZQuery&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;R&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;AwsError&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;LinkedReport&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;K&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;B&lt;&#x2F;span&gt;&lt;span&gt;]] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;key &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;- &lt;&#x2F;span&gt;&lt;span&gt;ZQuery.fromEffect(keyFn(input))
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;env &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;- &lt;&#x2F;span&gt;&lt;span&gt;ZQuery.environment[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;R&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span&gt; storeIfNew(
&lt;&#x2F;span&gt;&lt;span&gt;      key,
&lt;&#x2F;span&gt;&lt;span&gt;      query(key).provide(env ? &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;provided environment&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    )
&lt;&#x2F;span&gt;&lt;span&gt;  } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;yield &lt;&#x2F;span&gt;&lt;span&gt;LinkedReport[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;K&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;B&lt;&#x2F;span&gt;&lt;span&gt;](key)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Then we can use it in queries like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;getEbAppReport&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ApplicationName&lt;&#x2F;span&gt;&lt;span&gt;): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ZQuery&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;QueryEnv&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;AwsError&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;LinkedReport&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;EbAppKey&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;EbAppReport&lt;&#x2F;span&gt;&lt;span&gt;]] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span&gt;  cached(name)(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;ZIO.succeed(EbAppKey(name))) { (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;key&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;EbAppKey&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Let&#x27;s see in detail how this works!&lt;&#x2F;p&gt;
&lt;p&gt;First of all, we define the following types:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;final case class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; LinkedReport&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;K &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ReportKey&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;R &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Report&lt;&#x2F;span&gt;&lt;span&gt;](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;key&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;K&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;sealed trait&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; ReportKey
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;final case class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; Ec2InstanceKey&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;instanceId&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;InstanceId&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span&gt;ReportKey
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;sealed trait&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; Report
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;final case class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; Ec2InstanceReport&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;instanceId&lt;&#x2F;span&gt;&lt;span&gt;: ec2.model.primitives.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;InstanceId&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                                   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;                                   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;elb&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;LinkedReport&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ElbKey&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ElbReport&lt;&#x2F;span&gt;&lt;span&gt;]]
&lt;&#x2F;span&gt;&lt;span&gt;                                  ) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span&gt;Report
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In &lt;code&gt;cached&lt;&#x2F;code&gt;, we provide a &lt;code&gt;keyFn&lt;&#x2F;code&gt; that is an effectful function to extract the &lt;code&gt;ReportKey&lt;&#x2F;code&gt; from the arbitrary input that can be the key itself, or an already fetched resource. Then we call the &lt;code&gt;ReportCache&lt;&#x2F;code&gt; module&#x27;s &lt;code&gt;storeIfNew&lt;&#x2F;code&gt; query and return a &lt;code&gt;LinkedReport&lt;&#x2F;code&gt;. A &lt;em&gt;linked report&lt;&#x2F;em&gt; is just a wrapper around a report key, it is the type to be used in &lt;code&gt;Report&lt;&#x2F;code&gt; types to refer to each other. We store the cyclic resource graph by using these report keys and the cache&#x27;s &lt;code&gt;retrieve&lt;&#x2F;code&gt; function to resolve the references on demand.&lt;&#x2F;p&gt;
&lt;p&gt;One thing to notice is the &lt;code&gt;.provide&lt;&#x2F;code&gt; in the code of &lt;code&gt;cached&lt;&#x2F;code&gt;. The report cache does not know about the environments needed for the queries it caches the results of; the &lt;code&gt;query&lt;&#x2F;code&gt; parameter of &lt;code&gt;storeIfNew&lt;&#x2F;code&gt; has the type &lt;code&gt;ZQuery[Any, AwsError, A]&lt;&#x2F;code&gt;. For this reason &lt;code&gt;cached&lt;&#x2F;code&gt; eliminates the environment of its inner query by getting it and calling &lt;code&gt;.provide(env)&lt;&#x2F;code&gt; before passing it to the cache.&lt;&#x2F;p&gt;
&lt;p&gt;The report cache itself can be implemented with &lt;a href=&quot;https:&#x2F;&#x2F;zio.dev&#x2F;docs&#x2F;datatypes&#x2F;datatypes_stm&quot;&gt;&lt;em&gt;STM&lt;&#x2F;em&gt;&lt;&#x2F;a&gt;. First we create a &lt;a href=&quot;https:&#x2F;&#x2F;zio.dev&#x2F;docs&#x2F;datatypes&#x2F;datatypes_tmap&quot;&gt;&lt;code&gt;TMap&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span&gt;cache &amp;lt;- TMap.empty[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ReportKey&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Promise&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;AwsError&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Report&lt;&#x2F;span&gt;&lt;span&gt;]].commit
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We want to store the fact that a query &lt;em&gt;has been started&lt;&#x2F;em&gt; for a given report key. This can be modelled with a &lt;code&gt;Promise&lt;&#x2F;code&gt; that eventually gets a &lt;code&gt;Report&lt;&#x2F;code&gt; value. With this &lt;code&gt;TMap&lt;&#x2F;code&gt; structure, the &lt;code&gt;storeIfNew&lt;&#x2F;code&gt; function can be defined as:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;override def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;storeIfNew&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;A &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Report&lt;&#x2F;span&gt;&lt;span&gt;](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;reportKey&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ReportKey&lt;&#x2F;span&gt;&lt;span&gt;, 
&lt;&#x2F;span&gt;&lt;span&gt;                                     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;query&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ZQuery&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Any&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;AwsError&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;]): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ZQuery&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Any&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;AwsError&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Boolean&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span&gt;  ZQuery.fromEffect {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;promise &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;- &lt;&#x2F;span&gt;&lt;span&gt;Promise.make[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;AwsError&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Report&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;finalQuery &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span&gt; cache.get(reportKey).flatMap {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span&gt;Some(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;report&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; replacing the query with the cached value
&lt;&#x2F;span&gt;&lt;span&gt;          ZSTM.succeed(ZQuery.succeed(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span&gt;None &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; replacing the query with the cached value
&lt;&#x2F;span&gt;&lt;span&gt;          cache.put(reportKey, promise).map { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;            query.foldM(
&lt;&#x2F;span&gt;&lt;span&gt;              &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;failure &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;ZQuery.fromEffect(promise.fail(failure)) *&amp;gt; ZQuery.fail(failure),
&lt;&#x2F;span&gt;&lt;span&gt;              &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;success &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;ZQuery.fromEffect(promise.succeed(success))
&lt;&#x2F;span&gt;&lt;span&gt;            )
&lt;&#x2F;span&gt;&lt;span&gt;          }
&lt;&#x2F;span&gt;&lt;span&gt;      }.commit
&lt;&#x2F;span&gt;&lt;span&gt;    } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;yield&lt;&#x2F;span&gt;&lt;span&gt; finalQuery
&lt;&#x2F;span&gt;&lt;span&gt;  }.flatMap(identity)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This may seem simple but actually we are combining three different layers of abstraction here!&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;The whole thing is a &lt;em&gt;query&lt;&#x2F;em&gt;. But we first run a &lt;em&gt;ZIO effect&lt;&#x2F;em&gt; that &lt;strong&gt;produces&lt;&#x2F;strong&gt; a query, and then execute that result query (in &lt;code&gt;.flatMap(identity)&lt;&#x2F;code&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;In the effect we create a promise that might be used or not, depending on the outcome of the transaction. Then we do &lt;code&gt;cache.get&lt;&#x2F;code&gt; which is an &lt;em&gt;STM transaction&lt;&#x2F;em&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;In the transaction we produce a &lt;code&gt;ZQuery&lt;&#x2F;code&gt; value that is either returning a simple &lt;code&gt;false&lt;&#x2F;code&gt; value if the report was already cached, or we store the already created promise in the map and return the query that constructs the report as the &lt;em&gt;result&lt;&#x2F;em&gt; of the transaction.&lt;&#x2F;li&gt;
&lt;li&gt;As it is an &lt;em&gt;STM transaction&lt;&#x2F;em&gt; it may be retried multiple times but eventually it returns with a query that is either a NOP or calculates the &lt;em&gt;report&lt;&#x2F;em&gt; &lt;strong&gt;and&lt;&#x2F;strong&gt; sets the promise in the end.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The other function of &lt;code&gt;ReportCache&lt;&#x2F;code&gt;, &lt;code&gt;retrieve&lt;&#x2F;code&gt; will be used when traversing the gathered &lt;em&gt;reports&lt;&#x2F;em&gt; to follow the &lt;code&gt;LinkedReport&lt;&#x2F;code&gt; links. It is simply a combination of getting an item from the &lt;code&gt;TMap&lt;&#x2F;code&gt; and then waiting for the stored promise.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;throttling&quot;&gt;Throttling&lt;&#x2F;h2&gt;
&lt;p&gt;The original implementation of this tool did not control the amount and rate of AWS requests in any way, and a few years ago API rate limits made it somewhat unusable. As I explained &lt;a href=&quot;https:&#x2F;&#x2F;blog.vigoo.dev&#x2F;posts&#x2F;aws-rate-limits-prezidig&#x2F;&quot;&gt;in a previous post&lt;&#x2F;a&gt;, I solved it by centralizing the calls to AWS then adding &lt;em&gt;circuit breaking and retry&lt;&#x2F;em&gt; to handle the &lt;em&gt;throttling errors&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;In this new implementation &lt;em&gt;ZIO Query&lt;&#x2F;em&gt; &#x27;s batching feature already reduces the load but AWS has a global rate limit that can be reached any time, regardless of the actual request rate provided by this application. So how could we handle this with &lt;code&gt;zio-aws&lt;&#x2F;code&gt; and ZIO Query?&lt;&#x2F;p&gt;
&lt;p&gt;There is useful ZIO library called &lt;a href=&quot;https:&#x2F;&#x2F;www.vroste.nl&#x2F;rezilience&#x2F;&quot;&gt;rezilience&lt;&#x2F;a&gt; that defines utilities to express circuit breaking, retries, rate limiting and other similar policies. With this library we can create a policy that detects &lt;code&gt;AwsError&lt;&#x2F;code&gt;s representing throttling failures:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;private def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;throttlingPolicy&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ZManaged&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Random &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;with &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Clock &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;with &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Logging&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Nothing&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Policy&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;AwsError&lt;&#x2F;span&gt;&lt;span&gt;]] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;cb &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;- &lt;&#x2F;span&gt;&lt;span&gt;CircuitBreaker.make[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;AwsError&lt;&#x2F;span&gt;&lt;span&gt;](
&lt;&#x2F;span&gt;&lt;span&gt;      trippingStrategy &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;TrippingStrategy.failureCount(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;      resetPolicy &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;Retry.Schedules.exponentialBackoff(min &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;.second, max &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;.minute),
&lt;&#x2F;span&gt;&lt;span&gt;      isFailure &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span&gt;GenericAwsError(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;AwsServiceException&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; error.isThrottlingException &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;true
&lt;&#x2F;span&gt;&lt;span&gt;      }
&lt;&#x2F;span&gt;&lt;span&gt;    )
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;retry &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;- &lt;&#x2F;span&gt;&lt;span&gt;Retry.make(min &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;.second, max &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;.minute)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;retryComposable &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; retry.widen[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;PolicyError&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;AwsError&lt;&#x2F;span&gt;&lt;span&gt;]] { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span&gt;Policy.WrappedError(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;e&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; e }
&lt;&#x2F;span&gt;&lt;span&gt;  } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;yield&lt;&#x2F;span&gt;&lt;span&gt; cb.toPolicy compose retryComposable.toPolicy
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This will open a circuit breaker in case of throttling errors, and retry the operation with exponential back-off.&lt;&#x2F;p&gt;
&lt;p&gt;These policies can be applied to &lt;code&gt;ZIO&lt;&#x2F;code&gt; effects. What we really need is to apply a policy like this to &lt;em&gt;all&lt;&#x2F;em&gt; AWS call. It should be the actual call to the underlying &lt;em&gt;AWS Java SDK&lt;&#x2F;em&gt;, not on the &lt;code&gt;zio-aws&lt;&#x2F;code&gt; wrapper level, because for example a streaming API function may produce multiple AWS requests.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;code&gt;zio-aws&lt;&#x2F;code&gt; library supports applying &lt;code&gt;AwsCallAspect&lt;&#x2F;code&gt;s on the &lt;em&gt;AWS service client layers&lt;&#x2F;em&gt; to modify the underlying SDK calls. This is exactly what we need to apply the throttling policy to all calls! What&#x27;s even better, by creating a single &lt;code&gt;throttlingPolicy&lt;&#x2F;code&gt; and applying it to all the service layers (&lt;code&gt;ec2&lt;&#x2F;code&gt;, &lt;code&gt;elasticloadbalancing&lt;&#x2F;code&gt;, &lt;code&gt;elasticbeanstalk&lt;&#x2F;code&gt; and &lt;code&gt;autoscaling&lt;&#x2F;code&gt;) they will share a common circuit breaker that matches the situation perfectly as the AWS API rate limiting is applied to globally to all services.&lt;&#x2F;p&gt;
&lt;p&gt;An AWS call aspect has the following form:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;throttling &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;AwsCallAspect&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Any&lt;&#x2F;span&gt;&lt;span&gt;] {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;override def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;apply&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;R1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ZIO&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;R1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;AwsError&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Described&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;]]): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ZIO&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;R1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;AwsError&lt;&#x2F;span&gt;&lt;span&gt;, aspects.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Described&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;]] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span&gt;    policy(f).mapError {
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span&gt;Policy.WrappedError(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;e&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; e
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span&gt;Policy.BulkheadRejection &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;AwsError.fromThrowable(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RuntimeException&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;Bulkhead rejection&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span&gt;Policy.CircuitBreakerOpen &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;AwsError.fromThrowable(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RuntimeException&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;AWS rate limit exceeded&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;      }
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Another simple example could be logging all AWS requests:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;callLogging&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;AwsCallAspect&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Logging&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;AwsCallAspect&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Logging&lt;&#x2F;span&gt;&lt;span&gt;] {
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;override final def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;apply&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;R1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Logging&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ZIO&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;R1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;AwsError&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Described&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;]]): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ZIO&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;R1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;AwsError&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Described&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;]] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span&gt;     f.flatMap { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;@&lt;&#x2F;span&gt;&lt;span&gt;Described(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;description&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;       log.info(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;[${&lt;&#x2F;span&gt;&lt;span&gt;description.service&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;}&#x2F;${&lt;&#x2F;span&gt;&lt;span&gt;description.operation&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;}]&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;).as(r)
&lt;&#x2F;span&gt;&lt;span&gt;     }
&lt;&#x2F;span&gt;&lt;span&gt; }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;These aspects can be applied to a &lt;code&gt;zio-aws&lt;&#x2F;code&gt; &lt;code&gt;ZLayer&lt;&#x2F;code&gt; directly, such as:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span&gt;ec2.live @@ (throttling &amp;gt;&amp;gt;&amp;gt; callLogging)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;rendering&quot;&gt;Rendering&lt;&#x2F;h2&gt;
&lt;p&gt;With the queries and report cache ready the last missing building block is &lt;em&gt;rendering&lt;&#x2F;em&gt; the gathered reports. We implement it in its own ZIO module with the following interface:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;object&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; Rendering {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;trait&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; Service {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;renderEc2Instance&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;report&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: LinkedReport[Ec2InstanceKey, Ec2InstanceReport]): UIO[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Unit&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;renderElb&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;report&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: LinkedReport[ElbKey, ElbReport], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;context&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: Option[String]): UIO[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Unit&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;renderAsg&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;report&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: LinkedReport[AsgKey, AsgReport]): UIO[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Unit&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;renderEbEnv&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;report&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: LinkedReport[EbEnvKey, EbEnvReport]): UIO[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Unit&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;renderEbApp&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;report&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: LinkedReport[EbAppKey, EbAppReport]): UIO[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Unit&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The live implementation of course needs access to &lt;code&gt;ReportCache&lt;&#x2F;code&gt; and writes the report out to &lt;code&gt;Console&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;live&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ZLayer&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Console &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;with &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ReportCache&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Nothing&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Rendering&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We need two main things to implement report rendering:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;A way to pretty-print reports to the console&lt;&#x2F;li&gt;
&lt;li&gt;We have to track which report was already rendered to be able to traverse the cyclic result graph&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;To track the already printed reports we can simply create a &lt;code&gt;Ref&lt;&#x2F;code&gt; holding a set of visited &lt;code&gt;ReportKey&lt;&#x2F;code&gt;s:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;private case class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; State&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;alreadyVisited&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Set&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ReportKey&lt;&#x2F;span&gt;&lt;span&gt;])
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;alreadyVisited &amp;lt;- Ref.make(State(Set.empty))
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;For pretty printing the reports there are several possibilities. Eventually we want to call &lt;code&gt;console.putStr&lt;&#x2F;code&gt; to write to the console. The original implementation of this tool used a string templating engine to define the output. Instead of doing that we can write a pretty-printing DSL to define our output in Scala. Take a look at the following example:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span&gt;ifNotVisitedYet(report) { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;env &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  sectionHeader(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;Beanstalk&#x2F;Env&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;) &amp;lt;-&amp;gt; highlighted(env.name) &amp;lt;-&amp;gt; 
&lt;&#x2F;span&gt;&lt;span&gt;    details(env.id) &amp;lt;-&amp;gt; 
&lt;&#x2F;span&gt;&lt;span&gt;    normal(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;is a Beanstalk environment of the application ${&lt;&#x2F;span&gt;&lt;span&gt;env.appName&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;}&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;) \\
&lt;&#x2F;span&gt;&lt;span&gt;  indented {
&lt;&#x2F;span&gt;&lt;span&gt;    keyword(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;AWS Console&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;) &amp;lt;:&amp;gt; 
&lt;&#x2F;span&gt;&lt;span&gt;      link(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;https:&#x2F;&#x2F;console.aws.amazon.com&#x2F;elasticbeanstalk&#x2F;home?region=${&lt;&#x2F;span&gt;&lt;span&gt;env.region&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;}#&#x2F;environment&#x2F;dashboard?applicationName=${&lt;&#x2F;span&gt;&lt;span&gt;env.appName&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;}&amp;amp;environmentId=${&lt;&#x2F;span&gt;&lt;span&gt;env.id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;}&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;) \\
&lt;&#x2F;span&gt;&lt;span&gt;    keyword(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;Health&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;) &amp;lt;:&amp;gt; highlighted(env.health.toString) \\
&lt;&#x2F;span&gt;&lt;span&gt;    keyword(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;Currently running version&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;) &amp;lt;:&amp;gt; normal(env.version) \\
&lt;&#x2F;span&gt;&lt;span&gt;    normal(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;${&lt;&#x2F;span&gt;&lt;span&gt;env.asgs.size&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;} ASGs, ${&lt;&#x2F;span&gt;&lt;span&gt;env.instanceCount&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;} instances, ${&lt;&#x2F;span&gt;&lt;span&gt;env.elbs.size&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;} ELBs&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;) \\
&lt;&#x2F;span&gt;&lt;span&gt;    env.elbs.foreach_(elb(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;, None)) \\
&lt;&#x2F;span&gt;&lt;span&gt;    env.asgs.foreach_(asg) \\
&lt;&#x2F;span&gt;&lt;span&gt;    ebApp(env.app)
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We can see here a couple of functions and operators, all created to the specific task of printing &lt;em&gt;AWS resource reports&lt;&#x2F;em&gt;:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ifNotYetVisitedYet&lt;&#x2F;code&gt; must somehow interact with the &lt;code&gt;Ref&lt;&#x2F;code&gt; we defined above&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;-&amp;gt;&lt;&#x2F;code&gt; concatenates two texts with a space&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;:&amp;gt;&lt;&#x2F;code&gt; concatenates two texts with a colon and a space&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;\\&lt;&#x2F;code&gt; concatenates two texts with a newline&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;keyword&lt;&#x2F;code&gt;, &lt;code&gt;link&lt;&#x2F;code&gt;, &lt;code&gt;normal&lt;&#x2F;code&gt;, &lt;code&gt;highlighted&lt;&#x2F;code&gt; etc. add styling to the given text&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;foreach_&lt;&#x2F;code&gt; is coming from &lt;code&gt;zio-prelude&lt;&#x2F;code&gt;-s &lt;code&gt;Traversable&lt;&#x2F;code&gt;. We will see why is it used soon.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;We could define these styling functions as &lt;code&gt;ZIO&lt;&#x2F;code&gt; effects and the helper operators as general extension methods on &lt;code&gt;ZIO&lt;&#x2F;code&gt;. Then we could store required state (for example for indentation) in a &lt;code&gt;Ref&lt;&#x2F;code&gt; for example. This works but we can do better. By defining our own monadic data type &lt;code&gt;Print[A]&lt;&#x2F;code&gt; we get the following advantages:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;It is more type safe. The pretty printing operators will be only applicable to pretty printing functions, not to arbitrary ZIO effects&lt;&#x2F;li&gt;
&lt;li&gt;Pretty printing state gets completely hidden from the pretty printing definitions&lt;&#x2F;li&gt;
&lt;li&gt;We can easily do some optimizations such as collapsing multiple newlines into one, which makes rendering optional lines more convenient&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;So let&#x27;s define a data type to represent pretty printing:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;sealed trait&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; Print&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;final case class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; PrintPure&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span&gt;Print[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;final case class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; PrintS&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span&gt;Print[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Unit&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;final case class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; PrintModified&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;modifiers&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span&gt;Print[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Unit&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;final case object&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; PrintNL &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span&gt;Print[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Unit&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;final case class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; PrintIndented&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;p&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Print&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;]) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span&gt;Print[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;final case class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; PrintFlatMap&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;B&lt;&#x2F;span&gt;&lt;span&gt;](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Print&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;A &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Print&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;B&lt;&#x2F;span&gt;&lt;span&gt;]) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span&gt;Print[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;B&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;final case class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; PrintEffect&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;UIO&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;]) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span&gt;Print[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;PrintPure&lt;&#x2F;code&gt; and &lt;code&gt;PrintFlatMap&lt;&#x2F;code&gt; can be used to implement &lt;code&gt;zio-prelude&lt;&#x2F;code&gt;s type classes:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;implicit val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;print &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Covariant&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Print&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;with &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;IdentityFlatten&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Print&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;with &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;IdentityBoth&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Print&lt;&#x2F;span&gt;&lt;span&gt;] {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;override def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;B&lt;&#x2F;span&gt;&lt;span&gt;](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;A &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;B&lt;&#x2F;span&gt;&lt;span&gt;): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Print&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Print&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;B&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= 
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;fa &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;PrintFlatMap(fa, (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;PrintPure(f(a)))
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;override def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;any&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Print&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Any&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span&gt;    PrintPure(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;override def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;flatten&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;ffa&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Print&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Print&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;]]): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Print&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= 
&lt;&#x2F;span&gt;&lt;span&gt;    PrintFlatMap(ffa, (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;fa&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Print&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;]) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; fa)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;override def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;both&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;B&lt;&#x2F;span&gt;&lt;span&gt;](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;fa&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Print&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;fb&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Print&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;B&lt;&#x2F;span&gt;&lt;span&gt;]): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Print&lt;&#x2F;span&gt;&lt;span&gt;[(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;B&lt;&#x2F;span&gt;&lt;span&gt;)] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= 
&lt;&#x2F;span&gt;&lt;span&gt;    PrintFlatMap(fa, (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; map((&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;B&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;(a, b))(fb))
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;What are these type classes providing to us?&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Covariant&lt;&#x2F;code&gt; basically gives us &lt;code&gt;map&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;IdentityFlatten&lt;&#x2F;code&gt; means that the data type can be &quot;flattened&quot; associatively and has an identity element. This gives us &lt;code&gt;flatten&lt;&#x2F;code&gt; and &lt;code&gt;flatMap&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;IdentityBoth&lt;&#x2F;code&gt; means we have an associative binary operator to combine two values. This enables syntax like &lt;code&gt;&amp;lt;*&amp;gt;&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Having this we can define primitive pretty printing operators like:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;normal&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;text&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Print&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Unit&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;PrintS(text)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;space&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Print&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Unit&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;PrintS(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot; &amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;implicit class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; PrintOps&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Print&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;]) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;&amp;lt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;[B](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;next&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Print[B]): Print[B] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    self *&amp;gt; space *&amp;gt; next
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Then we can use the syntax provided by &lt;code&gt;zio-prelude&lt;&#x2F;code&gt; to compose these pretty printer values. The only thing remaining is to provide a transformation of &lt;code&gt;Print[A]&lt;&#x2F;code&gt; to &lt;code&gt;UIO[A]&lt;&#x2F;code&gt;. This is where we can hide the pretty printer state and can handle special rules like collapsing newlines:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;private trait&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; PrettyConsole {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;protected val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;console&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: Console.Service
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;private case class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; PrettyState(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;indentation&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: String, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;afterNL&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Boolean&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;private def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;printFlatMap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;[A, B](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: Print[A], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: A &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Print[B], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;state&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: PrettyState): UIO[(B, PrettyState)] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;r1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; runImpl(a, state)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;r2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; runImpl(f(r1._1), r1._2)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;yield&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; r2
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;private def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;runImpl&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;[A](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;p&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: Print[A], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;state&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: PrettyState): UIO[(A, PrettyState)] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    p &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;match &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;PrintPure(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ZIO.succeed((a, state))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;PrintS(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ZIO.when(state.afterNL)(console.putStr(state.indentation)) *&amp;gt; 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;        console.putStr(s).as(((), state.copy(afterNL &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;false)))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;PrintModified(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;modifiers&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ZIO.when(state.afterNL)(console.putStr(state.indentation)) *&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;        console.putStr(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;modifiers&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;$s$RESET&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;).as(((), state.copy(afterNL &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;false)))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;PrintNL &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;(state.afterNL) ZIO.succeed(((), state)) 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;else&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; console.putStrLn(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;).as(((), state.copy(afterNL &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;true)))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;PrintIndented(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; runImpl(f, state.copy(indentation &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; state.indentation + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;)).map { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;          (a, s.copy(indentation &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; state.indentation)) }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;PrintFlatMap(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; printFlatMap(a, f, state)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;PrintEffect(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; f.map((&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;, state))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;run&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;[A](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;p&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: Print[A]): UIO[A] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; runImpl(p, PrettyState(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;, afterNL &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;false)).map(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;._1)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;A couple of things to notice here:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;PrettyState&lt;&#x2F;code&gt; holds the indentation and a flag that is true when the last print was a &lt;em&gt;new line&lt;&#x2F;em&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;runImpl&lt;&#x2F;code&gt; gets the state as input and has the capability to modify it, by returning the modified state together with the computation&#x27;s result&lt;&#x2F;li&gt;
&lt;li&gt;there is a &lt;code&gt;PrintEffect&lt;&#x2F;code&gt; constructor that allows lifting arbitrary &lt;code&gt;ZIO&lt;&#x2F;code&gt; effects to the pretty printer. This is needed for interacting with the &lt;code&gt;Ref&lt;&#x2F;code&gt; that holds the record of already printed reports.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;putting-all-together&quot;&gt;Putting all together&lt;&#x2F;h2&gt;
&lt;p&gt;Putting all this together means getting command line arguments, setting up the AWS client libraries, the report cache and the rendering modules and running the top level queries.&lt;&#x2F;p&gt;
&lt;p&gt;To parse the command line arguments we can use my &lt;a href=&quot;https:&#x2F;&#x2F;vigoo.github.io&#x2F;clipp&#x2F;docs&#x2F;&quot;&gt;clipp library&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;final case class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; Parameters&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;verbose&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Boolean&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;searchInput&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;region&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;paramSpec &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= for &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span&gt; metadata(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;aws-query&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;search for AWS infrastructure resources&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;verbose &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span&gt; flag(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;Verbose logging&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;&amp;#39;v&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;verbose&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;searchInput &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span&gt; parameter[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;Search input&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;NAME_OR_ID&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;region &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span&gt; optional { namedParameter[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;AWS region&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;REGION&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;region&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;) }
&lt;&#x2F;span&gt;&lt;span&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;yield &lt;&#x2F;span&gt;&lt;span&gt;Parameters(verbose, searchInput, region.getOrElse(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;us-east-1&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;params &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; clipp.zioapi.config.fromArgsWithUsageInfo(args, paramSpec)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;code&gt;verbose&lt;&#x2F;code&gt; flag is used to set up logging. We use &lt;a href=&quot;https:&#x2F;&#x2F;zio.github.io&#x2F;zio-logging&#x2F;&quot;&gt;zio-logging&lt;&#x2F;a&gt; with SLF4j support (to be able to see logs from the underlying AWS Java SDK) with lo4j2 backend. In order to control the log level by the command line &lt;code&gt;verbose&lt;&#x2F;code&gt; flag, instead of the usual XML-based configuration for log4j2 we define a ZIO &lt;em&gt;layer&lt;&#x2F;em&gt; that&#x27;s only purpose is to perform the configuration programmatically:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;private def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;log4j2Configuration&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ZLayer&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Has&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ClippConfig&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Service&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Parameters&lt;&#x2F;span&gt;&lt;span&gt;]], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Throwable&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Has&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Log4jConfiguration&lt;&#x2F;span&gt;&lt;span&gt;]] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  ZLayer.fromServiceM[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ClippConfig&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Service&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Parameters&lt;&#x2F;span&gt;&lt;span&gt;], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Any&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Throwable&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Log4jConfiguration&lt;&#x2F;span&gt;&lt;span&gt;] { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;params &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    ZIO.effect {
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;builder &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;ConfigurationBuilderFactory.newConfigurationBuilder()       
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;      Configurator.initialize(builder.build())
&lt;&#x2F;span&gt;&lt;span&gt;      Log4jConfiguration()
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This way the root logger&#x27;s level can depend on the &lt;code&gt;Parameters&lt;&#x2F;code&gt; parsed by &lt;code&gt;clipp&lt;&#x2F;code&gt;. Composing this layer with &lt;code&gt;zio-logger&lt;&#x2F;code&gt;s &lt;code&gt;Slf4jLogger&lt;&#x2F;code&gt; gives us a working &lt;code&gt;Logging&lt;&#x2F;code&gt; layer:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;logging &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; log4j2Configuration &amp;gt;+&amp;gt; Slf4jLogger.make { (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;message&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; message }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;By bootstrapping the parameters and the logging we can run our main application like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;result &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span&gt; awsQuery()
&lt;&#x2F;span&gt;&lt;span&gt;    .provideCustomLayer(params &amp;gt;+&amp;gt; logging)
&lt;&#x2F;span&gt;&lt;span&gt;    .catchAll { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;ZIO.succeed(ExitCode.failure) }
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;- &lt;&#x2F;span&gt;&lt;span&gt;ZIO.effect(LogManager.shutdown()).orDie
&lt;&#x2F;span&gt;&lt;span&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;yield&lt;&#x2F;span&gt;&lt;span&gt; result
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;code&gt;clipp&lt;&#x2F;code&gt; parser will print detailed usage info in case it fails, and other runtime errors are logged, so we can simply catch all errors and exit with a failure on top level.&lt;&#x2F;p&gt;
&lt;p&gt;In &lt;code&gt;awsQuery&lt;&#x2F;code&gt; we create all the other layers necessary for running the queries. First we need to create the &lt;em&gt;throttling policy&lt;&#x2F;em&gt; that is used by all the AWS service clients as I explained above:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;private def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;awsQuery&lt;&#x2F;span&gt;&lt;span&gt;(): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ZIO&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Random &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;with &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Clock &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;with &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Console &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;with &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Logging &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;with &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ClippConfig&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Parameters&lt;&#x2F;span&gt;&lt;span&gt;], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Nothing&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ExitCode&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span&gt;    throttlingPolicy.use { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;policy &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;      
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;code&gt;zio-aws&lt;&#x2F;code&gt; library uses &lt;a href=&quot;https:&#x2F;&#x2F;zio.github.io&#x2F;zio-config&#x2F;&quot;&gt;ZIO Config&lt;&#x2F;a&gt; for configuration. This means we need a &lt;code&gt;ZConfig[CommonAwsConfig]&lt;&#x2F;code&gt; to construct the &lt;code&gt;AwsConfig&lt;&#x2F;code&gt; layer:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;commonConfig &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;ZLayer.succeed(CommonAwsConfig(
&lt;&#x2F;span&gt;&lt;span&gt;  region &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;Some(Region.of(params.region)),
&lt;&#x2F;span&gt;&lt;span&gt;  credentialsProvider &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;DefaultCredentialsProvider.create(),
&lt;&#x2F;span&gt;&lt;span&gt;  endpointOverride &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;None,
&lt;&#x2F;span&gt;&lt;span&gt;  commonClientConfig &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;None
&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;awsCore &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;(netty.default ++ commonConfig) &amp;gt;&amp;gt;&amp;gt; core.config.configured()
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;code&gt;AwsConfig&lt;&#x2F;code&gt; layer combines the configuration with a selected HTTP backend. In our case this is the &lt;em&gt;Netty&lt;&#x2F;em&gt; backend, using its default configuration.&lt;&#x2F;p&gt;
&lt;p&gt;Then we define the per-service client layers, applying the throttling and call logging &lt;em&gt;aspects&lt;&#x2F;em&gt; as I described before:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;awsClients &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span&gt;  ec2.live @@ (throttling &amp;gt;&amp;gt;&amp;gt; callLogging) ++
&lt;&#x2F;span&gt;&lt;span&gt;  elasticloadbalancing.live @@ (throttling &amp;gt;&amp;gt;&amp;gt; callLogging) ++
&lt;&#x2F;span&gt;&lt;span&gt;  elasticbeanstalk.live @@ (throttling &amp;gt;&amp;gt;&amp;gt; callLogging) ++
&lt;&#x2F;span&gt;&lt;span&gt;  autoscaling.live @@ (throttling &amp;gt;&amp;gt;&amp;gt; callLogging)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;To produce the final layer, we feed the logging and the &lt;code&gt;AwsConfig&lt;&#x2F;code&gt; layers to the client layers, and add the &lt;code&gt;ReportCache&lt;&#x2F;code&gt; and &lt;code&gt;Render&lt;&#x2F;code&gt; implementations:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;finalLayer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= 
&lt;&#x2F;span&gt;&lt;span&gt;  ((ZLayer.service[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Logger&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;]] ++ awsCore) &amp;gt;&amp;gt;&amp;gt; awsClients) ++
&lt;&#x2F;span&gt;&lt;span&gt;  ((Console.any ++ cache.live) &amp;gt;+&amp;gt; render.live)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This has the environment &lt;code&gt;ClippConfig[Parameters] with Console with Logging with ReportCache with Rendering with AllServices&lt;&#x2F;code&gt; where&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;AllServices &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Ec2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;with &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ElasticLoadBalancing &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;with &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ElasticBeanstalk &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;with &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;AutoScaling
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;We reimplemented the tool to query AWS resources using functional programming techniques, built on top of ZIO libraries. By separating the execution from the problem specification we get an easily readable and maintainable code that can be easily extended with new queries or reports without having to thing about how caching and concurrency is implemented under the hood. We can rate limit AWS requests without touching the actual queries, and take advantage of batching AWS operations while keeping the query logic simple and unaware of this optimization.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Code generation in ZIO-AWS</title>
        <published>2020-09-23T00:00:00+00:00</published>
        <updated>2020-09-23T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Daniel Vigovszky
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://blog.vigoo.dev/posts/zioaws-code-generation/"/>
        <id>https://blog.vigoo.dev/posts/zioaws-code-generation/</id>
        
        <content type="html" xml:base="https://blog.vigoo.dev/posts/zioaws-code-generation/">&lt;p&gt;I have recently published a set of libraries, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;vigoo&#x2F;zio-aws&quot;&gt;&lt;strong&gt;zio-aws&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;, aiming to provide a better interface for working with &lt;em&gt;AWS services&lt;&#x2F;em&gt; from &lt;a href=&quot;https:&#x2F;&#x2F;zio.dev&#x2F;&quot;&gt;ZIO&lt;&#x2F;a&gt; applications. For more information about how the ZIO &lt;em&gt;interface&lt;&#x2F;em&gt; works and how to get started with these libraries, read the repository&#x27;s README. In this post, I will focus on how these libraries are generated from the schema provided by the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;aws&#x2F;aws-sdk-java-v2&quot;&gt;AWS Java SDK v2&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;generating-code&quot;&gt;Generating code&lt;&#x2F;h2&gt;
&lt;p&gt;I wanted to cover &lt;em&gt;all&lt;&#x2F;em&gt; AWS services at once. This means client libraries for more than 200 services, so the only possible approach was to &lt;em&gt;generate&lt;&#x2F;em&gt; these libraries on top of a small hand-written core.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;schema&quot;&gt;Schema&lt;&#x2F;h3&gt;
&lt;p&gt;The first thing we need for generating code is a source schema. This is the model that we use to create the source code from. It is usually constructed by some kind of DSL or more directly described by a JSON or YAML or similar data model. In the case of &lt;strong&gt;zio-aws&lt;&#x2F;strong&gt; this was already defined in the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;aws&#x2F;aws-sdk-java-v2&quot;&gt;AWS Java SDK v2&lt;&#x2F;a&gt; project. The way it works is:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;There is a &lt;code&gt;codegen&lt;&#x2F;code&gt; project, published in the &lt;code&gt;software.amazon.awssdk&lt;&#x2F;code&gt; group among the client libraries, that contains the Java classes used for generating the Java SDK itself. This contains the data model classes for parsing the actual schema as well.&lt;&#x2F;li&gt;
&lt;li&gt;In the AWS Java SDK v2 repository, the schema is located in the subdirectory called &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;aws&#x2F;aws-sdk-java-v2&#x2F;tree&#x2F;master&#x2F;services&quot;&gt;&lt;code&gt;services&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;. There is a directory for each AWS service and it contains among other things some relevant &lt;em&gt;JSON&lt;&#x2F;em&gt; schema files:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;service-2.json&lt;&#x2F;code&gt; is the main schema of the service, describing the data structures and operations&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;paginators-1.json&lt;&#x2F;code&gt; describes the operations that the Java SDK creates a &lt;em&gt;paginator interface&lt;&#x2F;em&gt; for&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;customization.config&lt;&#x2F;code&gt; contains extra information, including changes to be applied on top of the service model&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Fortunately, these are also embedded in the generated &lt;em&gt;AWS Java SDK&lt;&#x2F;em&gt; libraries as resources, so getting &lt;em&gt;all client libraries&lt;&#x2F;em&gt; on the classpath gives us an easy way to get the corresponding schemas as well&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;I decided to use the low-level data classes from the AWS &lt;code&gt;codegen&lt;&#x2F;code&gt; library to parse these files and using that build a higher-level model that can be then used as an input for the &lt;em&gt;code generator&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;This is encapsulated in a &lt;em&gt;ZIO layer&lt;&#x2F;em&gt; called &lt;code&gt;Loader&lt;&#x2F;code&gt;, which has two functions:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;findModels&lt;&#x2F;span&gt;&lt;span&gt;(): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ZIO&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Blocking&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Throwable&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Set&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ModelId&lt;&#x2F;span&gt;&lt;span&gt;]]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;loadCodegenModel&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ModelId&lt;&#x2F;span&gt;&lt;span&gt;): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ZIO&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Blocking&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Throwable&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;C2jModels&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The first one, &lt;code&gt;findModels&lt;&#x2F;code&gt; uses the &lt;code&gt;ClassLoader&lt;&#x2F;code&gt; to enumerate all &lt;code&gt;codegen-resources&lt;&#x2F;code&gt; folders on the &lt;em&gt;classpath&lt;&#x2F;em&gt; and just returns a set of &lt;code&gt;ModelId&lt;&#x2F;code&gt;s. &lt;code&gt;ModelId&lt;&#x2F;code&gt; is a pair of a model name (such as &lt;code&gt;s3&lt;&#x2F;code&gt;) and an optional submodule name (for example &lt;code&gt;dynamodb:dynamodbstreams&lt;&#x2F;code&gt;).&lt;&#x2F;p&gt;
&lt;p&gt;Then for each detected model we can load it with the &lt;code&gt;loadCodegenModel&lt;&#x2F;code&gt; function, &lt;code&gt;C2jModels&lt;&#x2F;code&gt; is a class from the AWS &lt;code&gt;codegen&lt;&#x2F;code&gt; library.&lt;&#x2F;p&gt;
&lt;p&gt;Figuring out how to interpret these data structures, and how to map them to the generated Java API was the hardest part, but it&#x27;s out of scope for this post. Our next topic here is how we generate code from our &lt;em&gt;model&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;scalameta&quot;&gt;Scalameta&lt;&#x2F;h3&gt;
&lt;p&gt;There are several possibilities to generate source code and I tried many of them during the past years. Let&#x27;s see some examples:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Using a general-purpose text template engine. An example we used at &lt;a href=&quot;https:&#x2F;&#x2F;prezi.com&quot;&gt;Prezi&lt;&#x2F;a&gt; is the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bkiers&#x2F;Liqp&quot;&gt;Java implementation of the Liquid templating engine&lt;&#x2F;a&gt;. Another example is the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;OpenAPITools&#x2F;openapi-generator&quot;&gt;OpenAPI generator project&lt;&#x2F;a&gt; that uses &lt;a href=&quot;https:&#x2F;&#x2F;mustache.github.io&#x2F;&quot;&gt;Mustache&lt;&#x2F;a&gt; templates to generate server and client code from OpenAPI specifications.&lt;&#x2F;li&gt;
&lt;li&gt;Generating from code with some general-purpose pretty-printing library. With this approach, we are using the pretty-printer library&#x27;s composability features to create source code building blocks, and map the code generator model to these constructs. It is easier to express complex logic in this case, as we don&#x27;t have to encode it in a limited dynamic template model. On the other hand, reading the code generator&#x27;s source and imagining the output is not easy, and nothing enforces that the pretty-printer building blocks are actually creating valid source code.&lt;&#x2F;li&gt;
&lt;li&gt;If the target language has an AST with a pretty-printing feature, we can map the model to the AST directly and just pretty print at the end. With this, we get a much more efficient development cycle, as the generated code is at least guaranteed to be syntactically correct. But the AST can be far from how the target language&#x27;s textual representation looks like, which makes it difficult to read and write this code.&lt;&#x2F;li&gt;
&lt;li&gt;With a library that supports building ASTs with &lt;em&gt;quasiquotes&lt;&#x2F;em&gt;, we can build the AST fragments with a syntax that is very close to the generated target language. For &lt;em&gt;Scala&lt;&#x2F;em&gt;, a library that supports this and is used in a lot of tooling projects is &lt;a href=&quot;https:&#x2F;&#x2F;scalameta.org&#x2F;&quot;&gt;Scalameta&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;I wanted to try using &lt;em&gt;Scalameta&lt;&#x2F;em&gt; ever since I met Devon Stewart and he mentioned how he uses it in &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;twilio&#x2F;guardrail&#x2F;&quot;&gt;guardrail&lt;&#x2F;a&gt;. Finally, this was a perfect use case to do so!&lt;&#x2F;p&gt;
&lt;p&gt;To get an understanding of what kind of Scala language constructs can be built with &lt;em&gt;quasiquotes&lt;&#x2F;em&gt; with &lt;em&gt;Scalameta&lt;&#x2F;em&gt;, check &lt;a href=&quot;https:&#x2F;&#x2F;scalameta.org&#x2F;docs&#x2F;trees&#x2F;quasiquotes.html&quot;&gt;the list of them in the official documentation&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;We get a good mix of both worlds with this. It is possible to express complex template logic in real code, creating higher-level constructs, taking advantage of the full power of Scala. On the other hand, the actual &lt;em&gt;quasiquoted&lt;&#x2F;em&gt; fragments are still close to the code generator&#x27;s target language (which is in this case also Scala).&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s see a short example of this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;private def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;generateMap&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;m&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Model&lt;&#x2F;span&gt;&lt;span&gt;): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ZIO&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;GeneratorContext&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;GeneratorFailure&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ModelWrapper&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;keyModel &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span&gt; get(m.shape.getMapKeyType.getShape)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;valueModel &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span&gt; get(m.shape.getMapValueType.getShape)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;keyT &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;- &lt;&#x2F;span&gt;&lt;span&gt;TypeMapping.toWrappedType(keyModel)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;valueT &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;- &lt;&#x2F;span&gt;&lt;span&gt;TypeMapping.toWrappedType(valueModel)
&lt;&#x2F;span&gt;&lt;span&gt;  } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;yield &lt;&#x2F;span&gt;&lt;span&gt;ModelWrapper(
&lt;&#x2F;span&gt;&lt;span&gt;    code &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;List(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;q&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&amp;quot;&amp;quot;type ${&lt;&#x2F;span&gt;&lt;span&gt;m.asType&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;} = Map[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;$keyT&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;$valueT&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;]&amp;quot;&amp;quot;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  )
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;For each &lt;em&gt;AWS&lt;&#x2F;em&gt; service-specific &lt;em&gt;model type&lt;&#x2F;em&gt; we generate some kind of wrapper code into the ZIO service client library. This is done by processing the schema model to an intermediate format where for each such wrapper, we have a &lt;code&gt;ModelWrapper&lt;&#x2F;code&gt; value that already has the &lt;em&gt;Scalameta AST&lt;&#x2F;em&gt; for that particular wrapper. The above code fragment creates this for &lt;em&gt;map types&lt;&#x2F;em&gt;, which is a simple type alias for a Scala &lt;code&gt;Map&lt;&#x2F;code&gt;. It&#x27;s a &lt;code&gt;ZIO&lt;&#x2F;code&gt; function, taking advantage of passing around the context in the &lt;em&gt;environment&lt;&#x2F;em&gt; and safely handling generator failures, while the actual generated code part in the &lt;code&gt;q&quot;&quot;&quot;...&quot;&quot;&quot;&lt;&#x2F;code&gt; remained quite readable.&lt;&#x2F;p&gt;
&lt;p&gt;Then the whole &lt;em&gt;model package&lt;&#x2F;em&gt; can be expressed like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;primitiveModels &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;- &lt;&#x2F;span&gt;&lt;span&gt;ZIO.foreach(primitiveModels.toList.sortBy(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;.name))(generateModel)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;models &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;- &lt;&#x2F;span&gt;&lt;span&gt;ZIO.foreach(complexModels.toList.sortBy(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;.name))(generateModel)
&lt;&#x2F;span&gt;&lt;span&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;yield &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;q&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&amp;quot;&amp;quot;package &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;$fullPkgName&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt; {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;            import scala.jdk.CollectionConverters._
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;            import java.time.Instant
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;            import zio.{Chunk, ZIO}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;            import software.amazon.awssdk.core.SdkBytes
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;            ..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;$parentModuleImport
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;            package object model {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;              object primitives {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;                ..${&lt;&#x2F;span&gt;&lt;span&gt;primitiveModels.flatMap(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;.code)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;              }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;              ..${&lt;&#x2F;span&gt;&lt;span&gt;models.flatMap(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;.code)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;            }}&amp;quot;&amp;quot;&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This can be then &lt;em&gt;pretty printed&lt;&#x2F;em&gt; simply with&lt;code&gt;.toString&lt;&#x2F;code&gt; and saved to a &lt;code&gt;.scala&lt;&#x2F;code&gt; file.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;building-the-libraries&quot;&gt;Building the libraries&lt;&#x2F;h2&gt;
&lt;p&gt;We have a way to collect the service models and generate source code from that, but we still have to use that generated code somehow. In &lt;code&gt;zio-aws&lt;&#x2F;code&gt; the goal was to generate a separate &lt;em&gt;client library&lt;&#x2F;em&gt; for each AWS service. At the time of writing, there were &lt;strong&gt;235&lt;&#x2F;strong&gt; such services. The generated libraries have to be built and published to &lt;em&gt;Sonatype&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;first-version&quot;&gt;First version&lt;&#x2F;h3&gt;
&lt;p&gt;In the first version I simply wired together the above described &lt;code&gt;loader&lt;&#x2F;code&gt; and &lt;code&gt;generator&lt;&#x2F;code&gt; module into a &lt;code&gt;ZIO&lt;&#x2F;code&gt; &lt;em&gt;command line&lt;&#x2F;em&gt; app, using &lt;a href=&quot;https:&#x2F;&#x2F;vigoo.github.io&#x2F;clipp&#x2F;docs&#x2F;&quot;&gt;clipp&lt;&#x2F;a&gt; for command line parsing. It&#x27;s &lt;code&gt;main&lt;&#x2F;code&gt; was really just something like the following:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;app &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= for &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;svcs &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span&gt; config.parameters[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Parameters&lt;&#x2F;span&gt;&lt;span&gt;].map(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;.serviceList)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;ids &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span&gt; svcs &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;match &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span&gt;Some(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;ids&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;ZIO.succeed(ids.toSet)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span&gt;None &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; loader.findModels().mapError(ReflectionError)
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;- &lt;&#x2F;span&gt;&lt;span&gt;ZIO.foreachPar(ids) { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;model &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span&gt; loader.loadCodegenModel(id).mapError(ReflectionError)
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span&gt; generator.generateServiceCode(id, model).mapError(GeneratorError)
&lt;&#x2F;span&gt;&lt;span&gt;    } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;yield &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span&gt; generator.generateBuildSbt(ids).mapError(GeneratorError)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span&gt; generator.copyCoreProject().mapError(GeneratorError)
&lt;&#x2F;span&gt;&lt;span&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;yield &lt;&#x2F;span&gt;&lt;span&gt;ExitCode.success
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;cfg &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; config.fromArgsWithUsageInfo(args, Parameters.spec).mapError(ParserError)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;modules &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; loader.live ++ (cfg &amp;gt;+&amp;gt; generator.live)
&lt;&#x2F;span&gt;&lt;span&gt;app.provideCustomLayer(modules)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Then created a &lt;em&gt;multi-module&lt;&#x2F;em&gt; &lt;code&gt;sbt&lt;&#x2F;code&gt; project with the following modules:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;zio-aws-codegen&lt;&#x2F;code&gt; the CLI code generator we were talking about so far&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;zio-aws-core&lt;&#x2F;code&gt; holding the common part of all AWS service wrapper libraries. This contains things like how to translate AWS pagination into &lt;code&gt;ZStream&lt;&#x2F;code&gt; etc.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;zio-aws-akka-http&lt;&#x2F;code&gt;, &lt;code&gt;zio-aws-http4s&lt;&#x2F;code&gt; and &lt;code&gt;zio-aws-netty&lt;&#x2F;code&gt; are the supported &lt;em&gt;HTTP layers&lt;&#x2F;em&gt;, all depend on &lt;code&gt;zio-aws-core&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;I also created a first &lt;em&gt;example&lt;&#x2F;em&gt; project in a separate &lt;code&gt;sbt&lt;&#x2F;code&gt; project, that demonstrated the use of some of the generated AWS client libraries. With this primitive setup, building everything from scratch and running the example took the following steps:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;sbt compile&lt;&#x2F;code&gt; the root project&lt;&#x2F;li&gt;
&lt;li&gt;manually running &lt;code&gt;zio-aws-codegen&lt;&#x2F;code&gt; to generate &lt;em&gt;all client libs at once&lt;&#x2F;em&gt; to a separate directory, with a corresponding &lt;code&gt;build.sbt&lt;&#x2F;code&gt; including all these projects in a single &lt;code&gt;sbt&lt;&#x2F;code&gt; project&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;sbt publishLocal&lt;&#x2F;code&gt; in the generated &lt;code&gt;sbt&lt;&#x2F;code&gt; project&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;sbt run&lt;&#x2F;code&gt; in the &lt;em&gt;examples&lt;&#x2F;em&gt; project&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;For the second, manual step I created some &lt;em&gt;custom sbt tasks&lt;&#x2F;em&gt; called &lt;code&gt;generateAll&lt;&#x2F;code&gt;, &lt;code&gt;buildAll&lt;&#x2F;code&gt;, and &lt;code&gt;publishLocalAll&lt;&#x2F;code&gt;, that downloaded an &lt;code&gt;sbt-launch-*.jar&lt;&#x2F;code&gt; and used it to run the code generator and fork an &lt;code&gt;sbt&lt;&#x2F;code&gt; to build the generated project.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;code&gt;generateAll&lt;&#x2F;code&gt; task was quite simple:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span&gt;generateAll := Def.taskDyn {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;root &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; baseDirectory.value.getAbsolutePath
&lt;&#x2F;span&gt;&lt;span&gt;  Def.task {
&lt;&#x2F;span&gt;&lt;span&gt;    (codegen &#x2F; Compile &#x2F; run).toTask(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot; --target-root ${&lt;&#x2F;span&gt;&lt;span&gt;root&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;}&#x2F;generated --source-root ${&lt;&#x2F;span&gt;&lt;span&gt;root&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;} --version &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;$zioAwsVersion&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt; --zio-version &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;$zioVersion&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt; --zio-rs-version &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;$zioReactiveStreamsInteropVersion&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;).value
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}.value
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Launching a second &lt;code&gt;sbt&lt;&#x2F;code&gt; took more effort:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span&gt;buildAll := Def.taskDyn {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; generateAll.value
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;generatedRoot &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; baseDirectory.value &#x2F; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;generated&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;launcherVersion &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; sbtVersion.value
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;launcher &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;sbt-launch-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;$launcherVersion&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;.jar&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;launcherFile &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; generatedRoot &#x2F; launcher
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  Def.task[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Unit&lt;&#x2F;span&gt;&lt;span&gt;] {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(!launcherFile.exists) {
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;u &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; url(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;https:&#x2F;&#x2F;oss.sonatype.org&#x2F;content&#x2F;repositories&#x2F;public&#x2F;org&#x2F;scala-sbt&#x2F;sbt-launch&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;$launcherVersion&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&#x2F;sbt-launch-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;$launcherVersion&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;.jar&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;      sbt.io.Using.urlInputStream(u) { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;inputStream &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        IO.transfer(inputStream, launcherFile)
&lt;&#x2F;span&gt;&lt;span&gt;      }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;fork &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ForkRun&lt;&#x2F;span&gt;&lt;span&gt;(ForkOptions()
&lt;&#x2F;span&gt;&lt;span&gt;      .withWorkingDirectory(generatedRoot))
&lt;&#x2F;span&gt;&lt;span&gt;    fork.run(
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;xsbt.boot.Boot&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;      classpath &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; launcherFile :: Nil,
&lt;&#x2F;span&gt;&lt;span&gt;      options &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;compile&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt; :: Nil,
&lt;&#x2F;span&gt;&lt;span&gt;      log &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; streams.value.log
&lt;&#x2F;span&gt;&lt;span&gt;    )
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}.value
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;With these extra tasks, I released the first version of the library manually, but there was a lot of annoying difficulties:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Having to switch between various &lt;code&gt;sbt&lt;&#x2F;code&gt; projects&lt;&#x2F;li&gt;
&lt;li&gt;The need to &lt;code&gt;publishLocal&lt;&#x2F;code&gt; the generated artifacts in order to build the examples, or any kind of integration tests that I planned to add&lt;&#x2F;li&gt;
&lt;li&gt;The only way to build only those client libraries that are needed for the examples&#x2F;tests was to build and publish them manually, as this dependency was not tracked at all between the unrelated &lt;code&gt;sbt&lt;&#x2F;code&gt; projects&lt;&#x2F;li&gt;
&lt;li&gt;Because the generated &lt;code&gt;sbt&lt;&#x2F;code&gt; project could not refer to the outer &lt;code&gt;zio-aws-core&lt;&#x2F;code&gt; project, it has to be copied into the generated project in the code generator step&lt;&#x2F;li&gt;
&lt;li&gt;Building and publishing all the &lt;strong&gt;235&lt;&#x2F;strong&gt; projects at once required about &lt;strong&gt;16Gb&lt;&#x2F;strong&gt; memory and hours of compilation time. It was too big to run on any of the (freely available) CI systems.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;proper-solution&quot;&gt;Proper solution&lt;&#x2F;h3&gt;
&lt;p&gt;When I mentioned this, &lt;em&gt;Itamar Ravid&lt;&#x2F;em&gt; recommended trying to make it an &lt;em&gt;sbt code generator&lt;&#x2F;em&gt;. &lt;code&gt;sbt&lt;&#x2F;code&gt; has built-in support for generating source code, as described &lt;a href=&quot;https:&#x2F;&#x2F;www.scala-sbt.org&#x2F;1.0&#x2F;docs&#x2F;Howto-Generating-Files.html&quot;&gt;on it&#x27;s documentation page&lt;&#x2F;a&gt;. This alone though would not be enough to cover our use case, as in &lt;code&gt;zio-aws&lt;&#x2F;code&gt; even the &lt;em&gt;set of projects&lt;&#x2F;em&gt; is dynamic and comes from the enumeration of schema models. Fortunately, there is support for that in too, through the &lt;code&gt;extraProjects&lt;&#x2F;code&gt; property of &lt;code&gt;sbt&lt;&#x2F;code&gt; &lt;em&gt;plugins&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;With these two tools, the new project layout became the following:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;zio-aws-codegen&lt;&#x2F;code&gt; is an sbt &lt;strong&gt;plugin&lt;&#x2F;strong&gt;, having it&#x27;s own &lt;code&gt;sbt&lt;&#x2F;code&gt; project in a subdirectory&lt;&#x2F;li&gt;
&lt;li&gt;the &lt;code&gt;zio-aws-core&lt;&#x2F;code&gt; and the HTTP libraries are all in the top-level project as before&lt;&#x2F;li&gt;
&lt;li&gt;examples and integration tests are also part of the top-level project&lt;&#x2F;li&gt;
&lt;li&gt;the &lt;code&gt;zio-aws-codegen&lt;&#x2F;code&gt; plugin is referenced using a &lt;code&gt;ProjectRef&lt;&#x2F;code&gt; from the outer project&lt;&#x2F;li&gt;
&lt;li&gt;the plugin adds all the &lt;em&gt;AWS service client wrapper libraries&lt;&#x2F;em&gt; to the top-level project&lt;&#x2F;li&gt;
&lt;li&gt;these projects generate their source on-demand&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;In this setup, it is possible to build any subset of the generated libraries without the need to process and compile all of them, so it needs much less memory. It is also much simpler to run tests or build examples on top of them, as the test and example projects can directly depend on the generated libraries as &lt;code&gt;sbt&lt;&#x2F;code&gt; submodules. And even developing the &lt;em&gt;code generator&lt;&#x2F;em&gt; itself is convenient - although for editing it, it has to be opened as in a separate IDE session, but otherwise, &lt;code&gt;sbt reload&lt;&#x2F;code&gt; on the top level project automatically recompiles the plugin when needed.&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s see piece by piece how we can achieve this!&lt;&#x2F;p&gt;
&lt;h4 id=&quot;project-as-a-source-dependency&quot;&gt;Project as a source dependency&lt;&#x2F;h4&gt;
&lt;p&gt;The first thing I wanted to do is having the &lt;code&gt;zio-aws-codegen&lt;&#x2F;code&gt; project converted to an &lt;code&gt;sbt&lt;&#x2F;code&gt; plugin, but still having it in the same repository and be able to use it without having to install to a local repository. Although the whole code generator code could have been added to the top level &lt;code&gt;sbt&lt;&#x2F;code&gt; project&#x27;s &lt;code&gt;project&lt;&#x2F;code&gt; source, I wanted to keep it as a separate module to be able to publish it as a library or a CLI tool in the future if needed.&lt;&#x2F;p&gt;
&lt;p&gt;This can be achieved by putting it in a subdirectory of the top level project, with a separate &lt;code&gt;build.sbt&lt;&#x2F;code&gt; that contains the&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span&gt;sbtPlugin := &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;true
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;(beside the usual ones). Then it can be referenced in the top level project&#x27;s &lt;code&gt;project&#x2F;plugins.sbt&lt;&#x2F;code&gt; in the following way:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;lazy val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;codegen &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; project
&lt;&#x2F;span&gt;&lt;span&gt;  .in(file(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;.&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;  .dependsOn(ProjectRef(file(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;..&#x2F;zio-aws-codegen&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;zio-aws-codegen&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;and enabled in the &lt;code&gt;build.sbt&lt;&#x2F;code&gt; as&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span&gt;enablePlugins(ZioAwsCodegenPlugin)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;dynamically-generating-projects&quot;&gt;Dynamically generating projects&lt;&#x2F;h4&gt;
&lt;p&gt;To generate the subprojects dynamically, we need the &lt;code&gt;Set[ModelId]&lt;&#x2F;code&gt; coming from the &lt;code&gt;loader&lt;&#x2F;code&gt; module. It is a &lt;code&gt;ZIO&lt;&#x2F;code&gt; module, so from the &lt;code&gt;sbt&lt;&#x2F;code&gt; plugin we have to use &lt;code&gt;Runtime.default.unsafeRun&lt;&#x2F;code&gt; to execute it.&lt;&#x2F;p&gt;
&lt;p&gt;As the code generator project is now an &lt;code&gt;sbt&lt;&#x2F;code&gt; plugin, all the &lt;code&gt;sbt&lt;&#x2F;code&gt; data structures are directly available, so we can just write a function that maps the &lt;code&gt;ModelId&lt;&#x2F;code&gt;s to &lt;code&gt;Project&lt;&#x2F;code&gt;s:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;protected def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;generateSbtSubprojects&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;ids&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Set&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ModelId&lt;&#x2F;span&gt;&lt;span&gt;]): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Seq&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Project&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= ???
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;One interesting part here is that some of the subprojects are depending on each other. This happens with AWS service &lt;em&gt;submodules&lt;&#x2F;em&gt;, indicated by the second parameter of &lt;code&gt;ModelId&lt;&#x2F;code&gt;. An example is &lt;code&gt;dynamodbstreams&lt;&#x2F;code&gt; that depends on &lt;code&gt;dynamodb&lt;&#x2F;code&gt;. When creating the &lt;code&gt;Project&lt;&#x2F;code&gt; values, we have to be able to &lt;code&gt;dependOn&lt;&#x2F;code&gt; on some other already generated projects, and they have to be generated in the correct order to do so.&lt;&#x2F;p&gt;
&lt;p&gt;We could do a full topological sort, but it is not necessary, here we know that the maximum depth of dependencies is 1, so it is enough to put the submodules at the end of the sequence:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;map &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; ids
&lt;&#x2F;span&gt;&lt;span&gt;  .toSeq
&lt;&#x2F;span&gt;&lt;span&gt;  .sortWith { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;aIsDependent &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; a.subModuleName &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;match &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span&gt;Some(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;!=&lt;&#x2F;span&gt;&lt;span&gt; a.name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;true
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;false
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;bIsDependent &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; b.subModuleName &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;match &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span&gt;Some(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;!=&lt;&#x2F;span&gt;&lt;span&gt; b.name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;true
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;false
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    bIsDependent || (!aIsDependent &amp;amp;&amp;amp; a.toString &amp;lt; b.toString)
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Then in order to be able get the dependencies, we do a &lt;em&gt;fold&lt;&#x2F;em&gt; on the ordered &lt;code&gt;ModelId&lt;&#x2F;code&gt;s:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span&gt;  .foldLeft(Map.empty[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ModelId&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Project&lt;&#x2F;span&gt;&lt;span&gt;]) { (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;mapping&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;deps &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; id.subModule &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;match &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span&gt;Some(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;!=&lt;&#x2F;span&gt;&lt;span&gt; id.name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;          Seq(ClasspathDependency(LocalProject(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;zio-aws-core&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;), None),
&lt;&#x2F;span&gt;&lt;span&gt;              ClasspathDependency(mapping(ModelId(id.name, Some(id.name))), None))
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;          Seq(ClasspathDependency(LocalProject(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;zio-aws-core&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;), None))
&lt;&#x2F;span&gt;&lt;span&gt;      }      
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;project &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;Project(fullName, file(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;generated&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;) &#x2F; name)
&lt;&#x2F;span&gt;&lt;span&gt;        .settings(
&lt;&#x2F;span&gt;&lt;span&gt;          libraryDependencies += &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;software.amazon.awssdk&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt; % id.name % awsLibraryVersion.value,
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;        .dependsOn(deps: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;_*&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;      mapping.updated(id, project)
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;To make it easier to work with the generated projects, we also create a project named &lt;code&gt;all&lt;&#x2F;code&gt; that aggregates all the ones generated above.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;applying-settings-to-the-generated-projects&quot;&gt;Applying settings to the generated projects&lt;&#x2F;h4&gt;
&lt;p&gt;The code generator only sets the basic settings for the generated projects: name, path and dependencies. We need a lot more, setting organization and version, all the publishing options, controlling the Scala version, etc.&lt;&#x2F;p&gt;
&lt;p&gt;I decided to keep these settings outside of the code generator plugin, in the top-level &lt;code&gt;sbt&lt;&#x2F;code&gt; project. By creating an &lt;code&gt;AutoPlugin&lt;&#x2F;code&gt; end enabling it for all projects, we can inject all the common settings for both the hand-written and the generated projects:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;object&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; Common &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span&gt;AutoPlugin &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;object&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; autoImport {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;scala212Version &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;2.12.12&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;scala213Version &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;2.13.3&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;import&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; autoImport.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;override val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;trigger &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; allRequirements
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;override val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;requires &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Sonatype
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;override lazy val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;projectSettings &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    Seq(
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;      scalaVersion := scala213Version,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;      crossScalaVersions := List(scala212Version, scala213Version),
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    )
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;source-generator-task&quot;&gt;Source generator task&lt;&#x2F;h4&gt;
&lt;p&gt;At this point, we could also add the already existing &lt;em&gt;source code generation&lt;&#x2F;em&gt; to the initialization of the plugin, and just generate all the subproject&#x27;s all source files every time the &lt;code&gt;sbt&lt;&#x2F;code&gt; project is loaded. With this number of generated projects though, it would have been a very big startup overhead and would not allow us to split the build (at least not the code generation part) on CI, to solve the memory and build time issues.&lt;&#x2F;p&gt;
&lt;p&gt;As &lt;code&gt;sbt&lt;&#x2F;code&gt; has built-in support for defining &lt;em&gt;source generator tasks&lt;&#x2F;em&gt;, we can do much better!&lt;&#x2F;p&gt;
&lt;p&gt;Instead of generating the source codes in one step, we define a &lt;code&gt;generateSources&lt;&#x2F;code&gt; task and add it to each &lt;em&gt;generated subproject&lt;&#x2F;em&gt; as a &lt;em&gt;source generator&lt;&#x2F;em&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span&gt;Compile &#x2F; sourceGenerators += generateSources.taskValue,
&lt;&#x2F;span&gt;&lt;span&gt;awsLibraryId := id.toString
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;code&gt;awsLibraryId&lt;&#x2F;code&gt; is a custom property that we the &lt;code&gt;generateSources&lt;&#x2F;code&gt; task can use to determine which schema to use for the code generation.&lt;&#x2F;p&gt;
&lt;p&gt;The first part of this task is to gather the information from the project it got applied on, including the custom &lt;code&gt;awsLibraryId&lt;&#x2F;code&gt; property:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;lazy val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;generateSources &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span&gt;  Def.task {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;log &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; streams.value.log
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;idStr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; awsLibraryId.value
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;ModelId.parse(idStr) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;match &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span&gt;Left(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;failure&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; sys.error(failure)
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span&gt;Right(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; value
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;targetRoot &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;(sourceManaged in Compile).value
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;travisSrc &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; travisSource.value
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;travisDst &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; travisTarget.value
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;parallelJobs &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; travisParallelJobs.value
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;From these, we create a &lt;code&gt;Parameters&lt;&#x2F;code&gt; data structure to pass to the &lt;code&gt;generator&lt;&#x2F;code&gt; module. This is what we used to construct with &lt;code&gt;clipp&lt;&#x2F;code&gt; from CLI arguments:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;params &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;Parameters(
&lt;&#x2F;span&gt;&lt;span&gt;      targetRoot &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;Path.fromJava(targetRoot.toPath),
&lt;&#x2F;span&gt;&lt;span&gt;      travisSource &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;Path.fromJava(travisSrc.toPath),
&lt;&#x2F;span&gt;&lt;span&gt;      travisTarget &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;Path.fromJava(travisDst.toPath),
&lt;&#x2F;span&gt;&lt;span&gt;      parallelTravisJobs &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; parallelJobs
&lt;&#x2F;span&gt;&lt;span&gt;    )
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And finally, construct the &lt;code&gt;ZIO&lt;&#x2F;code&gt; environment, load a &lt;strong&gt;single&lt;&#x2F;strong&gt; schema model, and generate the library&#x27;s source code:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span&gt;    zio.Runtime.default.unsafeRun {
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;cfg &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;ZLayer.succeed(params)
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;env &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; loader.live ++ (cfg &amp;gt;+&amp;gt; generator.live)
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;task &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;- &lt;&#x2F;span&gt;&lt;span&gt;ZIO.effect(log.info(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;Generating sources for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;$id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;model &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span&gt; loader.loadCodegenModel(id)
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;files &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span&gt; generator.generateServiceCode(id, model)
&lt;&#x2F;span&gt;&lt;span&gt;        } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;yield&lt;&#x2F;span&gt;&lt;span&gt; files.toSeq
&lt;&#x2F;span&gt;&lt;span&gt;      task.provideCustomLayer(env).catchAll { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;generatorError &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        ZIO.effect(log.error(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;Code generator failure: ${&lt;&#x2F;span&gt;&lt;span&gt;generatorError&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;}&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)).as(Seq.empty)
&lt;&#x2F;span&gt;&lt;span&gt;      }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;code&gt;generateServiceCode&lt;&#x2F;code&gt; function returns a &lt;code&gt;Set[File]&lt;&#x2F;code&gt; value containing all the generated source files. This is the result of the &lt;em&gt;source generator task&lt;&#x2F;em&gt;, and &lt;code&gt;sbt&lt;&#x2F;code&gt; uses this information to add the generated files to the compilation.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;referencing-the-generated-projects&quot;&gt;Referencing the generated projects&lt;&#x2F;h4&gt;
&lt;p&gt;When defining downstream projects in the &lt;code&gt;build.sbt&lt;&#x2F;code&gt;, such as integration tests and other examples, we have to refer to the generated projects somehow. There is no value of type &lt;code&gt;Project&lt;&#x2F;code&gt; in scope to do so, but we can do it easily by name using &lt;code&gt;LocalProject&lt;&#x2F;code&gt;. The following example shows how the &lt;code&gt;example1&lt;&#x2F;code&gt; subproject does this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;lazy val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;example1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;Project(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;example1&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, file(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;examples&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;) &#x2F; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;example1&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  .dependsOn(
&lt;&#x2F;span&gt;&lt;span&gt;    core,
&lt;&#x2F;span&gt;&lt;span&gt;    http4s,
&lt;&#x2F;span&gt;&lt;span&gt;    netty,
&lt;&#x2F;span&gt;&lt;span&gt;    LocalProject(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;zio-aws-elasticbeanstalk&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;    LocalProject(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;zio-aws-ec2&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  )
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;parallel-build-on-travis-ci&quot;&gt;Parallel build on Travis CI&lt;&#x2F;h4&gt;
&lt;p&gt;The last thing that I wanted to solve is building the full &lt;code&gt;zio-aws&lt;&#x2F;code&gt; suite on a CI. I am using &lt;a href=&quot;https:&#x2F;&#x2F;travis-ci.org&#x2F;&quot;&gt;Travis CI&lt;&#x2F;a&gt; for my private projects, so that&#x27;s what I built it for. The idea is to split the set of &lt;em&gt;service client libraries&lt;&#x2F;em&gt; to chunks and create &lt;a href=&quot;https:&#x2F;&#x2F;docs.travis-ci.com&#x2F;user&#x2F;build-matrix&#x2F;&quot;&gt;build matrix&lt;&#x2F;a&gt; to run those in parallel. The tricky part is that the set of generated service libraries is dynamic, collected by the code generator.&lt;&#x2F;p&gt;
&lt;p&gt;To solve this, I started to generate the &lt;code&gt;.travis.yml&lt;&#x2F;code&gt;  build descriptor as well. The &lt;em&gt;hand-written&lt;&#x2F;em&gt; part has been moved to &lt;code&gt;.travis.base.yml&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;language&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;scala
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;services&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;docker
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;scala&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;2.12.12
&lt;&#x2F;span&gt;&lt;span&gt;  - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;2.13.3
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;cache&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;directories&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;$HOME&#x2F;.cache&#x2F;coursier
&lt;&#x2F;span&gt;&lt;span&gt;    - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;$HOME&#x2F;.ivy2&#x2F;cache
&lt;&#x2F;span&gt;&lt;span&gt;    - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;$HOME&#x2F;.sbt
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;env&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;COMMANDS=&amp;quot;clean zio-aws-core&#x2F;test zio-aws-akka-http&#x2F;test zio-aws-http4s&#x2F;test zio-aws-netty&#x2F;test&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;COMMANDS=&amp;quot;clean examples&#x2F;compile&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;COMMANDS=&amp;quot;clean integtests&#x2F;test&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;before_install&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;if [ &amp;quot;$COMMANDS&amp;quot; = &amp;quot;clean integtests&#x2F;test&amp;quot; ]; then docker pull localstack&#x2F;localstack; fi
&lt;&#x2F;span&gt;&lt;span&gt;  - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;if [ &amp;quot;$COMMANDS&amp;quot; = &amp;quot;clean integtests&#x2F;test&amp;quot; ]; then docker run -d -p 4566:4566 --env SERVICES=s3,dynamodb --env START_WEB=0 localstack&#x2F;localstack; fi
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;script&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;sbt ++$TRAVIS_SCALA_VERSION -jvm-opts travis&#x2F;jvmopts $COMMANDS
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I use the &lt;code&gt;COMMANDS&lt;&#x2F;code&gt; environment variable to define the parallel sets of &lt;code&gt;sbt&lt;&#x2F;code&gt; commands here. There are three predefined sets: building &lt;code&gt;zio-aws-core&lt;&#x2F;code&gt; and the HTTP implementations, building the &lt;em&gt;example projects&lt;&#x2F;em&gt; and running the &lt;em&gt;integration test&lt;&#x2F;em&gt;. The last two involve generating actual service client code and building them - but only the few that are necessary, so it is not an issue to do that redundantly.&lt;&#x2F;p&gt;
&lt;p&gt;The real &lt;code&gt;.travis.yml&lt;&#x2F;code&gt; file is then generated by running a task &lt;em&gt;manually&lt;&#x2F;em&gt;, &lt;code&gt;sbt generateTravisYaml&lt;&#x2F;code&gt;. It is implemented in the &lt;code&gt;zio-aws-codegen&lt;&#x2F;code&gt; plugin and it loads the &lt;code&gt;.travis.base.yml&lt;&#x2F;code&gt; file and extends the &lt;code&gt;env&lt;&#x2F;code&gt; section with a set of &lt;code&gt;COMMANDS&lt;&#x2F;code&gt; variants, each compiling a subset of the generated subprojects.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;Travis CI can now build &lt;code&gt;zio-aws&lt;&#x2F;code&gt; and run its integration tests. A build runs for hours, but it is stable, and consists of 22 parallel jobs to build all the libraries for both Scala 2.12 and 2.13. At the same time, developing the code generator and the other subprojects and tests became really convenient.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>prox part 3 - effect abstraction and ZIO</title>
        <published>2019-08-13T00:00:00+00:00</published>
        <updated>2019-08-13T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Daniel Vigovszky
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://blog.vigoo.dev/posts/prox-3-zio/"/>
        <id>https://blog.vigoo.dev/posts/prox-3-zio/</id>
        
        <content type="html" xml:base="https://blog.vigoo.dev/posts/prox-3-zio/">&lt;h2 id=&quot;blog-post-series&quot;&gt;Blog post series&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;blog.vigoo.dev&#x2F;posts&#x2F;prox-1-types&#x2F;&quot;&gt;Part 1 - type level programming&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;blog.vigoo.dev&#x2F;posts&#x2F;prox-2-io-akkastreams&#x2F;&quot;&gt;Part 2 - akka streams with cats effect&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;blog.vigoo.dev&#x2F;posts&#x2F;prox-3-zio&#x2F;&quot;&gt;Part 3 - effect abstraction and ZIO&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;blog.vigoo.dev&#x2F;posts&#x2F;prox-4-simplify&#x2F;&quot;&gt;Part 4 - simplified redesign&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;intro&quot;&gt;Intro&lt;&#x2F;h2&gt;
&lt;p&gt;The &lt;a href=&quot;https:&#x2F;&#x2F;blog.vigoo.dev&#x2F;posts&#x2F;prox-3-zio&#x2F;2019-02-10-prox-1-types.html&quot;&gt;first post&lt;&#x2F;a&gt; introduced the &lt;em&gt;prox library&lt;&#x2F;em&gt; and demonstrated the advanced type level programming techniques it uses. Then in the &lt;a href=&quot;https:&#x2F;&#x2F;blog.vigoo.dev&#x2F;posts&#x2F;prox-3-zio&#x2F;2019-03-07-prox-2-io-akkastreams.html&quot;&gt;second part&lt;&#x2F;a&gt; of this series we experimented with replacing the &lt;em&gt;streaming library&lt;&#x2F;em&gt; from &lt;a href=&quot;https:&#x2F;&#x2F;fs2.io&#x2F;&quot;&gt;fs2&lt;&#x2F;a&gt; to &lt;a href=&quot;https:&#x2F;&#x2F;doc.akka.io&#x2F;docs&#x2F;akka&#x2F;2.5&#x2F;stream&#x2F;&quot;&gt;Akka Streams&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;In both cases the library used &lt;a href=&quot;https:&#x2F;&#x2F;typelevel.org&#x2F;cats-effect&#x2F;&quot;&gt;cats-effect&lt;&#x2F;a&gt; for describing side effects. But it did not really take advantage of &lt;em&gt;cats-effect&lt;&#x2F;em&gt;&#x27;s effect abstraction: it explicitly defined everything to be a computation in &lt;a href=&quot;https:&#x2F;&#x2F;typelevel.org&#x2F;cats-effect&#x2F;datatypes&#x2F;io.html&quot;&gt;&lt;code&gt;IO&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;, cats-effect&#x27;s implementation of describing effectful computations.&lt;&#x2F;p&gt;
&lt;p&gt;But we can do better! By not relying on &lt;code&gt;IO&lt;&#x2F;code&gt; but the various type classes the &lt;em&gt;cats-effect&lt;&#x2F;em&gt; library provides we can make &lt;em&gt;prox&lt;&#x2F;em&gt; work with any kind of effect library out of the box. One such example is &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;zio&#x2F;zio&quot;&gt;ZIO&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;effect-abstraction&quot;&gt;Effect abstraction&lt;&#x2F;h2&gt;
&lt;p&gt;Let&#x27;s see an example of how &lt;code&gt;IO&lt;&#x2F;code&gt; used to be used in the library! The following function is in the &lt;code&gt;Start&lt;&#x2F;code&gt; type class, and it starts a process or piped process group:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;apply&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;process&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;PN&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;dontStartOutput&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Boolean = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;blocker&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Blocker&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;         (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;implicit &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;contextShift&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ContextShift&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;IO&lt;&#x2F;span&gt;&lt;span&gt;]): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;IO&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RunningProcesses&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We can observe two things here:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;The function returns an effectful computation in &lt;code&gt;IO&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;An implicit &lt;em&gt;context shifter&lt;&#x2F;em&gt; is needed by the implementations which are calling some streaming functions needing it.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;To make it independent of the effect library implementation we have to get rid of &lt;code&gt;IO&lt;&#x2F;code&gt; and use a generic type instead, let&#x27;s call it &lt;code&gt;F&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;apply&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;process&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;PN&lt;&#x2F;span&gt;&lt;span&gt;, 
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;dontStartOutput&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Boolean = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;, 
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;blocker&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Blocker&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;         (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;implicit
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;concurrent&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Concurrent&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;F&lt;&#x2F;span&gt;&lt;span&gt;],
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;contextShift&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ContextShift&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;F&lt;&#x2F;span&gt;&lt;span&gt;]): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;F&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RunningProcesses&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Beside using &lt;code&gt;F&lt;&#x2F;code&gt; instead of &lt;code&gt;IO&lt;&#x2F;code&gt; everywhere we also have a new requirement, our context type (&lt;code&gt;F&lt;&#x2F;code&gt;) have to have an implementation of the &lt;a href=&quot;https:&#x2F;&#x2F;typelevel.org&#x2F;cats-effect&#x2F;typeclasses&#x2F;concurrent.html&quot;&gt;&lt;code&gt;Concurrent&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; type class.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;Cats-effect&lt;&#x2F;em&gt; defines a hierarchy of type classes to deal with effectful computations. At the time of writing it looks like this:
&lt;img src=&quot;https:&#x2F;&#x2F;typelevel.org&#x2F;cats-effect&#x2F;img&#x2F;cats-effect-typeclasses.svg&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Read the &lt;a href=&quot;https:&#x2F;&#x2F;typelevel.org&#x2F;cats-effect&#x2F;typeclasses&#x2F;&quot;&gt;official documentation&lt;&#x2F;a&gt; for more information.&lt;&#x2F;p&gt;
&lt;p&gt;Prox is based on the &lt;code&gt;ProcessNode&lt;&#x2F;code&gt; type which has two implementations, a single &lt;code&gt;Process&lt;&#x2F;code&gt; or a set of processes piped together to a &lt;code&gt;PipedProcess&lt;&#x2F;code&gt;. Because these types store their I&#x2F;O redirection within themselves, they also have to be enriched with a context type parameter.&lt;&#x2F;p&gt;
&lt;p&gt;For example &lt;code&gt;Process&lt;&#x2F;code&gt; will look like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; Process&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;F&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Out&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Err&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;OutResult&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ErrResult&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;IRS &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RedirectionState&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ORS &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RedirectionState&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ERS &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RedirectionState&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;command&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;arguments&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;],
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;workingDirectory&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Path&lt;&#x2F;span&gt;&lt;span&gt;],
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;inputSource&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ProcessInputSource&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;F&lt;&#x2F;span&gt;&lt;span&gt;],
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;outputTarget&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ProcessOutputTarget&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;F&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Out&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;OutResult&lt;&#x2F;span&gt;&lt;span&gt;],
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;errorTarget&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ProcessErrorTarget&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;F&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Err&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ErrResult&lt;&#x2F;span&gt;&lt;span&gt;],
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;environmentVariables&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Map&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;],
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;removedEnvironmentVariables&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Set&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;])
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span&gt;ProcessNode[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Out&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Err&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;IRS&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ORS&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ERS&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The context parameter (&lt;code&gt;F&lt;&#x2F;code&gt;) is needed because the &lt;em&gt;input source&lt;&#x2F;em&gt; and &lt;em&gt;output target&lt;&#x2F;em&gt; are all representing effectful code such as writing to the standard output, reading from a file, or passing data through concurrent streams.&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s see some examples of how the abstract types of &lt;em&gt;cats-effect&lt;&#x2F;em&gt; can be used to describe the computation, when we cannot rely on &lt;code&gt;IO&lt;&#x2F;code&gt; itself!&lt;&#x2F;p&gt;
&lt;p&gt;The most basic operation is to &lt;em&gt;delay the execution&lt;&#x2F;em&gt; of some code that does not use the effect abstractions. This is how we wrap the Java process API, for example.&lt;&#x2F;p&gt;
&lt;p&gt;While with the original implementation of &lt;em&gt;prox&lt;&#x2F;em&gt; it was done by using the &lt;code&gt;IO&lt;&#x2F;code&gt; constructor:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span&gt;IO {
&lt;&#x2F;span&gt;&lt;span&gt;    systemProcess.isAlive
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;with an arbitrary &lt;code&gt;F&lt;&#x2F;code&gt; we only need to require that it has an implementation of the &lt;code&gt;Sync&lt;&#x2F;code&gt; type class:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;private class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; WrappedProcess&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;F&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Sync&lt;&#x2F;span&gt;&lt;span&gt;,  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;and then use the &lt;code&gt;delay&lt;&#x2F;code&gt; function:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span&gt;Sync[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;F&lt;&#x2F;span&gt;&lt;span&gt;].delay {
&lt;&#x2F;span&gt;&lt;span&gt;    systemProcess.isAlive
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Similarily the &lt;code&gt;Concurrent&lt;&#x2F;code&gt; type class can be used to start a concurrent computation on a &lt;em&gt;fiber&lt;&#x2F;em&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span&gt;Concurrent[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;F&lt;&#x2F;span&gt;&lt;span&gt;].start(stream.compile.toVector)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;type-level&quot;&gt;Type level&lt;&#x2F;h2&gt;
&lt;p&gt;This would be it - except that we need one more thing because of the type level techniques described in the &lt;a href=&quot;https:&#x2F;&#x2F;blog.vigoo.dev&#x2F;posts&#x2F;prox-3-zio&#x2F;2019-02-10-prox-1-types.html&quot;&gt;first post&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;To understand the problem, let&#x27;s see how the &lt;em&gt;output redirection&lt;&#x2F;em&gt; operator works. It is implemented as an &lt;em&gt;extension method&lt;&#x2F;em&gt; on the &lt;code&gt;ProcessNode&lt;&#x2F;code&gt; type:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;implicit class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; ProcessNodeOutputRedirect&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;PN &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ProcessNode&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;NotRedirected&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;]](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;processNode&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;PN&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;[F[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;], To, NewOut, NewOutResult, Result &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ProcessNode[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;, Redirected, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;]]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;to&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: To)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;implicit
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;target&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: CanBeProcessOutputTarget.Aux[F, To, NewOut, NewOutResult],
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;redirectOutput&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: RedirectOutput.Aux[F, PN, To, NewOut, NewOutResult, Result]): Result &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;      redirectOutput(processNode, to)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This extension method basically just finds the appropriate type class implementations and then call it to alter the process node to register the output redirection:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;we are redirecting the output of &lt;code&gt;processNode&lt;&#x2F;code&gt; (of type &lt;code&gt;PN&lt;&#x2F;code&gt;) to &lt;code&gt;to&lt;&#x2F;code&gt; (of type &lt;code&gt;To&lt;&#x2F;code&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;target&lt;&#x2F;code&gt; is the &lt;code&gt;CanBeProcessOutputTarget&lt;&#x2F;code&gt; implementation, containing the actual code to set up the redirection&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;redirectOutput&lt;&#x2F;code&gt; is the process node type specific implementation of the &lt;code&gt;RedirectOutput&lt;&#x2F;code&gt; interface, knowing how to set up the redirection of a &lt;code&gt;Process&lt;&#x2F;code&gt; or a &lt;code&gt;PipedProcess&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;This code would compile, but we won&#x27;t be able to use it. For example for the following code:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span&gt;running &amp;lt;- (Process[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;IO&lt;&#x2F;span&gt;&lt;span&gt;](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;echo&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, List(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;Hello world!&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)) &amp;gt; tempFile.toPath).start(blocker)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;It fails with not being able to resolve the implicits correctly. The exact error of course depends much on the context but one example for the above line could be:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#383a42;&quot;&gt;&lt;code&gt;&lt;span&gt;[error] prox&#x2F;src&#x2F;test&#x2F;scala&#x2F;io&#x2F;github&#x2F;vigoo&#x2F;prox&#x2F;ProcessSpecs.scala:95:63: diverging implicit expansion for type cats.effect.Concurrent[F]
&lt;&#x2F;span&gt;&lt;span&gt;[error] starting with method catsIorTConcurrent in object Concurrent
&lt;&#x2F;span&gt;&lt;span&gt;[error]         running &amp;lt;- (Process[IO](&amp;quot;echo&amp;quot;, List(&amp;quot;Hello world!&amp;quot;)) &amp;gt; tempFile.toPath).start(blocker)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This does not really help understanding the real problem though. As we have seen earlier, in this library the &lt;code&gt;Process&lt;&#x2F;code&gt; types have to be parameterized with the context as well, because they store their redirection logic within themselves. That&#x27;s why we specify it explicitly in the example to be &lt;code&gt;IO&lt;&#x2F;code&gt;: &lt;code&gt;Process[IO](...)&lt;&#x2F;code&gt;. What we would expect is that by tying &lt;code&gt;F[_]&lt;&#x2F;code&gt; to &lt;code&gt;IO&lt;&#x2F;code&gt; at the beginning, all the subsequent operations such as the &lt;code&gt;&amp;gt;&lt;&#x2F;code&gt; redirection would respect this and the context gets inferred to be &lt;code&gt;IO&lt;&#x2F;code&gt; everywhere in the expression.&lt;&#x2F;p&gt;
&lt;p&gt;The compiler cannot do this. If we check the definition of &lt;code&gt;&amp;gt;&lt;&#x2F;code&gt; again, you can see that there is no connection expressed between the type &lt;code&gt;PN&lt;&#x2F;code&gt; (the actual process node type) and &lt;code&gt;F&lt;&#x2F;code&gt; which is used as a type parameter for the implicit parameters.&lt;&#x2F;p&gt;
&lt;p&gt;The fix is to link the two, and we have a technique exactly for this that I described earlier: the &lt;em&gt;aux pattern&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;First let&#x27;s write some code that, in compile time, can &quot;extract&quot; the context type from a process node type:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;trait&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; ContextOf&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;PN&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Context[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;object&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; ContextOf {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Aux[PN, F[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;]] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ContextOf[PN] {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Context[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;F[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;apply&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;[PN &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ProcessNode[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;], F[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;]](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;implicit &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;contextOf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: ContextOf.Aux[PN, F]): Aux[PN, F] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; contextOf
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;implicit def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;contextOfProcess&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;[F[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;], Out, Err, OutResult, ErrResult, IRS &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RedirectionState, ORS &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RedirectionState, ERS &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RedirectionState]:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  Aux[Process[F, Out, Err, OutResult, ErrResult, IRS, ORS, ERS], F] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ContextOf[Process[F, Out, Err, OutResult, ErrResult, IRS, ORS, ERS]] {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;override type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Context[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;F[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;implicit def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;contextOfPipedProcess&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;[
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  F[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;],
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  Out, Err,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  PN1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ProcessNode[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;],
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  PN2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ProcessNode[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;],
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  IRS &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RedirectionState, ORS &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RedirectionState, ERS &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RedirectionState]:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  Aux[PipedProcess[F, Out, Err, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Byte&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;, PN1, PN2, IRS, ORS, ERS], F] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ContextOf[PipedProcess[F, Out, Err, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Byte&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;, PN1, PN2, IRS, ORS, ERS]] {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;override type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Context[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;F[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Both &lt;code&gt;Process&lt;&#x2F;code&gt; and &lt;code&gt;PipedProcess&lt;&#x2F;code&gt; have the context as their first type parameter. By creating the &lt;code&gt;ContextOf&lt;&#x2F;code&gt; type class and the corresponding &lt;code&gt;Aux&lt;&#x2F;code&gt; type we can extend the &lt;code&gt;&amp;gt;&lt;&#x2F;code&gt; operator to &lt;em&gt;require&lt;&#x2F;em&gt; such a connection (a way to get a &lt;code&gt;F[_]&lt;&#x2F;code&gt; context out of a type &lt;code&gt;PN&lt;&#x2F;code&gt;) in compile time, and with the aux pattern it unifies the type parameters and the context type gets &lt;em&gt;chained&lt;&#x2F;em&gt; through all the subsequent calls as we desired:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;F&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;To&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;NewOut&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;NewOutResult&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Result &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ProcessNode&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Redirected&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;]]
&lt;&#x2F;span&gt;&lt;span&gt;    (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;to&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;To&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;implicit
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;contextOf&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ContextOf&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Aux&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;PN&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;F&lt;&#x2F;span&gt;&lt;span&gt;],
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;target&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;CanBeProcessOutputTarget&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Aux&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;F&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;To&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;NewOut&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;NewOutResult&lt;&#x2F;span&gt;&lt;span&gt;],
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;redirectOutput&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RedirectOutput&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Aux&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;F&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;PN&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;To&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;NewOut&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;NewOutResult&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Result&lt;&#x2F;span&gt;&lt;span&gt;]): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Result &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;      redirectOutput(processNode, to)
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;zio&quot;&gt;ZIO&lt;&#x2F;h2&gt;
&lt;p&gt;Now that everything is in place, we can try out whether &lt;em&gt;prox&lt;&#x2F;em&gt; is really working with other effect libraries such as &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;zio&#x2F;zio&quot;&gt;ZIO&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;ZIO&lt;&#x2F;em&gt; has a compatibility layer for &lt;em&gt;cats-effect&lt;&#x2F;em&gt;. It&#x27;s the implementation of the type classes cats-effect provides. It is in an extra library called &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;zio&#x2F;interop-cats&quot;&gt;zio-interop-cats&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;For running processes with &lt;em&gt;prox&lt;&#x2F;em&gt; we can use the following variants of the &lt;code&gt;ZIO&lt;&#x2F;code&gt; type:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;RIO[-R, +A]&lt;&#x2F;code&gt; which is an alias for &lt;code&gt;ZIO[R, scala.Throwable, A]&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;or &lt;code&gt;Task[A]&lt;&#x2F;code&gt; which is an alias for &lt;code&gt;ZIO[scala.Any, scala.Throwable, A]&lt;&#x2F;code&gt; if we don&#x27;t take advantage of the environment parameter &lt;code&gt;R&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;This in fact assuming the correct context only means switching &lt;code&gt;IO&lt;&#x2F;code&gt; to &lt;code&gt;RIO&lt;&#x2F;code&gt; or &lt;code&gt;Task&lt;&#x2F;code&gt; in the type parameter for &lt;code&gt;Process&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;import&lt;&#x2F;span&gt;&lt;span&gt; zio.interop.catz.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;Blocker[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RIO&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Console&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span&gt;]].use { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;blocker &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span&gt; console.putStrLn(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;Starting external process...&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;- &lt;&#x2F;span&gt;&lt;span&gt;(Process[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Task&lt;&#x2F;span&gt;&lt;span&gt;](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;echo&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, List(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;Hello world!&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)) &amp;gt; tempFile.toPath).start(blocker)
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;  } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;yield &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;A nice way to have everything set up for this is to use the interop library&#x27;s &lt;a href=&quot;https:&#x2F;&#x2F;zio.dev&#x2F;docs&#x2F;interop&#x2F;interop_catseffect#cats-app&quot;&gt;&lt;code&gt;CatsApp&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; trait as an entrypoint for the application.&lt;&#x2F;p&gt;
&lt;p&gt;This brings all the necessary implicits in scope and requires you to implement the following function as the entry point of the application:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;run&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;args&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;]): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ZIO&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Environment&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Nothing&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Int&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
        
    </entry>
</feed>
