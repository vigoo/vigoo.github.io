<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <title>vigoo&#x27;s software development blog - ceylon</title>
    <link rel="self" type="application/atom+xml" href="https://blog.vigoo.dev/tags/ceylon/atom.xml"/>
    <link rel="alternate" type="text/html" href="https://blog.vigoo.dev"/>
    <generator uri="https://www.getzola.org/">Zola</generator>
    <updated>2013-11-17T00:00:00+00:00</updated>
    <id>https://blog.vigoo.dev/tags/ceylon/atom.xml</id>
    <entry xml:lang="en">
        <title>Trying out Ceylon - Part 1</title>
        <published>2013-11-17T00:00:00+00:00</published>
        <updated>2013-11-17T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Daniel Vigovszky
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://blog.vigoo.dev/posts/trying-out-ceylon-part-1/"/>
        <id>https://blog.vigoo.dev/posts/trying-out-ceylon-part-1/</id>
        
        <content type="html" xml:base="https://blog.vigoo.dev/posts/trying-out-ceylon-part-1/">&lt;p&gt;Ceylon&#x27;s first production release was announced on 12th of November. I decided to try it out after going through the quick introduction, as it looked quite promising. In a series of posts I&#x27;d like to share my first attempts to use this interesting language.&lt;&#x2F;p&gt;
&lt;p&gt;This first release came with an eclipse plugin as well - after installing it I was immediately able to start working on my test project. In this few hours the plugin seemed to be stable enough, I did not experience any problems.&lt;&#x2F;p&gt;
&lt;p&gt;I have a &lt;code&gt;JVLT&lt;&#x2F;code&gt; file which I created while attending a foreign language course about a year ago. I was using only a limited subset of this application, so basically what I have is a .jvlt file, which is in fact a ZIP archive, in which a &lt;code&gt;dict.xml&lt;&#x2F;code&gt; stores a set of words and for each word one or more translation and the lesson we have learnt it.&lt;&#x2F;p&gt;
&lt;p&gt;See the following example:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;xml&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-xml &quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;dictionary &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;language&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;french&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;version&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;1.4&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;entry &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;e275&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;orth&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;à côté de&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;orth&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;sense &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;e275-s1&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;trans&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;mellett&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;trans&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;sense&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;sense &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;e275-s2&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;trans&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;mellé&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;trans&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;sense&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;lesson&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;8&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;lesson&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;entry&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;dictionary&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;My idea was to write an application that helps me learning and practicing these words.&lt;&#x2F;p&gt;
&lt;p&gt;In this first post I&#x27;m going to load the dictionary from the JVLT file.&lt;&#x2F;p&gt;
&lt;p&gt;To get started, I created a new Ceylon module with the help of the IDE called jvlt. This immediately created three program units: &lt;code&gt;module.ceylon&lt;&#x2F;code&gt;, &lt;code&gt;package.ceylon&lt;&#x2F;code&gt; and &lt;code&gt;run.ceylon&lt;&#x2F;code&gt;. The &lt;code&gt;module.ceylon&lt;&#x2F;code&gt; contains the module definition, which also describes the module&#x27;s dependencies. As I was trying to implement the dictionary reader, I ended up with the following module definition:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ceylon&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-ceylon &quot;&gt;&lt;code class=&quot;language-ceylon&quot; data-lang=&quot;ceylon&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;module &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;jvlt &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;1.0.0&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;shared import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;ceylon&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;file &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;1.0.0&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;ceylon&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;collection &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;1.0.0&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;ceylon&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;interop&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;java &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;1.0.0&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;javax&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;xml &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;7&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;; 
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;ceylon&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;test &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;1.0.0&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Let&#x27;s start with the data model we want to build up! The dictionary consists of words:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ceylon&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-ceylon &quot;&gt;&lt;code class=&quot;language-ceylon&quot; data-lang=&quot;ceylon&quot;&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;Represents a foreign word with one or more senses&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;shared class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Word&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;shared &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;String &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;word&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;shared &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Set&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;senses&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;shared &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Integer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;lesson&lt;&#x2F;span&gt;&lt;span&gt;){ 
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The word, senses and lessons are all shared attributes of this class, accessible from the outside. To make it easy to access the word objects by their foreign word, I&#x27;m currently storing them in a map:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ceylon&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-ceylon &quot;&gt;&lt;code class=&quot;language-ceylon&quot; data-lang=&quot;ceylon&quot;&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;Represents a dictionary of words in a given language&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;shared class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Dictionary&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;shared &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;String &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;language&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;shared &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Map&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;string word&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;words&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Basically that&#x27;s the data model, but I wrapped the whole thing in an abstract JVLT class which looks like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ceylon&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-ceylon &quot;&gt;&lt;code class=&quot;language-ceylon&quot; data-lang=&quot;ceylon&quot;&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;Represents a JVLT file&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;abstract shared class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;JVLT&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;The dictionary stored in this JVLT&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt; 	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;formal shared &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Dictionary &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;dictionary&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The idea is that you get a JVLT instance from one of the helper functions and then use it as a root of the data model.&lt;&#x2F;p&gt;
&lt;p&gt;The next thing is to create this data model from the JVLT files. For this, I needed two things:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Reading a ZIP archive&lt;&#x2F;li&gt;
&lt;li&gt;Parsing XML&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;It turned out that Ceylon&#x27;s file module has ZIP support, with the &lt;code&gt;createZipFileSystem&lt;&#x2F;code&gt; function as an entry point. I made two module-level functions beside the JVLT class for creating instances deriving from the abstract JVLT class:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;loadJVLT&lt;&#x2F;code&gt; which loads a JVLT ZIP archive from the file system&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;loadJVLTFromDictionaryString&lt;&#x2F;code&gt; oads directly a dict.xml-like XML passed as a simple string. I&#x27;m using this for unit testing the XML parser.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Let&#x27;s see the ZIP handling first:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ceylon&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-ceylon &quot;&gt;&lt;code class=&quot;language-ceylon&quot; data-lang=&quot;ceylon&quot;&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;Loads a JVLT file from a `.jvlt` ZIP archive, if possible.&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;shared &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;JVLT&lt;&#x2F;span&gt;&lt;span&gt;? &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;loadJVLT&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;File &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;file&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;zip&lt;&#x2F;span&gt;&lt;span&gt; = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;createZipFileSystem&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;file&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt; 	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;dictPath&lt;&#x2F;span&gt;&lt;span&gt; = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;zip&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;parsePath&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&#x2F;dict.xml&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt; 	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;is &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;File &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;dictFile&lt;&#x2F;span&gt;&lt;span&gt; = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;dictPath&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;resource&lt;&#x2F;span&gt;&lt;span&gt;) {  
&lt;&#x2F;span&gt;&lt;span&gt;  		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;try&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;reader&lt;&#x2F;span&gt;&lt;span&gt; = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;dictFile&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Reader&lt;&#x2F;span&gt;&lt;span&gt;()) {
&lt;&#x2F;span&gt;&lt;span&gt;   
&lt;&#x2F;span&gt;&lt;span&gt;   			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;loadJVLTFromDictionaryString&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;readAll&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;reader&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;  		}
&lt;&#x2F;span&gt;&lt;span&gt; 	} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;else&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;  		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt; 	}
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Well, the error handling is not too sophisticated in this case, it either returns a JVLT or returns &lt;code&gt;null&lt;&#x2F;code&gt; if the given file did not have a &lt;code&gt;dict.xml&lt;&#x2F;code&gt; in it. Other error conditions such as a &lt;code&gt;dict.xml&lt;&#x2F;code&gt; with a wrong format, etc., are not handled currently. As you can see, I&#x27;m reusing my other load function here, once the &lt;code&gt;dict.xml&lt;&#x2F;code&gt; is read.&lt;&#x2F;p&gt;
&lt;p&gt;There are two interesting things here. First, the if statement where we check if the resource is an instance of &lt;code&gt;File&lt;&#x2F;code&gt; and immediately store it in the value called &lt;code&gt;dictFile&lt;&#x2F;code&gt;. The &lt;code&gt;dictPath.resource&lt;&#x2F;code&gt; attribute has the type &lt;code&gt;Resource&lt;&#x2F;code&gt; which is a Ceylon interface. It is either an &lt;code&gt;ExistingResource&lt;&#x2F;code&gt;: &lt;code&gt;Directory&lt;&#x2F;code&gt;, &lt;code&gt;File&lt;&#x2F;code&gt; or &lt;code&gt;Link&lt;&#x2F;code&gt;, or &lt;code&gt;Nil&lt;&#x2F;code&gt;. In any case if it is not a &lt;code&gt;File&lt;&#x2F;code&gt; instance, we just return &lt;code&gt;null&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;For simplicity, I&#x27;m reading the full &lt;code&gt;dict.xml&lt;&#x2F;code&gt; into a string before parsing it. For this purpose I wrote a small helper function &lt;code&gt;readAll&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ceylon&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-ceylon &quot;&gt;&lt;code class=&quot;language-ceylon&quot; data-lang=&quot;ceylon&quot;&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;Reads all lines from a file reader and returns the concatenated string&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;String &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;readAll&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;File&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Reader &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;reader&lt;&#x2F;span&gt;&lt;span&gt;) { 
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;variable &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;String &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;result&lt;&#x2F;span&gt;&lt;span&gt; = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt; 	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;while&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;exists &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;line&lt;&#x2F;span&gt;&lt;span&gt; = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;reader&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;readLine&lt;&#x2F;span&gt;&lt;span&gt;()) {
&lt;&#x2F;span&gt;&lt;span&gt;  		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;result&lt;&#x2F;span&gt;&lt;span&gt; += &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;line&lt;&#x2F;span&gt;&lt;span&gt;; 
&lt;&#x2F;span&gt;&lt;span&gt; 	}
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt; 	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;result&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Probably it&#x27;s not an optimal solution, but works :)&lt;&#x2F;p&gt;
&lt;p&gt;Now that we have our data model and have a way to build it up from XML, we can write some unit tests to see how it works. The Ceylon SDK has a test module and the Ceylon IDE supports running the tests. There is a &lt;a href=&quot;http:&#x2F;&#x2F;ceylon-lang.org&#x2F;documentation&#x2F;1.0&#x2F;ide&#x2F;test-plugin&#x2F;&quot;&gt;separate page in the documentation&lt;&#x2F;a&gt; describing how. It is really simple, I had to add the test module as a dependency, and I created a separate file to hold my test definitions. The class groups the tests together and optionally supports running extra code before&#x2F;after each test case, as in other test frameworks:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ceylon&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-ceylon &quot;&gt;&lt;code class=&quot;language-ceylon&quot; data-lang=&quot;ceylon&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;DictionaryParserTests&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;shared &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;test &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;emptyDictionary&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;	  	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;dic&lt;&#x2F;span&gt;&lt;span&gt; = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;loadJVLTFromDictionaryString&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&amp;lt;dictionary&amp;gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;	  
&lt;&#x2F;span&gt;&lt;span&gt;	  	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;assert&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;dic&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;dictionary&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;words&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;empty&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;	  	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;assert&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;dic&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;dictionary&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;language&lt;&#x2F;span&gt;&lt;span&gt; == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;unknown&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt; 	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;shared &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;test &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;languageAttributeRead&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;  		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;dic&lt;&#x2F;span&gt;&lt;span&gt; = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;loadJVLTFromDictionaryString&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&amp;lt;dictionary language=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;testlang&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&amp;gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;  		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;assert&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;dic&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;dictionary&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;language&lt;&#x2F;span&gt;&lt;span&gt; == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;testlang&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt; 	}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I won&#x27;t paste here all the test code, only a few samples to get the feeling how the Ceylon code looks like. To test whether a given word&#x27;s translations are loaded correctly, I wrote a helper function:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ceylon&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-ceylon &quot;&gt;&lt;code class=&quot;language-ceylon&quot; data-lang=&quot;ceylon&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;assertSenses&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;JVLT &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;jvlt&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;String &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;w&lt;&#x2F;span&gt;&lt;span&gt;, [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;+] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;expectedSenses&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;  
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Word&lt;&#x2F;span&gt;&lt;span&gt;? &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;word&lt;&#x2F;span&gt;&lt;span&gt; = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;jvlt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;dictionary&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;words&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;w&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;exists &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;word&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;assert&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;word&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;senses&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;equals&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;HashSet&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;expectedSenses&lt;&#x2F;span&gt;&lt;span&gt;)));  
&lt;&#x2F;span&gt;&lt;span&gt;    } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;else&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;     	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;fail&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;Word does not exists&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This helper function can be used to assert that a word has been loaded correctly:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ceylon&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-ceylon &quot;&gt;&lt;code class=&quot;language-ceylon&quot; data-lang=&quot;ceylon&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;shared &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;test &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;wordWithMultipleSenses&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;dic&lt;&#x2F;span&gt;&lt;span&gt; = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;loadJVLTFromDictionaryString&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;  		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&amp;lt;dictionary&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;   			&amp;lt;entry id=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;e1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;    			&amp;lt;orth&amp;gt;src1&amp;lt;&#x2F;orth&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;    			&amp;lt;sense id=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;e1&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;s1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;     				&amp;lt;trans&amp;gt;dst1&amp;lt;&#x2F;trans&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;    			&amp;lt;&#x2F;sense&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;    			&amp;lt;sense id=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;e1&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;s2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;     				&amp;lt;trans&amp;gt;dst2&amp;lt;&#x2F;trans&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;    			&amp;lt;&#x2F;sense&amp;gt;    
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;   			&amp;lt;&#x2F;entry&amp;gt;  
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;   		&amp;lt;&#x2F;dictionary&amp;gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt; 	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;assertSenses&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;dic&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;src1&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;dst1&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;dst2&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;]);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now the only problem is that there is no XML parsing support in the Ceylon SDK currently, so it has to be done using Java interop. As I wrote the code to build up the data model from the XML, I wrote several helper functions to make it easier to fit into the language. So let&#x27;s see first how the dictionary loading is defined, and then I&#x27;ll show the helper functions.&lt;&#x2F;p&gt;
&lt;p&gt;The XML parsing is done by two module level functions which are not shared - only used by the JVLT constructor functions I shown before. The first one creates a map entry for a single word:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ceylon&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-ceylon &quot;&gt;&lt;code class=&quot;language-ceylon&quot; data-lang=&quot;ceylon&quot;&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;Creates a word entry for the dictionary&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Word &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;loadEntry&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Element &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;elem&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt; 	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;w&lt;&#x2F;span&gt;&lt;span&gt; = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Word&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;  		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;word&lt;&#x2F;span&gt;&lt;span&gt; = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;selectNodeText&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;elem&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;orth&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;???&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;lesson&lt;&#x2F;span&gt;&lt;span&gt; = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;selectNodeInteger&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;elem&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;lesson&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;senses&lt;&#x2F;span&gt;&lt;span&gt; = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;HashSet&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;selectNodes&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;elem&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;sense&#x2F;trans&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  					.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;((&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Node &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;n&lt;&#x2F;span&gt;&lt;span&gt;) =&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;n&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;textContent&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt; 	};
&lt;&#x2F;span&gt;&lt;span&gt; 	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;w&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;word&lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;w&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;and the second one loads all the words from the XML document:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ceylon&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-ceylon &quot;&gt;&lt;code class=&quot;language-ceylon&quot; data-lang=&quot;ceylon&quot;&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;Loads a dictionary from JVLT&amp;#39;s `dict.xml` format.&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Dictionary &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;loadDictionaryFromXML&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Document &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;doc&lt;&#x2F;span&gt;&lt;span&gt;) { 
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;doc&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;documentElement&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;normalize&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt; 	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Dictionary&lt;&#x2F;span&gt;&lt;span&gt; { 
&lt;&#x2F;span&gt;&lt;span&gt;  		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;language&lt;&#x2F;span&gt;&lt;span&gt; = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;getAttribute&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;doc&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;documentElement&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;language&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;unknown&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;words&lt;&#x2F;span&gt;&lt;span&gt; = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;HashMap&lt;&#x2F;span&gt;&lt;span&gt;({ 
&lt;&#x2F;span&gt;&lt;span&gt;     		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;node &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;selectNodes&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;doc&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;dictionary&#x2F;entry&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;       			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;is &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Element &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;elem&lt;&#x2F;span&gt;&lt;span&gt; = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;node&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;             		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;loadEntry&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;elem&lt;&#x2F;span&gt;&lt;span&gt;) });   
&lt;&#x2F;span&gt;&lt;span&gt; 	};
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The function which returns the JVLT instance uses this function and Java interop to read the dictionary:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ceylon&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-ceylon &quot;&gt;&lt;code class=&quot;language-ceylon&quot; data-lang=&quot;ceylon&quot;&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;Loads a JVLT file by the parsing the dictionary XML directly from a string&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;shared &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;JVLT &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;loadJVLTFromDictionaryString&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;String &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;dictXML&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;docBuilderFactory&lt;&#x2F;span&gt;&lt;span&gt; = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;DocumentBuilderFactory&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;newInstance&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt; 	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;builder&lt;&#x2F;span&gt;&lt;span&gt; = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;docBuilderFactory&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;newDocumentBuilder&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt; 	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;value doc&lt;&#x2F;span&gt;&lt;span&gt; = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;builder&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;parse&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ByteArrayInputStream&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;javaString&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;dictXML&lt;&#x2F;span&gt;&lt;span&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;bytes&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt; 	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;object &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;result &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;JVLT&lt;&#x2F;span&gt;&lt;span&gt;() { 
&lt;&#x2F;span&gt;&lt;span&gt;  		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;dictionary&lt;&#x2F;span&gt;&lt;span&gt; = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;loadDictionaryFromXML&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;doc&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt; 	}
&lt;&#x2F;span&gt;&lt;span&gt; 	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;result&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;There are two things to notice here: we had to convert from Ceylon&#x27;s string to Java string. This is not done automatically and we need the &lt;code&gt;ceylon.interop.java&lt;&#x2F;code&gt; module to do it. In the last lines we define an anonymous class extending from JVLT and overwriting it&#x27;s abstract dictionary attribute. Then this anonymous class instance is returned as the loaded JVLT.&lt;&#x2F;p&gt;
&lt;p&gt;To make the XML parsing less painful, I defined a few helper functions in a separate compilation unit (&lt;code&gt;XmlHelper.ceylon&lt;&#x2F;code&gt;). I won&#x27;t show here the full file but there are some interesting parts. First, from Ceylon you cannot call static methods, but you can import them. I&#x27;m using the following two import statements:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ceylon&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-ceylon &quot;&gt;&lt;code class=&quot;language-ceylon&quot; data-lang=&quot;ceylon&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;org&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;w3c&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;dom&lt;&#x2F;span&gt;&lt;span&gt; { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Node&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;NodeList&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Element&lt;&#x2F;span&gt;&lt;span&gt; }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;javax&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;xml&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;xpath&lt;&#x2F;span&gt;&lt;span&gt; { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;XPathFactory&lt;&#x2F;span&gt;&lt;span&gt; { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;newXPathFactory&lt;&#x2F;span&gt;&lt;span&gt; = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;newInstance&lt;&#x2F;span&gt;&lt;span&gt; },
&lt;&#x2F;span&gt;&lt;span&gt;       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;XPathConstants&lt;&#x2F;span&gt;&lt;span&gt; { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;nodeSet&lt;&#x2F;span&gt;&lt;span&gt; = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;\iNODESET&lt;&#x2F;span&gt;&lt;span&gt; }}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The first one is straightforward. It imports three DOM interfaces. The second one first imports the &lt;code&gt;XPathFactory.newInstance&lt;&#x2F;code&gt; static method and also renames it, as newInstance is a too generic name without its class name as a prefix. The third line imports a constant value and gives it a Ceylon-compatible name. Because in Ceylon only the types can start with an uppercase character, we have to use a special and ugly syntax which helps the interoperability - prefixing it with &lt;code&gt;\i&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;code&gt;ceylon.interop.java&lt;&#x2F;code&gt; module has helper classes to make Java Iterable objects iterable in Ceylon, but unfortunately the &lt;code&gt;NodeList&lt;&#x2F;code&gt; interface is not iterable in Java either. So I wrote a simple wrapper that iterates through a node list:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ceylon&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-ceylon &quot;&gt;&lt;code class=&quot;language-ceylon&quot; data-lang=&quot;ceylon&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;NodeListIterator&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;NodeList &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;nodes&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;satisfies &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Iterable&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Node&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;shared actual default &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Iterator&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Node&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;iterator&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;  		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;object &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;it &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;satisfies &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Iterator&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Node&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; {   
&lt;&#x2F;span&gt;&lt;span&gt;   			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;variable &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Integer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span&gt; = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;   
&lt;&#x2F;span&gt;&lt;span&gt;   			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;shared actual &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Node&lt;&#x2F;span&gt;&lt;span&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Finished &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;next&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span&gt; &amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;nodes&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;length&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;     				&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;nodes&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;item&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span&gt;++);
&lt;&#x2F;span&gt;&lt;span&gt;    			} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;else&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;     				&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;finished&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    			}
&lt;&#x2F;span&gt;&lt;span&gt;   			}
&lt;&#x2F;span&gt;&lt;span&gt;  		}
&lt;&#x2F;span&gt;&lt;span&gt;  		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;it&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt; 	}
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Using this iterator and the imports I wrote a &lt;code&gt;selectNodes&lt;&#x2F;code&gt; function to run XPath expressions and return the result as a Ceylon iterable:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ceylon&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-ceylon &quot;&gt;&lt;code class=&quot;language-ceylon&quot; data-lang=&quot;ceylon&quot;&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Node&lt;&#x2F;span&gt;&lt;span&gt;*} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;selectNodes&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Node &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;root&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;String &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;xpath&lt;&#x2F;span&gt;&lt;span&gt;) { 
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;factory&lt;&#x2F;span&gt;&lt;span&gt; = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;newXPathFactory&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt; 	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;xpathCompiler&lt;&#x2F;span&gt;&lt;span&gt; = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;factory&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;newXPath&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt; 	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;expr&lt;&#x2F;span&gt;&lt;span&gt; = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;xpathCompiler&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;compile&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;xpath&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt; 	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;nodeList&lt;&#x2F;span&gt;&lt;span&gt; = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;expr&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;evaluate&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;root&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;nodeSet&lt;&#x2F;span&gt;&lt;span&gt;); 
&lt;&#x2F;span&gt;&lt;span&gt; 	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;is &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;NodeList &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;nodeList&lt;&#x2F;span&gt;&lt;span&gt;) {  
&lt;&#x2F;span&gt;&lt;span&gt;  		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;NodeListIterator&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;nodeList&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt; 	}
&lt;&#x2F;span&gt;&lt;span&gt; 	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;else&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;  		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; [];
&lt;&#x2F;span&gt;&lt;span&gt; 	}
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Using this function it is very easy to write a variant that selects a single node:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ceylon&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-ceylon &quot;&gt;&lt;code class=&quot;language-ceylon&quot; data-lang=&quot;ceylon&quot;&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Node&lt;&#x2F;span&gt;&lt;span&gt;? &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;selectNode&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Node &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;root&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;String &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;xpath&lt;&#x2F;span&gt;&lt;span&gt;) { 
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;selectNodes&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;root&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;xpath&lt;&#x2F;span&gt;&lt;span&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;first&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;There are some other helper functions returning the node&#x27;s text, converting it to integer, etc. but I think they are not that interesting. Now that I have my data model which is built from my JVLT file, the next thing is to make a user interface somehow where the vocabulary can be shown an the user&#x27;s knowledge can be tested&#x2F;improved. This will be the topic of some future posts, as soon as I have time to experiment more with this new language.&lt;&#x2F;p&gt;
</content>
        
    </entry>
</feed>
