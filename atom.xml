<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>vigoo's software development blog</title>
    <link href="http://vigoo.github.io/atom.xml" rel="self" />
    <link href="http://vigoo.github.io" />
    <id>http://vigoo.github.io/atom.xml</id>
    <author>
        <name>Daniel Vigovszky</name>
        <email>daniel.vigovszky@gmail.com</email>
    </author>
    <updated>2019-02-10T00:00:00Z</updated>
    <entry>
    <title>prox part 1 - type level programming</title>
    <link href="http://vigoo.github.io/posts/2019-02-10-prox-1-types.html" />
    <id>http://vigoo.github.io/posts/2019-02-10-prox-1-types.html</id>
    <published>2019-02-10T00:00:00Z</published>
    <updated>2019-02-10T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on February 10, 2019
    
</div>

<h2 id="intro">Intro</h2>
<p>I started writing <a href="https://github.com/vigoo/prox">prox</a> at the end of 2017 for two reasons. First, I never liked any of the existing solutions for running external processes and capture their input/output streams. And I just returned from the <a href="https://scala.io/">scala.io conference</a> full of inspiration; I wanted to try out some techniques and libraries and this seemed to be a nice small project to do so.</p>
<p>Since then, <a href="https://github.com/vigoo/prox">prox</a> has been proved to be useful, we are using it at <a href="https://prezi.com/">Prezi</a> in all our Scala projects where we have to deal with external processes. The last stable version was created last October, after <a href="https://typelevel.org/cats-effect/">cats-effect 1.0</a> and <a href="https://fs2.io/">fs2 1.0</a> was released.</p>
<p>This is the first part of a series of blog posts dedicated to this library. In the first one I’m going to talk about <a href="https://github.com/milessabin/shapeless">shapeless</a> and <em>type level programming</em> techniques are used to create a strongly typed interface for starting system processes. In future posts I will explore replacing its dependencies such as using <a href="https://doc.akka.io/docs/akka/2.5/stream/">akka-streams</a> instead of <a href="https://fs2.io/">fs2</a> or <a href="https://scalaz.github.io/scalaz-zio/">ZIO</a> instead of <a href="https://typelevel.org/cats-effect/">cats-effect</a>. These different versions will be a good opportunity to do some performance comparison, and to close the series with creating a new version of the library which is easier to use in the alternative environments.</p>
<h2 id="limiting-redirection">Limiting redirection</h2>
<p>When I started writing the library I wanted to explore how I can express some strict constraints on the type level:</p>
<ul>
<li>A process can have its input, output and error streams redirected, but only once</li>
<li>Processes without redirected output can be piped to processes without a redirected input</li>
</ul>
<p>In prox <em>0.2.1</em> a single system process is described by the following type:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode scala"><code class="sourceCode scala"><a class="sourceLine" id="cb1-1" title="1"><span class="kw">class</span> Process[Out, Err, OutResult, ErrResult, </a>
<a class="sourceLine" id="cb1-2" title="2">              IRS &lt;: RedirectionState, ORS &lt;: RedirectionState, ERS &lt;: RedirectionState](</a>
<a class="sourceLine" id="cb1-3" title="3">    <span class="kw">val</span> command: String,</a>
<a class="sourceLine" id="cb1-4" title="4">    <span class="kw">val</span> arguments: List[String],</a>
<a class="sourceLine" id="cb1-5" title="5">    <span class="kw">val</span> workingDirectory: Option[Path],</a>
<a class="sourceLine" id="cb1-6" title="6">    <span class="kw">val</span> inputSource: ProcessInputSource,</a>
<a class="sourceLine" id="cb1-7" title="7">    <span class="kw">val</span> outputTarget: ProcessOutputTarget[Out, OutResult],</a>
<a class="sourceLine" id="cb1-8" title="8">    <span class="kw">val</span> errorTarget: ProcessErrorTarget[Err, ErrResult],</a>
<a class="sourceLine" id="cb1-9" title="9">    <span class="kw">val</span> environmentVariables: Map[String, String])</a>
<a class="sourceLine" id="cb1-10" title="10">    <span class="kw">extends</span> ProcessNode[Out, Err, IRS, ORS, ERS] {</a>
<a class="sourceLine" id="cb1-11" title="11">        <span class="co">// ...</span></a>
<a class="sourceLine" id="cb1-12" title="12">}</a></code></pre></div>
<p>but let’s focus first on the requirement to be able to redirect one of the streams <em>maximum once</em>. This is encoded by the <code>IRS</code>, <code>ORS</code> and <code>ERS</code> type parameters, which are all have to be subtypes of <code>RedirectionState</code>. <code>RedirectionState</code> is a <strong>phantom type</strong>; there are no values ever created of this type, it is only used in type signatures to encode whether one of the three streams are already redirected or not:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode scala"><code class="sourceCode scala"><a class="sourceLine" id="cb2-1" title="1"><span class="co">/**</span> Phantom type representing the redirection state of a process <span class="co">*/</span></a>
<a class="sourceLine" id="cb2-2" title="2"><span class="kw">sealed</span> <span class="kw">trait</span> RedirectionState</a>
<a class="sourceLine" id="cb2-3" title="3"></a>
<a class="sourceLine" id="cb2-4" title="4"><span class="co">/**</span> Indicates that the given channel is not redirected yet <span class="co">*/</span></a>
<a class="sourceLine" id="cb2-5" title="5"><span class="kw">trait</span> NotRedirected <span class="kw">extends</span> RedirectionState</a>
<a class="sourceLine" id="cb2-6" title="6"></a>
<a class="sourceLine" id="cb2-7" title="7"><span class="co">/**</span> Indicates that the given channel has already been redirected <span class="co">*/</span></a>
<a class="sourceLine" id="cb2-8" title="8"><span class="kw">trait</span> Redirected <span class="kw">extends</span> RedirectionState</a></code></pre></div>
<p>So for example with a simplified model of a <em>process</em>, <code>Process[IRS &lt;: RedirectionState, ORS &lt;: RedirectionState, ERS &lt;: RedirectionState]</code>, using the output redirection operator <code>&gt;</code> would change the types in the following way:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode scala"><code class="sourceCode scala"><a class="sourceLine" id="cb3-1" title="1"><span class="kw">val</span> p1: Process[NotRedirected, NotRedirected, NotRedirected] = ???</a>
<a class="sourceLine" id="cb3-2" title="2"><span class="kw">val</span> p2: Process[NotRedirected, Redirected, NotRedirected] = p1 &gt; (home / <span class="st">&quot;tmp&quot;</span> / <span class="st">&quot;out.txt&quot;</span>)</a>
<a class="sourceLine" id="cb3-3" title="3"><span class="kw">val</span> p3 = p2 &gt; (home / <span class="st">&quot;tmp&quot;</span> / <span class="st">&quot;another.txt&quot;</span>) <span class="co">// THIS MUST NOT COMPILE</span></a></code></pre></div>
<p>How can we restrict the redirect function to only work on <code>Process[_, NotRedirected, _]</code>? We can define it as an <strong>extension method</strong> with an implicit class (once again this is a simplified version focusing only on the <em>redirection state</em> handling):</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode scala"><code class="sourceCode scala"><a class="sourceLine" id="cb4-1" title="1">  <span class="kw">implicit</span> <span class="kw">class</span> ProcessNodeOutputRedirect[</a>
<a class="sourceLine" id="cb4-2" title="2">      IRS &lt;: RedirectionState, </a>
<a class="sourceLine" id="cb4-3" title="3">      ERS &lt;: RedirectionState, </a>
<a class="sourceLine" id="cb4-4" title="4">      PN &lt;: Process[IRS, NotRedirected, ERS]](process: PN) {</a>
<a class="sourceLine" id="cb4-5" title="5"></a>
<a class="sourceLine" id="cb4-6" title="6">    <span class="kw">def</span> &gt;[To](to: To)(<span class="kw">implicit</span> target: CanBeProcessOutputTarget[To]): Process[IRS, Redirected, ERS] = ???</a>
<a class="sourceLine" id="cb4-7" title="7">  }</a></code></pre></div>
<p>By forcing the <code>ORS</code> type parameter to be <code>NotRedirected</code> and setting it to <code>Redirected</code> in the result type we can guarantee that this function can only be called on a process that does not have their output redirected yet. The <em>target</em> of the redirection is extensible through the <code>CanBeProcessOutputTarget</code> type class, as we will see later.</p>
<h2 id="dependent-types">Dependent types</h2>
<p>Reality is much more complicated, because of <em>process piping</em> and because the process types encode the redirection result types too. Let’s get back to our <code>&gt;</code> function and see how we could modify it so it works with piped processes too. Anyway, how is process piping encoded in this library?</p>
<p>Two processes connected through a pipe are represented by the <code>PipedProcess</code> class. Both <code>Procses</code> and <code>PipedProcess</code> implements the following trait:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode scala"><code class="sourceCode scala"><a class="sourceLine" id="cb5-1" title="1"><span class="kw">sealed</span> <span class="kw">trait</span> ProcessNode[Out, Err, IRS &lt;: RedirectionState, ORS &lt;: RedirectionState, ERS &lt;: RedirectionState]</a></code></pre></div>
<p>We’ve already seen <code>Process</code>. <code>PipedProcess</code> is a bit more complicated:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode scala"><code class="sourceCode scala"><a class="sourceLine" id="cb6-1" title="1"><span class="kw">class</span> PipedProcess[Out, Err, PN1Out, </a>
<a class="sourceLine" id="cb6-2" title="2">                   PN1 &lt;: ProcessNode[_, _, _, _, _], </a>
<a class="sourceLine" id="cb6-3" title="3">                   PN2 &lt;: ProcessNode[_, _, _, _, _], </a>
<a class="sourceLine" id="cb6-4" title="4">                   IRS &lt;: RedirectionState, ORS &lt;: RedirectionState, ERS &lt;: RedirectionState]</a>
<a class="sourceLine" id="cb6-5" title="5">    (<span class="kw">val</span> from: PN1, <span class="kw">val</span> createTo: PipeConstruction[PN1Out] =&gt; PN2)</a>
<a class="sourceLine" id="cb6-6" title="6">    <span class="kw">extends</span> ProcessNode[Out, Err, IRS, ORS, ERS] {</a>
<a class="sourceLine" id="cb6-7" title="7">        <span class="co">// ...</span></a>
<a class="sourceLine" id="cb6-8" title="8">}</a></code></pre></div>
<p>To make <code>&gt;</code> work on both, we can start by modifying its definition to work on <em>any</em> <code>ProcessNode</code> not just <code>Process</code> (omitting the output type params for now):</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode scala"><code class="sourceCode scala"><a class="sourceLine" id="cb7-1" title="1"><span class="kw">implicit</span> <span class="kw">class</span> ProcessNodeOutputRedirect[</a>
<a class="sourceLine" id="cb7-2" title="2">    IRS &lt;: RedirectionState, </a>
<a class="sourceLine" id="cb7-3" title="3">    ERS &lt;: RedirectionState, </a>
<a class="sourceLine" id="cb7-4" title="4">    PN &lt;: ProcessNode[IRS, NotRedirected, ERS]](process: PN) {</a>
<a class="sourceLine" id="cb7-5" title="5"></a>
<a class="sourceLine" id="cb7-6" title="6">  <span class="kw">def</span> &gt;[To](to: To)(<span class="kw">implicit</span> target: CanBeProcessOutputTarget[To]): ProcessNode[IRS, Redirected, ERS] = ???</a>
<a class="sourceLine" id="cb7-7" title="7">}</a></code></pre></div>
<p>This has a serious problem though. The output type is <code>ProcessNode</code> and not the “real” process type, which means that we lose type information and all the other dependent typed operations will not work. We have to make the result type <strong>depend</strong> on the input!</p>
<p>The <strong>Aux pattern</strong>, used heavily in the <a href="https://github.com/milessabin/shapeless">shapeless</a> library provides a nice pattern for writing such code. We start by defining a <em>type class</em> for describing the operation, in this case <em>redirecting the output channel of a process</em>:</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode scala"><code class="sourceCode scala"><a class="sourceLine" id="cb8-1" title="1"><span class="kw">trait</span> RedirectOutput[PN &lt;: ProcessNode[_, NotRedirected, _], To] {</a>
<a class="sourceLine" id="cb8-2" title="2">    <span class="kw">type</span> Result &lt;: ProcessNode[_, Redirected, _]</a>
<a class="sourceLine" id="cb8-3" title="3"></a>
<a class="sourceLine" id="cb8-4" title="4">    <span class="kw">def</span> <span class="fu">apply</span>(process: PN, to: To)(<span class="kw">implicit</span> target: CanBeProcessOutputTarget[To]): Result</a>
<a class="sourceLine" id="cb8-5" title="5">}</a>
<a class="sourceLine" id="cb8-6" title="6"></a>
<a class="sourceLine" id="cb8-7" title="7"><span class="kw">object</span> RedirectOutput {</a>
<a class="sourceLine" id="cb8-8" title="8">    <span class="kw">type</span> Aux[PN &lt;: ProcessNode[_, NotRedirected, _], To, Result0] = </a>
<a class="sourceLine" id="cb8-9" title="9">        RedirectOutput[PN, To] { <span class="kw">type</span> Result = Result0 }</a>
<a class="sourceLine" id="cb8-10" title="10"></a>
<a class="sourceLine" id="cb8-11" title="11">    <span class="co">// ... type class instances</span></a>
<a class="sourceLine" id="cb8-12" title="12">}</a></code></pre></div>
<p>The type class itself is straightforward. We have to implement it for both <code>Process</code> and <code>PipedProcess</code> and set the <code>Result</code> type accordingly, then implement <code>apply</code> that sets up the actual redirection. But what the <code>Aux</code> type is for?</p>
<p>Without it we may try to use the <code>RedirectionOutput</code> type class like this:</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode scala"><code class="sourceCode scala"><a class="sourceLine" id="cb9-1" title="1"><span class="kw">implicit</span> <span class="kw">class</span> ProcessNodeOutputRedirect[</a>
<a class="sourceLine" id="cb9-2" title="2">    IRS &lt;: RedirectionState, </a>
<a class="sourceLine" id="cb9-3" title="3">    ERS &lt;: RedirectionState, </a>
<a class="sourceLine" id="cb9-4" title="4">    PN &lt;: ProcessNode[IRS, NotRedirected, ERS]](process: PN) {</a>
<a class="sourceLine" id="cb9-5" title="5"></a>
<a class="sourceLine" id="cb9-6" title="6">  <span class="kw">def</span> &gt;[To](to: To)</a>
<a class="sourceLine" id="cb9-7" title="7">           (<span class="kw">implicit</span> target: CanBeProcessOutputTarget[To],</a>
<a class="sourceLine" id="cb9-8" title="8">            redirectOutput: RedirectOutput[PN, To]): redirectOutput.<span class="fu">Result</span> = <span class="fu">redirectOutput</span>(to)</a>
<a class="sourceLine" id="cb9-9" title="9">}</a></code></pre></div>
<p>Here the result is a <em>path dependent type</em>. This may work in some simple cases but have two serious issues:</p>
<ul>
<li>It is not possible to use <code>redirectOutput.Result</code> in the <em>parameter block</em> of the function, so if another type class needed it as a type parameter we could not pass it.</li>
<li>Further implicit resolutions and type level operations will quickly break as the compiler will not be able to unify the various path dependent types</li>
</ul>
<p>The <code>Aux</code> helper type solves both problems if we use it like this:</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode scala"><code class="sourceCode scala"><a class="sourceLine" id="cb10-1" title="1"><span class="kw">implicit</span> <span class="kw">class</span> ProcessNodeOutputRedirect[</a>
<a class="sourceLine" id="cb10-2" title="2">    IRS &lt;: RedirectionState, </a>
<a class="sourceLine" id="cb10-3" title="3">    ERS &lt;: RedirectionState, </a>
<a class="sourceLine" id="cb10-4" title="4">    PN &lt;: ProcessNode[IRS, NotRedirected, ERS]](process: PN) {</a>
<a class="sourceLine" id="cb10-5" title="5"></a>
<a class="sourceLine" id="cb10-6" title="6">  <span class="kw">def</span> &gt;[To, Result &lt;: ProcessNode[_, Redirected, _]](to: To)</a>
<a class="sourceLine" id="cb10-7" title="7">           (<span class="kw">implicit</span> target: CanBeProcessOutputTarget[To],</a>
<a class="sourceLine" id="cb10-8" title="8">            redirectOutput: RedirectOutput.<span class="fu">Aux</span>[PN, To, Result]): Result = <span class="fu">redirectOutput</span>(to)</a>
<a class="sourceLine" id="cb10-9" title="9">}</a></code></pre></div>
<p>By lifting the <code>Result</code> from the type class instance to a type parameter the compiler can now “extract” the calculated type from <code>redirectOutput.Result</code> to the <code>&gt;</code> function’s <code>Result</code> type parameter and use it directly, both for other further type requirements or as we do here, in the result type.</p>
<p>This is the basic pattern used for <em>all</em> the operations in prox.</p>
<h2 id="starting-the-processes">Starting the processes</h2>
<p>So far we just combined purely functional data structures in a complicated way. The result value may encode the launching of several system processes that are connected via pipes to each other and possibly other streams as we will see.</p>
<p>When we eventually decide to <em>start</em> these processes, we need a way to observe their status, wait for them to stop, get their exit code, and to access the data sent to the output streams if they were redirected. And we need this <em>per process</em>, while launching the whole process graph in a <em>single step</em>.</p>
<p>First let’s model a single <em>running process</em>:</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode scala"><code class="sourceCode scala"><a class="sourceLine" id="cb11-1" title="1"><span class="kw">trait</span> RunningProcess[Out, OutResult, ErrResult] {</a>
<a class="sourceLine" id="cb11-2" title="2">    <span class="kw">def</span> isAlive: IO[Boolean]</a>
<a class="sourceLine" id="cb11-3" title="3">    <span class="kw">def</span> <span class="fu">waitForExit</span>(): IO[ProcessResult[OutResult, ErrResult]]</a>
<a class="sourceLine" id="cb11-4" title="4">    <span class="kw">def</span> <span class="fu">terminate</span>(): IO[ProcessResult[OutResult, ErrResult]]</a>
<a class="sourceLine" id="cb11-5" title="5">}</a></code></pre></div>
<p>and <code>ProcessResult</code> that represents an already <em>terminated process</em>:</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode scala"><code class="sourceCode scala"><a class="sourceLine" id="cb12-1" title="1"><span class="kw">case</span> <span class="kw">class</span> ProcessResult[OutResult, ErrResult](</a>
<a class="sourceLine" id="cb12-2" title="2">    exitCode: Int, </a>
<a class="sourceLine" id="cb12-3" title="3">    fullOutput: OutResult, </a>
<a class="sourceLine" id="cb12-4" title="4">    fullError: ErrResult</a>
<a class="sourceLine" id="cb12-5" title="5">)</a></code></pre></div>
<p>Now we need to define a <code>start</code> extension method on <code>ProcessNode</code> that returns somehow one well typed <code>RunningProcess</code> for <em>each</em> system process that it starts.</p>
<p>Let’s forget for a second about having multiple processes piped together and just consider the single process case. For that, we would need somehing like this (the <code>Out</code> parameter is needed only for piping so I omitted it):</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode scala"><code class="sourceCode scala"><a class="sourceLine" id="cb13-1" title="1"><span class="kw">def</span> start: IO[RunningProcess[OutResult, ErrResult]]</a></code></pre></div>
<p>Now we can see why <code>Process</code> has those additional type paramters. It is not enough to encode whether the output and error channels were redirected or not, we also have to encode the expected <em>result type</em> of redirecting these. By storing these types in type parameters of <code>Process</code> we can easily imagine that by using the pattern described in the previous section, the <em>result type</em> can <strong>depend</strong> on what we redirected the process to.</p>
<p>Let’s see some examples of what this means!</p>
<table>
<colgroup>
<col style="width: 35%" />
<col style="width: 64%" />
</colgroup>
<thead>
<tr class="header">
<th>Target</th>
<th>Result type</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>A file system path</td>
<td>The result type is <code>Unit</code>, the redirection happens on OS level</td>
</tr>
<tr class="even">
<td>Sink</td>
<td>The result type is <code>Unit</code>, only the sink’s side effect matters</td>
</tr>
<tr class="odd">
<td>Pipe with monoid elem type</td>
<td>The stream is folded by the monoid, the result type is <code>T</code></td>
</tr>
<tr class="even">
<td>Pipe with non-monoid elem type</td>
<td>The stream captures the elements in a vector, the result type is <code>Vector[T]</code></td>
</tr>
<tr class="odd">
<td>Custom fold function</td>
<td>The result type is the function’s result type</td>
</tr>
</tbody>
</table>
<p>The <code>CanBeProcessOutputTarget</code> type class we’ve seen earlier defines both the stream element type and the result type:</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode scala"><code class="sourceCode scala"><a class="sourceLine" id="cb14-1" title="1"><span class="kw">trait</span> CanBeProcessOutputTarget[To] {</a>
<a class="sourceLine" id="cb14-2" title="2">  <span class="co">/**</span> Output stream element type <span class="co">*/</span></a>
<a class="sourceLine" id="cb14-3" title="3">  <span class="kw">type</span> Out</a>
<a class="sourceLine" id="cb14-4" title="4">  <span class="co">/**</span> Result type of running the output stream <span class="co">*/</span></a>
<a class="sourceLine" id="cb14-5" title="5">  <span class="kw">type</span> OutResult</a>
<a class="sourceLine" id="cb14-6" title="6"></a>
<a class="sourceLine" id="cb14-7" title="7">  <span class="kw">def</span> <span class="fu">apply</span>(to: To): ProcessOutputTarget[Out, OutResult]</a>
<a class="sourceLine" id="cb14-8" title="8">}</a></code></pre></div>
<p><code>ProcessOutputTarget</code> contains the actual IO code to build the redirection of the streams, I won’t get into details in this post. Note that there are similar type classes for <em>error</em> and <em>input</em> redirection too.</p>
<p>For two processes piped together we have to provide <em>two</em> <code>RunningProcess</code> instances with the proper result type parameters. So we can see that it is not enough that the <em>redirection</em> stores the result type in the process type, the <em>start</em> method must be dependent typed too.</p>
<p>One way to encode this in the type system would be something like this (simplified):</p>
<div class="sourceCode" id="cb15"><pre class="sourceCode scala"><code class="sourceCode scala"><a class="sourceLine" id="cb15-1" title="1"><span class="kw">val</span> p1 = Process()</a>
<a class="sourceLine" id="cb15-2" title="2"><span class="kw">val</span> p2 = Process()</a>
<a class="sourceLine" id="cb15-3" title="3"><span class="kw">val</span> p3 = Process()</a>
<a class="sourceLine" id="cb15-4" title="4"></a>
<a class="sourceLine" id="cb15-5" title="5"><span class="kw">val</span> rp1: IO[RunningProcess] = p1.<span class="fu">start</span></a>
<a class="sourceLine" id="cb15-6" title="6"><span class="kw">val</span> rp2: IO[(RunningProcess, RunningProcess)] = (p1 | p2).<span class="fu">start</span></a>
<a class="sourceLine" id="cb15-7" title="7"><span class="kw">val</span> rp3: IO[(RunningProcess, RunningProcess, RunningProcess)] = (p1 | p2 | p3).<span class="fu">start</span></a></code></pre></div>
<p>We encode piped processes with tuples of <code>RunningProcess</code> and single process with a single <code>RunningProcess</code>. To implement this we can make use of the <a href="https://github.com/milessabin/shapeless">shapeless</a> library’s <code>HList</code> implementation.</p>
<p>HLists are heterogeneous lists; basically the same thing as a tuple, but with all the “usual” list-like functions implemented as dependent typed functions. We can implement the <code>start</code> method more easily by building a <code>HList</code>, while still keep the desired interface as <a href="https://github.com/milessabin/shapeless">shapeless</a> implements a conversion from <code>HList</code> to tuples.</p>
<p>We can define two separate <em>start functions</em>, one producing <code>HList</code> and another the tuples (IO releated parameters omitted):</p>
<div class="sourceCode" id="cb16"><pre class="sourceCode scala"><code class="sourceCode scala"><a class="sourceLine" id="cb16-1" title="1"><span class="kw">def</span> start[RP](<span class="kw">implicit</span> start: Start.<span class="fu">Aux</span>[PN, RP, _]]): IO[RP] = ???</a>
<a class="sourceLine" id="cb16-2" title="2"><span class="kw">def</span> startHL[RPL &lt;: HList](<span class="kw">implicit</span> start: Start.<span class="fu">Aux</span>[PN, _, RP[IO]): IO[RPL] = ???</a></code></pre></div>
<p>The <code>Start</code> type class calculates both the tupled and the <code>HList</code> version’s result type. The implementation’s responsibility is to start the actual system processes and wire the streams together.</p>
<p>The interesting part is how we use <em>type level calculations</em> from <a href="https://github.com/milessabin/shapeless">shapeless</a> to calculte the tuple and <code>HList</code> types for piped processes. This is all done using the technique I described earlier, but may look a bit shocking first. Let’s take a look!</p>
<div class="sourceCode" id="cb17"><pre class="sourceCode scala"><code class="sourceCode scala"><a class="sourceLine" id="cb17-1" title="1"><span class="kw">implicit</span> <span class="kw">def</span> startPipedProcess[</a>
<a class="sourceLine" id="cb17-2" title="2">  Out, Err,</a>
<a class="sourceLine" id="cb17-3" title="3">  PN1 &lt;: ProcessNode[_, _, _, _, _],</a>
<a class="sourceLine" id="cb17-4" title="4">  PN2 &lt;: ProcessNode[_, _, _, _, _],</a>
<a class="sourceLine" id="cb17-5" title="5">  IRS &lt;: RedirectionState, ORS &lt;: RedirectionState, ERS &lt;: RedirectionState,</a>
<a class="sourceLine" id="cb17-6" title="6">  RP1, RPL1 &lt;: HList, RP1Last &lt;: RunningProcess[_, _, _],</a>
<a class="sourceLine" id="cb17-7" title="7">  RP2, RPL2 &lt;: HList, RP2Head &lt;: RunningProcess[_, _, _], RP2Tail &lt;: HList,</a>
<a class="sourceLine" id="cb17-8" title="8">  RPT, RPL &lt;: HList]</a>
<a class="sourceLine" id="cb17-9" title="9">  (<span class="kw">implicit</span></a>
<a class="sourceLine" id="cb17-10" title="10">   start1: Start.<span class="fu">Aux</span>[PN1, RP1, RPL1],</a>
<a class="sourceLine" id="cb17-11" title="11">   start2: Start.<span class="fu">Aux</span>[PN2, RP2, RPL2],</a>
<a class="sourceLine" id="cb17-12" title="12">   last1: Last.<span class="fu">Aux</span>[RPL1, RP1Last],</a>
<a class="sourceLine" id="cb17-13" title="13">   rp1LastType: RP1Last &lt;:&lt; RunningProcess[Byte, _, _],</a>
<a class="sourceLine" id="cb17-14" title="14">   hcons2: IsHCons.<span class="fu">Aux</span>[RPL2, RP2Head, RP2Tail],</a>
<a class="sourceLine" id="cb17-15" title="15">   prepend: Prepend.<span class="fu">Aux</span>[RPL1, RPL2, RPL],</a>
<a class="sourceLine" id="cb17-16" title="16">   tupler: Tupler.<span class="fu">Aux</span>[RPL, RPT]):</a>
<a class="sourceLine" id="cb17-17" title="17">  Aux[PipedProcess[Out, Err, Byte, PN1, PN2, IRS, ORS, ERS], RPT, RPL] =</a>
<a class="sourceLine" id="cb17-18" title="18"></a>
<a class="sourceLine" id="cb17-19" title="19">    <span class="kw">new</span> Start[PipedProcess[Out, Err, Byte, PN1, PN2, IRS, ORS, ERS]] {</a>
<a class="sourceLine" id="cb17-20" title="20">      <span class="kw">override</span> <span class="kw">type</span> RunningProcesses = RPT</a>
<a class="sourceLine" id="cb17-21" title="21">      <span class="kw">override</span> <span class="kw">type</span> RunningProcessList = RPL</a>
<a class="sourceLine" id="cb17-22" title="22"></a>
<a class="sourceLine" id="cb17-23" title="23">      <span class="co">// ...</span></a>
<a class="sourceLine" id="cb17-24" title="24">    }</a></code></pre></div>
<p>The way to parse this is to follow the type level computations performed through the <em>Aux types</em> in the implicit parameter list:</p>
<ul>
<li><code>PN1</code> and <code>PN2</code> are the types of the two processes piped together</li>
<li>The first two implicit definition calculates the <em>running process tuple</em> and the <em>running process HList</em> types of these inidividual process nodes and “stores” the results in <code>RP1</code>, <code>RPL1</code>, <code>RP2</code> and <code>RPL2</code> type parameters. For example if the two processes pipe together are single <code>Process</code> instances, then <code>RP1</code> and <code>RP2</code> would be some kind of <code>RunningProcess</code>, and the HLists would be one element long, like <code>RunningProcess :: HNil</code>.</li>
<li>The <code>last1</code> implicit parameter is a type level <em>last</em> functinon on the first process’s <code>HList</code>. This is required because <code>PN1</code> itself can also be a sequence of piped processes, and we are connecting <code>PN2</code> to the <strong>last</strong> of these. The <code>RP1Last</code> type parameter becomes the <em>type</em> of the <em>last running process</em> of the first process node.</li>
<li>The next line, <code>rp1LastType</code> is an additional constraint fixing the <em>output stream element type</em> of <code>RP1Last</code> to <code>Byte</code>. The piping implementation is not able to connect streams of arbitrary element types, as the <em>process input</em> is always required to be a <em>byte stream</em>.</li>
<li><code>hcons2</code> is similar to the <code>last1</code> but here we are calculating the type level <em>head type</em> of the <code>HList</code> called <code>RPL2</code>. The head will be in <code>RP2Head</code> and the tail <code>HList</code> in <code>RP2Tail</code>.</li>
<li>In the <code>prepend</code> step we concatenate <code>RPL1</code> with <code>RPL2</code> using the <code>Prepend</code> operation, the result <code>HList</code> type is in <code>RPL</code>. This is the <code>HList</code> representation of the piped running process.</li>
<li>Finally we use the <code>Tupler</code> operation to calculate the tuple type from the <code>HList</code>, and store it in <code>RPT</code>.</li>
</ul>
<p>The compiler perform the type level calculations and we can use the result types <code>RPT</code> and <code>RPL</code> to actually implement the <em>start typeclass</em>. This is the most complicated type level calculation in the library.</p>
<h2 id="final-thoughts">Final thoughts</h2>
<p>As we’ve seen, Scala’s type system can bring us quite far in expressing a dependent typed interface. On the other hand writing and reading code in this style is really hard, and if things go wrong, decoding the compiler’s error messages is not an easy task either. This is a serious tradeoff that has to be considered and in many cases a more dynamic but much more readable and maintainable approach can be better.</p>
<p>With <a href="https://github.com/vigoo/prox">prox</a> I explicitly wanted to explore these features of the Scala language.</p>
<p>In the next posts we will ignore the type level parts of the library and focus on different <em>streaming</em> and <em>effect</em> libraries.</p>
]]></summary>
</entry>
<entry>
    <title>Bari with Visual Studio Code</title>
    <link href="http://vigoo.github.io/posts/2016-01-21-bari-vscode.html" />
    <id>http://vigoo.github.io/posts/2016-01-21-bari-vscode.html</id>
    <published>2016-01-21T00:00:00Z</published>
    <updated>2016-01-21T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on January 21, 2016
    
</div>

<h2 id="intro">Intro</h2>
<p>A few weeks ago I discovered <a href="https://code.visualstudio.com/">Visual Studio Code</a> and started using it for some of my work. <em>(Note: I’m using multiple editors/IDEs all the time, based on the task; Emacs, Sublime, Atom, IntelliJ, VS, etc.)</em> So far <em>Code</em> is my favourite among the set of similar editors, such as Atom. I was pleasently surprised how well it works with its integrated <a href="http://www.omnisharp.net/">OmniSharp</a> plugin on <a href="http://vigoo.github.io/bari/">bari’s</a> codebase, so I decided to try to write a <em>bari plugin</em> for it.</p>
<p>Writing an extension for <em>Code</em> was a nice experience. The outcome is the <a href="https://marketplace.visualstudio.com/items/vigoo.bari">bari build management extension</a>, which I’ll demonstrate in the next section.</p>
<h2 id="developing-.net-applications-with-visual-studio-code-and-bari">Developing .NET applications with Visual Studio Code and bari</h2>
<p>As <em>Code</em> is multiplatform, and <em>bari</em> also works with <a href="http://www.mono-project.com/">Mono</a>, I’ll demonstrate how you can use these tools to develop a .NET application (actually <em>bari</em> itself) on a Mac. The steps here (except installing Mono) would be the same on Windows or Linux as well.</p>
<h3 id="installing-the-tools">Installing the tools</h3>
<p>First, if you are not on Windows, you’ll have to install the latest <a href="http://www.mono-project.com/">Mono</a> framework. On OSX I recommed to use <a href="http://brew.sh/"><code>brew</code></a> to do that:</p>
<pre><code>brew install mono
mono --version</code></pre>
<p>Then get the latest <a href="https://code.visualstudio.com/">Visual Studio Code</a> version, either by downloading it from its homepage or with <a href="https://github.com/caskroom/homebrew-cask"><code>brew cask</code></a>:</p>
<pre><code>brew cask install visual-studio-code</code></pre>
<p>Get the latest <em>bari</em>. On Windows I recommend downloading and extracting the <a href="https://github.com/vigoo/bari/releases/latest">latest official release</a> and adding it to the <code>PATH</code>. On OSX, with <code>mono</code> we already have <code>nuget</code>, so let’s use that:</p>
<pre><code>cd /opt
nuget install bari-mono
ln -s bari-mono.1.0.2.2 bari</code></pre>
<p>and create a script to execute it somewhere in your <code>PATH</code>:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode sh"><code class="sourceCode bash"><a class="sourceLine" id="cb4-1" title="1"><span class="co">#!/bin/sh</span></a>
<a class="sourceLine" id="cb4-2" title="2"><span class="ex">mono</span> /opt/bari/tools/bari.exe <span class="va">$@</span></a></code></pre></div>
<p>That’s it. Future versions of the <em>bari extension</em> will probably be able to install <em>bari</em> itself.</p>
<p>Let’s start <em>Code</em> now!</p>
<h3 id="installing-the-extension">Installing the extension</h3>
<p>Open the <em>command palette</em> (F1, or ⇧⌘P) and type <code>ext install bari</code> <a href="/images/baricode1.png" class="zimg"><img width="600" src="/images/baricode1.png" alt="bari-code-1"></a></p>
<h3 id="loading-the-project">Loading the project</h3>
<p>After that restart the editor. Have your bari-built project available somewhere. As we are going to develop bari itself, let’s clone its repository:</p>
<pre><code>git clone https://github.com/vigoo/bari.git</code></pre>
<p>Then open the result <code>bari</code> directory with <em>Code</em>. This should look like the following:</p>
<p><a href="/images/baricode2.png" class="zimg"><img width="800" src="/images/baricode2.png" alt="bari-code-2"></a></p>
<p>The <em>bari plugin</em> automatically detected that the opened folder has a <code>suite.yaml</code> in its root, and loaded it. That’s why we can see the two sections on the statusbar’s right side: <code>full</code> and <code>debug</code>. The first one is the <a href="https://github.com/vigoo/bari/wiki/Product">selected target product</a> and the second one is the <a href="https://github.com/vigoo/bari/wiki/Goal">selected goal</a>. All the <em>bari commands</em> provided by the extension will be executed with these settings.</p>
<h3 id="changing-the-target">Changing the target</h3>
<p>To change the active product or goal, you can click on the statusbar or use the <em>command palette</em> (F1, or ⇧⌘P) and choose <code>bari: Change goal</code> or <code>bari: Change target product</code>.</p>
<p>Let’s change the <em>goal</em> to <code>debug-mono</code>, as we are working on a non-Windows environment:</p>
<p><a href="/images/baricode3.png" class="zimg"><img width="800" src="/images/baricode3.png" alt="bari-code-3"></a></p>
<h3 id="generating-the-solution">Generating the solution</h3>
<p>The next step before starting coding is to actually <strong>generate</strong> the solution and projects files (and fetch the dependencies, etc.) so <em>OmniSharp</em> can load it and provide code completion, analysis, etc. features.</p>
<p>To do so, just use the <em>command palette</em> and choose <code>bari: Regenerate solution</code>, which <a href="https://github.com/vigoo/bari/wiki/VsCommand">runs the <code>bari vs</code> command</a> with the correct parameters. The command’s output is displayed in an <em>output panel</em> called <code>bari</code>. This looks like the following:</p>
<p><a href="/images/baricode4.png" class="zimg"><img width="800" src="/images/baricode4.png" alt="bari-code-4"></a></p>
<p>There’s nothing else left than pointing <em>OmniSharp</em> to the generated solution, with the following command:</p>
<p><a href="/images/baricode5.png" class="zimg"><img width="800" src="/images/baricode5.png" alt="bari-code-5"></a></p>
<p>It will automatically find the generated <code>.sln</code> file, just select the correct one:</p>
<p><a href="/images/baricode6.png" class="zimg"><img width="800" src="/images/baricode6.png" alt="bari-code-6"></a></p>
<p>In a few seconds (and with a few warnings for this project), <em>OmniSharp</em> works. To see what it can do, <a href="https://code.visualstudio.com/Docs/languages/csharp">check this page</a>. A simple example is to jump to a given class or interface with ⌘P:</p>
<p><a href="/images/baricode7.png" class="zimg"><img width="600" src="/images/baricode7.png" alt="bari-code-7"></a></p>
<h3 id="working-on-the-project">Working on the project</h3>
<p>You can work on the project and build it from <em>Code</em> or run its tests using the <code>bari: Build</code> and <code>bari: Test</code> commands. The build output will be shown just like in the <em>solution generation step</em>.</p>
<p><a href="/images/baricode8.png" class="zimg"><img width="600" src="/images/baricode8.png" alt="bari-code-8"></a></p>
<p>Whenever the suite definition itself must be modified, you can jump there with the <code>bari: Open suite.yaml</code> command and then just regenerate the solution as it was shown above.</p>
<h2 id="implementation">Implementation</h2>
<p>The implementation was really straightforward. The source code <a href="https://github.com/vigoo/bari-code">can be found here</a>. It’s basically a <em>JSON</em> defining how the plugin is integrated and some implementation code in <em>TypeScript</em>. It’s easy to run and debug the plugin from <em>Code</em> itself.</p>
<p>For example the following section from the extension definition describes what events triggers the extension:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode json"><code class="sourceCode json"><a class="sourceLine" id="cb6-1" title="1"><span class="er">&quot;activationEvents&quot;:</span> <span class="ot">[</span></a>
<a class="sourceLine" id="cb6-2" title="2">    <span class="st">&quot;onCommand:bari.build&quot;</span><span class="ot">,</span></a>
<a class="sourceLine" id="cb6-3" title="3">    <span class="st">&quot;onCommand:bari.test&quot;</span><span class="ot">,</span></a>
<a class="sourceLine" id="cb6-4" title="4">    <span class="st">&quot;onCommand:bari.vs&quot;</span><span class="ot">,</span></a>
<a class="sourceLine" id="cb6-5" title="5">    <span class="st">&quot;onCommand:bari.openSuiteYaml&quot;</span><span class="ot">,</span></a>
<a class="sourceLine" id="cb6-6" title="6">    <span class="st">&quot;onCommand:bari.selfUpdate&quot;</span><span class="ot">,</span></a>
<a class="sourceLine" id="cb6-7" title="7">    <span class="st">&quot;onCommand:bari.goal.changeCurrentGoal&quot;</span><span class="ot">,</span></a>
<a class="sourceLine" id="cb6-8" title="8">    <span class="st">&quot;onCommand:bari.goal.changeCurrentProduct&quot;</span><span class="ot">,</span></a>
<a class="sourceLine" id="cb6-9" title="9">    <span class="st">&quot;workspaceContains:suite.yaml&quot;</span></a>
<a class="sourceLine" id="cb6-10" title="10"><span class="ot">]</span><span class="er">,</span></a></code></pre></div>
<p>It’s either done by invoking one of the defined commands from the <em>command palette</em>, or if the opened workspace contains a <code>suite.yaml</code>. The latter enables the extension to parse the suite definition and initialize the statusbar immediately one the suite has been opened.</p>
<p>The package definition also specifies the provided configuration values, such as:</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode json"><code class="sourceCode json"><a class="sourceLine" id="cb7-1" title="1"><span class="er">&quot;bari.commandLine&quot;:</span> <span class="fu">{</span></a>
<a class="sourceLine" id="cb7-2" title="2">	<span class="dt">&quot;type&quot;</span><span class="fu">:</span> <span class="st">&quot;string&quot;</span><span class="fu">,</span></a>
<a class="sourceLine" id="cb7-3" title="3">	<span class="dt">&quot;default&quot;</span><span class="fu">:</span> <span class="st">&quot;bari&quot;</span><span class="fu">,</span></a>
<a class="sourceLine" id="cb7-4" title="4">	<span class="dt">&quot;description&quot;</span><span class="fu">:</span> <span class="st">&quot;Command line to execute bari&quot;</span></a>
<a class="sourceLine" id="cb7-5" title="5"><span class="fu">}</span><span class="er">,</span></a>
<a class="sourceLine" id="cb7-6" title="6"><span class="er">&quot;bari.verboseOutput&quot;:</span> <span class="fu">{</span></a>
<a class="sourceLine" id="cb7-7" title="7">	<span class="dt">&quot;type&quot;</span><span class="fu">:</span> <span class="st">&quot;boolean&quot;</span><span class="fu">,</span></a>
<a class="sourceLine" id="cb7-8" title="8">	<span class="dt">&quot;default&quot;</span><span class="fu">:</span> <span class="kw">false</span><span class="fu">,</span></a>
<a class="sourceLine" id="cb7-9" title="9">	<span class="dt">&quot;description&quot;</span><span class="fu">:</span> <span class="st">&quot;Turns on verbose output for all the executed bari commands&quot;</span></a>
<a class="sourceLine" id="cb7-10" title="10"><span class="fu">}</span></a></code></pre></div>
<p>The implementation itself is really simple, all the user interface elements involved such as the console output window, the command palette, the statusbar panels can be easily managed.</p>
<p>For example the panel showing <code>bari</code>’s output is created by the following code snippet:</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode javascript"><code class="sourceCode javascript"><a class="sourceLine" id="cb8-1" title="1"><span class="kw">var</span> channel <span class="op">=</span> <span class="va">vscode</span>.<span class="va">window</span>.<span class="at">createOutputChannel</span>(<span class="st">&#39;bari&#39;</span>)<span class="op">;</span></a>
<a class="sourceLine" id="cb8-2" title="2"><span class="va">channel</span>.<span class="at">show</span>()<span class="op">;</span></a></code></pre></div>
<p>Or to display the result of an operation:</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode javascript"><code class="sourceCode javascript"><a class="sourceLine" id="cb9-1" title="1"><span class="va">vscode</span>.<span class="va">window</span>.<span class="at">showErrorMessage</span>(<span class="st">&quot;No suite.yaml in the current workspace!&quot;</span>)</a></code></pre></div>
<p>or to create the statusbar panel:</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode javascript"><code class="sourceCode javascript"><a class="sourceLine" id="cb10-1" title="1"><span class="kw">this</span>.<span class="at">goals</span> <span class="op">=</span> <span class="va">vscode</span>.<span class="va">window</span>.<span class="at">createStatusBarItem</span>(<span class="va">vscode</span>.<span class="va">StatusBarAlignment</span>.<span class="at">Right</span>)<span class="op">;</span></a>
<a class="sourceLine" id="cb10-2" title="2"><span class="kw">this</span>.<span class="va">goals</span>.<span class="at">command</span> <span class="op">=</span> <span class="st">&#39;bari.goal.changeCurrentGoal&#39;</span><span class="op">;</span></a>
<a class="sourceLine" id="cb10-3" title="3"><span class="kw">this</span>.<span class="va">goals</span>.<span class="at">show</span>()<span class="op">;</span></a></code></pre></div>
<p>This API is simple and well documented enough so basic integrations like this can be done in an hour.</p>
]]></summary>
</entry>
<entry>
    <title>Gradle-Haskell-plugin with experimental Stack support</title>
    <link href="http://vigoo.github.io/posts/2015-12-22-gradle-haskell-plugin-stack.html" />
    <id>http://vigoo.github.io/posts/2015-12-22-gradle-haskell-plugin-stack.html</id>
    <published>2015-12-22T00:00:00Z</published>
    <updated>2015-12-22T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on December 22, 2015
    
</div>

<p>I’ve released a <strong>new version (0.4)</strong> of <a href="https://github.com/prezi/gradle-haskell-plugin">gradle-haskell-plugin</a> today, with <strong>experimental stack support</strong>. It is not enabled by default, but I used it exclusively for months and it seems to get quite stable. To use it you need <a href="https://haskellstack.com">stack</a>, have it enabled with <code>-Puse-stack</code> and have to keep some rules in your <code>.cabal</code> file, as explained <a href="https://github.com/prezi/gradle-haskell-plugin#explanation-stack-mode">in the README</a>.</p>
<h2 id="how-does-it-work">How does it work?</h2>
<p>The core idea did not change <a href="http://vigoo.github.io/posts/2015-04-22-gradle-haskell-plugin.html">compared to the original, cabal based solution</a>.</p>
<p>To support chaining the binary artifacts, I had to add a new option to <em>stack</em> called <a href="https://github.com/commercialhaskell/stack/pull/990">extra package databases</a>. The databases listed in this section are passed <em>after the global</em> but <strong>before</strong> the snapshot and the local databases, which means that the snapshot database cannot be used (the packages in the binary artifacts are not “seeing” them). This sounds bad, but <em>gradle-haskell-plugin</em> does a workaround; it <strong>generates</strong> the <code>stack.yaml</code> automatically, and in a way that:</p>
<ul>
<li>it disables snapshots on stack level (uses a resolver like <code>ghc-7.10.2</code>)</li>
<li>lists all the dependencies explicitly in <code>extra-deps</code></li>
<li>but it still figures out the <em>versions</em> of the dependencies (to be listed in <code>extra-deps</code>) based on a given <em>stackage snapshot</em>!</li>
</ul>
<p>With this approach we get the same behavior that was already proven in cabal mode, but with the advantage that the generated <code>stack.yaml</code> completely defines the project for any tool that knows stack. So after gradle extracted the dependencies and generated the <code>stack.yaml</code>, it is no longer needed to succesfully compile/run/test the project, which means that tools like IDE integration will work much better than with the more hacky cabal mode of the plugin.</p>
]]></summary>
</entry>
<entry>
    <title>Case Study - Haskell at Prezi</title>
    <link href="http://vigoo.github.io/posts/2015-09-21-haskell-case-study.html" />
    <id>http://vigoo.github.io/posts/2015-09-21-haskell-case-study.html</id>
    <published>2015-09-21T00:00:00Z</published>
    <updated>2015-09-21T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on September 21, 2015
    
</div>

<p>I wrote a <em>case study</em> for <a href="http://www.fpcomplete.com">FPComplete</a> on how we use Haskell at <a href="https://prezi.com">Prezi</a>. It is published <a href="https://www.fpcomplete.com/page/case-study-prezi">here</a>, but I’m just posting it here as well:</p>
<p><a href="https://prezi.com">Prezi</a> is a cloud-based presentation and storytelling tool, based on a zoomable canvas. The company was founded in 2009, and today we have more than 50 million users, with more than 160 million prezis created.</p>
<p>The company is using several different platforms and technologies; one of these is <em>Haskell</em>, which we are using server side, for code generation and for testing.</p>
<h2 id="pdom">PDOM</h2>
<p>Prezi’s document format is continuously evolving as we add features to the application. It is very important for us that this format is handled correctly on all our supported platforms, and both on client and server side. To achieve this, we created an eDSL in Haskell that defines the schema of a Prezi. From this schema we are able to generate several artifacts.</p>
<p>Most importantly we are generating a <em>Prezi Document Object Model (PDOM)</em> library for multiple platforms - Haxe (compiled to JS) code for the web, C++ code for the native platforms, and Haskell code for our tests, tools and the server side. These libraries are responsible for loading, updating, maintaining consistency and saving Prezis.</p>
<p>This API also implements <em>collaborative editing</em> functionality by transparently synchronising document changes between multiple clients. This technique is called <a href="https://en.wikipedia.org/wiki/Operational_transformation">operational transformation (OT)</a>. We implemented the server side of this in Haskell; it supports clients from any of the supported platforms and it is connected to several other backend services.</p>
<h2 id="benefits">Benefits</h2>
<p>Using <em>Haskell</em> for this project turned out to have huge benefits.</p>
<p>We are taking advantage of Haskell’s capabilities to create embedded domain specific languages, using it to define the document’s schema in our own eDSL which is used not only by Haskell developers but many others too.</p>
<p>Haskell’s clean and terse code allows us to describe document invariants and rules in a very readable way and the type system guarantees that we handle all the necessary cases, providing a stable base Haskell implementation which we can compare the other language backends to.</p>
<p>It was also possible to define a set of merge laws for OT, which are verified whenever we introduce a new element to the document schema, guaranteeing that the collaboration functionality works correctly.</p>
<p>We use the <em>QuickCheck</em> testing library on all levels. We can generate arbitrary Prezi documents and test serialization on all the backends. We are even generating arbitrary JavaScript code which uses our generated API to test random collaborative network sessions. These tests turned out to be critical for our success as they caught many interesting problems before we deployed anything to production</p>
]]></summary>
</entry>
<entry>
    <title>Haskell plugin for Gradle</title>
    <link href="http://vigoo.github.io/posts/2015-04-22-gradle-haskell-plugin.html" />
    <id>http://vigoo.github.io/posts/2015-04-22-gradle-haskell-plugin.html</id>
    <published>2015-04-22T00:00:00Z</published>
    <updated>2015-04-22T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on April 22, 2015
    
</div>

<p>My team at <a href="https://prezi.com">Prezi</a> uses <strong>Haskell</strong> for several projects, which usually depend on each other, often with build steps using other languages such as Scala, C++ or Haxe. As <a href="https://gradle.org/">Gradle</a> is used heavily in the company, we decided to try to integrate our Haskell projects within Gradle.</p>
<p>The result is <a href="https://github.com/prezi/gradle-haskell-plugin">Gradle Haskell Plugin</a>, which we were using succesfully in the last 2 months in our daily work, and we have <em>open-sourced</em> recently.</p>
<p>What makes this solution interesting is that it not just simply wraps <em>cabal</em> within Gradle tasks, but implements a way to define <strong>dependencies</strong> between Haskell projects and to upload the binary Haskell artifacts to a <em>repository</em> such as <a href="http://www.jfrog.com/open-source/">artifactory</a>.</p>
<p>This makes it easy to modularize our projects, publish them, and also works perfectly with <a href="https://github.com/prezi/pride">pride</a>, an other <em>open-source</em> Prezi project. This means that we can work on a subset of our Haskell projects while the other dependencies are built on Jenkins, and it also integrates well with our non-Haskell projects.</p>
<h2 id="how-does-it-work">How does it work?</h2>
<p>The main idea is that we let <em>cabal</em> manage the Haskell packages, and handle whole Haskell <em>sandboxes</em> on Gradle level. So if you have a single Haskell project, it will be built using <em>cabal</em> and the result sandbox (the built project together with all the dependent cabal packages which are not installed in the <em>global package database</em>) will be packed/published as a Gradle <em>artifact</em>.</p>
<p>This is not very interesting so far, but when you introduce dependencies on Gradle level, the plugin does something which (as far as I know) is not really done by anyone else, which I call <em>sandbox chaining</em>. This basically means that to compile the haskell project, the plugin will pass all the dependent sandboxes’ package database to cabal and GHC, so for the actual sandbox only the packages which are <strong>not</strong> in any of the dependent sandboxes will be installed.</p>
<h2 id="example">Example</h2>
<p>Let’s see an example scenario with <em>4 gradle-haskell projects</em>.</p>
<p><a href="https://raw.githubusercontent.com/prezi/gradle-haskell-plugin/master/doc/gradle-haskell-plugin-drawing1.png" class="zimg"><img width="600" src="https://raw.githubusercontent.com/prezi/gradle-haskell-plugin/master/doc/gradle-haskell-plugin-drawing1.png" alt="gradle-haskell-plugin"></a></p>
<p>The project called <em>Haskell project</em> depends on two other projects, which taking into accound the transitive dependencies means it depends on <em>three other haskell projects</em>. Each project has its own haskell source and <em>cabal file</em>. Building this suite consists of the following steps:</p>
<ul>
<li><strong>dependency 1</strong> is built using only the <em>global package database</em>, everything <strong>not</strong> in that database, together with the compiled project goes into its <code>build/sandbox</code> directory, which is a combination of a <em>GHC package database</em> and the project’s build output. This is packed as <strong>dependency 1</strong>’s build artifact.</li>
<li>For <strong>dependency 2</strong>, Gradle first downloads the build artifact of <em>dependency 1</em> and extracts it to <code>build/deps/dependency1</code>.</li>
<li>Then it runs <a href="https://github.com/exFalso/sandfix">SandFix</a> on it</li>
<li>And compiles the second project, now passing <strong>both</strong> the <em>global package database</em> and <strong>dependency 1</strong>’s sandbox to cabal/ghc. The result is that only the packages which are <strong>not</strong> in any of these two package databases will be installed in the project’s own sandbox, which becomes the build artifact of <strong>dependency 2</strong>.</li>
<li>For <strong>dependency 3</strong>, Gradle extracts both the direct dependency and the transitive dependency’s sandbox, to <code>build/deps/dependency2</code> and <code>build/deps/dependency3</code>.</li>
<li>Then it runs <a href="https://github.com/exFalso/sandfix">SandFix</a> on both the dependencies</li>
<li>And finally passes three package databases to cabal/ghc to compile the project. Only those cabal dependencies will be installed into this sandbox which are not in global, neither in any of the dependent sandboxes.</li>
<li>Finally, for <strong>Haskell project</strong> it goes the same way, but here we have three sandboxes, all chained together to make sure only the built sandbox only contains what is not in the dependent sandboxes yet.</li>
</ul>
<p>For more information, check out <a href="https://github.com/prezi/gradle-haskell-plugin">the documentation</a>.</p>
]]></summary>
</entry>
<entry>
    <title>bari 1.0 released</title>
    <link href="http://vigoo.github.io/posts/2014-12-08-bari-1-0.html" />
    <id>http://vigoo.github.io/posts/2014-12-08-bari-1-0.html</id>
    <published>2014-12-08T00:00:00Z</published>
    <updated>2014-12-08T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on December  8, 2014
    
</div>

<p>I already wrote about <a href="http://vigoo.github.io/bari">bari</a> in <a href="http://vigoo.github.io/2014/05/16/introducing-bari.html">May</a>.</p>
<p>As a reminder, <a href="http://vigoo.github.io/bari">bari</a> is a <em>build management system</em> primarily for .NET, trying to fix Visual Studio’s bad parts while keeping the good ones.</p>
<p>After more than two years of development, and being in production at <a href="http://www.kotem.com/">KOTEM</a> for almost half a year, bari reached a state when it can be considered as a <em>stable</em> and <em>usable</em> first version.</p>
<p>To indicate this today I released <strong>bari 1.0</strong>.</p>
<p>Try it out and feel free to give any kind of feedback or ask any questions!</p>
<p><img src="http://vigoo.github.io/bari/img/barilogo-small.png" /></p>
]]></summary>
</entry>
<entry>
    <title>ScalaFXML 0.2.2 available</title>
    <link href="http://vigoo.github.io/posts/2014-10-22-scalafxml-0-2-2.html" />
    <id>http://vigoo.github.io/posts/2014-10-22-scalafxml-0-2-2.html</id>
    <published>2014-10-22T00:00:00Z</published>
    <updated>2014-10-22T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on October 22, 2014
    
</div>

<p>I’ve released a new version of <a href="https://github.com/vigoo/scalafxml">ScalaFXML</a>, which now supports <em>both</em> <a href="https://github.com/scalafx/scalafx">ScalaFX 8</a> with <em>JavaFX 8</em> on Java 8, and <a href="https://github.com/scalafx/scalafx">ScalaFX 2.2</a> with <em>JavaFX 2.x</em> on Java 7.</p>
<p>The two branches are separated by the <code>sfx2</code> and <code>sfx8</code> postfixes, and both are available for <em>Scala</em> <code>2.10.x</code> and <code>2.11.x</code>.</p>
<p>To use it with <a href="http://www.scala-sbt.org/">sbt</a> on Java 7:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode scala"><code class="sourceCode scala"><a class="sourceLine" id="cb1-1" title="1"><span class="fu">addCompilerPlugin</span>(<span class="st">&quot;org.scalamacros&quot;</span> % <span class="st">&quot;paradise&quot;</span> % <span class="st">&quot;2.0.1&quot;</span> cross CrossVersion.<span class="fu">full</span>)</a>
<a class="sourceLine" id="cb1-2" title="2"></a>
<a class="sourceLine" id="cb1-3" title="3">libraryDependencies += <span class="st">&quot;org.scalafx&quot;</span> %% <span class="st">&quot;scalafx&quot;</span> % <span class="st">&quot;2.2.67-R10&quot;</span></a>
<a class="sourceLine" id="cb1-4" title="4"></a>
<a class="sourceLine" id="cb1-5" title="5">libraryDependencies += <span class="st">&quot;org.scalafx&quot;</span> %% <span class="st">&quot;scalafxml-core-sfx2&quot;</span> % <span class="st">&quot;0.2.2&quot;</span></a></code></pre></div>
<p>And on Java 8:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode scala"><code class="sourceCode scala"><a class="sourceLine" id="cb2-1" title="1"><span class="fu">addCompilerPlugin</span>(<span class="st">&quot;org.scalamacros&quot;</span> % <span class="st">&quot;paradise&quot;</span> % <span class="st">&quot;2.0.1&quot;</span> cross CrossVersion.<span class="fu">full</span>)</a>
<a class="sourceLine" id="cb2-2" title="2"></a>
<a class="sourceLine" id="cb2-3" title="3">libraryDependencies += <span class="st">&quot;org.scalafx&quot;</span> %% <span class="st">&quot;scalafx&quot;</span> % <span class="st">&quot;8.0.20-R6&quot;</span></a>
<a class="sourceLine" id="cb2-4" title="4"></a>
<a class="sourceLine" id="cb2-5" title="5">libraryDependencies += <span class="st">&quot;org.scalafx&quot;</span> %% <span class="st">&quot;scalafxml-core-sfx8&quot;</span> % <span class="st">&quot;0.2.2&quot;</span></a></code></pre></div>
]]></summary>
</entry>
<entry>
    <title>A python/thrift profiling story</title>
    <link href="http://vigoo.github.io/posts/2014-09-15-thrift-profiling.html" />
    <id>http://vigoo.github.io/posts/2014-09-15-thrift-profiling.html</id>
    <published>2014-09-15T00:00:00Z</published>
    <updated>2014-09-15T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on September 15, 2014
    
</div>

<p>A few weeks ago I met a problem where a script, running once every night sending out some emails did not run correctly because a remote thrift call timed out in it. As I started investigating it, turned out that it’s a <em>search</em> call:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode python"><code class="sourceCode python"><a class="sourceLine" id="cb1-1" title="1">staff_users <span class="op">=</span> RemoteUserFactory().search(is_staff<span class="op">=</span><span class="va">True</span>)</a></code></pre></div>
<p>The details here are not really important, what this call does is that it asks a service to return a <em>set of users</em>, and the communication is going on <a href="https://thrift.apache.org/">thrift</a>.</p>
<p>Executing it manually on the server revealed that it should return <em>5649</em> users. Checking out the logs I could see that the call took extremely long time, between 8 to 12 seconds. Even when the cron job was moved from 3:00 AM to a less busy time (several other jobs were executing at the same time), it took more than 6 seconds!</p>
<p>This was suspicious so I also checked the log of a <em>proxy</em> which runs on the same host as the script itself and provides client side load balancing, circuit breaking, retry logic etc. for thrift connections. This log showed that the service replied in <em>2.5 seconds</em>, but it took almost 4 seconds to get this response from the proxy to the client on localhost! This seemed to be completely unacceptable, and also the 2.5 second response time from the service seemed to be too big (I ran the query on one of the server nodes and it returned the users from the database almost instantly). I also had similar experience (but without measurements) before.</p>
<p>So I decided to find out what’s going on. And I found the process interesting enough to write this post about it :)</p>
<h2 id="test-environment">Test environment</h2>
<p>I started by adding a test method to the service’s thrift API called <code>test_get_users(count, sleep)</code> which returns <code>count</code> fake users after waiting <code>sleep</code> seconds. Then in the following experiments I called it with <code>(5499, 1)</code>. The 1 second sleep was intended to simulate the network latency and database query; there was no advantage from having it at the end, but as it is visible everywhere in the results, I had to mention.</p>
<p>For finding out what’s going on I used <a href="https://docs.python.org/2/library/profile.html">cProfile</a> with <a href="https://code.google.com/p/jrfonseca/">gprof2dot</a>, calling the remote test method from a django shell, while everything is running on localhost.</p>
<h3 id="first-measurement">First measurement</h3>
<p>Without touching anything, returning 5499 dummy users on localhost took <strong>5.272 seconds</strong>!</p>
<p>The client side of the call looked like this:</p>
<p><a href="/images/profile1.png" class="zimg"><img width="600" src="/images/profile1.png" alt="profile1"></a></p>
<p>Here we can see that the call has two major phases:</p>
<ul>
<li>The thrift call itself (65%)</li>
<li>Converting the raw results to model objects with <code>_row_to_model</code> (35%)</li>
</ul>
<p>Let’s see first the thrift call (the green branch on the picture). Once again it has two, nearly equivalent branches:</p>
<ul>
<li><code>send_test_get_users</code> which sends the request and waits for the response. This includes the 1 second sleep as well.</li>
<li><code>recv_test_get_users</code> processes the response</li>
</ul>
<p>What’s interesting here is that <code>recv_test_get_users</code> took ~32% of the overall time which is around ~1.6 seconds for simple data deserialization.</p>
<h3 id="optimizing-thrift-deserialization">Optimizing thrift deserialization</h3>
<p>I did not want to believe that the python thrift deserialization is that slow, so I did a search and found that the <code>TBinaryProtocol</code> which we are using is really that slow.</p>
<p>But the thrift library contains a class called <code>TBinaryProtocolAccelerated</code> which is about 10x faster (according to a stackoverflow post).</p>
<p>First I simply changed the used protocol to this, but nothing happened. Digging deeper I found that this is not a real protocol implementation, but a lower level hack.</p>
<p>The documentation of the protocol class says:</p>
<pre><code>  C-Accelerated version of TBinaryProtocol.

  This class does not override any of TBinaryProtocol&#39;s methods,
  but the generated code recognizes it directly and will call into
  our C module to do the encoding, bypassing this object entirely.
  We inherit from TBinaryProtocol so that the normal TBinaryProtocol
  encoding can happen if the fastbinary module doesn&#39;t work for some
  reason.  (TODO(dreiss): Make this happen sanely in more cases.)

  In order to take advantage of the C module, just use
  TBinaryProtocolAccelerated instead of TBinaryProtocol.</code></pre>
<p>So why didn’t it work? The answer is in <a href="https://github.com/apache/thrift/blob/master/lib/py/src/protocol/TBase.py#L52-L58">TBase.py</a>.</p>
<p>The following conditions have to met in order to use the fast deserializer:</p>
<ul>
<li>Protocol must be <code>TBinaryProtocolAccelerated</code> (I changed that)</li>
<li>Protocol’s transport implementation must implement the <code>TTransport.CReadableTransport</code> interface</li>
<li><code>thrift_spec</code> must be available (this was true in this case)</li>
<li><code>fastbinary</code> must be available (also true)</li>
</ul>
<p>The problem was that we were replacing the <code>TTransport</code> implementation with a custom class called <code>ThriftifyTransport</code> in order to do thrift logging, HMAC authentication, etc.</p>
<p>Fortunately all the default transport implementations implement the <code>CReadableTransport</code> interface, and one of them, <code>TBufferedTransport</code> can be used to wrap another transport to add buffering around it. That’s what I did, and it immediately started using the fast deserialization code.</p>
<p>The test call now ran in <strong>3.624 seconds</strong>.</p>
<p>And the new profiling results with this change:</p>
<p><a href="/images/profile2.png" class="zimg"><img width="600" src="/images/profile2.png" alt="profile2"></a></p>
<p>The left-hand side of the call graph remained the same, but <code>recv_test_get_users</code> is now only 2.35% of the overall time which is ~0.08 seconds (to be compared with the 1.6 seconds with the original deserializer!)</p>
<h3 id="optimizing-thrift-serialization">Optimizing thrift serialization</h3>
<p>The obvious next step was to apply this change on the server side as well, so our service can use the fast binary protocol for serialization too. For this I simply copied the change and remeasured everything.</p>
<p>The test call now ran in <strong>3.328 seconds</strong>!</p>
<p>Let’s see the call graph of this stage:</p>
<p><a href="/images/profile3.png" class="zimg"><img width="600" src="/images/profile3.png" alt="profile3"></a></p>
<h3 id="optimizing-result-processing">Optimizing result processing</h3>
<p>The client side of the test method was written similar to how the original API method is written:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode python"><code class="sourceCode python"><a class="sourceLine" id="cb3-1" title="1"><span class="kw">def</span> test_get_users_thrift(<span class="va">self</span>, count, sleep):</a>
<a class="sourceLine" id="cb3-2" title="2">    rpc <span class="op">=</span> ThriftRPC(UserDataService, <span class="va">self</span>.name, service_name<span class="op">=</span><span class="va">self</span>.service_name, client_config<span class="op">=</span>client_config)</a>
<a class="sourceLine" id="cb3-3" title="3"></a>
<a class="sourceLine" id="cb3-4" title="4">    result <span class="op">=</span> []</a>
<a class="sourceLine" id="cb3-5" title="5">    <span class="cf">for</span> row <span class="kw">in</span> rpc.test_get_users(count, sleep).iteritems():</a>
<a class="sourceLine" id="cb3-6" title="6">        user <span class="op">=</span> <span class="va">self</span>._row_to_model(<span class="va">self</span>.user_factory, row)</a>
<a class="sourceLine" id="cb3-7" title="7">        result.append(user)</a>
<a class="sourceLine" id="cb3-8" title="8"></a>
<a class="sourceLine" id="cb3-9" title="9">    <span class="cf">return</span> result</a></code></pre></div>
<p>It is clearly visible on the call graph that the 5499 call to <code>_row_to_model</code> takes 53% of the total time, which is ~1.7 seconds. There are two main branches of this call. The left hand side (<code>row_to_model</code>) seemed to be simple data conversion, and its slowest part is date-time deserialization.</p>
<p>The other branch however looked like a real problem; why should we resolve HMAC host, or parse configuration for each row?</p>
<p>It turned out to be a bug, <code>_row_to_model</code> created a new <em>model factory</em> in each call, which involves a lot of initialization, config parsing, and similar things.</p>
<p>So the simple fix was to create a <code>_rows_to_model</code> helper function which does the same for multiple rows with a single factory.</p>
<p>Running my test code once again showed that the optimization makes sense. Now it ran in <strong>2.448 seconds</strong>, with the following call graph:</p>
<p><a href="/images/profile4.png" class="zimg"><img width="600" src="/images/profile4.png" alt="profile4"></a></p>
<h3 id="further-optimizations">Further optimizations</h3>
<p>I saw two possible ways to further optimize this case:</p>
<ol type="1">
<li><p>Lazy conversion of raw thrift data to model data (per field). This would make sense because many times only a few fields (the id for example) are used, but it seemed to be a too complex change</p></li>
<li><p>Checking the server side as well</p></li>
</ol>
<p>To profile the server side and only measure the thrift request processing I had to add profiling code to the django view class in the following way:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode python"><code class="sourceCode python"><a class="sourceLine" id="cb4-1" title="1"><span class="im">import</span> cProfile</a>
<a class="sourceLine" id="cb4-2" title="2"></a>
<a class="sourceLine" id="cb4-3" title="3">cProfile.runctx(<span class="st">&#39;self._call_processor(op_data)&#39;</span>, <span class="bu">globals</span>(), <span class="bu">locals</span>(), <span class="st">&#39;callstats&#39;</span>)</a>
<a class="sourceLine" id="cb4-4" title="4"><span class="co"># self._call_processor(op_data)</span></a></code></pre></div>
<p>The server-side call took <strong>1.691 seconds</strong> and looked like this:</p>
<p><a href="/images/profile5.png" class="zimg"><img width="600" src="/images/profile5.png" alt="profile5"></a></p>
<p>As expected, 60% of this was the 1 second sleep. The rest of the calls are data conversion with no obvious point to improve.</p>
<h2 id="summary">Summary</h2>
<p>These optimizations are decreasing the response time significantly, especially for calls returning multiple rows.</p>
<p>The interesting was that the extremely slow performance was caused by both the slow perfomance of the python thrift serializer and a bug in our code.</p>
]]></summary>
</entry>
<entry>
    <title>Conditional blocks in Distributed Documentor</title>
    <link href="http://vigoo.github.io/posts/2014-07-13-conditional-blocks-in-ddoc.html" />
    <id>http://vigoo.github.io/posts/2014-07-13-conditional-blocks-in-ddoc.html</id>
    <published>2014-07-13T00:00:00Z</published>
    <updated>2014-07-13T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on July 13, 2014
    
</div>

<p>I’ve added a new feature to <a href="https://github.com/vigoo/distributed-documentor">Distributed Documentor</a> today, <em>conditional blocks</em>.</p>
<p>The idea is that parts of the documents can be enabled when a given <em>condition</em> is present. This is very similar to <a href="http://gcc.gnu.org/onlinedocs/cpp/Ifdef.html">C’s ifdef blocks</a>. To use it with the <em>MediaWiki syntax</em>, put <code>[When:X]</code> and <code>[End]</code> commands in separate lines:</p>
<pre><code>Unconditional

[When:FIRST]
First conditional

[When:SECOND]
First and second conditional
[End]
[End]

[When:SECOND]
Second conditional
[End]</code></pre>
<p><em>Snippets</em> can also have conditional blocks.</p>
<p>There are two possibilities to set which conditionals are enabled:</p>
<ol type="1">
<li><p>Specifying it with command line arguments, such as</p>
<pre><code> java -jar DistributedDocumentor.jar -D FIRST -D SECOND</code></pre>
<p>This is useful when exporting a documentation from command line, or to launch the documentation editor with a predefined set of enabled conditions.</p></li>
<li><p>On the user interface, using <em>View</em> menu’s <em>Enabled conditions…</em> menu item:</p></li>
</ol>
<p><img src="/images/enabled-conditions-dialog.png" /></p>
]]></summary>
</entry>
<entry>
    <title>Introducing bari</title>
    <link href="http://vigoo.github.io/posts/2014-05-16-introducing-bari.html" />
    <id>http://vigoo.github.io/posts/2014-05-16-introducing-bari.html</id>
    <published>2014-05-16T00:00:00Z</published>
    <updated>2014-05-16T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on May 16, 2014
    
</div>

<p>In the past two years I worked on a project called <a href="https://github.com/vigoo/bari">bari</a> which now reached an usable state. <strong>bari</strong> is a <em>build management system</em>, trying to fix Visual Studio’s bad parts while keeping the good ones.</p>
<p>Basically it tries to make .NET development more convenient, when</p>
<ul>
<li>The application may consist of a <em>large number of projects</em></li>
<li>There may be several different <em>subsets</em> of these projects defining valuable target <em>products</em></li>
<li><em>Custom build steps</em> may be required</li>
<li>It is important to be able to <em>reproduce</em> the build environment as easily as possible</li>
<li>The developers want to use the full power of their <em>IDE</em></li>
</ul>
<p>The main idea is to generate Visual Studio solutions and projects <em>on the fly</em> as needed, from a concise <em>declarative</em> build description. I tried to optimize this build description for human readability. Let’s see an example, a short section from <strong>bari</strong>’s own build definition:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode yaml"><code class="sourceCode yaml"><a class="sourceLine" id="cb1-1" title="1"><span class="kw">-</span> <span class="fu">name:</span><span class="at"> bari</span></a>
<a class="sourceLine" id="cb1-2" title="2">  <span class="fu">type:</span><span class="at"> executable</span></a>
<a class="sourceLine" id="cb1-3" title="3">  <span class="fu">references:</span></a>
<a class="sourceLine" id="cb1-4" title="4">    <span class="kw">-</span> gac://System</a>
<a class="sourceLine" id="cb1-5" title="5">    <span class="kw">-</span> nuget://log4net</a>
<a class="sourceLine" id="cb1-6" title="6">    <span class="kw">-</span> nuget://Ninject/3.0.1.10</a>
<a class="sourceLine" id="cb1-7" title="7">    <span class="kw">-</span> nuget://QuickGraph</a>
<a class="sourceLine" id="cb1-8" title="8">    <span class="kw">-</span> module://Bari.Core</a>
<a class="sourceLine" id="cb1-9" title="9">  <span class="fu">csharp:</span></a>
<a class="sourceLine" id="cb1-10" title="10">    <span class="fu">root-namespace:</span><span class="at"> Bari.Console</span></a></code></pre></div>
<p>The main advantage of generating solutions and projects on the fly is that each developer can work on the subset he needs for his current task keeping the IDE fast, but can also open everything in one solution if it is useful for performing a refactoring.</p>
<p>To keep build definitions short and readable, <strong>bari</strong> prefers <em>convention</em> over <em>configuration</em>. For example the directory stucture in which the source code lays defines not only the name of the modules to build, but also the way it is built. For example, in a simple <em>hello world</em> example the C# source code would be put in the <code>src/TestModule/HelloWorld/cs</code> directory, and <strong>bari</strong> would build <code>target/TestModule/HelloWorld.exe</code>.</p>
<p><strong>bari</strong> unifies the handling of <em>project references</em> in a way that referencing projects within a suite, from the GAC, using <a href="http://www.nuget.org">Nuget</a> or from a custom repository works exactly the same. It is also possible to write <em>custom builders</em> in Python.</p>
<p>For more information check out <a href="https://github.com/vigoo/bari/wiki/GettingStarted">the getting started page</a>.</p>
]]></summary>
</entry>
<entry>
    <title>ScalaFX with FXML</title>
    <link href="http://vigoo.github.io/posts/2014-01-12-scalafx-with-fxml.html" />
    <id>http://vigoo.github.io/posts/2014-01-12-scalafx-with-fxml.html</id>
    <published>2014-01-12T00:00:00Z</published>
    <updated>2014-01-12T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on January 12, 2014
    
</div>

<p><a href="https://code.google.com/p/scalafx/">ScalaFX</a> is a nice wrapper around JavaFX for Scala, but currently it lacks support for using <a href="http://docs.oracle.com/javafx/2/api/javafx/fxml/doc-files/introduction_to_fxml.html">FXML</a> instead of Scala code for defining the user interfaces. This can be understood as <em>ScalaFX</em> is in fact a DSL for defining the UI in Scala instead of an XML file. Still I believe that using FXML instead may have its advantages; first of all it has a visual designer (<a href="http://www.oracle.com/technetwork/java/javafx/tools/index.html">JavaFX Scene Builder</a>). For me, designing an UI without immediate visual feedback is hard, and involves a lot of iterations of tweaking the code, running it and checking the results. I also expect that in the future there will be more tools available which work on FXML data.</p>
<p>It is not impossible to use FXML user interfaces from Scala, but the ScalaFX wrappers does not help and the code for the controller classes is not clean enough. See <a href="https://github.com/jpsacha/ProScalaFX/blob/master/src/proscalafx/ch10/fxml/AdoptionFormController.scala">the following example</a> to get a feeling how it looks like.</p>
<p>To make it better I wrote a small library called <a href="https://github.com/vigoo/scalafxml">ScalaFXML</a>. In this post I’ll go through a small example to explain how it works.</p>
<p>The following image shows how our sample application will look like:</p>
<p><img src="/images/unit-conversion-shot.png" /></p>
<p>The <em>From</em> fiels is editable, and the result in the <em>To</em> field is filled as you type using <em>data binding</em>. The <em>Close</em> button’s only purpose is to demonstrate event handlers.</p>
<p>The conversion logic itself is implemented by <a href="https://github.com/vigoo/scalafxml/blob/master/demo/src/main/scala/scalafxml/demo/unitconverter/UnitConverter.scala">small classes</a> sharing the same trait:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode scala"><code class="sourceCode scala"><a class="sourceLine" id="cb1-1" title="1"><span class="kw">trait</span> UnitConverter {</a>
<a class="sourceLine" id="cb1-2" title="2">  <span class="kw">val</span> description: String</a>
<a class="sourceLine" id="cb1-3" title="3">  <span class="kw">def</span> <span class="fu">run</span>(input: String): String</a>
<a class="sourceLine" id="cb1-4" title="4"></a>
<a class="sourceLine" id="cb1-5" title="5">  <span class="kw">override</span> <span class="kw">def</span> toString = description</a>
<a class="sourceLine" id="cb1-6" title="6">}</a>
<a class="sourceLine" id="cb1-7" title="7"></a>
<a class="sourceLine" id="cb1-8" title="8"><span class="kw">object</span> MMtoInches <span class="kw">extends</span> UnitConverter {</a>
<a class="sourceLine" id="cb1-9" title="9">  <span class="kw">val</span> description: String = <span class="st">&quot;Millimeters to inches&quot;</span></a>
<a class="sourceLine" id="cb1-10" title="10">  <span class="kw">def</span> <span class="fu">run</span>(input: String): String = </a>
<a class="sourceLine" id="cb1-11" title="11">      <span class="kw">try</span> { </a>
<a class="sourceLine" id="cb1-12" title="12">          (input.<span class="fu">toDouble</span> / <span class="fl">25.4</span>).<span class="fu">toString</span> </a>
<a class="sourceLine" id="cb1-13" title="13">      } <span class="kw">catch</span> { </a>
<a class="sourceLine" id="cb1-14" title="14">          <span class="kw">case</span> ex: Throwable =&gt; ex.<span class="fu">toString</span> </a>
<a class="sourceLine" id="cb1-15" title="15">      }</a>
<a class="sourceLine" id="cb1-16" title="16">}</a>
<a class="sourceLine" id="cb1-17" title="17"></a>
<a class="sourceLine" id="cb1-18" title="18"><span class="kw">object</span> InchesToMM <span class="kw">extends</span> UnitConverter {</a>
<a class="sourceLine" id="cb1-19" title="19">  <span class="kw">val</span> description: String = <span class="st">&quot;Inches to millimeters&quot;</span></a>
<a class="sourceLine" id="cb1-20" title="20">  <span class="kw">def</span> <span class="fu">run</span>(input: String): String = </a>
<a class="sourceLine" id="cb1-21" title="21">      <span class="kw">try</span> { </a>
<a class="sourceLine" id="cb1-22" title="22">          (input.<span class="fu">toDouble</span> * <span class="fl">25.4</span>).<span class="fu">toString</span> </a>
<a class="sourceLine" id="cb1-23" title="23">      } <span class="kw">catch</span> { </a>
<a class="sourceLine" id="cb1-24" title="24">          <span class="kw">case</span> ex: Throwable =&gt; ex.<span class="fu">toString</span> </a>
<a class="sourceLine" id="cb1-25" title="25">      }</a>
<a class="sourceLine" id="cb1-26" title="26">}</a></code></pre></div>
<p>To describe the set of available <em>unit converters</em>, we define one more helper class:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode scala"><code class="sourceCode scala"><a class="sourceLine" id="cb2-1" title="1"><span class="kw">class</span> <span class="fu">UnitConverters</span>(converters: UnitConverter*) {</a>
<a class="sourceLine" id="cb2-2" title="2">  <span class="kw">val</span> available = List(converters : _*)</a>
<a class="sourceLine" id="cb2-3" title="3">}</a></code></pre></div>
<p>Now let’s start with a <a href="https://github.com/vigoo/scalafxml/blob/master/demo/src/main/scala/scalafxml/demo/unitconverter/PureScalaFX.scala">pure ScalaFX solution</a>, where the user interface is defined in Scala. I’ve implemented the view itself in a class called <code>PureScalaFXView</code>, which gets the set of available <em>unit converters</em> as a dependency through its constructor. This makes the main application object very simple:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode scala"><code class="sourceCode scala"><a class="sourceLine" id="cb3-1" title="1"><span class="kw">object</span> PureScalaFX <span class="kw">extends</span> JFXApp {</a>
<a class="sourceLine" id="cb3-2" title="2">  stage = <span class="kw">new</span> <span class="fu">PureScalaFXView</span>(</a>
<a class="sourceLine" id="cb3-3" title="3">      <span class="kw">new</span> <span class="fu">UnitConverters</span>(InchesToMM, MMtoInches))</a>
<a class="sourceLine" id="cb3-4" title="4">}</a></code></pre></div>
<p>The <code>PureScalaFXView</code> class consists of two distinct parts. First we define the user interface using the <em>ScalaFX UI DSL</em>:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode scala"><code class="sourceCode scala"><a class="sourceLine" id="cb4-1" title="1"><span class="kw">class</span> <span class="fu">PureScalaFXView</span>(converters: UnitConverters) <span class="kw">extends</span> JFXApp.<span class="fu">PrimaryStage</span> {</a>
<a class="sourceLine" id="cb4-2" title="2"></a>
<a class="sourceLine" id="cb4-3" title="3">  <span class="co">// UI Definition</span></a>
<a class="sourceLine" id="cb4-4" title="4">  title = <span class="st">&quot;Unit conversion&quot;</span></a>
<a class="sourceLine" id="cb4-5" title="5"></a>
<a class="sourceLine" id="cb4-6" title="6">  <span class="kw">private</span> <span class="kw">val</span> types = <span class="kw">new</span> ComboBox[UnitConverter]() {</a>
<a class="sourceLine" id="cb4-7" title="7">    maxWidth = Double.<span class="fu">MaxValue</span></a>
<a class="sourceLine" id="cb4-8" title="8">    margin = Insets(<span class="dv">3</span>)</a>
<a class="sourceLine" id="cb4-9" title="9">  }</a>
<a class="sourceLine" id="cb4-10" title="10"></a>
<a class="sourceLine" id="cb4-11" title="11">  <span class="kw">private</span> <span class="kw">val</span> from = <span class="kw">new</span> TextField {</a>
<a class="sourceLine" id="cb4-12" title="12">    margin = Insets(<span class="dv">3</span>)</a>
<a class="sourceLine" id="cb4-13" title="13">    prefWidth = <span class="fl">200.0</span></a>
<a class="sourceLine" id="cb4-14" title="14">  }</a>
<a class="sourceLine" id="cb4-15" title="15"></a>
<a class="sourceLine" id="cb4-16" title="16">  <span class="kw">private</span> <span class="kw">val</span> to = <span class="kw">new</span> TextField {</a>
<a class="sourceLine" id="cb4-17" title="17">    prefWidth = <span class="fl">200.0</span></a>
<a class="sourceLine" id="cb4-18" title="18">    margin = Insets(<span class="dv">3</span>)</a>
<a class="sourceLine" id="cb4-19" title="19">    editable = <span class="kw">false</span></a>
<a class="sourceLine" id="cb4-20" title="20">  }</a>
<a class="sourceLine" id="cb4-21" title="21"></a>
<a class="sourceLine" id="cb4-22" title="22">  scene = <span class="kw">new</span> Scene {</a>
<a class="sourceLine" id="cb4-23" title="23">    content = <span class="kw">new</span> GridPane {</a>
<a class="sourceLine" id="cb4-24" title="24">      padding = Insets(<span class="dv">5</span>)</a>
<a class="sourceLine" id="cb4-25" title="25"></a>
<a class="sourceLine" id="cb4-26" title="26">      <span class="fu">add</span>(<span class="kw">new</span> Label(<span class="st">&quot;Conversion type:&quot;</span>), <span class="dv">0</span>, <span class="dv">0</span>)</a>
<a class="sourceLine" id="cb4-27" title="27">      <span class="fu">add</span>(<span class="kw">new</span> Label(<span class="st">&quot;From:&quot;</span>), <span class="dv">0</span>, <span class="dv">1</span>)</a>
<a class="sourceLine" id="cb4-28" title="28">      <span class="fu">add</span>(<span class="kw">new</span> Label(<span class="st">&quot;To:&quot;</span>), <span class="dv">0</span>, <span class="dv">2</span>)</a>
<a class="sourceLine" id="cb4-29" title="29"></a>
<a class="sourceLine" id="cb4-30" title="30">      <span class="fu">add</span>(types, <span class="dv">1</span>, <span class="dv">0</span>)</a>
<a class="sourceLine" id="cb4-31" title="31">      <span class="fu">add</span>(from, <span class="dv">1</span>, <span class="dv">1</span>)</a>
<a class="sourceLine" id="cb4-32" title="32">      <span class="fu">add</span>(to, <span class="dv">1</span>, <span class="dv">2</span>)</a>
<a class="sourceLine" id="cb4-33" title="33"></a>
<a class="sourceLine" id="cb4-34" title="34">      <span class="fu">add</span>(<span class="kw">new</span> Button(<span class="st">&quot;Close&quot;</span>) {</a>
<a class="sourceLine" id="cb4-35" title="35">        <span class="co">// inline event handler binding</span></a>
<a class="sourceLine" id="cb4-36" title="36">        onAction = (e: ActionEvent) =&gt; Platform.<span class="fu">exit</span>()</a>
<a class="sourceLine" id="cb4-37" title="37">      }, <span class="dv">1</span>, <span class="dv">3</span>)</a>
<a class="sourceLine" id="cb4-38" title="38"></a>
<a class="sourceLine" id="cb4-39" title="39">      columnConstraints = List(</a>
<a class="sourceLine" id="cb4-40" title="40">        <span class="kw">new</span> ColumnConstraints {</a>
<a class="sourceLine" id="cb4-41" title="41">          halignment = HPos.<span class="fu">LEFT</span></a>
<a class="sourceLine" id="cb4-42" title="42">          hgrow = Priority.<span class="fu">SOMETIMES</span></a>
<a class="sourceLine" id="cb4-43" title="43">          margin = Insets(<span class="dv">5</span>)</a>
<a class="sourceLine" id="cb4-44" title="44">        },</a>
<a class="sourceLine" id="cb4-45" title="45">        <span class="kw">new</span> ColumnConstraints {</a>
<a class="sourceLine" id="cb4-46" title="46">          halignment = HPos.<span class="fu">RIGHT</span></a>
<a class="sourceLine" id="cb4-47" title="47">          hgrow = Priority.<span class="fu">ALWAYS</span></a>
<a class="sourceLine" id="cb4-48" title="48">          margin = Insets(<span class="dv">5</span>)</a>
<a class="sourceLine" id="cb4-49" title="49">        }</a>
<a class="sourceLine" id="cb4-50" title="50">      )</a>
<a class="sourceLine" id="cb4-51" title="51">    }</a>
<a class="sourceLine" id="cb4-52" title="52">  }</a></code></pre></div>
<p>This is not 100% pure UI definition, because it also contains an inline event handler definition for the <em>Close</em> button.</p>
<p>The next part fills the <em>combo box</em> and defines the data binding. Filling the combo box is a simple procedural loop:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode scala"><code class="sourceCode scala"><a class="sourceLine" id="cb5-1" title="1">  <span class="kw">for</span> (converter &lt;- converters.<span class="fu">available</span>) {</a>
<a class="sourceLine" id="cb5-2" title="2">    types += converter</a>
<a class="sourceLine" id="cb5-3" title="3">  }</a>
<a class="sourceLine" id="cb5-4" title="4">  types.<span class="fu">getSelectionModel</span>.<span class="fu">selectFirst</span>()</a></code></pre></div>
<p>For the data binding we define a <a href="http://docs.oracle.com/javafx/2/binding/jfxpub-binding.htm">low level data binding</a> which depends on the combo box’s selected value and the <em>From</em> field’s text, and produces the output for the <em>To</em> field:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode scala"><code class="sourceCode scala"><a class="sourceLine" id="cb6-1" title="1">  to.<span class="fu">text</span> &lt;== <span class="kw">new</span> StringBinding {</a>
<a class="sourceLine" id="cb6-2" title="2">    <span class="fu">bind</span>(from.<span class="fu">text</span>.<span class="fu">delegate</span>, types.<span class="fu">getSelectionModel</span>.<span class="fu">selectedItemProperty</span>)</a>
<a class="sourceLine" id="cb6-3" title="3">    <span class="kw">def</span> <span class="fu">computeValue</span>() = types.<span class="fu">getSelectionModel</span>.<span class="fu">getSelectedItem</span>.<span class="fu">run</span>(from.<span class="fu">text</span>.<span class="fu">value</span>)</a>
<a class="sourceLine" id="cb6-4" title="4">  }</a></code></pre></div>
<p>That’s all, the application is fully functional. The next thing is to split this class so the UI definition and the UI logic got separated. This <a href="https://github.com/vigoo/scalafxml/blob/master/demo/src/main/scala/scalafxml/demo/unitconverter/RefactoredPureScalaFX.scala">refactored ScalaFX solution</a> is very similar to the previous one, but the initialization of the combo box, the data binding and the event handler are all encapsulated by a new, separate class:</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode scala"><code class="sourceCode scala"><a class="sourceLine" id="cb7-1" title="1"><span class="kw">class</span> <span class="fu">RawUnitConverterPresenter</span>(</a>
<a class="sourceLine" id="cb7-2" title="2">                              <span class="kw">private</span> <span class="kw">val</span> from: TextField,</a>
<a class="sourceLine" id="cb7-3" title="3">                              <span class="kw">private</span> <span class="kw">val</span> to: TextField,</a>
<a class="sourceLine" id="cb7-4" title="4">                              <span class="kw">private</span> <span class="kw">val</span> types: ComboBox[UnitConverter],</a>
<a class="sourceLine" id="cb7-5" title="5">                              <span class="kw">private</span> <span class="kw">val</span> converters: UnitConverters) {</a>
<a class="sourceLine" id="cb7-6" title="6"></a>
<a class="sourceLine" id="cb7-7" title="7">  <span class="co">// Filling the combo box</span></a>
<a class="sourceLine" id="cb7-8" title="8">  <span class="kw">for</span> (converter &lt;- converters.<span class="fu">available</span>) {</a>
<a class="sourceLine" id="cb7-9" title="9">    types += converter</a>
<a class="sourceLine" id="cb7-10" title="10">  }</a>
<a class="sourceLine" id="cb7-11" title="11">  types.<span class="fu">getSelectionModel</span>.<span class="fu">selectFirst</span>()</a>
<a class="sourceLine" id="cb7-12" title="12"></a>
<a class="sourceLine" id="cb7-13" title="13">  <span class="co">// Data binding</span></a>
<a class="sourceLine" id="cb7-14" title="14">  to.<span class="fu">text</span> &lt;== <span class="kw">new</span> StringBinding {</a>
<a class="sourceLine" id="cb7-15" title="15">    <span class="fu">bind</span>(from.<span class="fu">text</span>.<span class="fu">delegate</span>, types.<span class="fu">getSelectionModel</span>.<span class="fu">selectedItemProperty</span>)</a>
<a class="sourceLine" id="cb7-16" title="16">    <span class="kw">def</span> <span class="fu">computeValue</span>() = types.<span class="fu">getSelectionModel</span>.<span class="fu">getSelectedItem</span>.<span class="fu">run</span>(from.<span class="fu">text</span>.<span class="fu">value</span>)</a>
<a class="sourceLine" id="cb7-17" title="17">  }</a>
<a class="sourceLine" id="cb7-18" title="18"></a>
<a class="sourceLine" id="cb7-19" title="19">  <span class="co">// Close button event handler</span></a>
<a class="sourceLine" id="cb7-20" title="20">  <span class="kw">def</span> <span class="fu">onClose</span>(event: ActionEvent) {</a>
<a class="sourceLine" id="cb7-21" title="21">    Platform.<span class="fu">exit</span>()</a>
<a class="sourceLine" id="cb7-22" title="22">  }</a>
<a class="sourceLine" id="cb7-23" title="23">}</a></code></pre></div>
<p>What I wanted is to be able to define the controller class exactly like this while building the user interface from FXML. Without <a href="https://github.com/vigoo/scalafxml">ScalaFXML</a> the controller class have some serious limitations:</p>
<ul>
<li>It must implement the <a href="http://docs.oracle.com/javafx/2/api/javafx/fxml/Initializable.html">Initializable</a> interface</li>
<li>It cannot have any constructor arguments</li>
<li>The user interface objects must be variable fields of the class</li>
<li>And they have to have the type of the JavaFX controls, so to be able to use the ScalaFX wrappers, they have to be explicitly wrapped in the <code>initialize</code> method.</li>
</ul>
<p>With <a href="https://github.com/vigoo/scalafxml">ScalaFXML</a> the process is really simple. First we create the FXML, for example with the <a href="http://www.oracle.com/technetwork/java/javafx/tools/index.html">JavaFX Scene Builder</a>:</p>
<p><img src="/images/unit-conversion-scenebuilder.png" /></p>
<p>In the FXML we give the <code>from</code>, <code>to</code>, and <code>types</code> identifiers to our controls using the <code>fx:id</code> attribute, for example:</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode xml"><code class="sourceCode xml"><a class="sourceLine" id="cb8-1" title="1">    <span class="kw">&lt;TextField</span><span class="ot"> fx:id=</span><span class="st">&quot;from&quot;</span><span class="ot"> prefWidth=</span><span class="st">&quot;200.0&quot;</span> </a>
<a class="sourceLine" id="cb8-2" title="2"><span class="ot">               GridPane.columnIndex=</span><span class="st">&quot;1&quot;</span> </a>
<a class="sourceLine" id="cb8-3" title="3"><span class="ot">               GridPane.margin=</span><span class="st">&quot;$x1&quot;</span> </a>
<a class="sourceLine" id="cb8-4" title="4"><span class="ot">               GridPane.rowIndex=</span><span class="st">&quot;1&quot;</span> <span class="kw">/&gt;</span></a></code></pre></div>
<p>The event handlers can be specified simply by their name:</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode xml"><code class="sourceCode xml"><a class="sourceLine" id="cb9-1" title="1"><span class="kw">&lt;Button</span><span class="ot"> onAction=</span><span class="st">&quot;#onClose&quot;</span><span class="ot"> text=</span><span class="st">&quot;Close&quot;</span> </a>
<a class="sourceLine" id="cb9-2" title="2"><span class="ot">        mnemonicParsing=</span><span class="st">&quot;false&quot;</span></a>
<a class="sourceLine" id="cb9-3" title="3"><span class="ot">        GridPane.columnIndex=</span><span class="st">&quot;1&quot;</span> </a>
<a class="sourceLine" id="cb9-4" title="4"><span class="ot">        GridPane.halignment=</span><span class="st">&quot;RIGHT&quot;</span> </a>
<a class="sourceLine" id="cb9-5" title="5"><span class="ot">        GridPane.rowIndex=</span><span class="st">&quot;3&quot;</span> <span class="kw">/&gt;</span></a></code></pre></div>
<p>and the controller class must be referenced on the root node</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode xml"><code class="sourceCode xml"><a class="sourceLine" id="cb10-1" title="1">fx:controller=&quot;scalafxml.demo.unitconverter.UnitConverterPresenter&quot;</a></code></pre></div>
<p>The controller class <a href="https://github.com/vigoo/scalafxml/blob/master/demo/src/main/scala/scalafxml/demo/unitconverter/ScalaFXML.scala">can be exactly the same as the <code>RawUnitConverterPresenter</code></a>, adding an additional <code>@sfxml</code> annotation for it. Everything else is handled by the library, as we will see.</p>
<p>The application object itself looks like this:</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode scala"><code class="sourceCode scala"><a class="sourceLine" id="cb11-1" title="1"><span class="kw">object</span> ScalaFXML <span class="kw">extends</span> JFXApp {</a>
<a class="sourceLine" id="cb11-2" title="2"></a>
<a class="sourceLine" id="cb11-3" title="3">  <span class="kw">val</span> root = <span class="fu">FXMLView</span>(getClass.<span class="fu">getResource</span>(<span class="st">&quot;unitconverter.fxml&quot;</span>),</a>
<a class="sourceLine" id="cb11-4" title="4">    <span class="kw">new</span> <span class="fu">DependenciesByType</span>(Map(</a>
<a class="sourceLine" id="cb11-5" title="5">      typeOf[UnitConverters] -&gt; <span class="kw">new</span> <span class="fu">UnitConverters</span>(InchesToMM, MMtoInches))))</a>
<a class="sourceLine" id="cb11-6" title="6"></a>
<a class="sourceLine" id="cb11-7" title="7">  stage = <span class="kw">new</span> JFXApp.<span class="fu">PrimaryStage</span>() {</a>
<a class="sourceLine" id="cb11-8" title="8">    title = <span class="st">&quot;Unit conversion&quot;</span></a>
<a class="sourceLine" id="cb11-9" title="9">    scene = <span class="kw">new</span> <span class="fu">Scene</span>(root)</a>
<a class="sourceLine" id="cb11-10" title="10"></a>
<a class="sourceLine" id="cb11-11" title="11">  }</a>
<a class="sourceLine" id="cb11-12" title="12">}</a></code></pre></div>
<p>Beside giving the URI for the FXML file we also has to provide the <em>additional dependencies</em> of the controller class. This is an easily extensible part of the library, and it already has support for <a href="https://github.com/dickwall/subcut">SubCut</a> and <a href="https://code.google.com/p/google-guice/">Guice</a> as well. Here we are using a simple <em>type-&gt;value</em> mapping instead.</p>
<p>How does this work? What happens behind the scenes?</p>
<p>The <code>@sfxml</code> is a <a href="http://docs.scala-lang.org/overviews/macros/annotations.html">macro annotation</a>. In <em>compile-time</em>, the class definition itself is transformed by the <a href="https://github.com/vigoo/scalafxml/blob/master/core-macros/src/main/scala/scalafxml/core/macros/sfxmlMacro.scala"><code>sfxmlMacro.impl</code> function</a>.</p>
<p>The transformation’s result is a class definition with the source class’ name, but with a completely different content. The original class is added as an inner class, always called <code>Controller</code>. In our example, the generated class definition would look like something similar:</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode scala"><code class="sourceCode scala"><a class="sourceLine" id="cb12-1" title="1"><span class="kw">class</span> <span class="fu">UnitConverterPresenter</span>(<span class="kw">private</span> <span class="kw">val</span> dependencyResolver: ControllerDependencyResolver)</a>
<a class="sourceLine" id="cb12-2" title="2">    <span class="kw">extends</span> javafx.<span class="fu">fxml</span>.<span class="fu">Initializable</span> </a>
<a class="sourceLine" id="cb12-3" title="3">    <span class="kw">with</span> FxmlProxyGenerator.<span class="fu">ProxyDependencyInjection</span> {</a>
<a class="sourceLine" id="cb12-4" title="4">    </a>
<a class="sourceLine" id="cb12-5" title="5">    <span class="kw">class</span> <span class="fu">Controller</span>(</a>
<a class="sourceLine" id="cb12-6" title="6">        <span class="kw">private</span> <span class="kw">val</span> from: TextField,</a>
<a class="sourceLine" id="cb12-7" title="7">        <span class="kw">private</span> <span class="kw">val</span> to: TextField,</a>
<a class="sourceLine" id="cb12-8" title="8">        <span class="kw">private</span> <span class="kw">val</span> types: ComboBox[UnitConverter],</a>
<a class="sourceLine" id="cb12-9" title="9">        <span class="kw">private</span> <span class="kw">val</span> converters: UnitConverters) {</a>
<a class="sourceLine" id="cb12-10" title="10">        <span class="co">// …</span></a>
<a class="sourceLine" id="cb12-11" title="11">    }</a>
<a class="sourceLine" id="cb12-12" title="12">    </a>
<a class="sourceLine" id="cb12-13" title="13">    <span class="kw">private</span> <span class="kw">var</span> impl: Controller = <span class="kw">null</span></a>
<a class="sourceLine" id="cb12-14" title="14">    </a>
<a class="sourceLine" id="cb12-15" title="15">    <span class="co">// …</span></a>
<a class="sourceLine" id="cb12-16" title="16">}   </a></code></pre></div>
<p>The class have four distinct parts:</p>
<ol type="1">
<li>Getting the additional dependencies from the <em>dependency resolver</em></li>
<li>Variable fields for binding the JavaFX controls defined in the FXML</li>
<li>Event handler methods</li>
<li>The <code>initializable</code> method’s implementation</li>
</ol>
<p>The first one is simple - for each constructor argument of the controller class which is <em>not</em> a ScalaFX control, we query the <em>dependency resolver</em> to get a value for it. These are performed when the outer, generated class is instantiated and stored through the <code>ProxyDependencyInjection</code> trait.</p>
<p>The variable fields are simple fields for all the ScalaFX constructor arguments of the controller class, but converted to their JavaFX counterpart. For example the generated field for the controller’s <code>from</code> argument will look like this:</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode scala"><code class="sourceCode scala"><a class="sourceLine" id="cb13-1" title="1">@javafx.<span class="fu">fxml</span>.<span class="fu">FXML</span></a>
<a class="sourceLine" id="cb13-2" title="2"><span class="kw">private</span> <span class="kw">var</span> from: javafx.<span class="fu">scene</span>.<span class="fu">control</span>.<span class="fu">TextField</span> = <span class="kw">null</span></a></code></pre></div>
<p>The <em>event handler</em>’s are proxies for all the public methods of the controller, but the ScalaFX event argument types are replaced with JavaFX event argument types and they are wrapped automatically when forwarding the call to the real implementation. For the <code>onClose</code> event handler it would look like the following:</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode scala"><code class="sourceCode scala"><a class="sourceLine" id="cb14-1" title="1">@javafx.<span class="fu">fxml</span>.<span class="fu">FXML</span> <span class="kw">def</span> <span class="fu">onClose</span>(e: javafx.<span class="fu">event</span>.<span class="fu">ActionEvent</span>) {</a>
<a class="sourceLine" id="cb14-2" title="2">    impl.<span class="fu">onClose</span>(<span class="kw">new</span> scalafx.<span class="fu">event</span>.<span class="fu">ActionEvent</span>(e))</a>
<a class="sourceLine" id="cb14-3" title="3">}</a></code></pre></div>
<p>When JavaFX calls the generated controller’s <code>initialize</code> method, the control fields are already set up, and the additional dependencies were already gathered from the dependency resolver so we have all the values required to instantiate the real controller class. For ScalaFX arguments we wrap the JavaFX controls, for the additional dependencies we use the <code>ProxyDependencyInjection</code> trait’s <code>getDependency</code> method:</p>
<div class="sourceCode" id="cb15"><pre class="sourceCode scala"><code class="sourceCode scala"><a class="sourceLine" id="cb15-1" title="1"><span class="kw">def</span> <span class="fu">initialize</span>(url: java.<span class="fu">net</span>.<span class="fu">URL</span>, rb: java.<span class="fu">util</span>.<span class="fu">ResourceBundle</span>) {</a>
<a class="sourceLine" id="cb15-2" title="2">    impl = <span class="kw">new</span> <span class="fu">Controller</span>(</a>
<a class="sourceLine" id="cb15-3" title="3">        <span class="kw">new</span> scalafx.<span class="fu">scene</span>.<span class="fu">control</span>.<span class="fu">TextField</span>(from),</a>
<a class="sourceLine" id="cb15-4" title="4">        <span class="kw">new</span> scalafx.<span class="fu">scene</span>.<span class="fu">control</span>.<span class="fu">TextField</span>(to),        </a>
<a class="sourceLine" id="cb15-5" title="5">        <span class="kw">new</span> scalafx.<span class="fu">scene</span>.<span class="fu">control</span>.<span class="fu">ComboBox</span>[UnitConverter](types),</a>
<a class="sourceLine" id="cb15-6" title="6">        getDependencies[UnitConverters](<span class="st">&quot;converters&quot;</span>))</a>
<a class="sourceLine" id="cb15-7" title="7">}</a></code></pre></div>
<p>That’s all. The final interesting bit is the <code>FXMLView</code> object, which overrides JavaFX’s default controller factory. This is only necessary to be able to pass the given <code>ControllerDependencyResolver</code> to the generated controller’s constructor:</p>
<div class="sourceCode" id="cb16"><pre class="sourceCode scala"><code class="sourceCode scala"><a class="sourceLine" id="cb16-1" title="1">  <span class="kw">def</span> <span class="fu">apply</span>(fxml: URL, dependencies: ControllerDependencyResolver): jfxs.<span class="fu">Parent</span> =</a>
<a class="sourceLine" id="cb16-2" title="2">    jfxf.<span class="fu">FXMLLoader</span>.<span class="fu">load</span>(</a>
<a class="sourceLine" id="cb16-3" title="3">      fxml, </a>
<a class="sourceLine" id="cb16-4" title="4">      <span class="kw">null</span>,</a>
<a class="sourceLine" id="cb16-5" title="5">      <span class="kw">new</span> jfxf.<span class="fu">JavaFXBuilderFactory</span>(),</a>
<a class="sourceLine" id="cb16-6" title="6">      <span class="kw">new</span> jfxu.<span class="fu">Callback</span>[Class[_], Object] {</a>
<a class="sourceLine" id="cb16-7" title="7">        <span class="kw">override</span> <span class="kw">def</span> <span class="fu">call</span>(cls: Class[_]): Object = </a>
<a class="sourceLine" id="cb16-8" title="8">            <span class="fu">FxmlProxyGenerator</span>(cls, dependencies)</a>
<a class="sourceLine" id="cb16-9" title="9">      })</a></code></pre></div>
<p><code>FxmlProxyGenerator</code> uses reflection to create a new instance of the generated controller, and pass the dependency resolver as its only constructor argument.</p>
]]></summary>
</entry>
<entry>
    <title>Trying out Ceylon - Part 1</title>
    <link href="http://vigoo.github.io/posts/2013-11-17-trying-out-ceylon-part-1.html" />
    <id>http://vigoo.github.io/posts/2013-11-17-trying-out-ceylon-part-1.html</id>
    <published>2013-11-17T00:00:00Z</published>
    <updated>2013-11-17T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on November 17, 2013
    
</div>

<p>Ceylon’s first production release was announced on 12th of November. I decided to try it out after going through the quick introduction, as it looked quite promising. In a series of posts I’d like to share my first attempts to use this interesting language.</p>
<p>This first release came with an eclipse plugin as well - after installing it I was immediately able to start working on my test project. In this few hours the plugin seemed to be stable enough, I did not experience any problems.</p>
<p>I have a <code>JVLT</code> file which I created while attending a foreign language course about a year ago. I was using only a limited subset of this application, so basically what I have is a .jvlt file, which is in fact a ZIP archive, in which a <code>dict.xml</code> stores a set of words and for each word one or more translation and the lesson we have learnt it.</p>
<p>See the following example:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode xml"><code class="sourceCode xml"><a class="sourceLine" id="cb1-1" title="1"><span class="kw">&lt;dictionary</span><span class="ot"> language=</span><span class="st">&quot;french&quot;</span><span class="ot"> version=</span><span class="st">&quot;1.4&quot;</span><span class="kw">&gt;</span></a>
<a class="sourceLine" id="cb1-2" title="2">  <span class="kw">&lt;entry</span><span class="ot"> id=</span><span class="st">&quot;e275&quot;</span><span class="kw">&gt;</span></a>
<a class="sourceLine" id="cb1-3" title="3">    <span class="kw">&lt;orth&gt;</span>à côté de<span class="kw">&lt;/orth&gt;</span></a>
<a class="sourceLine" id="cb1-4" title="4">    <span class="kw">&lt;sense</span><span class="ot"> id=</span><span class="st">&quot;e275-s1&quot;</span><span class="kw">&gt;</span></a>
<a class="sourceLine" id="cb1-5" title="5">      <span class="kw">&lt;trans&gt;</span>mellett<span class="kw">&lt;/trans&gt;</span></a>
<a class="sourceLine" id="cb1-6" title="6">    <span class="kw">&lt;/sense&gt;</span></a>
<a class="sourceLine" id="cb1-7" title="7">    <span class="kw">&lt;sense</span><span class="ot"> id=</span><span class="st">&quot;e275-s2&quot;</span><span class="kw">&gt;</span></a>
<a class="sourceLine" id="cb1-8" title="8">      <span class="kw">&lt;trans&gt;</span>mellé<span class="kw">&lt;/trans&gt;</span></a>
<a class="sourceLine" id="cb1-9" title="9">    <span class="kw">&lt;/sense&gt;</span></a>
<a class="sourceLine" id="cb1-10" title="10">    <span class="kw">&lt;lesson&gt;</span>8<span class="kw">&lt;/lesson&gt;</span></a>
<a class="sourceLine" id="cb1-11" title="11">  <span class="kw">&lt;/entry&gt;</span></a>
<a class="sourceLine" id="cb1-12" title="12"><span class="kw">&lt;/dictionary&gt;</span></a></code></pre></div>
<p>My idea was to write an application that helps me learning and practicing these words.</p>
<p>In this first post I’m going to load the dictionary from the JVLT file.</p>
<p>To get started, I created a new Ceylon module with the help of the IDE called jvlt. This immediately created three program units: <code>module.ceylon</code>, <code>package.ceylon</code> and <code>run.ceylon</code>. The <code>module.ceylon</code> contains the module definition, which also describes the module’s dependencies. As I was trying to implement the dictionary reader, I ended up with the following module definition:</p>
<pre class="ceylon"><code>module jvlt &quot;1.0.0&quot; {
    shared import ceylon.file &quot;1.0.0&quot;;
	import ceylon.collection &quot;1.0.0&quot;;
    import ceylon.interop.java &quot;1.0.0&quot;;
 
    import javax.xml &quot;7&quot;; 
 
    import ceylon.test &quot;1.0.0&quot;;
}</code></pre>
<p>Let’s start with the data model we want to build up! The dictionary consists of words:</p>
<pre class="ceylon"><code>&quot;Represents a foreign word with one or more senses&quot;
shared class Word(shared String word, shared Set&lt;string&gt; senses, shared Integer lesson){ 
}</code></pre>
<p>The word, senses and lessons are all shared attributes of this class, accessible from the outside. To make it easy to access the word objects by their foreign word, I’m currently storing them in a map:</p>
<pre class="ceylon"><code>&quot;Represents a dictionary of words in a given language&quot;
shared class Dictionary(shared String language, shared Map&lt;string word=&quot;&quot;&gt; words) {
}</code></pre>
<p>Basically that’s the data model, but I wrapped the whole thing in an abstract JVLT class which looks like this:</p>
<pre class="ceylon"><code>&quot;Represents a JVLT file&quot;
abstract shared class JVLT() {
 
	&quot;The dictionary stored in this JVLT&quot;
 	formal shared Dictionary dictionary;
}</code></pre>
<p>The idea is that you get a JVLT instance from one of the helper functions and then use it as a root of the data model.</p>
<p>The next thing is to create this data model from the JVLT files. For this, I needed two things:</p>
<ul>
<li>Reading a ZIP archive</li>
<li>Parsing XML</li>
</ul>
<p>It turned out that Ceylon’s file module has ZIP support, with the <code>createZipFileSystem</code> function as an entry point. I made two module-level functions beside the JVLT class for creating instances deriving from the abstract JVLT class:</p>
<ul>
<li><code>loadJVLT</code> which loads a JVLT ZIP archive from the file system</li>
<li><code>loadJVLTFromDictionaryString</code> oads directly a dict.xml-like XML passed as a simple string. I’m using this for unit testing the XML parser.</li>
</ul>
<p>Let’s see the ZIP handling first:</p>
<pre class="ceylon"><code>&quot;Loads a JVLT file from a `.jvlt` ZIP archive, if possible.&quot;
shared JVLT? loadJVLT(File file) {
	value zip = createZipFileSystem(file);
 	value dictPath = zip.parsePath(&quot;/dict.xml&quot;);
 	if (is File dictFile = dictPath.resource) {  
  		try (reader = dictFile.Reader()) {
   
   			return loadJVLTFromDictionaryString(readAll(reader));
  		}
 	} else {
  		return null;
 	}
}</code></pre>
<p>Well, the error handling is not too sophisticated in this case, it either returns a JVLT or returns <code>null</code> if the given file did not have a <code>dict.xml</code> in it. Other error conditions such as a <code>dict.xml</code> with a wrong format, etc., are not handled currently. As you can see, I’m reusing my other load function here, once the <code>dict.xml</code> is read.</p>
<p>There are two interesting things here. First, the if statement where we check if the resource is an instance of <code>File</code> and immediately store it in the value called <code>dictFile</code>. The <code>dictPath.resource</code> attribute has the type <code>Resource</code> which is a Ceylon interface. It is either an <code>ExistingResource</code>: <code>Directory</code>, <code>File</code> or <code>Link</code>, or <code>Nil</code>. In any case if it is not a <code>File</code> instance, we just return <code>null</code>.</p>
<p>For simplicity, I’m reading the full <code>dict.xml</code> into a string before parsing it. For this purpose I wrote a small helper function <code>readAll</code>:</p>
<pre class="ceylon"><code>&quot;Reads all lines from a file reader and returns the concatenated string&quot;
String readAll(File.Reader reader) { 
	variable String result = &quot;&quot;;
 
 	while (exists line = reader.readLine()) {
  		result += line; 
 	}
 
 	return result;
}</code></pre>
<p>Probably it’s not an optimal solution, but works :)</p>
<p>Now that we have our data model and have a way to build it up from XML, we can write some unit tests to see how it works. The Ceylon SDK has a test module and the Ceylon IDE supports running the tests. There is a <a href="http://ceylon-lang.org/documentation/1.0/ide/test-plugin/">separate page in the documentation</a> describing how. It is really simple, I had to add the test module as a dependency, and I created a separate file to hold my test definitions. The class groups the tests together and optionally supports running extra code before/after each test case, as in other test frameworks:</p>
<pre class="ceylon"><code>class DictionaryParserTests() {

	shared test void emptyDictionary() {
	  	value dic = loadJVLTFromDictionaryString(&quot;&lt;dictionary&gt;&quot;);
	  
	  	assert (dic.dictionary.words.empty);
	  	assert (dic.dictionary.language == &quot;unknown&quot;);
	}

 	shared test void languageAttributeRead() {
  		value dic = loadJVLTFromDictionaryString(&quot;&lt;dictionary language=&quot;testlang&quot;&gt;&quot;);
  		assert (dic.dictionary.language == &quot;testlang&quot;);
 	}

	// ...
</code></pre>
<p>I won’t paste here all the test code, only a few samples to get the feeling how the Ceylon code looks like. To test whether a given word’s translations are loaded correctly, I wrote a helper function:</p>
<pre class="ceylon"><code>void assertSenses(JVLT jvlt, String w, [String+] expectedSenses) {
  
    Word? word = jvlt.dictionary.words[w];
    if (exists word) {
    	assert (word.senses.equals(HashSet(expectedSenses)));  
    } else {
     	fail(&quot;Word does not exists&quot;);
    }
}</code></pre>
<p>This helper function can be used to assert that a word has been loaded correctly:</p>
<pre class="ceylon"><code>shared test void wordWithMultipleSenses() {
	value dic = loadJVLTFromDictionaryString(
  		&quot;&lt;dictionary&gt;
   			&lt;entry id=&quot;e1&quot;&gt;
    			&lt;orth&gt;src1&lt;/orth&gt;
    			&lt;sense id=&quot;e1-s1&quot;&gt;
     				&lt;trans&gt;dst1&lt;/trans&gt;
    			&lt;/sense&gt;
    			&lt;sense id=&quot;e1-s2&quot;&gt;
     				&lt;trans&gt;dst2&lt;/trans&gt;
    			&lt;/sense&gt;    
   			&lt;/entry&gt;  
   		&lt;/dictionary&gt;&quot;);
 
 	assertSenses(dic, &quot;src1&quot;, [&quot;dst1&quot;, &quot;dst2&quot;]);
}</code></pre>
<p>Now the only problem is that there is no XML parsing support in the Ceylon SDK currently, so it has to be done using Java interop. As I wrote the code to build up the data model from the XML, I wrote several helper functions to make it easier to fit into the language. So let’s see first how the dictionary loading is defined, and then I’ll show the helper functions.</p>
<p>The XML parsing is done by two module level functions which are not shared - only used by the JVLT constructor functions I shown before. The first one creates a map entry for a single word:</p>
<pre class="ceylon"><code>&quot;Creates a word entry for the dictionary&quot;
String-&gt;Word loadEntry(Element elem) {
 
 	value w = Word {
  		word = selectNodeText(elem, &quot;orth&quot;) else &quot;???&quot;;
  		lesson = selectNodeInteger(elem, &quot;lesson&quot;) else 0;
  		senses = HashSet(selectNodes(elem, &quot;sense/trans&quot;)
  					.map((Node n) =&gt; n.textContent));
 	};
 	return w.word-&gt;w;
}</code></pre>
<p>and the second one loads all the words from the XML document:</p>
<pre class="ceylon"><code>&quot;Loads a dictionary from JVLT&#39;s `dict.xml` format.&quot;
Dictionary loadDictionaryFromXML(Document doc) { 

	doc.documentElement.normalize();

 	return Dictionary { 
  		language = getAttribute(doc.documentElement, &quot;language&quot;) else &quot;unknown&quot;;
  		words = HashMap({ 
     		for (node in selectNodes(doc, &quot;dictionary/entry&quot;))
       			if (is Element elem = node)
             		loadEntry(elem) });   
 	};
}</code></pre>
<p>The function which returns the JVLT instance uses this function and Java interop to read the dictionary:</p>
<pre class="ceylon"><code>&quot;Loads a JVLT file by the parsing the dictionary XML directly from a string&quot;
shared JVLT loadJVLTFromDictionaryString(String dictXML) {
	value docBuilderFactory = DocumentBuilderFactory.newInstance();
 	value builder = docBuilderFactory.newDocumentBuilder();
 	value doc = builder.parse(ByteArrayInputStream(javaString(dictXML).bytes));
 
 	object result extends JVLT() { 
  		dictionary = loadDictionaryFromXML(doc);
 	}
 	return result;
}</code></pre>
<p>There are two things to notice here: we had to convert from Ceylon’s string to Java string. This is not done automatically and we need the <code>ceylon.interop.java</code> module to do it. In the last lines we define an anonymous class extending from JVLT and overwriting it’s abstract dictionary attribute. Then this anonymous class instance is returned as the loaded JVLT.</p>
<p>To make the XML parsing less painful, I defined a few helper functions in a separate compilation unit (<code>XmlHelper.ceylon</code>). I won’t show here the full file but there are some interesting parts. First, from Ceylon you cannot call static methods, but you can import them. I’m using the following two import statements:</p>
<pre class="ceylon"><code>import org.w3c.dom { Node, NodeList, Element }
import javax.xml.xpath { XPathFactory { newXPathFactory = newInstance },
       XPathConstants { nodeSet = \iNODESET }}</code></pre>
<p>The first one is straightforward. It imports three DOM interfaces. The second one first imports the <code>XPathFactory.newInstance</code> static method and also renames it, as newInstance is a too generic name without its class name as a prefix. The third line imports a constant value and gives it a Ceylon-compatible name. Because in Ceylon only the types can start with an uppercase character, we have to use a special and ugly syntax which helps the interoperability - prefixing it with <code>\i</code>.</p>
<p>The <code>ceylon.interop.java</code> module has helper classes to make Java Iterable objects iterable in Ceylon, but unfortunately the <code>NodeList</code> interface is not iterable in Java either. So I wrote a simple wrapper that iterates through a node list:</p>
<pre class="ceylon"><code>class NodeListIterator(NodeList nodes) satisfies Iterable&lt;Node&gt; {
	shared actual default Iterator&lt;Node&gt; iterator() {
  		object it satisfies Iterator&lt;Node&gt; {   
   			variable Integer i = 0;
   
   			shared actual Node|Finished next() {
    			if (i &lt; nodes.length) {
     				return nodes.item(i++);
    			} else {
     				return finished;
    			}
   			}
  		}
  		return it;
 	}
}</code></pre>
<p>Using this iterator and the imports I wrote a <code>selectNodes</code> function to run XPath expressions and return the result as a Ceylon iterable:</p>
<pre class="ceylon"><code>{Node*} selectNodes(Node root, String xpath) { 
	value factory = newXPathFactory();
 	value xpathCompiler = factory.newXPath();
 	value expr = xpathCompiler.compile(xpath);
 	value nodeList = expr.evaluate(root, nodeSet); 
 	if (is NodeList nodeList) {  
  		return NodeListIterator(nodeList);
 	}
 	else {
  		return [];
 	}
}</code></pre>
<p>Using this function it is very easy to write a variant that selects a single node:</p>
<pre class="ceylon"><code>Node? selectNode(Node root, String xpath) { 
	return selectNodes(root, xpath).first;
}</code></pre>
<p>There are some other helper functions returning the node’s text, converting it to integer, etc. but I think they are not that interesting. Now that I have my data model which is built from my JVLT file, the next thing is to make a user interface somehow where the vocabulary can be shown an the user’s knowledge can be tested/improved. This will be the topic of some future posts, as soon as I have time to experiment more with this new language.</p>
]]></summary>
</entry>
<entry>
    <title>Cloning WPF flow document fragments</title>
    <link href="http://vigoo.github.io/posts/2013-10-25-cloning-wpf-flow-document-fragments.html" />
    <id>http://vigoo.github.io/posts/2013-10-25-cloning-wpf-flow-document-fragments.html</id>
    <published>2013-10-25T00:00:00Z</published>
    <updated>2013-10-25T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on October 25, 2013
    
</div>

<p>Today I had to write such an ugly hack to fix a bug that I decided to start writing a blog where I can show it to the world :)</p>
<p>The software I’m working on has some sort of context sensitive help panel, which is implemented using dynamically generated <a href="http://msdn.microsoft.com/en-us/library/aa970909.aspx">flow documents</a>. The software loads a large set of flow document sections from a XAML file runtime, and later builds documents from a subset of them.</p>
<p>For some reason (which belong to a separate post), it is not possible to reuse these flow document elements in multiple flow documents, not even if there is only one at a time. To work around this, I was cloning these sections before adding them to the document.</p>
<p>As WPF elements are not <em>cloneable</em>, I was using the method recommended many places, for example <a href="http://stackoverflow.com/questions/32541/how-can-you-clone-a-wpf-object">in this StackOverflow post</a>: saving the object tree to an in-memory XAML stream, and loading it back.</p>
<p>This worked quite well.. until we discovered a bug, which I still cannot explain. In some cases which were easily reproducible for any developer, but the code running in those cases being exactly the same as in other, working cases, the clone method simply stopped working.</p>
<p>Stopped working here means that the following code:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode cs"><code class="sourceCode cs"><a class="sourceLine" id="cb1-1" title="1"><span class="dt">var</span> xaml = XamlWriter.<span class="fu">Save</span>(block);</a></code></pre></div>
<p>would write out the correct object hierarchy, but without any properties (no attributes, no content properties, nothing but the element names)! In the same time the objects in the memory were untouched and still had all the relevant properties set.</p>
<p>I also tried to write my own XAML serializer based on the code found <a href="http://go4answers.webhost4life.com/Example/xaml-serialization-replacement-75133.aspx">at this site</a>, but this was only good to find out that the problem lies deep within the <code>MarkupWriter</code> class, which is the same what the <code>XamlWriter</code> uses internally. When the <code>XamlWriter</code> failed, my own code could not find any properties using the returned <a href="http://msdn.microsoft.com/en-us/library/system.windows.markup.primitives.markupobject.aspx">MarkupObject</a>:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode cs"><code class="sourceCode cs"><a class="sourceLine" id="cb2-1" title="1">MarkupObject markupObj = MarkupWriter.<span class="fu">GetMarkupObjectFor</span>(obj);</a></code></pre></div>
<p>For the same object, in the working scenarios it returned a markup object with a working <code>Properties</code> collection.</p>
<p>So here is the final <em>“solution”</em> which I’m not really proud of, but solved the problem. Maybe with some modifications it is useful for someone struggling with the framework:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode cs"><code class="sourceCode cs"><a class="sourceLine" id="cb3-1" title="1"><span class="co">/// </span><span class="kw">&lt;summary&gt;</span></a>
<a class="sourceLine" id="cb3-2" title="2"><span class="co">/// Horrible ugly clone hack to issues where XamlWriter/XamlReader based</span></a>
<a class="sourceLine" id="cb3-3" title="3"><span class="co">/// clone method did not work.</span></a>
<a class="sourceLine" id="cb3-4" title="4"><span class="co">/// </span><span class="kw">&lt;/summary&gt;</span></a>
<a class="sourceLine" id="cb3-5" title="5"><span class="kw">public</span> <span class="kw">static</span> <span class="kw">class</span> CloneHelper</a>
<a class="sourceLine" id="cb3-6" title="6">{</a>
<a class="sourceLine" id="cb3-7" title="7">    <span class="kw">public</span> <span class="kw">static</span> Block Clone&lt;t&gt;(<span class="kw">this</span> T block)</a>
<a class="sourceLine" id="cb3-8" title="8">        where T : Block</a>
<a class="sourceLine" id="cb3-9" title="9">    {</a>
<a class="sourceLine" id="cb3-10" title="10">        <span class="dt">var</span> result = (T)<span class="fu">DeepClone</span>(block);</a>
<a class="sourceLine" id="cb3-11" title="11"></a>
<a class="sourceLine" id="cb3-12" title="12">        <span class="kw">return</span> result;</a>
<a class="sourceLine" id="cb3-13" title="13">    }</a>
<a class="sourceLine" id="cb3-14" title="14"></a>
<a class="sourceLine" id="cb3-15" title="15">    <span class="kw">private</span> <span class="kw">static</span> <span class="dt">object</span> <span class="fu">DeepClone</span>(<span class="dt">object</span> obj)</a>
<a class="sourceLine" id="cb3-16" title="16">    {</a>
<a class="sourceLine" id="cb3-17" title="17">        <span class="kw">if</span> (obj != <span class="kw">null</span>)</a>
<a class="sourceLine" id="cb3-18" title="18">        {</a>
<a class="sourceLine" id="cb3-19" title="19">            <span class="co">// Replacing ResourceDictionary and Style values with null. </span></a>
<a class="sourceLine" id="cb3-20" title="20">            <span class="co">// In this particular use case it is correct to do</span></a>
<a class="sourceLine" id="cb3-21" title="21">            <span class="kw">if</span> (obj.<span class="fu">GetType</span>() == <span class="kw">typeof</span>(ResourceDictionary) ||</a>
<a class="sourceLine" id="cb3-22" title="22">                obj.<span class="fu">GetType</span>() == <span class="kw">typeof</span>(Style))</a>
<a class="sourceLine" id="cb3-23" title="23">            {</a>
<a class="sourceLine" id="cb3-24" title="24">                <span class="kw">return</span> <span class="kw">null</span>;</a>
<a class="sourceLine" id="cb3-25" title="25">            }</a>
<a class="sourceLine" id="cb3-26" title="26">            <span class="kw">else</span></a>
<a class="sourceLine" id="cb3-27" title="27">            {</a>
<a class="sourceLine" id="cb3-28" title="28">                <span class="co">// Value types and some special cases where we don&#39;t want to clone</span></a>
<a class="sourceLine" id="cb3-29" title="29">                <span class="kw">if</span> (obj.<span class="fu">GetType</span>().<span class="fu">IsValueType</span> ||</a>
<a class="sourceLine" id="cb3-30" title="30">                    obj.<span class="fu">GetType</span>() == <span class="kw">typeof</span> (Cursor) ||</a>
<a class="sourceLine" id="cb3-31" title="31">                    obj.<span class="fu">GetType</span>() == <span class="kw">typeof</span> (XmlLanguage))</a>
<a class="sourceLine" id="cb3-32" title="32">                {</a>
<a class="sourceLine" id="cb3-33" title="33">                    <span class="kw">return</span> obj;</a>
<a class="sourceLine" id="cb3-34" title="34">                }</a>
<a class="sourceLine" id="cb3-35" title="35">                <span class="kw">else</span></a>
<a class="sourceLine" id="cb3-36" title="36">                {</a>
<a class="sourceLine" id="cb3-37" title="37">                    <span class="co">// If it is cloneable, use it</span></a>
<a class="sourceLine" id="cb3-38" title="38">                    <span class="dt">var</span> cloneable = obj <span class="kw">as</span> ICloneable;</a>
<a class="sourceLine" id="cb3-39" title="39">                    <span class="kw">if</span> (cloneable != <span class="kw">null</span>)</a>
<a class="sourceLine" id="cb3-40" title="40">                    {</a>
<a class="sourceLine" id="cb3-41" title="41">                        <span class="kw">return</span> cloneable.<span class="fu">Clone</span>();</a>
<a class="sourceLine" id="cb3-42" title="42">                    }</a>
<a class="sourceLine" id="cb3-43" title="43">                    <span class="kw">else</span></a>
<a class="sourceLine" id="cb3-44" title="44">                    {</a>
<a class="sourceLine" id="cb3-45" title="45">                        <span class="co">// Creating the clone with reflection</span></a>
<a class="sourceLine" id="cb3-46" title="46">                        <span class="dt">var</span> typ = obj.<span class="fu">GetType</span>();</a>
<a class="sourceLine" id="cb3-47" title="47">                        <span class="dt">var</span> clone = Activator.<span class="fu">CreateInstance</span>(typ);                     </a>
<a class="sourceLine" id="cb3-48" title="48"></a>
<a class="sourceLine" id="cb3-49" title="49">                        <span class="co">// Property names which are known locally set </span></a>
<a class="sourceLine" id="cb3-50" title="50">                        <span class="co">// dependency properties</span></a>
<a class="sourceLine" id="cb3-51" title="51">                        <span class="dt">var</span> usedNames = <span class="kw">new</span> HashSet&lt;<span class="dt">string</span>&gt;();                        </a>
<a class="sourceLine" id="cb3-52" title="52"></a>
<a class="sourceLine" id="cb3-53" title="53">                        <span class="co">// Copying locally set dependency properties from the </span></a>
<a class="sourceLine" id="cb3-54" title="54">                        <span class="co">// source to the target</span></a>
<a class="sourceLine" id="cb3-55" title="55">                        <span class="dt">var</span> dobjSource = obj <span class="kw">as</span> DependencyObject;</a>
<a class="sourceLine" id="cb3-56" title="56">                        <span class="dt">var</span> dobjTarget = clone <span class="kw">as</span> DependencyObject;</a>
<a class="sourceLine" id="cb3-57" title="57">                        <span class="kw">if</span> (dobjSource != <span class="kw">null</span> &amp;&amp; dobjTarget != <span class="kw">null</span>)</a>
<a class="sourceLine" id="cb3-58" title="58">                        {</a>
<a class="sourceLine" id="cb3-59" title="59">                            <span class="dt">var</span> locallySetProperties = </a>
<a class="sourceLine" id="cb3-60" title="60">                                dobjSource.<span class="fu">GetLocalValueEnumerator</span>();</a>
<a class="sourceLine" id="cb3-61" title="61">                            <span class="kw">while</span> (locallySetProperties.<span class="fu">MoveNext</span>())</a>
<a class="sourceLine" id="cb3-62" title="62">                            {</a>
<a class="sourceLine" id="cb3-63" title="63">                                DependencyProperty dp = </a>
<a class="sourceLine" id="cb3-64" title="64">                                    locallySetProperties.<span class="fu">Current</span>.<span class="fu">Property</span>;</a>
<a class="sourceLine" id="cb3-65" title="65">                                <span class="kw">if</span> (!dp.<span class="fu">ReadOnly</span>)</a>
<a class="sourceLine" id="cb3-66" title="66">                                {</a>
<a class="sourceLine" id="cb3-67" title="67">                                    dobjTarget.<span class="fu">SetValue</span>(dp, dobjSource.<span class="fu">GetValue</span>(dp));</a>
<a class="sourceLine" id="cb3-68" title="68">                                    usedNames.<span class="fu">Add</span>(dp.<span class="fu">Name</span>);</a>
<a class="sourceLine" id="cb3-69" title="69">                                }</a>
<a class="sourceLine" id="cb3-70" title="70">                            }</a>
<a class="sourceLine" id="cb3-71" title="71">                        }                        </a>
<a class="sourceLine" id="cb3-72" title="72"></a>
<a class="sourceLine" id="cb3-73" title="73">                        <span class="co">// Getting all the public, non-static properties of the source</span></a>
<a class="sourceLine" id="cb3-74" title="74">                        <span class="kw">foreach</span> (<span class="dt">var</span> pi <span class="kw">in</span> typ.<span class="fu">GetProperties</span>(</a>
<a class="sourceLine" id="cb3-75" title="75">                                            BindingFlags.<span class="fu">Instance</span> | </a>
<a class="sourceLine" id="cb3-76" title="76">                                            BindingFlags.<span class="fu">Public</span> | </a>
<a class="sourceLine" id="cb3-77" title="77">                                            BindingFlags.<span class="fu">FlattenHierarchy</span>))</a>
<a class="sourceLine" id="cb3-78" title="78">                        {</a>
<a class="sourceLine" id="cb3-79" title="79">                            <span class="co">// If it is not a dependency property </span></a>
<a class="sourceLine" id="cb3-80" title="80">                            <span class="co">// and not the default property...</span></a>
<a class="sourceLine" id="cb3-81" title="81">                            <span class="kw">if</span> (pi.<span class="fu">CanRead</span> &amp;&amp;</a>
<a class="sourceLine" id="cb3-82" title="82">                                !usedNames.<span class="fu">Contains</span>(pi.<span class="fu">Name</span>) &amp;&amp;</a>
<a class="sourceLine" id="cb3-83" title="83">                                !<span class="fu">IsDependencyProperty</span>(dobjSource, pi) &amp;&amp;</a>
<a class="sourceLine" id="cb3-84" title="84">                                pi.<span class="fu">Name</span> != <span class="st">&quot;Item&quot;</span>)</a>
<a class="sourceLine" id="cb3-85" title="85">                            {                                    </a>
<a class="sourceLine" id="cb3-86" title="86">                                <span class="dt">var</span> val = pi.<span class="fu">GetValue</span>(obj, <span class="kw">null</span>);</a>
<a class="sourceLine" id="cb3-87" title="87"></a>
<a class="sourceLine" id="cb3-88" title="88">                                <span class="co">// ..and it is writeable, then we recursively clone </span></a>
<a class="sourceLine" id="cb3-89" title="89">                                <span class="co">// the value and set the property:</span></a>
<a class="sourceLine" id="cb3-90" title="90">                                <span class="kw">if</span> (pi.<span class="fu">CanWrite</span>)</a>
<a class="sourceLine" id="cb3-91" title="91">                                {                                        </a>
<a class="sourceLine" id="cb3-92" title="92">                                    pi.<span class="fu">SetValue</span>(clone, <span class="fu">DeepClone</span>(val), <span class="kw">null</span>);</a>
<a class="sourceLine" id="cb3-93" title="93">                                }</a>
<a class="sourceLine" id="cb3-94" title="94">                                <span class="kw">else</span></a>
<a class="sourceLine" id="cb3-95" title="95">                                {</a>
<a class="sourceLine" id="cb3-96" title="96">                                    <span class="co">// ..otherwise if it is a readonly list property, </span></a>
<a class="sourceLine" id="cb3-97" title="97">                                    <span class="co">// go through each item,  clone it and add to </span></a>
<a class="sourceLine" id="cb3-98" title="98">                                    <span class="co">// the clone&#39;s list property</span></a>
<a class="sourceLine" id="cb3-99" title="99">                                    <span class="kw">if</span> (pi.<span class="fu">PropertyType</span></a>
<a class="sourceLine" id="cb3-100" title="100">                                          .<span class="fu">GetInterfaces</span>()</a>
<a class="sourceLine" id="cb3-101" title="101">                                          .<span class="fu">Contains</span>(<span class="kw">typeof</span> (IList)))</a>
<a class="sourceLine" id="cb3-102" title="102">                                    {</a>
<a class="sourceLine" id="cb3-103" title="103">                                        <span class="dt">var</span> source = val <span class="kw">as</span> IList;</a>
<a class="sourceLine" id="cb3-104" title="104">                                        <span class="dt">var</span> target = pi.<span class="fu">GetValue</span>(clone, <span class="kw">null</span>) <span class="kw">as</span> IList;</a>
<a class="sourceLine" id="cb3-105" title="105"></a>
<a class="sourceLine" id="cb3-106" title="106">                                        <span class="kw">if</span> (source != <span class="kw">null</span> &amp;&amp; target != <span class="kw">null</span>)</a>
<a class="sourceLine" id="cb3-107" title="107">                                        {</a>
<a class="sourceLine" id="cb3-108" title="108">                                            <span class="kw">foreach</span> (<span class="dt">var</span> item <span class="kw">in</span> source)</a>
<a class="sourceLine" id="cb3-109" title="109">                                                target.<span class="fu">Add</span>(<span class="fu">DeepClone</span>(item));</a>
<a class="sourceLine" id="cb3-110" title="110">                                        }</a>
<a class="sourceLine" id="cb3-111" title="111">                                    }</a>
<a class="sourceLine" id="cb3-112" title="112">                                }</a>
<a class="sourceLine" id="cb3-113" title="113">                            }</a>
<a class="sourceLine" id="cb3-114" title="114">                        }                        </a>
<a class="sourceLine" id="cb3-115" title="115"></a>
<a class="sourceLine" id="cb3-116" title="116">                        <span class="kw">return</span> clone;</a>
<a class="sourceLine" id="cb3-117" title="117">                    }</a>
<a class="sourceLine" id="cb3-118" title="118">                }</a>
<a class="sourceLine" id="cb3-119" title="119">            }</a>
<a class="sourceLine" id="cb3-120" title="120">        }</a>
<a class="sourceLine" id="cb3-121" title="121">        <span class="kw">else</span></a>
<a class="sourceLine" id="cb3-122" title="122">        {</a>
<a class="sourceLine" id="cb3-123" title="123">            <span class="kw">return</span> <span class="kw">null</span>;</a>
<a class="sourceLine" id="cb3-124" title="124">        }</a>
<a class="sourceLine" id="cb3-125" title="125">    }    </a>
<a class="sourceLine" id="cb3-126" title="126"></a>
<a class="sourceLine" id="cb3-127" title="127">    <span class="co">/// </span><span class="kw">&lt;summary&gt;</span></a>
<a class="sourceLine" id="cb3-128" title="128">    <span class="co">/// Tries to determine if a property is a dependency property, by reflection and </span></a>
<a class="sourceLine" id="cb3-129" title="129">    <span class="co">/// naming convention</span></a>
<a class="sourceLine" id="cb3-130" title="130">    <span class="co">/// </span><span class="kw">&lt;/summary&gt;</span></a>
<a class="sourceLine" id="cb3-131" title="131">    <span class="co">/// </span><span class="kw">&lt;param</span><span class="ot"> name=</span><span class="dt">&quot;dobj&quot;</span><span class="kw">&gt;</span><span class="co">Dependency object</span></a>
<a class="sourceLine" id="cb3-132" title="132">    <span class="co">/// </span><span class="kw">&lt;param</span><span class="ot"> name=</span><span class="dt">&quot;pi&quot;</span><span class="kw">&gt;</span><span class="co">Property info</span></a>
<a class="sourceLine" id="cb3-133" title="133">    <span class="co">/// </span><span class="kw">&lt;returns&gt;</span><span class="co">Returns </span><span class="kw">&lt;c&gt;</span><span class="co">true</span><span class="kw">&lt;/c&gt;</span><span class="co"> if the given property seems to be a </span></a>
<a class="sourceLine" id="cb3-134" title="134">    <span class="co">///          CLR access property for a dependency property.</span><span class="kw">&lt;/returns&gt;</span></a>
<a class="sourceLine" id="cb3-135" title="135">    <span class="kw">private</span> <span class="kw">static</span> <span class="dt">bool</span> <span class="fu">IsDependencyProperty</span>(DependencyObject dobj, PropertyInfo pi)</a>
<a class="sourceLine" id="cb3-136" title="136">    {</a>
<a class="sourceLine" id="cb3-137" title="137">        <span class="kw">if</span> (dobj != <span class="kw">null</span>)</a>
<a class="sourceLine" id="cb3-138" title="138">        {</a>
<a class="sourceLine" id="cb3-139" title="139">            <span class="dt">var</span> dpProp = dobj.<span class="fu">GetType</span>().<span class="fu">GetProperty</span>(pi.<span class="fu">Name</span> + <span class="st">&quot;Property&quot;</span>, </a>
<a class="sourceLine" id="cb3-140" title="140">                                                    BindingFlags.<span class="fu">Static</span> |</a>
<a class="sourceLine" id="cb3-141" title="141">                                                    BindingFlags.<span class="fu">Public</span> |</a>
<a class="sourceLine" id="cb3-142" title="142">                                                    BindingFlags.<span class="fu">FlattenHierarchy</span>);</a>
<a class="sourceLine" id="cb3-143" title="143">            <span class="kw">if</span> (dpProp != <span class="kw">null</span> &amp;&amp; dpProp.<span class="fu">PropertyType</span> == <span class="kw">typeof</span> (DependencyProperty))</a>
<a class="sourceLine" id="cb3-144" title="144">                <span class="kw">return</span> <span class="kw">true</span>;</a>
<a class="sourceLine" id="cb3-145" title="145">            <span class="kw">else</span></a>
<a class="sourceLine" id="cb3-146" title="146">            {</a>
<a class="sourceLine" id="cb3-147" title="147">                <span class="dt">var</span> dpField = dobj.<span class="fu">GetType</span>().<span class="fu">GetField</span>(pi.<span class="fu">Name</span> + <span class="st">&quot;Property&quot;</span>, </a>
<a class="sourceLine" id="cb3-148" title="148">                                                      BindingFlags.<span class="fu">Static</span> | </a>
<a class="sourceLine" id="cb3-149" title="149">                                                      BindingFlags.<span class="fu">Public</span> | </a>
<a class="sourceLine" id="cb3-150" title="150">                                                      BindingFlags.<span class="fu">FlattenHierarchy</span>);</a>
<a class="sourceLine" id="cb3-151" title="151">                <span class="kw">if</span> (dpField != <span class="kw">null</span> &amp;&amp; </a>
<a class="sourceLine" id="cb3-152" title="152">                    dpField.<span class="fu">FieldType</span> == <span class="kw">typeof</span> (DependencyProperty) &amp;&amp; </a>
<a class="sourceLine" id="cb3-153" title="153">                    dpField.<span class="fu">IsInitOnly</span> &amp;&amp; dpField.<span class="fu">IsStatic</span>)</a>
<a class="sourceLine" id="cb3-154" title="154">                    <span class="kw">return</span> <span class="kw">true</span>;</a>
<a class="sourceLine" id="cb3-155" title="155">            }</a>
<a class="sourceLine" id="cb3-156" title="156">        }        </a>
<a class="sourceLine" id="cb3-157" title="157"></a>
<a class="sourceLine" id="cb3-158" title="158">        <span class="kw">return</span> <span class="kw">false</span>;</a>
<a class="sourceLine" id="cb3-159" title="159">    }</a>
<a class="sourceLine" id="cb3-160" title="160">}</a></code></pre></div>
]]></summary>
</entry>

</feed>
