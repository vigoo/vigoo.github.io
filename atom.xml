<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>vigoo's software development blog</title>
    <link href="http://vigoo.github.io/atom.xml" rel="self" />
    <link href="http://vigoo.github.io" />
    <id>http://vigoo.github.io/atom.xml</id>
    <author>
        <name>Daniel Vigovszky</name>
        <email>daniel.vigovszky@gmail.com</email>
    </author>
    <updated>2023-12-02T00:00:00Z</updated>
    <entry>
    <title>Type class derivation with ZIO Schema</title>
    <link href="http://vigoo.github.io/posts/2023-12-02-zio-schema-deriving.html" />
    <id>http://vigoo.github.io/posts/2023-12-02-zio-schema-deriving.html</id>
    <published>2023-12-02T00:00:00Z</published>
    <updated>2023-12-02T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on December  2, 2023
    
</div>

<h2 id="introduction">Introduction</h2>
<p>Making the compiler to automatically <em>derive</em> implementations of a type class for your custom algebraic data types is a common technique in programming languages. Haskell, for example, has built-in syntax for it:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">Literal</span> <span class="ot">=</span> <span class="dt">StringLit</span> <span class="dt">String</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>             <span class="op">|</span> <span class="dt">BoolLit</span> <span class="dt">Bool</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>               <span class="kw">deriving</span> (<span class="dt">Show</span>)</span></code></pre></div>
<p>and Rust is using macros instantiated by <em>annotations</em> to do the same:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode rust"><code class="sourceCode rust"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="at">#[</span>deriving<span class="at">(</span><span class="bu">Debug</span><span class="at">)]</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a><span class="kw">enum</span> Literal <span class="op">{</span></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>  StringLit(<span class="dt">String</span>)<span class="op">,</span></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a>  BoolLit(<span class="dt">bool</span>)</span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>Scala 3 has its own syntax for deriving type classes:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a>enum Literal deriving Show<span class="op">:</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a>  <span class="cf">case</span> <span class="fu">StringLit</span><span class="op">(</span>value<span class="op">:</span> <span class="ex">String</span><span class="op">)</span></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a>  <span class="cf">case</span> <span class="fu">BoolLit</span><span class="op">(</span>value<span class="op">:</span> <span class="ex">Boolean</span><span class="op">)</span></span></code></pre></div>
<p>but the more traditional way that works with Scala 2 as well is to define an implicit in the type’s companion object by an explicit macro invocation:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="kw">sealed</span> <span class="kw">trait</span> Literal</span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a><span class="kw">object</span> Literal <span class="op">{</span></span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a>  <span class="kw">final</span> <span class="cf">case</span> <span class="kw">class</span> <span class="fu">StringLit</span><span class="op">(</span>value<span class="op">:</span> <span class="ex">String</span><span class="op">)</span> <span class="kw">extends</span> Literal</span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a>  <span class="kw">final</span> <span class="cf">case</span> <span class="kw">class</span> <span class="fu">BoolLit</span><span class="op">(</span>value<span class="op">:</span> <span class="ex">String</span><span class="op">)</span> <span class="kw">extends</span> Literal</span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a>  <span class="kw">implicit</span> <span class="kw">val</span> show<span class="op">:</span> Show<span class="op">[</span>Literal<span class="op">]</span> <span class="op">=</span> DeriveShow<span class="op">[</span>Literal<span class="op">]</span></span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>All these examples from different languages are common in a way that in order to automatically generate an implementation for an arbitrary type we need to be able to gather information about these types as (compilation-) runtime values, and to generate new code fragments (or actual abstract syntax tree) which then takes part of to the compilation, producing the same result as writing the implementation by hand.</p>
<p>This means using some kind of macro, depending on which programming language we use. But writing these macros is never easy, and in some cases can be very different from the usual way of writing code - so in each programming language people are writing <em>libraries</em> helping type class derivation in one way or the other.</p>
<p>In this post I will show a library like that for Scala, the <code>Deriver</code> feature of <a href="https://zio.dev/zio-schema/">ZIO Schema</a> that I added at the end of last year (2022). But before that let’s see a real world example and what alternatives we had.</p>
<h2 id="example">Example</h2>
<p><a href="https://vigoo.github.io/desert/">Desert</a> is a Scala serialization library I wrote in 2020. Not surprisingly in the core of Desert is a <em>trait</em> that describes serialization and deserailization of a type <code>T</code>:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="kw">trait</span> BinaryCodec<span class="op">[</span>T<span class="op">]</span> <span class="kw">extends</span> BinarySerializer<span class="op">[</span>T<span class="op">]</span> <span class="kw">with</span> BinaryDeserializer<span class="op">[</span>T<span class="op">]</span></span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a><span class="kw">trait</span> BinarySerializer<span class="op">[</span>T<span class="op">]</span> <span class="op">{</span></span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a>  <span class="kw">def</span> <span class="fu">serialize</span><span class="op">(</span>value<span class="op">:</span> T<span class="op">)(</span><span class="kw">implicit</span> context<span class="op">:</span> SerializationContext<span class="op">):</span> <span class="bu">Unit</span></span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a>  <span class="co">// ...</span></span>
<span id="cb5-6"><a href="#cb5-6" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb5-7"><a href="#cb5-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-8"><a href="#cb5-8" aria-hidden="true" tabindex="-1"></a><span class="kw">trait</span> BinaryDeserializer<span class="op">[</span>T<span class="op">]</span> <span class="op">{</span></span>
<span id="cb5-9"><a href="#cb5-9" aria-hidden="true" tabindex="-1"></a>  <span class="kw">def</span> <span class="fu">deserialize</span><span class="op">()(</span><span class="kw">implicit</span> ctx<span class="op">:</span> DeserializationContext<span class="op">):</span> T</span>
<span id="cb5-10"><a href="#cb5-10" aria-hidden="true" tabindex="-1"></a>  <span class="co">// ...</span></span>
<span id="cb5-11"><a href="#cb5-11" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>Although we can implement these traits manually, in order to take advantage of Desert’s type evolution capabilities, for complex types like <em>case classes</em> or <em>enums</em> we want the user to be able to write something like this:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="kw">final</span> <span class="cf">case</span> <span class="kw">class</span> <span class="ex">Point</span><span class="op">(</span>x<span class="op">:</span> <span class="bu">Int</span><span class="op">,</span> y<span class="op">:</span> <span class="bu">Int</span><span class="op">,</span> z<span class="op">:</span> <span class="bu">Int</span><span class="op">)</span></span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a><span class="kw">object</span> <span class="ex">Point</span> <span class="op">{</span></span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a>  <span class="kw">implicit</span> <span class="kw">val</span> codec<span class="op">:</span> BinaryCodec<span class="op">[</span><span class="ex">Point</span><span class="op">]</span> <span class="op">=</span> DerivedBinaryCodec<span class="op">.</span>derive</span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<h2 id="alternatives">Alternatives</h2>
<h3 id="scala-3-mirrors">Scala 3 mirrors</h3>
<p>First of all, <strong>Scala 3</strong> has some built-in support for implementing derivation macros using its <code>Mirror</code> type, explained in the <a href="https://docs.scala-lang.org/scala3/reference/contextual/derivation.html">official documentation</a>. We can see a simple example of this technique <a href="https://github.com/zio/zio/blob/series%2F2.x/test-magnolia/shared/src/main/scala-3/zio/test/magnolia/DeriveGen.scala">in the ZIO codebase</a> where I have implemented a deriving mechanism for the <code>Gen[R, A]</code> trait which is Scala 3 specific. (The Scala 2 version is using the Magnolia library, introduced below, which did not have a Scala 3 version back then). The <code>Mirror</code> values are summoned by the compiler and they provide the type information:</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a>inline <span class="kw">def</span> gen<span class="op">[</span>T<span class="op">](</span>using m<span class="op">:</span> Mirror<span class="op">.</span>Of<span class="op">[</span>T<span class="op">]):</span> DeriveGen<span class="op">[</span>T<span class="op">]</span> <span class="op">=</span></span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a>  <span class="kw">new</span> DeriveGen<span class="op">[</span>T<span class="op">]</span> <span class="op">{</span></span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a>    <span class="kw">def</span> derive<span class="op">:</span> Gen<span class="op">[</span><span class="ex">Any</span><span class="op">,</span> T<span class="op">]</span> <span class="op">=</span> <span class="op">{</span></span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true" tabindex="-1"></a>      <span class="kw">val</span> elemInstances <span class="op">=</span> summonAll<span class="op">[</span>m<span class="op">.</span>MirroredElemTypes<span class="op">]</span></span>
<span id="cb7-5"><a href="#cb7-5" aria-hidden="true" tabindex="-1"></a>      inline m <span class="cf">match</span> <span class="op">{</span></span>
<span id="cb7-6"><a href="#cb7-6" aria-hidden="true" tabindex="-1"></a>        <span class="cf">case</span> s<span class="op">:</span> Mirror<span class="op">.</span>SumOf<span class="op">[</span>T<span class="op">]</span>     <span class="op">=&gt;</span> <span class="fu">genSum</span><span class="op">(</span>s<span class="op">,</span> elemInstances<span class="op">)</span></span>
<span id="cb7-7"><a href="#cb7-7" aria-hidden="true" tabindex="-1"></a>        <span class="cf">case</span> p<span class="op">:</span> Mirror<span class="op">.</span>ProductOf<span class="op">[</span>T<span class="op">]</span> <span class="op">=&gt;</span> <span class="fu">genProduct</span><span class="op">(</span>p<span class="op">,</span> elemInstances<span class="op">)</span></span>
<span id="cb7-8"><a href="#cb7-8" aria-hidden="true" tabindex="-1"></a>      <span class="op">}</span></span>
<span id="cb7-9"><a href="#cb7-9" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb7-10"><a href="#cb7-10" aria-hidden="true" tabindex="-1"></a>  <span class="op">}</span></span></code></pre></div>
<p>As this function is an <a href="https://docs.scala-lang.org/scala3/reference/metaprogramming/inline.html">inline function</a>, it gets evaluated compile time, using this summoned <code>Mirror</code> value to produce an implementation of <code>Gen[Any, T]</code>.</p>
<p>This is a little low level and requires knowledge of inline functions and things like <code>summonAll</code> etc., but otherwise a relatively easy way to solve the type class derivation problem. But it is Scala 3 only.</p>
<p>Back in 2020 when I wrote the first version of Desert, there was no Scala 3 at all, and the three main way to do this were</p>
<ul>
<li>writing a (Scala 2) macro by hand</li>
<li>using <a href="https://github.com/milessabin/shapeless">Shapeless</a></li>
<li>using <a href="https://github.com/softwaremill/magnolia">Magnolia</a></li>
</ul>
<h3 id="scala-2-macros">Scala 2 macros</h3>
<p>Writing a custom derivation logic with Scala 2 macros is not easy, but it is completely possible. It starts by defining a <a href="https://www.scala-lang.org/api/2.13.12/scala-reflect/scala/reflect/macros/whitebox/Context.html">whitebox macro</a>:</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a><span class="kw">object</span> Derive <span class="op">{</span></span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a>  <span class="kw">def</span> derive<span class="op">[</span>A<span class="op">]:</span> BinaryCodec<span class="op">[</span>A<span class="op">]</span> <span class="op">=</span> macro deriveImpl<span class="op">[</span>A<span class="op">]</span></span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-4"><a href="#cb8-4" aria-hidden="true" tabindex="-1"></a>  <span class="kw">def</span> deriveImpl<span class="op">[</span>A<span class="op">:</span> c<span class="op">.</span>WeakTypeTag<span class="op">](</span></span>
<span id="cb8-5"><a href="#cb8-5" aria-hidden="true" tabindex="-1"></a>    c<span class="op">:</span> whitebox<span class="op">.</span><span class="ex">Context</span></span>
<span id="cb8-6"><a href="#cb8-6" aria-hidden="true" tabindex="-1"></a>  <span class="op">):</span> c<span class="op">.</span>Tree <span class="op">=</span> <span class="op">{</span></span>
<span id="cb8-7"><a href="#cb8-7" aria-hidden="true" tabindex="-1"></a>    <span class="kw">import</span> c<span class="op">.</span>universe<span class="op">.</span>_</span>
<span id="cb8-8"><a href="#cb8-8" aria-hidden="true" tabindex="-1"></a>    <span class="co">// ...</span></span>
<span id="cb8-9"><a href="#cb8-9" aria-hidden="true" tabindex="-1"></a>  <span class="op">}</span></span>
<span id="cb8-10"><a href="#cb8-10" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>The job of <code>deriveImpl</code> is to examine the type of <code>A</code> and generate a <code>Tree</code> that represents the implementation of the <code>BinaryCodec</code> trait for <code>A</code>. We can start by getting a <code>Type</code> value for <code>A</code>:</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true" tabindex="-1"></a><span class="kw">val</span> tpe<span class="op">:</span> <span class="ex">Type</span> <span class="op">=</span> weakTypeOf<span class="op">[</span>A<span class="op">]</span></span></code></pre></div>
<p>and then use that to get all kind of information about this type. For example to check if it is a <em>case class</em>, we could write</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> <span class="fu">isCaseClass</span><span class="op">(</span>tpe<span class="op">:</span> <span class="ex">Type</span><span class="op">):</span> <span class="ex">Boolean</span> <span class="op">=</span> tpe<span class="op">.</span>typeSymbol<span class="op">.</span>asClass<span class="op">.</span>isCaseClass</span></code></pre></div>
<p>and then try to collect all the fields of that case class:</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true" tabindex="-1"></a><span class="kw">val</span> fields <span class="op">=</span> tpe<span class="op">.</span>decls<span class="op">.</span>sorted<span class="op">.</span>collect <span class="op">{</span></span>
<span id="cb11-2"><a href="#cb11-2" aria-hidden="true" tabindex="-1"></a>  <span class="cf">case</span> p<span class="op">:</span> TermSymbol <span class="cf">if</span> p<span class="op">.</span>isCaseAccessor <span class="op">&amp;&amp;</span> <span class="op">!</span>p<span class="op">.</span>isMethod <span class="op">=&gt;</span> p</span>
<span id="cb11-3"><a href="#cb11-3" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>As we can see this is a very direct and low level way to work with the types, much harder then the <code>Mirror</code> type we used for Scala 3. Once we gathered all the necessary information for generating the derived type class, we can use <em>quotes</em> to construct fragments of Scala AST:</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb12-1"><a href="#cb12-1" aria-hidden="true" tabindex="-1"></a><span class="kw">val</span> fieldSerializationStatements <span class="op">=</span> <span class="co">// ...</span></span>
<span id="cb12-2"><a href="#cb12-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb12-3"><a href="#cb12-3" aria-hidden="true" tabindex="-1"></a><span class="kw">val</span> codec <span class="op">=</span> q<span class="st">&quot;new BinaryCodec[$tpe] {</span></span>
<span id="cb12-4"><a href="#cb12-4" aria-hidden="true" tabindex="-1"></a>  <span class="kw">def</span> <span class="fu">serialize</span><span class="op">(</span>value<span class="op">:</span> T<span class="op">)(</span><span class="kw">implicit</span> context<span class="op">:</span> SerializationContext<span class="op">):</span> <span class="bu">Unit</span> <span class="op">=</span> <span class="op">{</span></span>
<span id="cb12-5"><a href="#cb12-5" aria-hidden="true" tabindex="-1"></a>    <span class="op">..</span>$fieldSerializationStatements</span>
<span id="cb12-6"><a href="#cb12-6" aria-hidden="true" tabindex="-1"></a>  <span class="op">}</span></span>
<span id="cb12-7"><a href="#cb12-7" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>In the end, this quoted <code>codec</code> value is a <code>Tree</code> which we can return from the macro.</p>
<h3 id="shapeless">Shapeless</h3>
<p><a href="https://github.com/milessabin/shapeless">Shapeless</a> is a library for <em>type level programming</em> in Scala 2 (and there is a <a href="https://github.com/typelevel/shapeless-3">new version</a> for Scala 3 too). It provides things like type-level heterogeneous lists and all of operations on them, and it also defines <em>macros</em> that can convert an arbitrary case class into a <em>generic representation</em>, which is essentially a type level list containing all the fields. Similarly it can convert an arbitrary sum type (sealed trait in Scala 2) to a generic representation of coproducts. For example the <code>Point</code> case class we used in an earlier example would be represented like this:</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb13-1"><a href="#cb13-1" aria-hidden="true" tabindex="-1"></a><span class="kw">final</span> <span class="cf">case</span> <span class="kw">class</span> <span class="ex">Point</span><span class="op">(</span>x<span class="op">:</span> <span class="bu">Int</span><span class="op">,</span> y<span class="op">:</span> <span class="bu">Int</span><span class="op">,</span> z<span class="op">:</span> <span class="bu">Int</span><span class="op">)</span></span>
<span id="cb13-2"><a href="#cb13-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-3"><a href="#cb13-3" aria-hidden="true" tabindex="-1"></a><span class="kw">val</span> point<span class="op">:</span> <span class="ex">Point</span> <span class="op">=</span> <span class="ex">Point</span><span class="op">(</span><span class="dv">1</span><span class="op">,</span> <span class="dv">2</span><span class="op">,</span> <span class="dv">3</span><span class="op">)</span></span>
<span id="cb13-4"><a href="#cb13-4" aria-hidden="true" tabindex="-1"></a><span class="kw">val</span> genericPoint<span class="op">:</span> <span class="bu">Int</span> <span class="op">::</span> <span class="bu">Int</span> <span class="op">::</span> <span class="bu">Int</span> <span class="op">::</span> HNil <span class="op">=</span> <span class="co">// type</span></span>
<span id="cb13-5"><a href="#cb13-5" aria-hidden="true" tabindex="-1"></a>  <span class="dv">1</span> <span class="op">::</span> <span class="dv">2</span> <span class="op">::</span> <span class="dv">3</span> <span class="op">::</span> HNil <span class="co">// value</span></span>
<span id="cb13-6"><a href="#cb13-6" aria-hidden="true" tabindex="-1"></a><span class="kw">val</span> labelledGenericPoint <span class="op">=</span> <span class="co">// type too complex to show here</span></span>
<span id="cb13-7"><a href="#cb13-7" aria-hidden="true" tabindex="-1"></a>  <span class="op">(</span><span class="st">&quot;x&quot;</span> <span class="op">-&gt;&gt;</span> <span class="dv">1</span><span class="op">)</span> <span class="op">::</span> <span class="op">(</span><span class="st">&quot;y&quot;</span> <span class="op">-&gt;&gt;</span> <span class="dv">2</span><span class="op">)</span> <span class="op">::</span> <span class="op">(</span><span class="st">&quot;z&quot;</span> <span class="op">-&gt;&gt;</span> <span class="dv">3</span><span class="op">)</span> <span class="op">::</span> HNil <span class="co">// value</span></span></code></pre></div>
<p>In connection with type class derivation the idea is that by using Shapeless we no longer have to write macros to extract type information for our types - we can work with these generic representations instead using advanced type level programming techniques. So the complexity of writing macros is replaced with the complexity of doing type level computation.</p>
<p>Let’s see how it would look like. First we start by creating a <code>derive</code> method that gets the type we are deriving the codec for as a type parameter:</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb14-1"><a href="#cb14-1" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> derive<span class="op">[</span>T<span class="op">]</span> <span class="op">=</span> <span class="co">// ...</span></span></code></pre></div>
<p>This <code>T</code> is an arbitrary type, for example our <code>Point</code> structure. In order to get its generic representation provided by Shapeless we have to start using type level techniques, by introducing new type parameters for the things we want to calculate (as types) and implicits to drive these computations. The following version, when compiles, will “calculate” the generic representation of <code>T</code> as the type parameter <code>H</code>:</p>
<div class="sourceCode" id="cb15"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb15-1"><a href="#cb15-1" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> derive<span class="op">[</span>T<span class="op">,</span> H<span class="op">](</span><span class="kw">implicit</span> gen<span class="op">:</span> LabelledGeneric<span class="op">.</span>Aux<span class="op">[</span>T<span class="op">,</span> H<span class="op">])</span> <span class="op">=</span> <span class="op">{</span></span>
<span id="cb15-2"><a href="#cb15-2" aria-hidden="true" tabindex="-1"></a>  <span class="kw">new</span> BinaryCodec<span class="op">[</span>T<span class="op">]</span> <span class="op">{</span></span>
<span id="cb15-3"><a href="#cb15-3" aria-hidden="true" tabindex="-1"></a>    <span class="kw">def</span> <span class="fu">serialize</span><span class="op">(</span>value<span class="op">:</span> T<span class="op">)(</span><span class="kw">implicit</span> context<span class="op">:</span> SerializationContext<span class="op">):</span> <span class="bu">Unit</span> <span class="op">=</span> <span class="op">{</span></span>
<span id="cb15-4"><a href="#cb15-4" aria-hidden="true" tabindex="-1"></a>      <span class="kw">val</span> h<span class="op">:</span> H <span class="op">=</span> gen<span class="op">.</span><span class="fu">to</span><span class="op">(</span>value<span class="op">)</span> <span class="co">// generic representation of (value: T)</span></span>
<span id="cb15-5"><a href="#cb15-5" aria-hidden="true" tabindex="-1"></a>      <span class="co">// ...</span></span>
<span id="cb15-6"><a href="#cb15-6" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb15-7"><a href="#cb15-7" aria-hidden="true" tabindex="-1"></a>    <span class="co">// ...</span></span>
<span id="cb15-8"><a href="#cb15-8" aria-hidden="true" tabindex="-1"></a>  <span class="op">}</span></span>
<span id="cb15-9"><a href="#cb15-9" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>This is not that hard yet but we need to recursively summon implicit codecs for our fields, so we can’t just use this <code>H</code> value to go through all the fields in a traditional way - we need to traverse it on the type level.</p>
<p>To do that we need to write our own type level computations implemented as implicit instances for <code>HNil</code> and <code>::</code> etc. The serialization part of the codec would look something like this:</p>
<div class="sourceCode" id="cb16"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb16-1"><a href="#cb16-1" aria-hidden="true" tabindex="-1"></a><span class="kw">implicit</span> <span class="kw">val</span> hnilSerializer<span class="op">:</span> BinarySerializer<span class="op">[</span>HNil<span class="op">]</span> <span class="op">=</span></span>
<span id="cb16-2"><a href="#cb16-2" aria-hidden="true" tabindex="-1"></a>  <span class="kw">new</span> BinarySerializer<span class="op">[</span>HNil<span class="op">]</span> <span class="op">{</span></span>
<span id="cb16-3"><a href="#cb16-3" aria-hidden="true" tabindex="-1"></a>    <span class="kw">def</span> <span class="fu">serialize</span><span class="op">(</span>value<span class="op">:</span> HNil<span class="op">)(</span><span class="kw">implicit</span> context<span class="op">:</span> SerializationContext<span class="op">)</span> <span class="op">=&gt;</span> <span class="op">{</span></span>
<span id="cb16-4"><a href="#cb16-4" aria-hidden="true" tabindex="-1"></a>      <span class="co">// no (more) fields</span></span>
<span id="cb16-5"><a href="#cb16-5" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb16-6"><a href="#cb16-6" aria-hidden="true" tabindex="-1"></a>  <span class="op">}</span></span>
<span id="cb16-7"><a href="#cb16-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb16-8"><a href="#cb16-8" aria-hidden="true" tabindex="-1"></a><span class="kw">implicit</span> <span class="kw">def</span> hlistSerializer<span class="op">[</span>K <span class="op">&lt;:</span> <span class="bu">Symbol</span><span class="op">,</span> H<span class="op">,</span> T <span class="op">&lt;:</span> HList<span class="op">](</span><span class="kw">implicit</span></span>
<span id="cb16-9"><a href="#cb16-9" aria-hidden="true" tabindex="-1"></a>  witness<span class="op">:</span> Witness<span class="op">.</span>Aux<span class="op">[</span>K<span class="op">]</span> <span class="co">// type level extraction of the field&#39;s name</span></span>
<span id="cb16-10"><a href="#cb16-10" aria-hidden="true" tabindex="-1"></a>  headSerializer<span class="op">:</span> BinarySerializer<span class="op">[</span>H<span class="op">]</span> <span class="co">// type class summoning for the field</span></span>
<span id="cb16-11"><a href="#cb16-11" aria-hidden="true" tabindex="-1"></a>  tailSerializer<span class="op">:</span> BinarySerializer<span class="op">[</span>T<span class="op">]</span> <span class="co">// hlist recursion</span></span>
<span id="cb16-12"><a href="#cb16-12" aria-hidden="true" tabindex="-1"></a><span class="op">):</span> BinarySerializer<span class="op">[</span>FieldType<span class="op">[</span>K<span class="op">,</span> H<span class="op">]</span> <span class="op">::</span> T<span class="op">]</span> <span class="op">=</span> <span class="co">// ...</span></span></code></pre></div>
<p>Similar methods have to be implemented for coproducts too, and also in the codec example we would have to simultaneously derive the serializer <em>and</em> the deserializer. A real implementation would also require access to the <em>annotations</em> of various fields to drive the serialization logic, which requires more and more type level calculations and complicates these type signatures.</p>
<p>I did chose to use Shapeless in the first version of Desert, and the real <code>derive</code> method has the following signature:</p>
<div class="sourceCode" id="cb17"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb17-1"><a href="#cb17-1" aria-hidden="true" tabindex="-1"></a>  <span class="kw">def</span> derive<span class="op">[</span>T<span class="op">,</span> H<span class="op">,</span> Ks <span class="op">&lt;:</span> HList<span class="op">,</span> Trs <span class="op">&lt;:</span> HList<span class="op">,</span> Trcs <span class="op">&lt;:</span> HList<span class="op">,</span> KsTrs <span class="op">&lt;:</span> HList<span class="op">,</span> TH<span class="op">](</span><span class="kw">implicit</span></span>
<span id="cb17-2"><a href="#cb17-2" aria-hidden="true" tabindex="-1"></a>      gen<span class="op">:</span> LabelledGeneric<span class="op">.</span>Aux<span class="op">[</span>T<span class="op">,</span> H<span class="op">],</span></span>
<span id="cb17-3"><a href="#cb17-3" aria-hidden="true" tabindex="-1"></a>      keys<span class="op">:</span> Lazy<span class="op">[</span>Symbols<span class="op">.</span>Aux<span class="op">[</span>H<span class="op">,</span> Ks<span class="op">]],</span></span>
<span id="cb17-4"><a href="#cb17-4" aria-hidden="true" tabindex="-1"></a>      transientAnnotations<span class="op">:</span> Annotations<span class="op">.</span>Aux<span class="op">[</span>transientField<span class="op">,</span> T<span class="op">,</span> Trs<span class="op">],</span></span>
<span id="cb17-5"><a href="#cb17-5" aria-hidden="true" tabindex="-1"></a>      transientConstructorAnnotations<span class="op">:</span> Annotations<span class="op">.</span>Aux<span class="op">[</span>transientConstructor<span class="op">,</span> T<span class="op">,</span> Trcs<span class="op">],</span></span>
<span id="cb17-6"><a href="#cb17-6" aria-hidden="true" tabindex="-1"></a>      taggedTransients<span class="op">:</span> TagTransients<span class="op">.</span>Aux<span class="op">[</span>H<span class="op">,</span> Trs<span class="op">,</span> Trcs<span class="op">,</span> TH<span class="op">],</span></span>
<span id="cb17-7"><a href="#cb17-7" aria-hidden="true" tabindex="-1"></a>      zip<span class="op">:</span> Zip<span class="op">.</span>Aux<span class="op">[</span>Ks <span class="op">::</span> Trs <span class="op">::</span> HNil<span class="op">,</span> KsTrs<span class="op">],</span></span>
<span id="cb17-8"><a href="#cb17-8" aria-hidden="true" tabindex="-1"></a>      toList<span class="op">:</span> ToTraversable<span class="op">.</span>Aux<span class="op">[</span>KsTrs<span class="op">,</span> <span class="ex">List</span><span class="op">,</span> <span class="op">(</span><span class="bu">Symbol</span><span class="op">,</span> <span class="ex">Option</span><span class="op">[</span>transientField<span class="op">])],</span></span>
<span id="cb17-9"><a href="#cb17-9" aria-hidden="true" tabindex="-1"></a>      serializationPlan<span class="op">:</span> Lazy<span class="op">[</span>SerializationPlan<span class="op">[</span>TH<span class="op">]],</span></span>
<span id="cb17-10"><a href="#cb17-10" aria-hidden="true" tabindex="-1"></a>      deserializationPlan<span class="op">:</span> Lazy<span class="op">[</span>DeserializationPlan<span class="op">[</span>TH<span class="op">]],</span></span>
<span id="cb17-11"><a href="#cb17-11" aria-hidden="true" tabindex="-1"></a>      toConstructorMap<span class="op">:</span> Lazy<span class="op">[</span>ToConstructorMap<span class="op">[</span>TH<span class="op">]],</span></span>
<span id="cb17-12"><a href="#cb17-12" aria-hidden="true" tabindex="-1"></a>      classTag<span class="op">:</span> ClassTag<span class="op">[</span>T<span class="op">]</span></span>
<span id="cb17-13"><a href="#cb17-13" aria-hidden="true" tabindex="-1"></a>  <span class="op">):</span> BinaryCodec<span class="op">[</span>T<span class="op">]</span></span></code></pre></div>
<p>Although this works, there are many problems with this approach. All these type and implicit resolutions can make the compilation quite slow, the code is very complex and hard to understand or modify, and most importantly error messages will be a nightmare. A user trying to derive a type class for our serialization library should not get an error that complains about not being able to find an implicit value of <code>Zip.Aux</code> for a weird type that does not even fit on one screen!</p>
<h3 id="magnolia">Magnolia</h3>
<p>The <a href="https://github.com/softwaremill/magnolia">Magnolia</a> library provides a much more friendly solution for deriving type classes for algebraic data types - it moves the whole problem into the value space by hiding the necessary macros. The derivation implementation for a given type class then only requires defining two functions (one for working with products, one for working with coproducts) that are regular Scala functions getting a “context” value and producing an instance of the derived type class. The context value contains type information - for example the name and type of all the fields of a case class - and also contains an <em>instance</em> of the derived type class for each of these inner elements.</p>
<p>To write a Magnolia based deriver you have to create an <code>object</code> with a <code>join</code> and a <code>split</code> method and a <code>Typeclass</code> type:</p>
<div class="sourceCode" id="cb18"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb18-1"><a href="#cb18-1" aria-hidden="true" tabindex="-1"></a><span class="kw">object</span> BinaryCodecDerivation <span class="op">{</span></span>
<span id="cb18-2"><a href="#cb18-2" aria-hidden="true" tabindex="-1"></a>  <span class="kw">type</span> Typeclass<span class="op">[</span>T<span class="op">]</span> <span class="op">=</span> BinaryCodec<span class="op">[</span>T<span class="op">]</span></span>
<span id="cb18-3"><a href="#cb18-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb18-4"><a href="#cb18-4" aria-hidden="true" tabindex="-1"></a>  <span class="kw">def</span> join<span class="op">[</span>T<span class="op">](</span>ctx<span class="op">:</span> CaseClass<span class="op">[</span>BinaryCodec<span class="op">,</span> T<span class="op">]):</span> BinaryCodec<span class="op">[</span>T<span class="op">]</span> <span class="op">=</span></span>
<span id="cb18-5"><a href="#cb18-5" aria-hidden="true" tabindex="-1"></a>    <span class="kw">new</span> BinaryCodec<span class="op">[</span>T<span class="op">]</span> <span class="op">{</span></span>
<span id="cb18-6"><a href="#cb18-6" aria-hidden="true" tabindex="-1"></a>      <span class="kw">def</span> <span class="fu">serialize</span><span class="op">(</span>value<span class="op">:</span> T<span class="op">)(</span><span class="kw">implicit</span> context<span class="op">:</span> SerializationContext<span class="op">)</span> <span class="op">=&gt;</span> <span class="op">{</span></span>
<span id="cb18-7"><a href="#cb18-7" aria-hidden="true" tabindex="-1"></a>        <span class="cf">for</span> <span class="op">(</span>parameter <span class="op">&lt;-</span> ctx<span class="op">.</span>parameters<span class="op">)</span> <span class="op">{</span></span>
<span id="cb18-8"><a href="#cb18-8" aria-hidden="true" tabindex="-1"></a>          <span class="co">// recursively serialize the fields</span></span>
<span id="cb18-9"><a href="#cb18-9" aria-hidden="true" tabindex="-1"></a>          parameter<span class="op">.</span>typeclass<span class="op">.</span><span class="fu">serialize</span><span class="op">(</span>parameter<span class="op">.</span><span class="fu">dereference</span><span class="op">(</span>value<span class="op">))</span></span>
<span id="cb18-10"><a href="#cb18-10" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span>
<span id="cb18-11"><a href="#cb18-11" aria-hidden="true" tabindex="-1"></a>        <span class="co">// ...</span></span>
<span id="cb18-12"><a href="#cb18-12" aria-hidden="true" tabindex="-1"></a>      <span class="op">}</span></span>
<span id="cb18-13"><a href="#cb18-13" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb18-14"><a href="#cb18-14" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb18-15"><a href="#cb18-15" aria-hidden="true" tabindex="-1"></a>  <span class="kw">def</span> split<span class="op">[</span>T<span class="op">](</span>ctx<span class="op">:</span> SealedTrait<span class="op">[</span>BinaryCodec<span class="op">,</span> T<span class="op">]):</span> BinaryCodec<span class="op">[</span>T<span class="op">]</span> <span class="op">=</span></span>
<span id="cb18-16"><a href="#cb18-16" aria-hidden="true" tabindex="-1"></a>    <span class="co">// ...</span></span>
<span id="cb18-17"><a href="#cb18-17" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb18-18"><a href="#cb18-18" aria-hidden="true" tabindex="-1"></a>  <span class="kw">def</span> gen<span class="op">[</span>T<span class="op">]:</span> BinaryCodec<span class="op">[</span>T<span class="op">]</span> <span class="op">=</span> macro Magnolia<span class="op">.</span>gen<span class="op">[</span>T<span class="op">]</span></span>
<span id="cb18-19"><a href="#cb18-19" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>There is a Magnolia version for Scala 3 too, which is although quite similar, it is not source compatible with the Scala 2 version, leading to the need to define these derivations twice in cross-compiled projects.</p>
<h2 id="why-not-magnolia">Why not Magnolia?</h2>
<p>Magnolia already existed when I wrote the first version of Desert, but I could not use it because of two reasons. In that early version of the library the derivation had to take a user defined list of <em>evolution steps</em>, so the actual codec definitions looked something like this:</p>
<div class="sourceCode" id="cb19"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb19-1"><a href="#cb19-1" aria-hidden="true" tabindex="-1"></a><span class="kw">object</span> <span class="ex">Point</span> <span class="op">{</span></span>
<span id="cb19-2"><a href="#cb19-2" aria-hidden="true" tabindex="-1"></a>  <span class="kw">implicit</span> <span class="kw">val</span> codec<span class="op">:</span> BinaryCodec<span class="op">[</span><span class="ex">Point</span><span class="op">]</span> <span class="op">=</span> BinaryCodec<span class="op">.</span><span class="fu">derive</span><span class="op">(</span>FieldAdded<span class="op">[</span><span class="bu">Int</span><span class="op">](</span><span class="st">&quot;z&quot;</span><span class="op">,</span> <span class="dv">1</span><span class="op">))</span></span>
<span id="cb19-3"><a href="#cb19-3" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>It was not clear how could I pass these parameters to Magnolia context - with Shapeless it was not a problem because it is possible to simply pass them as a parameter to the <code>derive</code> function that “starts” the type level computation.</p>
<p>This requirement no longer exists though, as in recent versions the <em>evolution steps</em> are defined by attributes, which are fully supported by Magnolia as well:</p>
<div class="sourceCode" id="cb20"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb20-1"><a href="#cb20-1" aria-hidden="true" tabindex="-1"></a>@<span class="fu">evolutionSteps</span><span class="op">(</span>FieldAdded<span class="op">[</span><span class="bu">Int</span><span class="op">](</span><span class="st">&quot;z&quot;</span><span class="op">,</span> <span class="dv">1</span><span class="op">))</span></span>
<span id="cb20-2"><a href="#cb20-2" aria-hidden="true" tabindex="-1"></a><span class="kw">final</span> <span class="cf">case</span> <span class="kw">class</span> <span class="ex">Point</span><span class="op">(</span>x<span class="op">:</span> <span class="bu">Int</span><span class="op">,</span> y<span class="op">:</span> <span class="bu">Int</span><span class="op">,</span> z<span class="op">:</span> <span class="bu">Int</span><span class="op">)</span></span></code></pre></div>
<p>The second reason was a much more important limitation in Magnolia that still exists - it is not possible to shortcut the derivation tree. Desert has <em>transient field</em> and <em>transient constructor</em> support. For those fields and constructors which are marked as transient we don’t want to, and cannot define codec instances. They can be things like open files, streams, actor references, sockets etc. Even though Magnolia only instantiates the type class instances when they are accessed, the derivation fails if there are types in the tree that does not have an instance. This issue is <a href="https://github.com/softwaremill/magnolia/issues/297">tracked here</a>.</p>
<p>There was one more decision I did not like regarding Magnolia - the decision to have an incompatible Scala 3 version. I believe it was a big missed opportunity to seamlessly support cross-compiled type class derivation code.</p>
<h2 id="zio-schema-based-derivation">ZIO Schema based derivation</h2>
<p>All these issues lead to writing a new derivation library - as part of the <a href="https://zio.dev/zio-schema/">ZIO Schema</a> project. It was first released in version <a href="https://github.com/zio/zio-schema/releases/tag/v0.3.0">v0.3.0</a> in November of 2022.</p>
<p>From the previously demonstrated type class derivation techniques the closest to ZIO Schema’s deriver is Magnolia. On the other hand it does supports the transient field use case, and it is fully cross-compilation compatible between Scala 2 and Scala 3.</p>
<p>To implement type class derivation based on ZIO Schema you need to implement a trait called <code>Deriver</code>:</p>
<div class="sourceCode" id="cb21"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb21-1"><a href="#cb21-1" aria-hidden="true" tabindex="-1"></a><span class="kw">trait</span> Deriver<span class="op">[</span>F<span class="op">[</span>_<span class="op">]]</span> <span class="op">{</span></span>
<span id="cb21-2"><a href="#cb21-2" aria-hidden="true" tabindex="-1"></a>  <span class="kw">def</span> deriveRecord<span class="op">[</span>A<span class="op">](</span></span>
<span id="cb21-3"><a href="#cb21-3" aria-hidden="true" tabindex="-1"></a>    record<span class="op">:</span> <span class="ex">Schema</span><span class="op">.</span>Record<span class="op">[</span>A<span class="op">],</span></span>
<span id="cb21-4"><a href="#cb21-4" aria-hidden="true" tabindex="-1"></a>    fields<span class="op">:</span> <span class="op">=&gt;</span> Chunk<span class="op">[</span>WrappedF<span class="op">[</span>F<span class="op">,</span> _<span class="op">]],</span></span>
<span id="cb21-5"><a href="#cb21-5" aria-hidden="true" tabindex="-1"></a>    summoned<span class="op">:</span> <span class="op">=&gt;</span> <span class="ex">Option</span><span class="op">[</span>F<span class="op">[</span>A<span class="op">]]</span></span>
<span id="cb21-6"><a href="#cb21-6" aria-hidden="true" tabindex="-1"></a>  <span class="op">):</span> F<span class="op">[</span>A<span class="op">]</span></span>
<span id="cb21-7"><a href="#cb21-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb21-8"><a href="#cb21-8" aria-hidden="true" tabindex="-1"></a>  <span class="co">// more deriveXXX methods to impelment</span></span>
<span id="cb21-9"><a href="#cb21-9" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>This looks similar to Magnolia’s <code>join</code> method but has some significant differences. The first thing to notice is that we get a <code>Schema.Record</code> value describing our case class. This is one of the cases of the core data type <code>Schema[T]</code> which describes Scala data types and provides a lot of features to work with them. So having a <code>Schema[A]</code> is a requirement to derive an <code>F[A]</code> with <code>Deriver</code> - but luckily ZIO schema has derivation support for Schema itself.</p>
<p>The second thing to notice is that <code>Schema[A]</code> itself does not know anything about type class derivation and especially about the actual <code>F</code> type class that is being derived, so the second parameter of <code>deriveRecord</code> is a collection of potentially derived instances of our derived type class for each field. <code>WrappedF</code> is just making this lazy so if we decide we don’t need instances for (some of) the fields they won’t be traversed (they still need to have a <code>Schema</code> though - but it can even be a <code>Schema.fail</code> for things not representable by ZIO Schema - it will be fine if we never touch them by unwrapping the <code>WrappedF</code> value).</p>
<p>The third parameter is also interesting as it provides full control to the developer to choose between the summoned implicit and the derivation logic. If your <code>deriveRecord</code> is called for a record type <code>A</code> and there is already an implicit <code>F[A]</code> that the compiler can find (for example defined in <code>A</code>’s companion object), it will be passed in the <code>summoned</code> parameter to <code>deriveRecord</code>. The usual logic is to choose the summoned value when it is available and only derive an instance when there isn’t any. By calling <code>.autoAcceptSummoned</code> on our <code>Deriver</code> class we can automatically enable this behavior - in this case <code>deriveRecord</code> will only be called for the cases where <code>summoned</code> was <code>None</code>.</p>
<p>Another method we have on <code>Deriver</code> is <code>.cached</code> which stores the generated type class instances in a concurrent hash map shared between the macro invocations.</p>
<p>Our ZIO Schema based Desert codec derivation is defined using these modifiers:</p>
<div class="sourceCode" id="cb22"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb22-1"><a href="#cb22-1" aria-hidden="true" tabindex="-1"></a><span class="kw">object</span> DerivedBinaryCodec <span class="op">{</span></span>
<span id="cb22-2"><a href="#cb22-2" aria-hidden="true" tabindex="-1"></a>  <span class="kw">lazy</span> <span class="kw">val</span> deriver <span class="op">=</span> <span class="fu">BinaryCodecDeriver</span><span class="op">().</span>cached<span class="op">.</span>autoAcceptSummoned</span>
<span id="cb22-3"><a href="#cb22-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb22-4"><a href="#cb22-4" aria-hidden="true" tabindex="-1"></a>  <span class="kw">private</span> <span class="kw">final</span> <span class="cf">case</span> <span class="kw">class</span> <span class="fu">BinaryCodecDeriver</span><span class="op">()</span> <span class="kw">extends</span> Deriver<span class="op">[</span>BinaryCodec<span class="op">]</span> <span class="op">{</span></span>
<span id="cb22-5"><a href="#cb22-5" aria-hidden="true" tabindex="-1"></a>    <span class="co">// ...</span></span>
<span id="cb22-6"><a href="#cb22-6" aria-hidden="true" tabindex="-1"></a>  <span class="op">}</span></span>
<span id="cb22-7"><a href="#cb22-7" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>As ZIO Schema is not only describing records and enums but also primitive types, tuples, and special cases like <code>Option</code> and <code>Either</code> and collection types, the deriver has to support all these.</p>
<p>The minimum set of methods to implement is <code>deriveRecord</code>, <code>deriveEnum</code>, <code>derivePrimitive</code>, <code>deriveOption</code>, <code>deriveSequence</code>, <code>deriveMap</code> and <code>deriveTransformedRecord</code>. In addition to that we can also override <code>deriveEither</code>, <code>deriveSet</code> and <code>deriveTupleN</code> (1-22) to handle these cases specially.</p>
<p>In case of Desert the <code>deriveRecord</code> and <code>deriveEnum</code> are calling to the implementation of the same data-evolution aware binary format that was previously implemented using Shapeless, but this time it is automatically supporting Scala 2 and Scala 3 the same time. The <code>derivePrimitive</code> is just choosing from predefined <code>BinaryCodec</code> instances based on the primitive’s type:</p>
<div class="sourceCode" id="cb23"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb23-1"><a href="#cb23-1" aria-hidden="true" tabindex="-1"></a><span class="kw">override</span> <span class="kw">def</span> derivePrimitive<span class="op">[</span>A<span class="op">](</span></span>
<span id="cb23-2"><a href="#cb23-2" aria-hidden="true" tabindex="-1"></a>  st<span class="op">:</span> StandardType<span class="op">[</span>A<span class="op">],</span></span>
<span id="cb23-3"><a href="#cb23-3" aria-hidden="true" tabindex="-1"></a>  summoned<span class="op">:</span> <span class="op">=&gt;</span> <span class="ex">Option</span><span class="op">[</span>BinaryCodec<span class="op">[</span>A<span class="op">]]</span></span>
<span id="cb23-4"><a href="#cb23-4" aria-hidden="true" tabindex="-1"></a><span class="op">):</span> BinaryCodec<span class="op">[</span>A<span class="op">]</span> <span class="op">=</span></span>
<span id="cb23-5"><a href="#cb23-5" aria-hidden="true" tabindex="-1"></a>  st <span class="cf">match</span> <span class="op">{</span></span>
<span id="cb23-6"><a href="#cb23-6" aria-hidden="true" tabindex="-1"></a>    <span class="cf">case</span> StandardType<span class="op">.</span>UnitType           <span class="op">=&gt;</span> unitCodec</span>
<span id="cb23-7"><a href="#cb23-7" aria-hidden="true" tabindex="-1"></a>    <span class="cf">case</span> StandardType<span class="op">.</span>StringType         <span class="op">=&gt;</span> stringCodec</span>
<span id="cb23-8"><a href="#cb23-8" aria-hidden="true" tabindex="-1"></a>    <span class="cf">case</span> StandardType<span class="op">.</span>BoolType           <span class="op">=&gt;</span> booleanCodec</span>
<span id="cb23-9"><a href="#cb23-9" aria-hidden="true" tabindex="-1"></a>    <span class="cf">case</span> StandardType<span class="op">.</span>ByteType           <span class="op">=&gt;</span> byteCodec</span>
<span id="cb23-10"><a href="#cb23-10" aria-hidden="true" tabindex="-1"></a>    <span class="co">// ...</span></span>
<span id="cb23-11"><a href="#cb23-11" aria-hidden="true" tabindex="-1"></a>  <span class="op">}</span></span></code></pre></div>
<p>Same applies for option, either, sequence etc - it is just a mapping to the library’s own definition of these binary codecs.</p>
<p>Under the hood <code>Deriver</code> is a macro (implemented separately both for Scala 2 and Scala 3) that traverses the types simultaneously with the provided <code>Schema</code> (so it does not need to regenerate those) and maps these informations into calls through the <code>Deriver</code> interface. The whole process is initiated by calling the <code>derive</code> method on our <code>Deriver</code>, which is the entry point of these macros, so it has a different looking (but source-code compatible) definition for Scala 2 and Scala 3:</p>
<div class="sourceCode" id="cb24"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb24-1"><a href="#cb24-1" aria-hidden="true" tabindex="-1"></a><span class="co">// Scala 3</span></span>
<span id="cb24-2"><a href="#cb24-2" aria-hidden="true" tabindex="-1"></a>inline <span class="kw">def</span> derive<span class="op">[</span>A<span class="op">](</span><span class="kw">implicit</span> schema<span class="op">:</span> <span class="ex">Schema</span><span class="op">[</span>A<span class="op">]):</span> F<span class="op">[</span>A<span class="op">]</span></span>
<span id="cb24-3"><a href="#cb24-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb24-4"><a href="#cb24-4" aria-hidden="true" tabindex="-1"></a><span class="co">// Scala 2</span></span>
<span id="cb24-5"><a href="#cb24-5" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> derive<span class="op">[</span>F<span class="op">[</span>_<span class="op">],</span> A<span class="op">](</span>deriver<span class="op">:</span> Deriver<span class="op">[</span>F<span class="op">])(</span></span>
<span id="cb24-6"><a href="#cb24-6" aria-hidden="true" tabindex="-1"></a>  <span class="kw">implicit</span> schema<span class="op">:</span> <span class="ex">Schema</span><span class="op">[</span>A<span class="op">]</span></span>
<span id="cb24-7"><a href="#cb24-7" aria-hidden="true" tabindex="-1"></a><span class="op">):</span> F<span class="op">[</span>A<span class="op">]</span> <span class="op">=</span> macro deriveImpl<span class="op">[</span>F<span class="op">,</span> A<span class="op">]</span></span></code></pre></div>
<p>These are compatible if you are directly calling them: so you can write</p>
<div class="sourceCode" id="cb25"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb25-1"><a href="#cb25-1" aria-hidden="true" tabindex="-1"></a><span class="kw">val</span> binaryCodecDeriver<span class="op">:</span> Deriver<span class="op">[</span>BinaryCodec<span class="op">]</span> <span class="op">=</span> <span class="co">// ...</span></span>
<span id="cb25-2"><a href="#cb25-2" aria-hidden="true" tabindex="-1"></a><span class="kw">val</span> pointCodec<span class="op">:</span> BinaryCodec<span class="op">[</span><span class="ex">Point</span><span class="op">]</span> <span class="op">=</span> binaryCodecDeriver<span class="op">.</span>derive<span class="op">[</span><span class="ex">Point</span><span class="op">]</span></span></code></pre></div>
<p>Or even:</p>
<div class="sourceCode" id="cb26"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb26-1"><a href="#cb26-1" aria-hidden="true" tabindex="-1"></a><span class="kw">object</span> BinaryCodecDeriver <span class="kw">extends</span> Deriver<span class="op">[</span>BinaryCodec<span class="op">]</span> <span class="op">{</span></span>
<span id="cb26-2"><a href="#cb26-2" aria-hidden="true" tabindex="-1"></a>  <span class="co">// ...</span></span>
<span id="cb26-3"><a href="#cb26-3" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb26-4"><a href="#cb26-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb26-5"><a href="#cb26-5" aria-hidden="true" tabindex="-1"></a><span class="kw">val</span> pointCodec<span class="op">:</span> BinaryCodec<span class="op">[</span><span class="ex">Point</span><span class="op">]</span> <span class="op">=</span> BinaryCodecDeriver<span class="op">.</span>derive<span class="op">[</span><span class="ex">Point</span><span class="op">]</span></span></code></pre></div>
<p>But if you want to wrap this derive call you have to be aware that they are macro calls, and they have to be wrapped by (version-specific) macros. This is what Desert is doing - as shown before, it uses the <code>cached</code> and <code>autoAcceptSummoned</code> modifiers to create a deriver, but still exposes a simple <code>derive</code> method through an <code>object</code>. To do so it needs to wrap the inner deriver macro with its own macro like this:</p>
<div class="sourceCode" id="cb27"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb27-1"><a href="#cb27-1" aria-hidden="true" tabindex="-1"></a><span class="co">// Scala 2</span></span>
<span id="cb27-2"><a href="#cb27-2" aria-hidden="true" tabindex="-1"></a><span class="kw">trait</span> DerivedBinaryCodecVersionSpecific <span class="op">{</span></span>
<span id="cb27-3"><a href="#cb27-3" aria-hidden="true" tabindex="-1"></a>  <span class="kw">def</span> deriver<span class="op">:</span> Deriver<span class="op">[</span>BinaryCodec<span class="op">]</span></span>
<span id="cb27-4"><a href="#cb27-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb27-5"><a href="#cb27-5" aria-hidden="true" tabindex="-1"></a>  <span class="kw">def</span> derive<span class="op">[</span>T<span class="op">](</span><span class="kw">implicit</span> schema<span class="op">:</span> <span class="ex">Schema</span><span class="op">[</span>T<span class="op">]):</span> BinaryCodec<span class="op">[</span>T<span class="op">]</span> <span class="op">=</span></span>
<span id="cb27-6"><a href="#cb27-6" aria-hidden="true" tabindex="-1"></a>    macro DerivedBinaryCodecVersionSpecific<span class="op">.</span>deriveImpl<span class="op">[</span>T<span class="op">]</span></span>
<span id="cb27-7"><a href="#cb27-7" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb27-8"><a href="#cb27-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb27-9"><a href="#cb27-9" aria-hidden="true" tabindex="-1"></a><span class="kw">object</span> DerivedBinaryCodecVersionSpecific <span class="op">{</span></span>
<span id="cb27-10"><a href="#cb27-10" aria-hidden="true" tabindex="-1"></a>    <span class="kw">def</span> deriveImpl<span class="op">[</span>T<span class="op">:</span> c<span class="op">.</span>WeakTypeTag<span class="op">](</span></span>
<span id="cb27-11"><a href="#cb27-11" aria-hidden="true" tabindex="-1"></a>      c<span class="op">:</span> whitebox<span class="op">.</span><span class="ex">Context</span><span class="op">)(</span></span>
<span id="cb27-12"><a href="#cb27-12" aria-hidden="true" tabindex="-1"></a>      schema<span class="op">:</span> c<span class="op">.</span>Expr<span class="op">[</span><span class="ex">Schema</span><span class="op">[</span>T<span class="op">]]</span></span>
<span id="cb27-13"><a href="#cb27-13" aria-hidden="true" tabindex="-1"></a>    <span class="op">):</span> c<span class="op">.</span>Tree <span class="op">=</span> <span class="op">{</span></span>
<span id="cb27-14"><a href="#cb27-14" aria-hidden="true" tabindex="-1"></a>      <span class="kw">import</span> c<span class="op">.</span>universe<span class="op">.</span>_</span>
<span id="cb27-15"><a href="#cb27-15" aria-hidden="true" tabindex="-1"></a>      <span class="kw">val</span> tpe <span class="op">=</span> weakTypeOf<span class="op">[</span>T<span class="op">]</span></span>
<span id="cb27-16"><a href="#cb27-16" aria-hidden="true" tabindex="-1"></a>      q<span class="st">&quot;_root_.zio.schema.Derive.derive[BinaryCodec, $tpe]  (_root_.io.github.vigoo.desert.zioschema.DerivedBinaryCodec.deriver)($schema)&quot;</span></span>
<span id="cb27-17"><a href="#cb27-17" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb27-18"><a href="#cb27-18" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb27-19"><a href="#cb27-19" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb27-20"><a href="#cb27-20" aria-hidden="true" tabindex="-1"></a><span class="co">// Scala 3</span></span>
<span id="cb27-21"><a href="#cb27-21" aria-hidden="true" tabindex="-1"></a><span class="kw">trait</span> DerivedBinaryCodecVersionSpecific <span class="op">{</span></span>
<span id="cb27-22"><a href="#cb27-22" aria-hidden="true" tabindex="-1"></a>  <span class="kw">lazy</span> <span class="kw">val</span> deriver<span class="op">:</span> Deriver<span class="op">[</span>BinaryCodec<span class="op">]</span></span>
<span id="cb27-23"><a href="#cb27-23" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb27-24"><a href="#cb27-24" aria-hidden="true" tabindex="-1"></a>  inline <span class="kw">def</span> derive<span class="op">[</span>T<span class="op">](</span><span class="kw">implicit</span> schema<span class="op">:</span> <span class="ex">Schema</span><span class="op">[</span>T<span class="op">]):</span> BinaryCodec<span class="op">[</span>T<span class="op">]</span> <span class="op">=</span></span>
<span id="cb27-25"><a href="#cb27-25" aria-hidden="true" tabindex="-1"></a>    Derive<span class="op">.</span>derive<span class="op">[</span>BinaryCodec<span class="op">,</span> T<span class="op">](</span>DerivedBinaryCodec<span class="op">.</span>deriver<span class="op">)</span></span>
<span id="cb27-26"><a href="#cb27-26" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<h2 id="conclusion">Conclusion</h2>
<p>We have a new alternative for deriving type class instances from type information, based on ZIO Schema. You may want to use it if you want to have a single deriver source code for both Scala 2 and Scala 3, if you need more flexibility than what Magnolia provides, or if you are already using ZIO Schema in your project.</p>
]]></summary>
</entry>
<entry>
    <title>Generating a Rust client library for ZIO Http endpoints</title>
    <link href="http://vigoo.github.io/posts/2023-09-07-generating-a-rust-client-library-for-zio-http-endpoints.html" />
    <id>http://vigoo.github.io/posts/2023-09-07-generating-a-rust-client-library-for-zio-http-endpoints.html</id>
    <published>2023-09-07T00:00:00Z</published>
    <updated>2023-09-07T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on September  7, 2023
    
</div>

<p>We at <a href="https://golem.cloud">Golem Cloud</a> built our first developer preview on top of the ZIO ecosystem, including <a href="https://github.io/zio/zio-http">ZIO Http</a> for defining and implementing our server’s REST API. By using <strong>ZIO Http</strong> we immediately had the ability to call our endpoints using endpoint <strong>client</strong>s, which allowed us to develop the first version of Golem’s <strong>CLI tool</strong> very rapidly.</p>
<p>Although very convenient for development, <em>using</em> a CLI tool built with Scala for the JVM is not a pleasant experience for the users due to the slow startup time. One possible solution is to compile to native using <a href="https://www.graalvm.org/22.0/reference-manual/native-image/">GraalVM Native Image</a> but it is very hard to set up and even when it works, it is extremely fragile - further changes to the code or updated dependencies can break it causing unexpected extra maintenance cost. After some initial experiments we dropped this idea - and instead chose to reimplement the CLI using <strong>Rust</strong> - a language being a much better fit for command line tools, and also already an important technology in our Golem stack.</p>
<h2 id="zio-http">ZIO Http</h2>
<p>If we rewrite <code>golem-cli</code> to Rust, we lose the convenience of using <strong>endpoint definitions</strong> (written in Scala with ZIO Http, the ones we have for implementing the server) for calling our API, and we would also lose all the <strong>types</strong> used in these APIs as they are all defined as Scala case classes and enums. Just to have more context, let’s take a look at one of the endpoints!</p>
<p>A ZIO Http <strong>endpoint</strong> is just a definition of a single endpoint of a HTTP API, describing the routing as well the inputs and outputs of it:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="kw">val</span> getWorkerMetadata <span class="op">=</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>    <span class="ex">Endpoint</span><span class="op">(</span>GET <span class="op">/</span> <span class="st">&quot;v1&quot;</span> <span class="op">/</span> <span class="st">&quot;templates&quot;</span> <span class="op">/</span> rawTemplateId <span class="op">/</span> <span class="st">&quot;workers&quot;</span> <span class="op">/</span> workerName<span class="op">)</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>      <span class="op">.</span><span class="fu">header</span><span class="op">(</span>Auth<span class="op">.</span>tokenSecret<span class="op">)</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>      <span class="op">.</span><span class="fu">outErrorCodec</span><span class="op">(</span>errorCodec<span class="op">)</span></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>      <span class="op">.</span>out<span class="op">[</span>WorkerMetadata<span class="op">]</span> <span class="op">??</span> <span class="ex">Doc</span><span class="op">.</span><span class="fu">p</span><span class="op">(</span><span class="st">&quot;Get the current worker status and metadata&quot;</span><span class="op">)</span></span></code></pre></div>
<p>Let’s see what we have here:</p>
<ul>
<li>the endpoint is reached by sending a <strong>GET</strong> request</li>
<li>the request <strong>path</strong> consists of some static segments as well as the <em>template id</em> and the <em>worker name</em></li>
<li>it also requires an <strong>authorization header</strong></li>
<li>we define the kind of errors it can return</li>
<li>and finally it defines that the response’s <strong>body</strong> will contain a JSON representation (default in ZIO Http) of a type called <code>WorkerMetadata</code></li>
</ul>
<p>What are <code>rawTemplateId</code> and <code>workerName</code>? These are so called <strong>path codecs</strong>, defined in a common place so they can be reused in multiple endpoints. They allow us to have dynamic parts of the request path mapped to specific types - so when we implement the endpoint (or call it in a client) we don’t have to pass strings and we can directly work with the business domain types, in this case <code>RawTemplateId</code> and <code>WorkerName</code>.</p>
<p>The simplest way to define path codecs is to <strong>transform</strong> an existing one:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="kw">val</span> workerName<span class="op">:</span> PathCodec<span class="op">[</span>WorkerName<span class="op">]</span> <span class="op">=</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>  <span class="fu">string</span><span class="op">(</span><span class="st">&quot;worker-name&quot;</span><span class="op">).</span><span class="fu">transformOrFailLeft</span><span class="op">(</span>WorkerName<span class="op">.</span><span class="fu">make</span><span class="op">(</span>_<span class="op">).</span>toErrorEither<span class="op">,</span> _<span class="op">.</span>value<span class="op">)</span></span></code></pre></div>
<p>Here the <code>make</code> function is a <strong>ZIO Prelude</strong> <a href="https://zio.github.io/zio-prelude/docs/functionaldatatypes/validation"><code>Validation</code></a> which we have to convert to an <code>Either</code> for the transform function. Validations can contain more than one failures, as opposed to <code>Either</code>s, which allows us to compose them in a way that we can keep multiple errors instead of immediately returning with the first failure.</p>
<p>The <code>tokenSecret</code> is similar, but it is a <code>HeaderCodec</code> describing what type of header it is and how the value of the given header should be mapped to a specific type (a token, in this case).</p>
<p>What is <code>WorkerMetadata</code> and how does ZIO Http know how to produce a JSON from it?</p>
<p>It’s just a simple <em>case class</em>:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="kw">final</span> <span class="cf">case</span> <span class="kw">class</span> <span class="fu">WorkerMetadata</span><span class="op">(</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a>  workerId<span class="op">:</span> ComponentInstanceId<span class="op">,</span></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a>  accountId<span class="op">:</span> AccountId<span class="op">,</span></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a>  args<span class="op">:</span> Chunk<span class="op">[</span><span class="ex">String</span><span class="op">],</span></span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a>  env<span class="op">:</span> <span class="ex">Map</span><span class="op">[</span><span class="ex">String</span><span class="op">,</span> <span class="ex">String</span><span class="op">],</span></span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a>  status<span class="op">:</span> InstanceStatus<span class="op">,</span></span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a>  templateVersion<span class="op">:</span> <span class="bu">Int</span><span class="op">,</span></span>
<span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a>  retryCount<span class="op">:</span> <span class="bu">Int</span></span>
<span id="cb3-9"><a href="#cb3-9" aria-hidden="true" tabindex="-1"></a><span class="op">)</span></span></code></pre></div>
<p>But with an implicit <strong>derived</strong> <strong>ZIO Schema</strong>:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="kw">object</span> WorkerMetadata <span class="op">{</span></span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a>  <span class="kw">implicit</span> <span class="kw">val</span> schema<span class="op">:</span> <span class="ex">Schema</span><span class="op">[</span>WorkerMetadata<span class="op">]</span> <span class="op">=</span> DeriveSchema<span class="op">.</span>gen<span class="op">[</span>WorkerMetadata<span class="op">]</span></span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>We will talk more about ZIO Schema below - for now all we need to know is it describes the structure of Scala types, and this information can be used to serialize data into various formats, including JSON.</p>
<p>Once we have our endpoints defined like this, we can do several things with them - they are just data describing what an endpoint looks like!</p>
<h3 id="implementing-an-endpoint">Implementing an endpoint</h3>
<p>When developing a <em>server</em>, the most important thing to do with an endpoint is to <strong>implement</strong> it. Implementing an endpoint looks like the following:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="kw">val</span> getWorkerMetadataImpl <span class="op">=</span></span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a>    getWorkerMetadata<span class="op">.</span>implement <span class="op">{</span></span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a>      <span class="ex">Handler</span><span class="op">.</span>fromFunctionZIO <span class="op">{</span> <span class="op">(</span>rawTemplateId<span class="op">,</span> workerName<span class="op">,</span> authTokenId<span class="op">)</span> <span class="op">=&gt;</span></span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a>        <span class="co">// ... ZIO program returning a WorkerMetadata</span></span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a>      <span class="op">}</span></span>
<span id="cb5-6"><a href="#cb5-6" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span></code></pre></div>
<p>The <em>type</em> of <code>getWorkerMetadataImpl</code> is <code>Route</code> - it is no longer just a description of what an endpoint looks like, it defines a specific HTTP route and its associated <em>request handler</em>, implemented by a ZIO effect (remember that ZIO effects are also values - we <em>describe</em> what we need to do when a request comes in, but executing it will be the responsibility of the server implementation).</p>
<p>The nice thing about ZIO Http endpoints is that they are completely type safe. I’ve hidden the type signature in the previous code snippets but actually <code>getWorkerMetadata</code> has the type:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="ex">Endpoint</span><span class="op">[</span></span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a>    <span class="op">(</span>RawTemplateId<span class="op">,</span> WorkerName<span class="op">),</span></span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a>    <span class="op">(</span>RawTemplateId<span class="op">,</span> WorkerName<span class="op">,</span> TokenSecret<span class="op">),</span></span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a>    WorkerEndpointError<span class="op">,</span></span>
<span id="cb6-5"><a href="#cb6-5" aria-hidden="true" tabindex="-1"></a>    WorkerMetadata<span class="op">,</span></span>
<span id="cb6-6"><a href="#cb6-6" aria-hidden="true" tabindex="-1"></a>    <span class="bu">None</span></span>
<span id="cb6-7"><a href="#cb6-7" aria-hidden="true" tabindex="-1"></a><span class="op">]</span></span></code></pre></div>
<p>Here the <em>second</em> type parameter defines the <strong>input</strong> of the request handler and the <em>forth</em> type parameter defines the <strong>output</strong> the server constructs the response from.</p>
<p>With these types, we really just have to implement a (ZIO) function from the input to the output:</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="op">(</span>RawTemplateId<span class="op">,</span> WorkerName<span class="op">,</span> TokenSecret<span class="op">)</span> <span class="op">=&gt;</span> ZIO<span class="op">[</span><span class="ex">Any</span><span class="op">,</span> WorkerEndpointError<span class="op">,</span> WorkerMetadata<span class="op">]</span></span></code></pre></div>
<p>and this is exactly what we pass to <code>Handler.fromFunctionZIO</code> in the above example.</p>
<h3 id="calling-an-endpoint">Calling an endpoint</h3>
<p>The same endpoint values can also be used to make requests to our API from clients such as <code>golem-cli</code>. Taking advantage of the same type safe representation we can just call <code>apply</code> on the endpoint definition passing its input as a parameter to get an <strong>invocation</strong>:</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a><span class="kw">val</span> invocation <span class="op">=</span> <span class="fu">getInstanceMetadata</span><span class="op">(</span>rawTemplateId<span class="op">,</span> workerName<span class="op">,</span> token<span class="op">)</span></span></code></pre></div>
<p>this invocation can be <strong>executed</strong> to perform the actual request using an <code>EndpointExecutor</code> which can be easily constructed from a ZIO Http <code>Client</code> and some other parameters like the URL of the remote server:</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true" tabindex="-1"></a><span class="fu">executor</span><span class="op">(</span>invocation<span class="op">).</span>flatMap <span class="op">{</span> workerMetadata <span class="op">=&gt;</span> </span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true" tabindex="-1"></a>  <span class="co">// ...</span></span>
<span id="cb9-3"><a href="#cb9-3" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<h2 id="the-task">The task</h2>
<p>So can we do anything to keep this convenient way of calling our endpoints when migrating the CLI to Rust? At the time of writing we already had more than 60 endpoints, with many complex types used in them - defining them by hand in Rust, and keeping the Scala and Rust code in sync sounds like a nightmare.</p>
<p>The ideal case would be to have something like this in Rust:</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode rust"><code class="sourceCode rust"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true" tabindex="-1"></a><span class="at">#[</span>async_trait<span class="at">]</span></span>
<span id="cb10-2"><a href="#cb10-2" aria-hidden="true" tabindex="-1"></a><span class="kw">pub</span> <span class="kw">trait</span> Worker <span class="op">{</span></span>
<span id="cb10-3"><a href="#cb10-3" aria-hidden="true" tabindex="-1"></a>  <span class="co">// ...</span></span>
<span id="cb10-4"><a href="#cb10-4" aria-hidden="true" tabindex="-1"></a>  <span class="kw">async</span> <span class="kw">fn</span> get_worker_metadata(<span class="op">&amp;</span><span class="kw">self</span><span class="op">,</span> template_id<span class="op">:</span> <span class="op">&amp;</span>TemplateId<span class="op">,</span> worker_name<span class="op">:</span> <span class="op">&amp;</span>WorkerName<span class="op">,</span> authorization<span class="op">:</span> <span class="op">&amp;</span>Token) <span class="op">-&gt;</span> <span class="dt">Result</span><span class="op">&lt;</span>WorkerMetadata<span class="op">,</span> WorkerError<span class="op">&gt;;</span></span>
<span id="cb10-5"><a href="#cb10-5" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>with an implementation that just requires the same amount of configuration as the Scala endpoint executor (server URL, etc), and all the referenced types like <code>WorkerMetadata</code> would be an exact clone of the Scala types just in Rust.</p>
<p>Fortunately we can have (almost) this by taking advantage of the declarative nature of ZIO Http and ZIO Schema!</p>
<p>In the rest of this post we will see how we can <strong>generate Rust code</strong> using a combination of ZIO libraries to automatically have all our type definitions and client implementation ready to use from the Rust version of <code>golem-cli</code>.</p>
<h2 id="the-building-blocks">The building blocks</h2>
<p>We want to generate from an arbitrary set of ZIO Http <code>Endpoint</code> definitions a <strong>Rust crate</strong> ready to be compiled, published and used. We will take advantage of the following libraries:</p>
<ul>
<li><a href="https://zio.dev/zio-http/">ZIO Http</a> as the source of <strong>endpoint</strong> definitions</li>
<li><a href="https://zio.dev/zio-schema/">ZIO Schema</a> for observing the <strong>type</strong> definitions</li>
<li><a href="https://zio.dev/zio-parser/">ZIO Parser</a> because it has a composable <strong>printer</strong> concept</li>
<li><a href="https://zio.dev/zio-nio/">ZIO NIO</a> for working with the <strong>filesystem</strong></li>
<li><a href="https://zio.dev/zio-prelude/">ZIO Prelude</a> for implementing the stateful endpoint/type discovery in a purely functional way</li>
</ul>
<h2 id="generating-rust-code">Generating Rust code</h2>
<p>Let’s start with the actual source code generation. This is something that can be done in many different ways - one extreme could be to just concatenate strings (or use a <code>StringBuilder</code>) while the other is to build a full real Rust <em>AST</em> and pretty print that. I had a <a href="http://vigoo.github.io/posts/2021-12-03-funscala2021-talk.html">talk on Function Scala 2021 about the topic</a>.</p>
<p>For this task I chose a technique which is somewhere in the middle and provides some extent of composability while also allowing use to do just the amount of abstraction we want to. The idea is that we define a <em>Rust code generator model</em> which does not have to strictly follow the actual generated language’s concepts, and then define a pretty printer for this model. This way we only have to model the subset of the language we need for the code generator, and we can keep simplifications or even complete string fragments in it if that makes our life easier.</p>
<p>Let’s see how this works with some examples!</p>
<p>We will have to generate <em>type definitions</em> so we can define a Scala <em>enum</em> describing what kind of type definitions we want to generate:</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true" tabindex="-1"></a>enum RustDef<span class="op">:</span></span>
<span id="cb11-2"><a href="#cb11-2" aria-hidden="true" tabindex="-1"></a>  <span class="cf">case</span> <span class="fu">TypeAlias</span><span class="op">(</span>name<span class="op">:</span> <span class="ex">Name</span><span class="op">,</span> typ<span class="op">:</span> RustType<span class="op">,</span> derives<span class="op">:</span> Chunk<span class="op">[</span>RustType<span class="op">])</span></span>
<span id="cb11-3"><a href="#cb11-3" aria-hidden="true" tabindex="-1"></a>  <span class="cf">case</span> <span class="fu">Newtype</span><span class="op">(</span>name<span class="op">:</span> <span class="ex">Name</span><span class="op">,</span> typ<span class="op">:</span> RustType<span class="op">,</span> derives<span class="op">:</span> Chunk<span class="op">[</span>RustType<span class="op">])</span></span>
<span id="cb11-4"><a href="#cb11-4" aria-hidden="true" tabindex="-1"></a>  <span class="cf">case</span> <span class="ex">Struct</span><span class="op">(</span>name<span class="op">:</span> <span class="ex">Name</span><span class="op">,</span> fields<span class="op">:</span> Chunk<span class="op">[</span>RustDef<span class="op">.</span><span class="ex">Field</span><span class="op">],</span> derives<span class="op">:</span> Chunk<span class="op">[</span>RustType<span class="op">],</span> isPublic<span class="op">:</span> <span class="ex">Boolean</span><span class="op">)</span></span>
<span id="cb11-5"><a href="#cb11-5" aria-hidden="true" tabindex="-1"></a>  <span class="cf">case</span> <span class="ex">Enum</span><span class="op">(</span>name<span class="op">:</span> <span class="ex">Name</span><span class="op">,</span> cases<span class="op">:</span> Chunk<span class="op">[</span>RustDef<span class="op">],</span> derives<span class="op">:</span> Chunk<span class="op">[</span>RustType<span class="op">])</span></span>
<span id="cb11-6"><a href="#cb11-6" aria-hidden="true" tabindex="-1"></a>  <span class="cf">case</span> <span class="fu">Impl</span><span class="op">(</span>tpe<span class="op">:</span> RustType<span class="op">,</span> functions<span class="op">:</span> Chunk<span class="op">[</span>RustDef<span class="op">])</span></span>
<span id="cb11-7"><a href="#cb11-7" aria-hidden="true" tabindex="-1"></a>  <span class="cf">case</span> <span class="fu">ImplTrait</span><span class="op">(</span>implemented<span class="op">:</span> RustType<span class="op">,</span> forType<span class="op">:</span> RustType<span class="op">,</span> functions<span class="op">:</span> Chunk<span class="op">[</span>RustDef<span class="op">])</span></span>
<span id="cb11-8"><a href="#cb11-8" aria-hidden="true" tabindex="-1"></a>  <span class="cf">case</span> <span class="bu">Function</span><span class="op">(</span>name<span class="op">:</span> <span class="ex">Name</span><span class="op">,</span> parameters<span class="op">:</span> Chunk<span class="op">[</span>RustDef<span class="op">.</span><span class="ex">Parameter</span><span class="op">],</span> returnType<span class="op">:</span> RustType<span class="op">,</span> body<span class="op">:</span> <span class="ex">String</span><span class="op">,</span> isPublic<span class="op">:</span> <span class="ex">Boolean</span><span class="op">)</span></span></code></pre></div>
<p>We can make this as convenient to use as we want, for example adding constructors like:</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb12-1"><a href="#cb12-1" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> <span class="fu">struct</span><span class="op">(</span>name<span class="op">:</span> <span class="ex">Name</span><span class="op">,</span> fields<span class="op">:</span> <span class="ex">Field</span><span class="op">*):</span> RustDef</span></code></pre></div>
<p>The <code>Name</code> is an opaque string type with extension methods to convert between various cases like pascal case, snake case, etc. <code>RustType</code> is a similar <em>enum</em> to <code>RustDef</code>, containing all the different type descriptions we will have to use. But it is definitely not how a proper Rust parser would define what a type is - for example we can have a <code>RustType.Option</code> as a shortcut for wrapping a Rust type in Rust’s own option type, just because it makes our code generator simpler to write.</p>
<p>So once we have this model (which in practice evolves together with the code generator, usually starting with a few simple case classes) we can use <strong>ZIO Parser</strong>’s printer feature to define composable elements constructing Rust source code.</p>
<p>We start by defining a module and a type alias for our printer:</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb13-1"><a href="#cb13-1" aria-hidden="true" tabindex="-1"></a><span class="kw">object</span> Rust<span class="op">:</span></span>
<span id="cb13-2"><a href="#cb13-2" aria-hidden="true" tabindex="-1"></a>  <span class="kw">type</span> Rust<span class="op">[-</span>A<span class="op">]</span> <span class="op">=</span> Printer<span class="op">[</span><span class="ex">String</span><span class="op">,</span> <span class="bu">Char</span><span class="op">,</span> A<span class="op">]</span></span></code></pre></div>
<p>and then just define building blocks - what these building blocks are depends completely on us, and the only thing it affects is how well you can compose them. Having very small building blocks may reduce the readability of the code generator, but using too large chunks reduces their composability and makes it harder to change or refactor.</p>
<p>We can define some short aliases for often used characters or string fragments:</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb14-1"><a href="#cb14-1" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> gt<span class="op">:</span> Rust<span class="op">[</span><span class="ex">Any</span><span class="op">]</span> <span class="op">=</span> Printer<span class="op">.</span><span class="fu">print</span><span class="op">(</span><span class="ch">&#39;&gt;&#39;</span><span class="op">)</span></span>
<span id="cb14-2"><a href="#cb14-2" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> lt<span class="op">:</span> Rust<span class="op">[</span><span class="ex">Any</span><span class="op">]</span> <span class="op">=</span> Printer<span class="op">.</span><span class="fu">print</span><span class="op">(</span><span class="ch">&#39;&lt;&#39;</span><span class="op">)</span></span>
<span id="cb14-3"><a href="#cb14-3" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> bracketed<span class="op">[</span>A<span class="op">](</span>inner<span class="op">:</span> Rust<span class="op">[</span>A<span class="op">]):</span> Rust<span class="op">[</span>A<span class="op">]</span> <span class="op">=</span></span>
<span id="cb14-4"><a href="#cb14-4" aria-hidden="true" tabindex="-1"></a>  lt <span class="op">~</span> inner <span class="op">~</span> gt</span></code></pre></div>
<p>and we have to define <code>Rust</code> printers for each of our model types. For example for the <code>RustType</code> enum it could be something like this:</p>
<div class="sourceCode" id="cb15"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb15-1"><a href="#cb15-1" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> typename<span class="op">:</span> Rust<span class="op">[</span>RustType<span class="op">]</span> <span class="op">=</span> Printer<span class="op">.</span>byValue<span class="op">:</span></span>
<span id="cb15-2"><a href="#cb15-2" aria-hidden="true" tabindex="-1"></a>  <span class="cf">case</span> RustType<span class="op">.</span><span class="fu">Primitive</span><span class="op">(</span>name<span class="op">)</span>             <span class="op">=&gt;</span> <span class="fu">str</span><span class="op">(</span>name<span class="op">)</span></span>
<span id="cb15-3"><a href="#cb15-3" aria-hidden="true" tabindex="-1"></a>  <span class="cf">case</span> RustType<span class="op">.</span><span class="ex">Option</span><span class="op">(</span>inner<span class="op">)</span>               <span class="op">=&gt;</span> <span class="fu">typename</span><span class="op">(</span>RustType<span class="op">.</span><span class="fu">Primitive</span><span class="op">(</span><span class="st">&quot;Option&quot;</span><span class="op">))</span> <span class="op">~</span> <span class="fu">bracketed</span><span class="op">(</span><span class="fu">typename</span><span class="op">(</span>inner<span class="op">))</span></span>
<span id="cb15-4"><a href="#cb15-4" aria-hidden="true" tabindex="-1"></a>  <span class="cf">case</span> RustType<span class="op">.</span><span class="fu">Vec</span><span class="op">(</span>inner<span class="op">)</span>                  <span class="op">=&gt;</span> <span class="fu">typename</span><span class="op">(</span>RustType<span class="op">.</span><span class="fu">Primitive</span><span class="op">(</span><span class="st">&quot;Vec&quot;</span><span class="op">))</span> <span class="op">~</span> <span class="fu">bracketed</span><span class="op">(</span><span class="fu">typename</span><span class="op">(</span>inner<span class="op">))</span></span>
<span id="cb15-5"><a href="#cb15-5" aria-hidden="true" tabindex="-1"></a>  <span class="cf">case</span> RustType<span class="op">.</span><span class="fu">SelectFromModule</span><span class="op">(</span>path<span class="op">,</span> typ<span class="op">)</span> <span class="op">=&gt;</span> Printer<span class="op">.</span>anyString<span class="op">.</span><span class="fu">repeatWithSep</span><span class="op">(</span>dcolon<span class="op">)(</span>path<span class="op">)</span> <span class="op">~</span> dcolon <span class="op">~</span> <span class="fu">typename</span><span class="op">(</span>typ<span class="op">)</span></span>
<span id="cb15-6"><a href="#cb15-6" aria-hidden="true" tabindex="-1"></a>  <span class="cf">case</span> RustType<span class="op">.</span><span class="fu">Parametric</span><span class="op">(</span>name<span class="op">,</span> params<span class="op">)</span> <span class="op">=&gt;</span></span>
<span id="cb15-7"><a href="#cb15-7" aria-hidden="true" tabindex="-1"></a>    <span class="fu">str</span><span class="op">(</span>name<span class="op">)</span> <span class="op">~</span> <span class="fu">bracketed</span><span class="op">(</span>typename<span class="op">.</span><span class="fu">repeatWithSep</span><span class="op">(</span>comma<span class="op">)(</span>params<span class="op">))</span></span>
<span id="cb15-8"><a href="#cb15-8" aria-hidden="true" tabindex="-1"></a>  <span class="co">// ...</span></span></code></pre></div>
<p>We can see that <code>typename</code> uses itself to recursively generate inner type names, for example when generating type parameters of tuple members. It also demonstrates that we can extract patterns such as <code>bracketed</code> to simplify our printer definitions and eliminate repetition.</p>
<p>Another nice feature we get by using a general purpose printer library like ZIO Parser is that we can use the built-in combinators to get printers for new types. One example is the sequential composition of printers. For example the following fragment:</p>
<div class="sourceCode" id="cb16"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb16-1"><a href="#cb16-1" aria-hidden="true" tabindex="-1"></a><span class="kw">val</span> p <span class="op">=</span> <span class="fu">str</span><span class="op">(</span><span class="st">&quot;pub &quot;</span><span class="op">)</span> <span class="op">~</span> name <span class="op">~</span> <span class="fu">str</span><span class="op">(</span><span class="st">&quot;: &quot;</span><span class="op">)</span> <span class="op">~</span> typename</span></code></pre></div>
<p>would have the type <code>Rust[(Name, RustType)]</code> and we can even make that a printer of a case class like:</p>
<div class="sourceCode" id="cb17"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb17-1"><a href="#cb17-1" aria-hidden="true" tabindex="-1"></a><span class="kw">final</span> <span class="cf">case</span> <span class="kw">class</span> <span class="fu">PublicField</span><span class="op">(</span>name<span class="op">:</span> <span class="ex">Name</span><span class="op">,</span> typ<span class="op">:</span> RustType<span class="op">)</span></span>
<span id="cb17-2"><a href="#cb17-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb17-3"><a href="#cb17-3" aria-hidden="true" tabindex="-1"></a><span class="kw">val</span> p2 <span class="op">=</span> p<span class="op">.</span>from<span class="op">[</span>PublicField<span class="op">]</span></span></code></pre></div>
<p>where <code>p2</code> will have the type <code>Rust[PublicField</code>].</p>
<p>Another very useful combinator is <strong>repetition</strong>. For example if we have a printer for an enum’s case:</p>
<div class="sourceCode" id="cb18"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb18-1"><a href="#cb18-1" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> enumCase<span class="op">:</span> Rust<span class="op">[</span>RustDef<span class="op">]</span> <span class="op">=</span> <span class="co">// ...</span></span></code></pre></div>
<p>we can simply use one of the repetition combinators to make a printer for a <em>list of enum cases</em>:</p>
<div class="sourceCode" id="cb19"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb19-1"><a href="#cb19-1" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> enumCases<span class="op">:</span> Rust<span class="op">[</span>Chunk<span class="op">[</span>RustDef<span class="op">]]</span> <span class="op">=</span> enumCase<span class="op">.*</span></span></code></pre></div>
<p>or as in the <code>typename</code> example above:</p>
<div class="sourceCode" id="cb20"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb20-1"><a href="#cb20-1" aria-hidden="true" tabindex="-1"></a>typename<span class="op">.</span><span class="fu">repeatWithSep</span><span class="op">(</span>comma<span class="op">)</span></span></code></pre></div>
<p>to have a <code>Rust[Chunk[RustType]]</code> that inserts a comma between each element when printed.</p>
<h2 id="inspecting-the-scala-types">Inspecting the Scala types</h2>
<p>As we have seen the <em>endpoint DSL</em> uses <strong>ZIO Schema</strong> to capture information about the types being used in the endpoints (usually as request or response bodies, serialized into JSON). We can use the same information to generate <strong>Rust types</strong> from our Scala types!</p>
<p>The core data type defined by the ZIO Schema library is called <code>Schema</code>:</p>
<div class="sourceCode" id="cb21"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb21-1"><a href="#cb21-1" aria-hidden="true" tabindex="-1"></a><span class="kw">sealed</span> <span class="kw">trait</span> <span class="ex">Schema</span><span class="op">[</span>A<span class="op">]</span> <span class="op">{</span></span>
<span id="cb21-2"><a href="#cb21-2" aria-hidden="true" tabindex="-1"></a>  <span class="co">// ...</span></span>
<span id="cb21-3"><a href="#cb21-3" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>Schema describes the structure of a Scala type <code>A</code> in a way we can inspect it from regular Scala code. Let’s imagine we have <code>Schema[WorkerMetadata]</code> coming from our endpoint definition and we have to generate an equivalent Rust <code>struct</code> with the same field names and field types.</p>
<p>The first thing to notice is that type definitions are recursive. Unless <code>WorkerMetadata</code> only contains fields of <em>primitive types</em> such as integer or string, our job does not end with generating a single Rust struct - we need to recursively generate all the other types <code>WorkerMetadata</code> is depending on! To capture this fact let’s introduce a type that represents everything we have to extract from a single (or a set of) schemas in order to generate Rust types from them:</p>
<div class="sourceCode" id="cb22"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb22-1"><a href="#cb22-1" aria-hidden="true" tabindex="-1"></a><span class="kw">final</span> <span class="cf">case</span> <span class="kw">class</span> <span class="fu">RustModel</span><span class="op">(</span></span>
<span id="cb22-2"><a href="#cb22-2" aria-hidden="true" tabindex="-1"></a>  typeRefs<span class="op">:</span> <span class="ex">Map</span><span class="op">[</span><span class="ex">Schema</span><span class="op">[?],</span> RustType<span class="op">],</span> </span>
<span id="cb22-3"><a href="#cb22-3" aria-hidden="true" tabindex="-1"></a>  definitions<span class="op">:</span> Chunk<span class="op">[</span>RustDef<span class="op">],</span> </span>
<span id="cb22-4"><a href="#cb22-4" aria-hidden="true" tabindex="-1"></a>  requiredCrates<span class="op">:</span> <span class="ex">Set</span><span class="op">[</span>Crate<span class="op">]</span></span>
<span id="cb22-5"><a href="#cb22-5" aria-hidden="true" tabindex="-1"></a><span class="op">)</span></span></code></pre></div>
<p>We have <code>typeRefs</code> which associates a <code>RustType</code> with a schema so we can use it in future steps of our code generator to refer to a generated type in our Rust codebase. We have a list of <code>RustDef</code> values which are the generated type definitions, ready to be printed with out <code>Rust</code> pretty printer. And finally we can also gather a set of required extra rust <em>crates</em>, because some of the types considered <em>primitive types</em> by ZIO Schema are not having proper representations in the Rust standard library, only in external crates. Examples are UUIDs and various date/time types.</p>
<p>So our job now is to write a function of</p>
<div class="sourceCode" id="cb23"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb23-1"><a href="#cb23-1" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> <span class="fu">fromSchemas</span><span class="op">(</span>schemas<span class="op">:</span> <span class="bu">Seq</span><span class="op">[</span><span class="ex">Schema</span><span class="op">[?]]):</span> Either<span class="op">[</span><span class="ex">String</span><span class="op">,</span> RustModel<span class="op">]</span></span></code></pre></div>
<p>The <code>Either</code> result type is used to indicate failures. Even if we write a transformation that can produce from any <code>Schema</code> a proper <code>RustModel</code>, we always have to have an error result when working with ZIO Schema because it has an explicit failure case called <code>Schema.Fail</code>. If we process a schema and end up with a <code>Fail</code> node, we can’t do anything else than fail our code generator.</p>
<p>There are many important details to consider when implementing this function, but let’s just see first what the actual <code>Schema</code> type looks like. When we have a value of <code>Schema[?]</code> we can pattern match on it and implement the following cases:</p>
<ul>
<li><code>Schema.Primitive</code> describes a primitive type - there are a lot of primitive types defined by ZIO Schema’s <code>StandardType</code> enum</li>
<li><code>Schema.Enum</code> describes a type with multiple cases (a <em>sum type</em>) such as a <code>sealed trait</code> or <code>enum</code></li>
<li><code>Schema.Record</code> describes a type with multiple fields (a <em>product type</em>) such as a <code>case class</code></li>
<li><code>Schema.Map</code> represents a <em>map</em> with a key and value type</li>
<li><code>Schema.Sequence</code> represents a <em>sequence</em> of items of a given element type</li>
<li><code>Schema.Set</code> is a <em>set</em> of items of a given element type</li>
<li><code>Schema.Optional</code> represents an <em>optional</em> type (like an <code>Option[T]</code>)</li>
<li><code>Schema.Either</code> is a special case of sum types representing either one or the other type (like an <code>Either[A, B]</code>)</li>
<li><code>Schema.Lazy</code> is used to safely encode recursive types, it contains a function that evaluates into an inner <code>Schema</code></li>
<li><code>Schema.Dynamic</code> represents a type that is dynamic - like a <code>JSON</code> value</li>
<li><code>Schema.Transform</code> assigns a transformation function that converts a <em>value</em> of a type represented by the schema to a value of some other type. As we have no way to inspect these functions (they are compiled Scala functions) in our code generator, this is not very interesting for us now.</li>
<li><code>Schema.Fail</code> as already mentioned represents a failure in describing the data type</li>
</ul>
<p>When traversing a <code>Schema</code> recursively (for any reason), it is important to keep in mind that it <em>can</em> encode recursive types! A simple example is a binary tree:</p>
<div class="sourceCode" id="cb24"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb24-1"><a href="#cb24-1" aria-hidden="true" tabindex="-1"></a><span class="kw">final</span> <span class="cf">case</span> <span class="kw">class</span> Tree<span class="op">[</span>A<span class="op">](</span>label<span class="op">:</span> A<span class="op">,</span> left<span class="op">:</span> <span class="ex">Option</span><span class="op">[</span>Tree<span class="op">],</span> right<span class="op">:</span> <span class="ex">Option</span><span class="op">[</span>Tree<span class="op">])</span></span></code></pre></div>
<p>We can construct a <code>Schema[Tree[A]]</code> if we have a <code>Schema[A]</code>. This will be something like (pseudo-code):</p>
<div class="sourceCode" id="cb25"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb25-1"><a href="#cb25-1" aria-hidden="true" tabindex="-1"></a><span class="kw">lazy</span> <span class="kw">val</span> tree<span class="op">:</span> <span class="ex">Schema</span><span class="op">[</span>Tree<span class="op">]</span> <span class="op">=</span></span>
<span id="cb25-2"><a href="#cb25-2" aria-hidden="true" tabindex="-1"></a>  <span class="ex">Schema</span><span class="op">.</span><span class="fu">Record</span><span class="op">(</span></span>
<span id="cb25-3"><a href="#cb25-3" aria-hidden="true" tabindex="-1"></a>    <span class="ex">Field</span><span class="op">(</span><span class="st">&quot;label&quot;</span><span class="op">,</span> <span class="ex">Schema</span><span class="op">[</span>A<span class="op">]),</span></span>
<span id="cb25-4"><a href="#cb25-4" aria-hidden="true" tabindex="-1"></a>    <span class="ex">Field</span><span class="op">(</span><span class="st">&quot;left&quot;</span><span class="op">,</span> <span class="ex">Schema</span><span class="op">.</span><span class="fu">Optional</span><span class="op">(</span><span class="ex">Schema</span><span class="op">.</span><span class="fu">Lazy</span><span class="op">(()</span> <span class="op">=&gt;</span> tree<span class="op">))),</span></span>
<span id="cb25-5"><a href="#cb25-5" aria-hidden="true" tabindex="-1"></a>    <span class="ex">Field</span><span class="op">(</span><span class="st">&quot;right&quot;</span><span class="op">,</span> <span class="ex">Schema</span><span class="op">.</span><span class="fu">Optional</span><span class="op">(</span><span class="ex">Schema</span><span class="op">.</span><span class="fu">Lazy</span><span class="op">(()</span> <span class="op">=&gt;</span> tree<span class="op">)))</span></span>
<span id="cb25-6"><a href="#cb25-6" aria-hidden="true" tabindex="-1"></a>  <span class="op">)</span></span></code></pre></div>
<p>If we are not prepared for recursive types we can easily get into an endless loop (or stack overflow) when processing these schemas.</p>
<p>This is just one example of things to keep track of while converting a schema into a set of Rust definitions. If fields refer to the self type we want to use <code>Box</code> so to put them on the heap. We also need to keep track of if everything within a generated type derives <code>Ord</code> and <code>Hash</code> - and if yes, we should derive an instance for the same type classes for our generated type as well.</p>
<p>My preferred way to implement such recursive stateful transformation functions is to use <strong>ZIO Prelude</strong>’s <code>ZPure</code> type. It’s type definition looks a little scary:</p>
<div class="sourceCode" id="cb26"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb26-1"><a href="#cb26-1" aria-hidden="true" tabindex="-1"></a><span class="kw">sealed</span> <span class="kw">trait</span> ZPure<span class="op">[+</span>W<span class="op">,</span> <span class="op">-</span>S1<span class="op">,</span> <span class="op">+</span>S2<span class="op">,</span> <span class="op">-</span>R<span class="op">,</span> <span class="op">+</span>E<span class="op">,</span> <span class="op">+</span>A<span class="op">]</span></span></code></pre></div>
<p><code>ZPure</code> describes a <em>purely functional computation</em> which can:</p>
<ul>
<li>Emit log entries of type <code>W</code></li>
<li>Works with an inital state of type <code>S1</code></li>
<li>Results in a final state of type <code>S2</code></li>
<li>Has access to some context of type <code>R</code></li>
<li>Can fail with a value of <code>E</code></li>
<li>Or succeed with a value of <code>A</code></li>
</ul>
<p>In this case we need the state, failure and result types only, but we could also take advantage of <code>W</code> to log debug information within our schema transformation function.</p>
<p>To make it easier to work with <code>ZPure</code> we can introduce a <em>type alias</em>:</p>
<div class="sourceCode" id="cb27"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb27-1"><a href="#cb27-1" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> Fx<span class="op">[+</span>A<span class="op">]</span> <span class="op">=</span> ZPure<span class="op">[</span>Nothing<span class="op">,</span> <span class="ex">State</span><span class="op">,</span> <span class="ex">State</span><span class="op">,</span> <span class="ex">Any</span><span class="op">,</span> <span class="ex">String</span><span class="op">,</span> A<span class="op">]</span></span></code></pre></div>
<p>where <code>State</code> is our own <em>case class</em> containing everything we need:</p>
<div class="sourceCode" id="cb28"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb28-1"><a href="#cb28-1" aria-hidden="true" tabindex="-1"></a><span class="kw">final</span> <span class="cf">case</span> <span class="kw">class</span> <span class="ex">State</span><span class="op">(</span></span>
<span id="cb28-2"><a href="#cb28-2" aria-hidden="true" tabindex="-1"></a>  typeRefs<span class="op">:</span> <span class="ex">Map</span><span class="op">[</span><span class="ex">Schema</span><span class="op">[?],</span> RustType<span class="op">],</span></span>
<span id="cb28-3"><a href="#cb28-3" aria-hidden="true" tabindex="-1"></a>  definitions<span class="op">:</span> Chunk<span class="op">[</span>RustDef<span class="op">],</span></span>
<span id="cb28-4"><a href="#cb28-4" aria-hidden="true" tabindex="-1"></a>  requiredCrates<span class="op">:</span> <span class="ex">Set</span><span class="op">[</span>Crate<span class="op">],</span></span>
<span id="cb28-5"><a href="#cb28-5" aria-hidden="true" tabindex="-1"></a>  processed<span class="op">:</span> <span class="ex">Set</span><span class="op">[</span><span class="ex">Schema</span><span class="op">[?]],</span></span>
<span id="cb28-6"><a href="#cb28-6" aria-hidden="true" tabindex="-1"></a>  stack<span class="op">:</span> Chunk<span class="op">[</span><span class="ex">Schema</span><span class="op">[?]],</span></span>
<span id="cb28-7"><a href="#cb28-7" aria-hidden="true" tabindex="-1"></a>  nameTypeIdMap<span class="op">:</span> <span class="ex">Map</span><span class="op">[</span><span class="ex">Name</span><span class="op">,</span> <span class="ex">Set</span><span class="op">[</span>TypeId<span class="op">]],</span></span>
<span id="cb28-8"><a href="#cb28-8" aria-hidden="true" tabindex="-1"></a>  schemaCaps<span class="op">:</span> <span class="ex">Map</span><span class="op">[</span><span class="ex">Schema</span><span class="op">[?],</span> Capabilities<span class="op">]</span></span>
<span id="cb28-9"><a href="#cb28-9" aria-hidden="true" tabindex="-1"></a><span class="op">)</span></span></code></pre></div>
<p>We won’t get into the details of the state type here, but I’m showing some fragments to get a feeling of working with <code>ZPure</code> values.</p>
<p>Some helper functions to manipulate the state can make our code much easier to read:</p>
<div class="sourceCode" id="cb29"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb29-1"><a href="#cb29-1" aria-hidden="true" tabindex="-1"></a><span class="kw">private</span> <span class="kw">def</span> getState<span class="op">:</span> Fx<span class="op">[</span><span class="ex">State</span><span class="op">]</span> <span class="op">=</span> ZPure<span class="op">.</span>get<span class="op">[</span><span class="ex">State</span><span class="op">]</span></span>
<span id="cb29-2"><a href="#cb29-2" aria-hidden="true" tabindex="-1"></a><span class="kw">private</span> <span class="kw">def</span> <span class="fu">updateState</span><span class="op">(</span>f<span class="op">:</span> <span class="ex">State</span> <span class="op">=&gt;</span> <span class="ex">State</span><span class="op">):</span> Fx<span class="op">[</span><span class="bu">Unit</span><span class="op">]</span> <span class="op">=</span> ZPure<span class="op">.</span>update<span class="op">[</span><span class="ex">State</span><span class="op">,</span> <span class="ex">State</span><span class="op">](</span>f<span class="op">)</span></span></code></pre></div>
<p>For example we can use <code>updateState</code> to manipulate the <code>stack</code> field of the state around another computation - before running it, we add a schema to the stack, after that we remove it:</p>
<div class="sourceCode" id="cb30"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb30-1"><a href="#cb30-1" aria-hidden="true" tabindex="-1"></a><span class="kw">private</span> <span class="kw">def</span> stacked<span class="op">[</span>A<span class="op">,</span> R<span class="op">](</span>schema<span class="op">:</span> <span class="ex">Schema</span><span class="op">[</span>A<span class="op">])(</span>f<span class="op">:</span> <span class="op">=&gt;</span> Fx<span class="op">[</span>R<span class="op">]):</span> Fx<span class="op">[</span>R<span class="op">]</span> <span class="op">=</span></span>
<span id="cb30-2"><a href="#cb30-2" aria-hidden="true" tabindex="-1"></a>  <span class="fu">updateState</span><span class="op">(</span>s <span class="op">=&gt;</span> s<span class="op">.</span><span class="fu">copy</span><span class="op">(</span>stack <span class="op">=</span> s<span class="op">.</span>stack <span class="op">:+</span> schema<span class="op">))</span></span>
<span id="cb30-3"><a href="#cb30-3" aria-hidden="true" tabindex="-1"></a>    <span class="op">.</span><span class="fu">zipRight</span><span class="op">(</span>f<span class="op">)</span></span>
<span id="cb30-4"><a href="#cb30-4" aria-hidden="true" tabindex="-1"></a>    <span class="op">.</span><span class="fu">zipLeft</span><span class="op">(</span><span class="fu">updateState</span><span class="op">(</span>s <span class="op">=&gt;</span> s<span class="op">.</span><span class="fu">copy</span><span class="op">(</span>stack <span class="op">=</span> s<span class="op">.</span>stack<span class="op">.</span><span class="fu">dropRight</span><span class="op">(</span><span class="dv">1</span><span class="op">))))</span></span></code></pre></div>
<p>This allows us to decide whether we have to wrap a generated field’s type in <code>Box</code> in the rust code:</p>
<div class="sourceCode" id="cb31"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb31-1"><a href="#cb31-1" aria-hidden="true" tabindex="-1"></a><span class="kw">private</span> <span class="kw">def</span> boxIfNeeded<span class="op">[</span>A<span class="op">](</span>schema<span class="op">:</span> <span class="ex">Schema</span><span class="op">[</span>A<span class="op">]):</span> Fx<span class="op">[</span>RustType<span class="op">]</span> <span class="op">=</span></span>
<span id="cb31-2"><a href="#cb31-2" aria-hidden="true" tabindex="-1"></a>  <span class="cf">for</span></span>
<span id="cb31-3"><a href="#cb31-3" aria-hidden="true" tabindex="-1"></a>    state <span class="op">&lt;-</span> getState</span>
<span id="cb31-4"><a href="#cb31-4" aria-hidden="true" tabindex="-1"></a>    backRef <span class="op">=</span> state<span class="op">.</span>stack<span class="op">.</span><span class="fu">contains</span><span class="op">(</span>schema<span class="op">)</span></span>
<span id="cb31-5"><a href="#cb31-5" aria-hidden="true" tabindex="-1"></a>    rustType <span class="op">&lt;-</span> <span class="fu">getRustType</span><span class="op">(</span>schema<span class="op">)</span></span>
<span id="cb31-6"><a href="#cb31-6" aria-hidden="true" tabindex="-1"></a>  <span class="cf">yield</span> <span class="cf">if</span> backRef then RustType<span class="op">.</span><span class="fu">box</span><span class="op">(</span>rustType<span class="op">)</span> <span class="cf">else</span> rustType</span></code></pre></div>
<p>By looking into <code>state.stack</code> we can decide if we are dealing with a recursive type or not, and make our decision regarding boxing the field.</p>
<p>Another example is to guard against infinite recursion when traversing the schema definition, as I explained before. We can define a helper function that just keeps track of all the visited schemas and shortcuts the computation if something has already been seen:</p>
<div class="sourceCode" id="cb32"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb32-1"><a href="#cb32-1" aria-hidden="true" tabindex="-1"></a><span class="kw">private</span> <span class="kw">def</span> ifNotProcessed<span class="op">[</span>A<span class="op">](</span>value<span class="op">:</span> <span class="ex">Schema</span><span class="op">[</span>A<span class="op">])(</span>f<span class="op">:</span> <span class="op">=&gt;</span> Fx<span class="op">[</span><span class="bu">Unit</span><span class="op">]):</span> Fx<span class="op">[</span><span class="bu">Unit</span><span class="op">]</span> <span class="op">=</span></span>
<span id="cb32-2"><a href="#cb32-2" aria-hidden="true" tabindex="-1"></a>  getState<span class="op">.</span>flatMap<span class="op">:</span> state <span class="op">=&gt;</span></span>
<span id="cb32-3"><a href="#cb32-3" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> state<span class="op">.</span>processed<span class="op">.</span><span class="fu">contains</span><span class="op">(</span>value<span class="op">)</span> then ZPure<span class="op">.</span><span class="dt">unit</span></span>
<span id="cb32-4"><a href="#cb32-4" aria-hidden="true" tabindex="-1"></a>    <span class="cf">else</span> <span class="fu">updateState</span><span class="op">(</span>_<span class="op">.</span><span class="fu">copy</span><span class="op">(</span>processed <span class="op">=</span> state<span class="op">.</span>processed <span class="op">+</span> value<span class="op">)).</span><span class="fu">zipRight</span><span class="op">(</span>f<span class="op">)</span></span></code></pre></div>
<p>Putting all these smaller combinators together we have an easy-to-read core recursive transformation function for converting the schema:</p>
<div class="sourceCode" id="cb33"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb33-1"><a href="#cb33-1" aria-hidden="true" tabindex="-1"></a><span class="kw">private</span> <span class="kw">def</span> process<span class="op">[</span>A<span class="op">](</span>schema<span class="op">:</span> <span class="ex">Schema</span><span class="op">[</span>A<span class="op">]):</span> Fx<span class="op">[</span><span class="bu">Unit</span><span class="op">]</span> <span class="op">=</span></span>
<span id="cb33-2"><a href="#cb33-2" aria-hidden="true" tabindex="-1"></a>  <span class="fu">ifNotProcessed</span><span class="op">(</span>schema<span class="op">):</span></span>
<span id="cb33-3"><a href="#cb33-3" aria-hidden="true" tabindex="-1"></a>    <span class="fu">getRustType</span><span class="op">(</span>schema<span class="op">).</span>flatMap<span class="op">:</span> typeRef <span class="op">=&gt;</span></span>
<span id="cb33-4"><a href="#cb33-4" aria-hidden="true" tabindex="-1"></a>      <span class="fu">stacked</span><span class="op">(</span>schema<span class="op">):</span></span>
<span id="cb33-5"><a href="#cb33-5" aria-hidden="true" tabindex="-1"></a>        schema <span class="cf">match</span></span>
<span id="cb33-6"><a href="#cb33-6" aria-hidden="true" tabindex="-1"></a>          <span class="co">// ...</span></span></code></pre></div>
<p>In the end to run a <code>Fx[A]</code> all we need to do is to provide an initial state:</p>
<div class="sourceCode" id="cb34"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb34-1"><a href="#cb34-1" aria-hidden="true" tabindex="-1"></a>processSchema<span class="op">.</span><span class="fu">provideState</span><span class="op">(</span><span class="ex">State</span><span class="op">.</span>empty<span class="op">).</span>runEither</span></code></pre></div>
<h2 id="inspecting-the-endpoints">Inspecting the endpoints</h2>
<p>We generated Rust code for all our types but we still need to generate HTTP clients. The basic idea is the same as what we have seen so far:</p>
<ul>
<li>Traversing the <code>Endpoint</code> data structure for each endpoint we have</li>
<li>Generate some intermediate model</li>
<li>Pretty print this model to Rust code</li>
</ul>
<p>The conversion once again is recursive, can fail, and requires keeping track of various things, so we can use <code>ZPure</code> to implement it. Not repeating the same details, in this section we will talk about what exactly the endpoint descriptions look like and what we have be aware of when trying to process them.</p>
<p>The first problem to solve is that currently ZIO Http does not have a concept of multiple endpoints. We are not composing <code>Endpoint</code> values into an API, instead we first <strong>implement</strong> them to get <code>Route</code> values and compose those. We can no longer inspect the endpoint definitions from the composed routes, so unfortunately we have to repeat ourselves and somehow compose our set of endpoints for our code generator.</p>
<p>First we can define a <code>RustEndpoint</code> class, similar to the <code>RustModel</code> earlier, containing all the necessary information to generate Rust code for a <strong>single endpoint</strong>.</p>
<p>We can construct it with a function:</p>
<div class="sourceCode" id="cb35"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb35-1"><a href="#cb35-1" aria-hidden="true" tabindex="-1"></a><span class="co">// ...</span></span>
<span id="cb35-2"><a href="#cb35-2" aria-hidden="true" tabindex="-1"></a><span class="kw">object</span> RustEndpoint<span class="op">:</span></span>
<span id="cb35-3"><a href="#cb35-3" aria-hidden="true" tabindex="-1"></a>  <span class="kw">def</span> fromEndpoint<span class="op">[</span>PathInput<span class="op">,</span> Input<span class="op">,</span> Err<span class="op">,</span> Output<span class="op">,</span> Middleware <span class="op">&lt;:</span> EndpointMiddleware<span class="op">](</span></span>
<span id="cb35-4"><a href="#cb35-4" aria-hidden="true" tabindex="-1"></a>      name<span class="op">:</span> <span class="ex">String</span><span class="op">,</span></span>
<span id="cb35-5"><a href="#cb35-5" aria-hidden="true" tabindex="-1"></a>      endpoint<span class="op">:</span> <span class="ex">Endpoint</span><span class="op">[</span>PathInput<span class="op">,</span> Input<span class="op">,</span> Err<span class="op">,</span> Output<span class="op">,</span> Middleware<span class="op">],</span></span>
<span id="cb35-6"><a href="#cb35-6" aria-hidden="true" tabindex="-1"></a>  <span class="op">):</span> Either<span class="op">[</span><span class="ex">String</span><span class="op">,</span> RustEndpoint<span class="op">]</span> <span class="op">=</span> <span class="co">// ...</span></span></code></pre></div>
<p>The second thing to notice: endpoints do not have a name! If we look back to our initial example of <code>getWorkerMetadata</code>, it did not have a unique name except the Scala value it was assigned to. But we can’t observe that in our code generator (without writing a macro) so here we have chosen to just get a name as a string next to the definition.</p>
<p>Then we can define a <strong>collection</strong> of <code>RustEndpoint</code>s:</p>
<div class="sourceCode" id="cb36"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb36-1"><a href="#cb36-1" aria-hidden="true" tabindex="-1"></a><span class="kw">final</span> <span class="cf">case</span> <span class="kw">class</span> <span class="fu">RustEndpoints</span><span class="op">(</span>name<span class="op">:</span> <span class="ex">Name</span><span class="op">,</span> originalEndpoints<span class="op">:</span> Chunk<span class="op">[</span>RustEndpoint<span class="op">])</span></span></code></pre></div>
<p>and define a <code>++</code> operator between <code>RustEndpoint</code> and <code>RustEndpoints</code>. In the end we can use these to define APIs like this:</p>
<div class="sourceCode" id="cb37"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb37-1"><a href="#cb37-1" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span></span>
<span id="cb37-2"><a href="#cb37-2" aria-hidden="true" tabindex="-1"></a>      getDefaultProject <span class="op">&lt;-</span> <span class="fu">fromEndpoint</span><span class="op">(</span><span class="st">&quot;getDefaultProject&quot;</span><span class="op">,</span> ProjectEndpoints<span class="op">.</span>getDefaultProject<span class="op">)</span></span>
<span id="cb37-3"><a href="#cb37-3" aria-hidden="true" tabindex="-1"></a>      getProjects       <span class="op">&lt;-</span> <span class="fu">fromEndpoint</span><span class="op">(</span><span class="st">&quot;getProjects&quot;</span><span class="op">,</span> ProjectEndpoints<span class="op">.</span>getProjects<span class="op">)</span></span>
<span id="cb37-4"><a href="#cb37-4" aria-hidden="true" tabindex="-1"></a>      postProject       <span class="op">&lt;-</span> <span class="fu">fromEndpoint</span><span class="op">(</span><span class="st">&quot;postProject&quot;</span><span class="op">,</span> ProjectEndpoints<span class="op">.</span>postProject<span class="op">)</span></span>
<span id="cb37-5"><a href="#cb37-5" aria-hidden="true" tabindex="-1"></a>      getProject        <span class="op">&lt;-</span> <span class="fu">fromEndpoint</span><span class="op">(</span><span class="st">&quot;getProject&quot;</span><span class="op">,</span> ProjectEndpoints<span class="op">.</span>getProject<span class="op">)</span></span>
<span id="cb37-6"><a href="#cb37-6" aria-hidden="true" tabindex="-1"></a>      deleteProject     <span class="op">&lt;-</span> <span class="fu">fromEndpoint</span><span class="op">(</span><span class="st">&quot;deleteProject&quot;</span><span class="op">,</span> ProjectEndpoints<span class="op">.</span>deleteProject<span class="op">)</span></span>
<span id="cb37-7"><a href="#cb37-7" aria-hidden="true" tabindex="-1"></a>    <span class="cf">yield</span> <span class="op">(</span>getDefaultProject <span class="op">++</span> getProjects <span class="op">++</span> postProject <span class="op">++</span> getProject <span class="op">++</span> deleteProject<span class="op">).</span><span class="fu">named</span><span class="op">(</span><span class="st">&quot;Project&quot;</span><span class="op">)</span></span></code></pre></div>
<p>The collection of endpoints also have a name (<code>"Project"</code>). In the code generator we can use these to have a separate <strong>client</strong> (trait and implementation) for each of these groups of endpoints.</p>
<p>When processing a single endpoint, we need to process the following parts of data:</p>
<ul>
<li>Inputs (<code>endpoint.input</code>)</li>
<li>Outputs (<code>endpoint.output</code>)</li>
<li>Errors (<code>endpoint.error</code>)</li>
</ul>
<p>Everything we need is encoded in one of these three fields of an endpoint, and all three are built on the same abstraction called <code>HttpCodec</code>. Still there is a significant difference in what we want to do with inputs versus what we want to do with outputs and errors, so we can write two different traversals for gathering all the necessary information from them.</p>
<h3 id="inputs">Inputs</h3>
<p>When gathering information from the inputs, we are going to run into the following cases:</p>
<ul>
<li><code>HttpCodec.Combine</code> means we have two different inputs; we need both, so we have to process both inner codecs sequentially, both extending our conversion function’s state.</li>
<li><code>HttpCodec.Content</code> describes a <strong>request body</strong>. Here we have a <code>Schema</code> of our request body type and we can use the previously generated schema-to-rust type mapping to know how to refer to the generated rust type in our client code. It is important that in case there are <strong>multiple content codecs</strong>, that means the endpoint receives a <code>multipart/form-data</code> body, while if there is only one codec, it accepts an <code>application/json</code> representation of that.</li>
<li><code>HttpCodec.ContentStream</code> represents a body containing a stream of a given element type. We can model this as just a <code>Vec&lt;A&gt;</code> in the Rust side, but there is one special case here - if the element is a <code>Byte</code>, ZIO Http expects a simple byte stream of type <code>application/octet-stream</code> instead of a JSON-encoded array of bytes.</li>
<li><code>HttpCodec.Fallback</code> this represents the case when we should either use the first codec, <em>or</em> the second. A special case is when the <code>right</code> value of <code>Fallback</code> is <code>HttpCodec.Empty</code>. This is how ZIO Http represents optional inputs! We have to handle this specially in our code generator to mark some of the input parameters of the generated API as optional parameters. We don’t support currently the other cases (when <code>right</code> is not empty) as it is not frequently used and was not required for the <em>Golem API</em>.</li>
<li><code>HttpCodec.Header</code> means we need to send a <em>header</em> in the request, which can be a static (value described by the endpoint) or dynamic one (where we need to add an extra parameter to the generated function to get a value of the header). There are a couple of different primitive types supported for the value, such as string, numbers, UUIDs.</li>
<li><code>HttpCodec.Method</code> defines the method to be used for calling the endpoint</li>
<li><code>HttpCodec.Path</code> describes the request path, which consists of a sequence of static and dynamic segments - for the dynamic segments the generated API need to have exposed function parameters of the appropriate type</li>
<li><code>HttpCodec.Query</code> similar to the header codec defines query parameters to be sent</li>
<li><code>HttpCodec.TransformOrFail</code> transforms a value with a Scala function - the same case as with <code>Schema.Transform</code>. We cannot use the Scala function in our code generator so we just need to ignore this and go to the inner codec.</li>
<li><code>HttpCodec.Annotated</code> attaches additional information to the codecs that we are currently not using, but it could be used to get documentation strings and include them in the generated code as comments, for example.</li>
</ul>
<h3 id="outputs">Outputs</h3>
<p>For outputs we are dealing with the same <code>HttpCodec</code> type but there are some significant differences:</p>
<ul>
<li>We can ignore <code>Path</code>, <code>Method</code>, <code>Query</code> as they have no meaning for outputs</li>
<li>We could look for <em>output headers</em> but currently we ignore them</li>
<li><code>Fallback</code> on the other hand needs to be properly handled for outputs (errors, especially) because this is how the different error responses are encoded.</li>
<li><code>Status</code> is combined with <code>Content</code> in these <code>Fallback</code> nodes to describe cases. This complicates the code generator because we need to record “possible outputs” which are only added as real output once we are sure we will not get any other piece of information for them.</li>
</ul>
<p>To understand the error fallback handling better, let’s take a look at how it is defined in one of Golem’s endpoint groups:</p>
<div class="sourceCode" id="cb38"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb38-1"><a href="#cb38-1" aria-hidden="true" tabindex="-1"></a><span class="kw">val</span> errorCodec<span class="op">:</span> HttpCodec<span class="op">[</span>HttpCodecType<span class="op">.</span>Status <span class="op">&amp;</span> HttpCodecType<span class="op">.</span>Content<span class="op">,</span> LimitsEndpointError<span class="op">]</span> <span class="op">=</span></span>
<span id="cb38-2"><a href="#cb38-2" aria-hidden="true" tabindex="-1"></a>  HttpCodec<span class="op">.</span>enumeration<span class="op">[</span>LimitsEndpointError<span class="op">](</span></span>
<span id="cb38-3"><a href="#cb38-3" aria-hidden="true" tabindex="-1"></a>    HttpCodec<span class="op">.</span>error<span class="op">[</span>LimitsEndpointError<span class="op">.</span>Unauthorized<span class="op">](</span>Status<span class="op">.</span>Unauthorized<span class="op">),</span></span>
<span id="cb38-4"><a href="#cb38-4" aria-hidden="true" tabindex="-1"></a>    HttpCodec<span class="op">.</span>error<span class="op">[</span>LimitsEndpointError<span class="op">.</span>ArgValidationError<span class="op">](</span>Status<span class="op">.</span>BadRequest<span class="op">),</span></span>
<span id="cb38-5"><a href="#cb38-5" aria-hidden="true" tabindex="-1"></a>    HttpCodec<span class="op">.</span>error<span class="op">[</span>LimitsEndpointError<span class="op">.</span>LimitExceeded<span class="op">](</span>Status<span class="op">.</span>Forbidden<span class="op">),</span></span>
<span id="cb38-6"><a href="#cb38-6" aria-hidden="true" tabindex="-1"></a>    HttpCodec<span class="op">.</span>error<span class="op">[</span>LimitsEndpointError<span class="op">.</span><span class="ex">InternalError</span><span class="op">](</span>Status<span class="op">.</span>InternalServerError<span class="op">)</span></span>
<span id="cb38-7"><a href="#cb38-7" aria-hidden="true" tabindex="-1"></a>  <span class="op">)</span></span></code></pre></div>
<p>This leads to a series of nested <code>HttpCodec.Fallback</code>, <code>HttpCodec.Combine</code>, <code>HttpCodec.Status</code> and <code>HttpCodec.Content</code> nodes. When processing them we first add values of possible outputs:</p>
<div class="sourceCode" id="cb39"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb39-1"><a href="#cb39-1" aria-hidden="true" tabindex="-1"></a><span class="kw">final</span> <span class="cf">case</span> <span class="kw">class</span> <span class="fu">PossibleOutput</span><span class="op">(</span>tpe<span class="op">:</span> RustType<span class="op">,</span> status<span class="op">:</span> <span class="ex">Option</span><span class="op">[</span>Status<span class="op">],</span> isError<span class="op">:</span> <span class="ex">Boolean</span><span class="op">,</span> schema<span class="op">:</span> <span class="ex">Schema</span><span class="op">[?])</span></span></code></pre></div>
<p>and once we have fully processed one branch of a <code>Fallback</code>, we finalize these possible outputs and make them real outputs. The way these different error cases are mapped into different case classes of a a single error type (<code>LimitsEndpointError</code>) also complicates things. When we reach a <code>HttpCodec.Content</code> referencing <code>Schema[LimitsEndpointError.LimitExceeded</code>] for example, all we see is a <code>Schema.Record</code> - and not the parent enum! For this reason in the code generator we are explicitly defining the error ADT type:</p>
<div class="sourceCode" id="cb40"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb40-1"><a href="#cb40-1" aria-hidden="true" tabindex="-1"></a><span class="kw">val</span> fromEndpoint <span class="op">=</span> RustEndpoint<span class="op">.</span>withKnownErrorAdt<span class="op">[</span>LimitsEndpointError<span class="op">].</span>zio</span></code></pre></div>
<p>and we detect if all cases are subtypes of this error ADT and generate the client code according to that.</p>
<h3 id="the-rust-client">The Rust client</h3>
<p>It is time to take a look at what the output of all this looks like. In this section we will examine some parts of the generated Rust code.</p>
<p>Let’s take a look at the <strong>Projects API</strong>. We have generated a <code>trait</code> for all the endpoints belonging to it:</p>
<div class="sourceCode" id="cb41"><pre class="sourceCode rust"><code class="sourceCode rust"><span id="cb41-1"><a href="#cb41-1" aria-hidden="true" tabindex="-1"></a><span class="at">#[</span><span class="pp">async_trait::</span>async_trait<span class="at">]</span></span>
<span id="cb41-2"><a href="#cb41-2" aria-hidden="true" tabindex="-1"></a><span class="kw">pub</span> <span class="kw">trait</span> Project <span class="op">{</span></span>
<span id="cb41-3"><a href="#cb41-3" aria-hidden="true" tabindex="-1"></a>    <span class="kw">async</span> <span class="kw">fn</span> get_default_project(<span class="op">&amp;</span><span class="kw">self</span><span class="op">,</span> authorization<span class="op">:</span> <span class="op">&amp;</span><span class="dt">str</span>) <span class="op">-&gt;</span> <span class="dt">Result</span><span class="op">&lt;</span><span class="kw">crate</span><span class="pp">::model::</span>Project<span class="op">,</span> ProjectError<span class="op">&gt;;</span></span>
<span id="cb41-4"><a href="#cb41-4" aria-hidden="true" tabindex="-1"></a>    <span class="kw">async</span> <span class="kw">fn</span> get_projects(<span class="op">&amp;</span><span class="kw">self</span><span class="op">,</span> project_name<span class="op">:</span> <span class="dt">Option</span><span class="op">&lt;&amp;</span><span class="dt">str</span><span class="op">&gt;,</span> authorization<span class="op">:</span> <span class="op">&amp;</span><span class="dt">str</span>) <span class="op">-&gt;</span> <span class="dt">Result</span><span class="op">&lt;</span><span class="dt">Vec</span><span class="op">&lt;</span><span class="kw">crate</span><span class="pp">::model::</span>Project<span class="op">&gt;,</span> ProjectError<span class="op">&gt;;</span></span>
<span id="cb41-5"><a href="#cb41-5" aria-hidden="true" tabindex="-1"></a>    <span class="kw">async</span> <span class="kw">fn</span> post_project(<span class="op">&amp;</span><span class="kw">self</span><span class="op">,</span> field0<span class="op">:</span> <span class="kw">crate</span><span class="pp">::model::</span>ProjectDataRequest<span class="op">,</span> authorization<span class="op">:</span> <span class="op">&amp;</span><span class="dt">str</span>) <span class="op">-&gt;</span> <span class="dt">Result</span><span class="op">&lt;</span><span class="kw">crate</span><span class="pp">::model::</span>Project<span class="op">,</span> ProjectError<span class="op">&gt;;</span></span>
<span id="cb41-6"><a href="#cb41-6" aria-hidden="true" tabindex="-1"></a>    <span class="kw">async</span> <span class="kw">fn</span> get_project(<span class="op">&amp;</span><span class="kw">self</span><span class="op">,</span> project_id<span class="op">:</span> <span class="op">&amp;</span><span class="dt">str</span><span class="op">,</span> authorization<span class="op">:</span> <span class="op">&amp;</span><span class="dt">str</span>) <span class="op">-&gt;</span> <span class="dt">Result</span><span class="op">&lt;</span><span class="kw">crate</span><span class="pp">::model::</span>Project<span class="op">,</span> ProjectError<span class="op">&gt;;</span></span>
<span id="cb41-7"><a href="#cb41-7" aria-hidden="true" tabindex="-1"></a>    <span class="kw">async</span> <span class="kw">fn</span> delete_project(<span class="op">&amp;</span><span class="kw">self</span><span class="op">,</span> project_id<span class="op">:</span> <span class="op">&amp;</span><span class="dt">str</span><span class="op">,</span> authorization<span class="op">:</span> <span class="op">&amp;</span><span class="dt">str</span>) <span class="op">-&gt;</span> <span class="dt">Result</span><span class="op">&lt;</span>()<span class="op">,</span> ProjectError<span class="op">&gt;;</span></span>
<span id="cb41-8"><a href="#cb41-8" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>This is quite close to our original goal! One significant difference is that some type information is lost: <code>project_id</code> was <code>ProjectId</code> in Scala, and <code>authorization</code> was <code>TokenSecret</code> etc. Unfortunately with the current version of ZIO Schema these newtypes (or Scala 3 opaque types) are represented as primitive types transformed by a function. As explained earlier, we can’t inspect the transformation function so all we can do is to use the underlying primitive type’s schema here. This can be solved by introducing the concept of newtypes into ZIO Schema.</p>
<p>The <code>ProjectError</code> is a client specific generated <code>enum</code> which can represent a mix of internal errors (such as not being able to call the endpoint) as well as the endpoint-specific domain errors:</p>
<div class="sourceCode" id="cb42"><pre class="sourceCode rust"><code class="sourceCode rust"><span id="cb42-1"><a href="#cb42-1" aria-hidden="true" tabindex="-1"></a><span class="kw">pub</span> <span class="kw">enum</span> ProjectError <span class="op">{</span></span>
<span id="cb42-2"><a href="#cb42-2" aria-hidden="true" tabindex="-1"></a>    RequestFailure(<span class="pp">reqwest::</span><span class="bu">Error</span>)<span class="op">,</span></span>
<span id="cb42-3"><a href="#cb42-3" aria-hidden="true" tabindex="-1"></a>    InvalidHeaderValue(<span class="pp">reqwest::header::</span>InvalidHeaderValue)<span class="op">,</span></span>
<span id="cb42-4"><a href="#cb42-4" aria-hidden="true" tabindex="-1"></a>    UnexpectedStatus(<span class="pp">reqwest::</span>StatusCode)<span class="op">,</span></span>
<span id="cb42-5"><a href="#cb42-5" aria-hidden="true" tabindex="-1"></a>    Status404 <span class="op">{</span></span>
<span id="cb42-6"><a href="#cb42-6" aria-hidden="true" tabindex="-1"></a>        message<span class="op">:</span> <span class="dt">String</span><span class="op">,</span></span>
<span id="cb42-7"><a href="#cb42-7" aria-hidden="true" tabindex="-1"></a>    <span class="op">},</span></span>
<span id="cb42-8"><a href="#cb42-8" aria-hidden="true" tabindex="-1"></a>    Status403 <span class="op">{</span></span>
<span id="cb42-9"><a href="#cb42-9" aria-hidden="true" tabindex="-1"></a>        error<span class="op">:</span> <span class="dt">String</span><span class="op">,</span></span>
<span id="cb42-10"><a href="#cb42-10" aria-hidden="true" tabindex="-1"></a>    <span class="op">},</span></span>
<span id="cb42-11"><a href="#cb42-11" aria-hidden="true" tabindex="-1"></a>    Status400 <span class="op">{</span></span>
<span id="cb42-12"><a href="#cb42-12" aria-hidden="true" tabindex="-1"></a>        errors<span class="op">:</span> <span class="dt">Vec</span><span class="op">&lt;</span><span class="dt">String</span><span class="op">&gt;,</span></span>
<span id="cb42-13"><a href="#cb42-13" aria-hidden="true" tabindex="-1"></a>    <span class="op">},</span></span>
<span id="cb42-14"><a href="#cb42-14" aria-hidden="true" tabindex="-1"></a>    Status500 <span class="op">{</span></span>
<span id="cb42-15"><a href="#cb42-15" aria-hidden="true" tabindex="-1"></a>        error<span class="op">:</span> <span class="dt">String</span><span class="op">,</span></span>
<span id="cb42-16"><a href="#cb42-16" aria-hidden="true" tabindex="-1"></a>    <span class="op">},</span></span>
<span id="cb42-17"><a href="#cb42-17" aria-hidden="true" tabindex="-1"></a>    Status401 <span class="op">{</span></span>
<span id="cb42-18"><a href="#cb42-18" aria-hidden="true" tabindex="-1"></a>        message<span class="op">:</span> <span class="dt">String</span><span class="op">,</span></span>
<span id="cb42-19"><a href="#cb42-19" aria-hidden="true" tabindex="-1"></a>    <span class="op">},</span></span>
<span id="cb42-20"><a href="#cb42-20" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>So why are these per-status-code error types inlined here instead of generating the error ADT as a Rust <code>enum</code> and using that? The reason is a difference between Scala and Rust: we have a single error ADT in Scala and we can still use its <em>cases</em> directly in the endpoint definition:</p>
<div class="sourceCode" id="cb43"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb43-1"><a href="#cb43-1" aria-hidden="true" tabindex="-1"></a><span class="kw">sealed</span> <span class="kw">trait</span> ProjectEndpointError</span>
<span id="cb43-2"><a href="#cb43-2" aria-hidden="true" tabindex="-1"></a><span class="kw">object</span> ProjectEndpointError <span class="op">{</span></span>
<span id="cb43-3"><a href="#cb43-3" aria-hidden="true" tabindex="-1"></a>  <span class="kw">final</span> <span class="cf">case</span> <span class="kw">class</span> <span class="fu">ArgValidation</span><span class="op">(</span>errors<span class="op">:</span> Chunk<span class="op">[</span><span class="ex">String</span><span class="op">])</span> <span class="kw">extends</span> ProjectEndpointError</span>
<span id="cb43-4"><a href="#cb43-4" aria-hidden="true" tabindex="-1"></a>  <span class="co">// ...</span></span>
<span id="cb43-5"><a href="#cb43-5" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb43-6"><a href="#cb43-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb43-7"><a href="#cb43-7" aria-hidden="true" tabindex="-1"></a><span class="co">// ...</span></span>
<span id="cb43-8"><a href="#cb43-8" aria-hidden="true" tabindex="-1"></a>HttpCodec<span class="op">.</span>error<span class="op">[</span>ProjectEndpointError<span class="op">.</span>ArgValidation<span class="op">](</span>Status<span class="op">.</span>BadRequest<span class="op">),</span></span></code></pre></div>
<p>We <em>do</em> generate the corresponding <code>ProjectEndpointError</code> enum in Rust:</p>
<div class="sourceCode" id="cb44"><pre class="sourceCode rust"><code class="sourceCode rust"><span id="cb44-1"><a href="#cb44-1" aria-hidden="true" tabindex="-1"></a><span class="at">#[</span>derive<span class="at">(</span><span class="bu">Debug</span><span class="op">,</span> <span class="bu">Clone</span><span class="op">,</span> <span class="bu">PartialEq</span><span class="op">,</span> <span class="bu">Eq</span><span class="op">,</span> <span class="bu">Hash</span><span class="op">,</span> <span class="bu">Ord</span><span class="op">,</span> <span class="bu">PartialOrd</span><span class="op">,</span> <span class="pp">serde::</span>Serialize<span class="op">,</span> <span class="pp">serde::</span>Deserialize<span class="at">)]</span></span>
<span id="cb44-2"><a href="#cb44-2" aria-hidden="true" tabindex="-1"></a><span class="kw">pub</span> <span class="kw">enum</span> ProjectEndpointError <span class="op">{</span></span>
<span id="cb44-3"><a href="#cb44-3" aria-hidden="true" tabindex="-1"></a>    ArgValidation <span class="op">{</span></span>
<span id="cb44-4"><a href="#cb44-4" aria-hidden="true" tabindex="-1"></a>        errors<span class="op">:</span> <span class="dt">Vec</span><span class="op">&lt;</span><span class="dt">String</span><span class="op">&gt;,</span></span>
<span id="cb44-5"><a href="#cb44-5" aria-hidden="true" tabindex="-1"></a>    <span class="op">},</span></span>
<span id="cb44-6"><a href="#cb44-6" aria-hidden="true" tabindex="-1"></a>    <span class="co">// ...</span></span>
<span id="cb44-7"><a href="#cb44-7" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>but we cannot use <code>ProjectEndpointError::ArgValidation</code> as a type in the above <code>ProjectError</code> enum. And we cannot safely do something like <code>Either[ClientError, ProjectEndpointError]</code> because in the endpoint DSL we just have a sequence of status code - error case pairs. There is no guarantee that one enum case is only used once in that mapping, or that every case is used at least once. For this reason the mapping from <code>ProjectError</code> to <code>ProjectEndpointError</code> is generated as a transformation function:</p>
<div class="sourceCode" id="cb45"><pre class="sourceCode rust"><code class="sourceCode rust"><span id="cb45-1"><a href="#cb45-1" aria-hidden="true" tabindex="-1"></a><span class="kw">impl</span> ProjectError <span class="op">{</span></span>
<span id="cb45-2"><a href="#cb45-2" aria-hidden="true" tabindex="-1"></a>  <span class="kw">pub</span> <span class="kw">fn</span> to_project_endpoint_error(<span class="op">&amp;</span><span class="kw">self</span>) <span class="op">-&gt;</span> <span class="dt">Option</span><span class="op">&lt;</span><span class="kw">crate</span><span class="pp">::model::</span>ProjectEndpointError<span class="op">&gt;</span> <span class="op">{</span></span>
<span id="cb45-3"><a href="#cb45-3" aria-hidden="true" tabindex="-1"></a>    <span class="cf">match</span> <span class="kw">self</span> <span class="op">{</span></span>
<span id="cb45-4"><a href="#cb45-4" aria-hidden="true" tabindex="-1"></a>      <span class="pp">ProjectError::</span>Status400 <span class="op">{</span> errors <span class="op">}</span> <span class="op">=&gt;</span> <span class="cn">Some</span>(<span class="kw">crate</span><span class="pp">::model::ProjectEndpointError::</span>ArgValidation <span class="op">{</span> errors<span class="op">:</span> errors<span class="op">.</span>clone() <span class="op">}</span>)<span class="op">,</span> </span>
<span id="cb45-5"><a href="#cb45-5" aria-hidden="true" tabindex="-1"></a>      <span class="co">// ...</span></span>
<span id="cb45-6"><a href="#cb45-6" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb45-7"><a href="#cb45-7" aria-hidden="true" tabindex="-1"></a>  <span class="op">}</span></span>
<span id="cb45-8"><a href="#cb45-8" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>For each client trait we also generate a <strong>live implementation</strong>, represented by a struct containing configuration for the client:</p>
<div class="sourceCode" id="cb46"><pre class="sourceCode rust"><code class="sourceCode rust"><span id="cb46-1"><a href="#cb46-1" aria-hidden="true" tabindex="-1"></a><span class="at">#[</span>derive<span class="at">(</span><span class="bu">Clone</span><span class="op">,</span> <span class="bu">Debug</span><span class="at">)]</span></span>
<span id="cb46-2"><a href="#cb46-2" aria-hidden="true" tabindex="-1"></a><span class="kw">pub</span> <span class="kw">struct</span> ProjectLive <span class="op">{</span></span>
<span id="cb46-3"><a href="#cb46-3" aria-hidden="true" tabindex="-1"></a>    <span class="kw">pub</span> base_url<span class="op">:</span> <span class="pp">reqwest::</span>Url<span class="op">,</span></span>
<span id="cb46-4"><a href="#cb46-4" aria-hidden="true" tabindex="-1"></a>    <span class="kw">pub</span> allow_insecure<span class="op">:</span> <span class="dt">bool</span><span class="op">,</span></span>
<span id="cb46-5"><a href="#cb46-5" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>And the implementation of the client trait for these live structs are just using <a href="https://docs.rs/reqwest/latest/reqwest/"><code>reqwest</code></a> (a HTTP client library for Rust) to construct the request from the input parameters exactly the way the endpoint definition described:</p>
<div class="sourceCode" id="cb47"><pre class="sourceCode rust"><code class="sourceCode rust"><span id="cb47-1"><a href="#cb47-1" aria-hidden="true" tabindex="-1"></a><span class="kw">async</span> <span class="kw">fn</span> get_project(<span class="op">&amp;</span><span class="kw">self</span><span class="op">,</span> project_id<span class="op">:</span> <span class="op">&amp;</span><span class="dt">str</span><span class="op">,</span> authorization<span class="op">:</span> <span class="op">&amp;</span><span class="dt">str</span>) <span class="op">-&gt;</span> <span class="dt">Result</span><span class="op">&lt;</span>Project<span class="op">,</span> ProjectError<span class="op">&gt;</span> <span class="op">{</span></span>
<span id="cb47-2"><a href="#cb47-2" aria-hidden="true" tabindex="-1"></a>  <span class="kw">let</span> <span class="kw">mut</span> url <span class="op">=</span> <span class="kw">self</span><span class="op">.</span>base_url<span class="op">.</span>clone()<span class="op">;</span></span>
<span id="cb47-3"><a href="#cb47-3" aria-hidden="true" tabindex="-1"></a>  url<span class="op">.</span>set_path(<span class="op">&amp;</span><span class="pp">format!</span>(<span class="st">&quot;v1/projects/{project_id}&quot;</span>))<span class="op">;</span></span>
<span id="cb47-4"><a href="#cb47-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb47-5"><a href="#cb47-5" aria-hidden="true" tabindex="-1"></a>  <span class="kw">let</span> <span class="kw">mut</span> headers <span class="op">=</span> <span class="pp">reqwest::header::HeaderMap::</span>new()<span class="op">;</span></span>
<span id="cb47-6"><a href="#cb47-6" aria-hidden="true" tabindex="-1"></a>  <span class="co">// ...</span></span>
<span id="cb47-7"><a href="#cb47-7" aria-hidden="true" tabindex="-1"></a>      </span>
<span id="cb47-8"><a href="#cb47-8" aria-hidden="true" tabindex="-1"></a>  <span class="kw">let</span> <span class="kw">mut</span> builder <span class="op">=</span> <span class="pp">reqwest::Client::</span>builder()<span class="op">;</span></span>
<span id="cb47-9"><a href="#cb47-9" aria-hidden="true" tabindex="-1"></a>  <span class="co">// ...</span></span>
<span id="cb47-10"><a href="#cb47-10" aria-hidden="true" tabindex="-1"></a>  <span class="kw">let</span> client <span class="op">=</span> builder<span class="op">.</span>build()<span class="op">?;</span></span>
<span id="cb47-11"><a href="#cb47-11" aria-hidden="true" tabindex="-1"></a>  <span class="kw">let</span> result <span class="op">=</span> client</span>
<span id="cb47-12"><a href="#cb47-12" aria-hidden="true" tabindex="-1"></a>    <span class="op">.</span>get(url)</span>
<span id="cb47-13"><a href="#cb47-13" aria-hidden="true" tabindex="-1"></a>    <span class="op">.</span>headers(headers)</span>
<span id="cb47-14"><a href="#cb47-14" aria-hidden="true" tabindex="-1"></a>    <span class="op">.</span>send()</span>
<span id="cb47-15"><a href="#cb47-15" aria-hidden="true" tabindex="-1"></a>    <span class="op">.</span><span class="kw">await</span><span class="op">?;</span></span>
<span id="cb47-16"><a href="#cb47-16" aria-hidden="true" tabindex="-1"></a>  <span class="cf">match</span> result<span class="op">.</span>status()<span class="op">.</span>as_u16() <span class="op">{</span></span>
<span id="cb47-17"><a href="#cb47-17" aria-hidden="true" tabindex="-1"></a>    <span class="dv">200</span> <span class="op">=&gt;</span> <span class="op">{</span></span>
<span id="cb47-18"><a href="#cb47-18" aria-hidden="true" tabindex="-1"></a>      <span class="kw">let</span> body <span class="op">=</span> result<span class="op">.</span><span class="pp">json::</span><span class="op">&lt;</span><span class="kw">crate</span><span class="pp">::model::</span>Project<span class="op">&gt;</span>()<span class="op">.</span><span class="kw">await</span><span class="op">?;</span></span>
<span id="cb47-19"><a href="#cb47-19" aria-hidden="true" tabindex="-1"></a>      <span class="cn">Ok</span>(body)</span>
<span id="cb47-20"><a href="#cb47-20" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb47-21"><a href="#cb47-21" aria-hidden="true" tabindex="-1"></a>    <span class="dv">404</span> <span class="op">=&gt;</span> <span class="op">{</span></span>
<span id="cb47-22"><a href="#cb47-22" aria-hidden="true" tabindex="-1"></a>      <span class="kw">let</span> body <span class="op">=</span> result<span class="op">.</span><span class="pp">json::</span><span class="op">&lt;</span>ProjectEndpointErrorNotFoundPayload<span class="op">&gt;</span>()<span class="op">.</span><span class="kw">await</span><span class="op">?;</span></span>
<span id="cb47-23"><a href="#cb47-23" aria-hidden="true" tabindex="-1"></a>      <span class="cn">Err</span>(<span class="pp">ProjectError::</span>Status404 <span class="op">{</span> message<span class="op">:</span> body<span class="op">.</span>message <span class="op">}</span>)</span>
<span id="cb47-24"><a href="#cb47-24" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb47-25"><a href="#cb47-25" aria-hidden="true" tabindex="-1"></a>    <span class="co">// ...</span></span>
<span id="cb47-26"><a href="#cb47-26" aria-hidden="true" tabindex="-1"></a>  <span class="op">}</span></span>
<span id="cb47-27"><a href="#cb47-27" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<h2 id="putting-it-all-together">Putting it all together</h2>
<p>At this point we have seen how <em>ZIO Http</em> describes endpoints, how <em>ZIO Schema</em> encodes Scala types, how we can use <em>ZIO Parser</em> to have composable printers and how <em>ZIO Prelude</em> can help with working with state in a purely functional code. The only thing remaining is to wire everything together and define an easy to use function that, when executed, creates all the required <em>Rust files</em> ready to be compiled.</p>
<p>We can create a class for this:</p>
<div class="sourceCode" id="cb48"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb48-1"><a href="#cb48-1" aria-hidden="true" tabindex="-1"></a><span class="kw">final</span> <span class="cf">case</span> <span class="kw">class</span> <span class="fu">ClientCrateGenerator</span><span class="op">(</span>name<span class="op">:</span> <span class="ex">String</span><span class="op">,</span> version<span class="op">:</span> <span class="ex">String</span><span class="op">,</span> description<span class="op">:</span> <span class="ex">String</span><span class="op">,</span> homepage<span class="op">:</span> <span class="ex">String</span><span class="op">,</span> endpoints<span class="op">:</span> Chunk<span class="op">[</span>RustEndpoints<span class="op">]):</span></span></code></pre></div>
<p>Here <code>endpoints</code> is a collection of a <strong>group of endpoints</strong>, as it was shown earlier. So first you can use <code>RustEndpoint.fromEither</code> and <code>++</code> to create a <code>RustEndpoints</code> value for each API you have, and then generate a client for all of those in one run with this class.</p>
<p>The first thing to do is collect <em>all</em> the referenced <code>Schema</code> from all the endpoints:</p>
<div class="sourceCode" id="cb49"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb49-1"><a href="#cb49-1" aria-hidden="true" tabindex="-1"></a><span class="kw">private</span> <span class="kw">val</span> allSchemas <span class="op">=</span> endpoints<span class="op">.</span><span class="fu">map</span><span class="op">(</span>_<span class="op">.</span>endpoints<span class="op">.</span>toSet<span class="op">.</span><span class="fu">flatMap</span><span class="op">(</span>_<span class="op">.</span>referredSchemas<span class="op">)).</span><span class="fu">reduce</span><span class="op">(</span>_ union _<span class="op">)</span></span></code></pre></div>
<p>Then we define a ZIO function (it is an effectful function, manipulating the filesystem!) to generate the files:</p>
<div class="sourceCode" id="cb50"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb50-1"><a href="#cb50-1" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> <span class="fu">generate</span><span class="op">(</span>targetDirectory<span class="op">:</span> Path<span class="op">):</span> ZIO<span class="op">[</span><span class="ex">Any</span><span class="op">,</span> <span class="ex">Throwable</span><span class="op">,</span> <span class="bu">Unit</span><span class="op">]</span> <span class="op">=</span></span>
<span id="cb50-2"><a href="#cb50-2" aria-hidden="true" tabindex="-1"></a>  <span class="cf">for</span></span>
<span id="cb50-3"><a href="#cb50-3" aria-hidden="true" tabindex="-1"></a>    clientModel <span class="op">&lt;-</span> ZIO<span class="op">.</span><span class="fu">fromEither</span><span class="op">(</span>RustModel<span class="op">.</span><span class="fu">fromSchemas</span><span class="op">(</span>allSchemas<span class="op">.</span>toSeq<span class="op">))</span></span>
<span id="cb50-4"><a href="#cb50-4" aria-hidden="true" tabindex="-1"></a>                      <span class="op">.</span><span class="fu">mapError</span><span class="op">(</span>err <span class="op">=&gt;</span> <span class="kw">new</span> <span class="ex">RuntimeException</span><span class="op">(</span><span class="ss">s&quot;</span><span class="st">Failed to generate client model: </span><span class="ss">$err&quot;</span><span class="op">))</span></span>
<span id="cb50-5"><a href="#cb50-5" aria-hidden="true" tabindex="-1"></a>    cargoFile <span class="op">=</span> targetDirectory <span class="op">/</span> <span class="st">&quot;Cargo.toml&quot;</span></span>
<span id="cb50-6"><a href="#cb50-6" aria-hidden="true" tabindex="-1"></a>    srcDir <span class="op">=</span> targetDirectory <span class="op">/</span> <span class="st">&quot;src&quot;</span></span>
<span id="cb50-7"><a href="#cb50-7" aria-hidden="true" tabindex="-1"></a>    libFile <span class="op">=</span> srcDir <span class="op">/</span> <span class="st">&quot;lib.rs&quot;</span></span>
<span id="cb50-8"><a href="#cb50-8" aria-hidden="true" tabindex="-1"></a>    modelFile <span class="op">=</span> srcDir <span class="op">/</span> <span class="st">&quot;model.rs&quot;</span></span>
<span id="cb50-9"><a href="#cb50-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb50-10"><a href="#cb50-10" aria-hidden="true" tabindex="-1"></a>    requiredCrates <span class="op">=</span> clientModel<span class="op">.</span>requiredCrates union endpoints<span class="op">.</span><span class="fu">map</span><span class="op">(</span>_<span class="op">.</span>requiredCrates<span class="op">).</span><span class="fu">reduce</span><span class="op">(</span>_ union _<span class="op">)</span></span>
<span id="cb50-11"><a href="#cb50-11" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb50-12"><a href="#cb50-12" aria-hidden="true" tabindex="-1"></a>    _ <span class="op">&lt;-</span> Files<span class="op">.</span><span class="fu">createDirectories</span><span class="op">(</span>targetDirectory<span class="op">)</span></span>
<span id="cb50-13"><a href="#cb50-13" aria-hidden="true" tabindex="-1"></a>    _ <span class="op">&lt;-</span> Files<span class="op">.</span><span class="fu">createDirectories</span><span class="op">(</span>srcDir<span class="op">)</span></span>
<span id="cb50-14"><a href="#cb50-14" aria-hidden="true" tabindex="-1"></a>    _ <span class="op">&lt;-</span> <span class="fu">writeCargo</span><span class="op">(</span>cargoFile<span class="op">,</span> requiredCrates<span class="op">)</span></span>
<span id="cb50-15"><a href="#cb50-15" aria-hidden="true" tabindex="-1"></a>    _ <span class="op">&lt;-</span> <span class="fu">writeLib</span><span class="op">(</span>libFile<span class="op">)</span></span>
<span id="cb50-16"><a href="#cb50-16" aria-hidden="true" tabindex="-1"></a>    _ <span class="op">&lt;-</span> <span class="fu">writeModel</span><span class="op">(</span>modelFile<span class="op">,</span> clientModel<span class="op">.</span>definitions<span class="op">)</span></span>
<span id="cb50-17"><a href="#cb50-17" aria-hidden="true" tabindex="-1"></a>    _ <span class="op">&lt;-</span> ZIO<span class="op">.</span><span class="fu">foreachDiscard</span><span class="op">(</span>endpoints<span class="op">):</span> endpoints <span class="op">=&gt;</span></span>
<span id="cb50-18"><a href="#cb50-18" aria-hidden="true" tabindex="-1"></a>           <span class="kw">val</span> clientFile <span class="op">=</span> srcDir <span class="op">/</span> <span class="ss">s&quot;${</span>endpoints<span class="op">.</span>name<span class="op">.</span>toSnakeCase<span class="ss">}</span><span class="st">.rs</span><span class="ss">&quot;</span></span>
<span id="cb50-19"><a href="#cb50-19" aria-hidden="true" tabindex="-1"></a>           <span class="fu">writeClient</span><span class="op">(</span>clientFile<span class="op">,</span> endpoints<span class="op">)</span></span>
<span id="cb50-20"><a href="#cb50-20" aria-hidden="true" tabindex="-1"></a>  <span class="cf">yield</span> <span class="op">()</span></span></code></pre></div>
<p>The steps are straightforward:</p>
<ul>
<li>Create a <code>RustModel</code> using all the collected <code>Schema[?]</code> values</li>
<li>Create all the required directories</li>
<li>Write a <em>cargo file</em> - having all the dependencies and other metadata required to compile the Rust project</li>
<li>Write a <em>lib file</em> - this is just a series of <code>pub mod xyz;</code> lines, defining the generated modules which are put in different fiels</li>
<li>Write all the generated Rust types into a <code>model.rs</code></li>
<li>For each endpoint group create a <code>xyz.rs</code> module containing the client trait and implementation</li>
</ul>
<p>For working with the file system - creating directories, writing data into files, we can use the [<a href="https://zio.dev/zio-nio/">ZIO NIO</a>] library providing ZIO wrapprers for all these functionalities.</p>
<h3 id="links">Links</h3>
<p>Finally, some links:</p>
<ul>
<li>The <strong>code generator</strong> is open source and available at <a href="https://github.com/vigoo/zio-http-rust" class="uri">https://github.com/vigoo/zio-http-rust</a> - the code and the repository itself is not documented at the moment, except by this blog post.</li>
<li>The generated <strong>Golem client for Rust</strong> is published as a crate to <a href="https://crates.io/crates/golem-client" class="uri">https://crates.io/crates/golem-client</a></li>
<li>The new <strong>Golem CLI</strong>, using the generated client, is also open sourced and can be found at <a href="https://github.com/golemcloud/golem-cli" class="uri">https://github.com/golemcloud/golem-cli</a></li>
<li>Finally you can learn more about <strong>Golem</strong> itself at <a href="https://www.golem.cloud" class="uri">https://www.golem.cloud</a></li>
</ul>
]]></summary>
</entry>
<entry>
    <title>[Video] Introducing ZIO Flow @ ZIO World 2023</title>
    <link href="http://vigoo.github.io/posts/2023-09-06-introducing-zio-flow.html" />
    <id>http://vigoo.github.io/posts/2023-09-06-introducing-zio-flow.html</id>
    <published>2023-09-06T00:00:00Z</published>
    <updated>2023-09-06T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on September  6, 2023
    
</div>

<p>My short talk at <a href="https://www.zioworld.com/">ZIO World 2023</a> about the <a href="https://zio.dev/zio-flow/">zio-flow library</a>.</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/ujJuFd6Vvfc?si=bsh3b7f-LXFVP_v_" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen>
</iframe>
]]></summary>
</entry>
<entry>
    <title>[Video] Binary Serialization Of Evolving Data Types @ Functional Scala 2022</title>
    <link href="http://vigoo.github.io/posts/2022-12-01-funscala2022-talk.html" />
    <id>http://vigoo.github.io/posts/2022-12-01-funscala2022-talk.html</id>
    <published>2022-12-01T00:00:00Z</published>
    <updated>2022-12-01T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on December  1, 2022
    
</div>

<p>My talk at <a href="https://www.functionalscala.com/">Functional Scala 2022</a> about the binary serialization library <a href="https://vigoo.github.io/desert/">desert</a>.</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/Y2KopYpjZ3Y" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen>
</iframe>
]]></summary>
</entry>
<entry>
    <title>ZIO Kafka with transactions - a debugging story</title>
    <link href="http://vigoo.github.io/posts/2022-06-15-zio-kafka-debugging-story.html" />
    <id>http://vigoo.github.io/posts/2022-06-15-zio-kafka-debugging-story.html</id>
    <published>2022-06-15T00:00:00Z</published>
    <updated>2022-06-15T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on June 15, 2022
    
</div>

<h3 id="zio-kafka-with-transactions---a-debugging-story">ZIO Kafka with transactions - a debugging story</h3>
<h4 id="introduction">Introduction</h4>
<p>With one of our clients, we were working on a chain of services responsible for processing some logs coming from a Kafka topic, partition them by some properties like user and date, infer and aggregate the log schema and eventually store the partitioned data in a different format. The details of this use case are not important for understanding this post, in which I’m going to explain the recent changes to <a href="https://ziverge.com/blog/introduction-to-zio-kafka">ZIO Kafka</a>, how was it implemented and how did we know it’s not perfect, and the long story of investigation that finally resulted in a fix making this new feature usable in production.</p>
<p>We only have to know about the first component of this data pipeline, which is a zio-kafka service:</p>
<ul>
<li>Consumes it’s source topic. Each record in this topic consists one or more log entries for a given user. The kafka topic’s partitions are not aligned with our target partition (of user/date), all kafka partitions may contain data from all users.</li>
<li>The service partitions the source data per user/date/hour and writes the log entries into Avro files in the local file system</li>
<li>It also computes and aggregates a log schema in memory for each of these files</li>
<li>It is using Kafka transactions to achieve <a href="https://www.baeldung.com/kafka-exactly-once">exactly-once delivery</a>. This means that the processed records are not committed when they are written to the Avro files - there is a periodic event triggered every 30 seconds and at each rebalance that uploads the Avro files to S3, and <em>then</em> it emits Kafka messages to downstream containing references to the uploaded files and their aggregated schema, and it commits all the offsets of all the input Kafka topic’s <em>transactionally</em>.</li>
</ul>
<p><img src="/images/blog-zio-kafka-debugging-1.png" /></p>
<h4 id="stream-restarting-mode-in-zio-kafka">Stream restarting mode in zio-kafka</h4>
<p>When we first implemented this using zio-kafka and started to test it we have seen a lot of errors like</p>
<p><code>Transiting to abortable error state due to org.apache.kafka.clients.consumer.CommitFailedException: Transaction offset Commit failed due to consumer group metadata mismatch: Specified group generation id is not valid."}</code></p>
<p><em>Group generation ID</em> is a counter that gets incremented at each rebalance. The problem was that zio-kafka by default provides a continuous stream for partitions that survives rebalances. So we have a single stream per Kafka partition and after a rebalance we end up with some of them revoked and their streams stopped, some new streams created, but the ones that remained assigned are not going to be recreated.</p>
<p><img src="/images/blog-zio-kafka-debugging-2.png" /></p>
<p>This works fine without using transactions, but it means your stream can contain messages from multiple generations. I first tried to solve this by detecting generation switches downstream but quickly realized this cannot work. It’s too late to commit the previous generation when there are already records from the new generation; we have to do it before the rebalance finishes.</p>
<p>To solve this I introduced a new <em>mode</em> in zio-kafka back in February 2022, with <a href="https://github.com/zio/zio-kafka/pull/427">this pull request</a>.</p>
<p>This adds a new mode to zio-kafka’s core run loop which guarantees that every rebalance stops all the partition streams and create new ones every time.</p>
<p><img src="/images/blog-zio-kafka-debugging-3.png" /></p>
<p>With this approach the library user can build the following logic on top of the “stream of partition streams” API of zio-kafka:</p>
<ul>
<li>Get the next set of partition streams</li>
<li>Merge and drain them all</li>
<li>Perform a <em>flush</em> - upload and commit everything before start working on the new set of streams</li>
<li>Repeat</li>
</ul>
<p>This alone is still not enough - we have to block the rebalancing until we are done with the committing otherwise we would still get the invalid generation ID error.</p>
<p>The <code>onRevoke</code> and <code>onAssigned</code> callbacks from the underlying Java Kafka library are working in a way that they block the rebalance process so that’s the place where we can finish every processing for the revoked partitions. This extension point is provided by zio-kafka too but it’s completely detached from the streaming API so I have introduced a rebalance event queue with with some promises and timeouts to coordinate this:</p>
<ul>
<li>In <code>onRevoke</code> we publish a rebalance event and wait until it gets processed.</li>
<li>Because the new run loop mode is guaranteed to terminate all streams on rebalance (which <em>is</em> already happening, as we are in <code>onRevoke</code>) we can be sure that eventually the main consumer stream’s current stage - that drains the previous generation’s partition streams will finish soon</li>
<li>and then it performs the rotation and fulfills the promise in the rebalance event.</li>
</ul>
<p>With these changes our service started to work - but we had to know if it works correctly.</p>
<h4 id="qos-tests">QoS tests</h4>
<p>We implemented a QoS test running on Spark which periodically checks that we are not loosing any data with our new pipeline.</p>
<p>Our log entries have associated unique identifiers coming from upstream - so what we can do in this test is to consume an hour amount of log records from the same Kafka topic our service is consuming from, and read all the Avro files produced in that period (with some padding of course to have some tolerance for lag) and then see if there are any missing records in our output.</p>
<p>Another source of truth for the investigation was an older system doing something similar, resulting in the same input being available as archived CSV files in some cases. Comparing the archived CSV files with the archived Avro files I could verify that the QoS test itself works correctly, by checking that both methods report the same set of missing records.</p>
<p>What we learned from these tests was that:</p>
<ul>
<li>there is data loss</li>
<li>the data loss is related to rebalances</li>
</ul>
<p>To understand it’s related to rebalances I was comparing failing QoS reports from several hours, figured out the ingestion time for some of the missing log records within these hours, and checked our service and infrastructure logs around that time. Every time there was a rebalance near the reported errors.</p>
<h4 id="additional-tests">Additional tests</h4>
<p>During the investigation I added some additional debug features and logs to the system.</p>
<p>One of them is an extra verification step, enabled only temporarily in our development cluster, that</p>
<ul>
<li>aggregates all the log identifiers at the earliest point - as soon as they got in the zio-kafka partition stream</li>
<li>after uploading the Avro files and committing the records, it re-downloads all the files from S3 and checks if they got all the log identifiers that they should.</li>
</ul>
<p>This never reported any error so based on that I considered the flow <em>after</em> zio-kafka correct.</p>
<p>We also have a lot of debug logs coming from the Java Kafka library, from zio-kafka and from our service to help understanding the issue:</p>
<ul>
<li>After each rebalance, the Java library logs the offset it’s starting to read from</li>
<li>When committing I’m logging the minimum and maximum offset contained by the committed and uploaded Avro files per kafka partition</li>
<li>All streams creation and termination are logged</li>
<li>If records within a partition stream are skipping an offset (this was never logged actually)</li>
</ul>
<p>I wrote a test app that reads our service’s logs from a given period, logged from all the Kubernetes pods it’s running on, and runs a state machine that verifies that all the logged offsets from the different pods are in sync. It fails in two cases:</p>
<ul>
<li>When a pod <em>resets its offsets</em> to something that was previously seen in the logs and there is a gap</li>
<li>When a pod <em>rotates</em> a kafka without it got assigned to that pod first (so if multiple pods would somehow consume the same partition which Kafka prevents)</li>
</ul>
<p>I tried for long to write integration tests using embedded Kafka (similar to how it’s done in zio-kafka’s test suite) that reproduces the data loss issue, without any luck. In all my simulated cases everything works perfectly.</p>
<h4 id="theories-and-fixes">Theories and fixes</h4>
<p>From logs from the time ranges where the data loss is reported from, these additional checks were not showing any discrepancies.</p>
<p>This could only mean two things:</p>
<ul>
<li>All the kafka/zio-kafka level is correct but we are still loosing data in our service-specific logic, somewhere in writing to Avro-s and uploading to S3.</li>
<li>On Kafka level everything is fine but somehow zio-kafka does not pass all the records to our service’s logic</li>
</ul>
<p>I trusted the validation mode I described earlier (the one that re-downloads the data) so I ruled out the first option.</p>
<h4 id="zio-kafka-internals">zio-kafka internals</h4>
<p>Before discussing the fixes I tried to make in zio-kafka, first let’s talk about how the library works.</p>
<p>The zio-kafka library wraps the Java library for Kafka and provides a ZIO Stream interface for consuming the records. As I mentioned earlier, it creates a separate stream for each kafka partition assigned to the consumer. The primary operation on the Java interface is called <code>poll</code>. This method is responsible for fetching data for all the subscribed partitions for a given timeout. Another important property is that in case of rebalancing, the <code>poll</code> is blocked until the rebalancing completes, and it calls the already mentioned revoked/assigned callbacks in this blocked state.</p>
<p>Another thing it has to support is back pressure. We don’t want this <code>poll</code> to fetch more and more data for partitions where we did process the previous records yet. In other words, upstream demand in our ZIO Streams must control what partitions we <code>poll</code>. In the Java level this is controlled by pausing and resuming individual partitions.</p>
<p>So let’s see a summary of how the consumer streams work:</p>
<ul>
<li>Each partition stream is a repeated ZIO effect that enqueues a <code>Request</code> in a <em>queue</em> and then waits for the promise contained in this request to be fulfilled. The promise will contain a chunk of records fetched from Kafka if everything went well.</li>
<li>There is a single (per consumer) <em>run loop</em> which periodically calls <code>poll</code>. Before calling it, it pauses/resumes partitions based on which partitions has at least one <code>Request</code> since the last <code>poll</code>.</li>
<li>This, as ZIO streams are pull based, implements the back pressure semantics mentioned earlier.</li>
</ul>
<p>There is a similar mechanism for gathering commit requests and then performing them as part of the <em>run loop</em> but in our use case that is not used - the transactional producer is independent of this mechanism.</p>
<p>There is one more concept which is very important for to understand the problem: <em>buffered records</em>. Imagine that we are consuming five partitions, <code>1 .. 5</code> and only have a request (downstream pull) for partition <code>1</code>. This means we are pausing <code>2 .. 5</code> and do a <code>poll</code> but what if the resulting record set contains records from other partitions? There could be multiple reason for this (and some of them may not be possible in practice), for example there could be some data already buffered within the Java library for the paused partitions, or maybe a rebalance assigns some new partitions which are not paused yet (as we don’t know we are going to get them) resulting in immediately fetching some data for them.</p>
<p>The library handles these cases in a simple way: it <em>buffers</em> these records which were not requested in a per-partition map, and when a partition is pulled next time, it will not only give the records returned by <code>poll</code> to the request’s promise, but also all the buffered ones, prepended to the new set of records.</p>
<p>Another important detail for this investigation is that we don’t care about graceful shutdown, or if records got lost during shutdown. This is also very interesting in general, but our service is not trying to finish writing and uploading all data during shutdown, it simply ignores the partial data and quits without committing them so they get reprocessed as soon as possible in another consumer.</p>
<p>What happens during rebalancing? Let’s forget the default mode of zio-kafka for this discussion and focus on the new mode which <em>restarts</em> all the partition streams every time.</p>
<p>We don’t know in advance that a rebalance will happen, it happens during the call to <code>poll</code>. The method in the <em>run loop</em> that contains this logic is called <code>handlePoll</code> and does roughly the following (in our case):</p>
<ul>
<li>store the current state (containing the current streams, requests, buffered records etc) in a ref</li>
<li>pause/resume partitions based on the current requests, as described earlier</li>
<li>call <code>poll</code>
<ul>
<li>during <code>poll</code> in the revoked callback we end all partition streams. This means they get an interrupt signal and they stop. As I mentioned earlier, in this mode the consumer merges the partition streams and drain them; this is the other side of it, interrupting all the streams so we know that eventually this merged stream will also stop.</li>
<li>dropping all the buffered records, but first adding them to a <em>drain queue</em> (this is a fix that was not part of the original implementation). It is now guaranteed that the partition streams will get the remaining buffered elements before they stop.</li>
<li>storing the fact of the rebalancing, so the rest of <code>handlePoll</code> knows about it when <code>poll</code> returns.</li>
</ul></li>
<li>once <code>poll</code> returned, buffer all records for all unrequested partitions. this is another place where a fix was made, currently we treat <em>all</em> records unrequested in case of a rebalancing, because all the streams were restarted, so the original requests were made by the previous set of streams; fulfilling them would loose data because the new streams are not waiting for the same promises.</li>
<li>the next step would be to fulfill all the requests that we can by using the combination of buffered records and the <code>poll</code> result. But we had a rebalance and dropped all the requests! So this step must not do anything.</li>
<li>finally we start new streams for each assigned partition</li>
</ul>
<p>So based on all this, and the theory that the commits/offsets are all correct but somehow data is lost between the Java library and the service logic, the primary suspect was the <em>buffered records</em>.</p>
<p>Let’s see what fixes and changes I made, in time order:</p>
<h4 id="fix-attempt-1">Fix attempt 1</h4>
<p>The first time I suspected buffered records are behind the issue I realized that when we end <em>all</em> partition streams during rebalancing, we loose the buffered records. This is not a problem if those partitions are really revoked - it means there was no demand for those partitions, so it’s just that some records were read ahead and now they get dropped and will be reprocessed on another consumer.</p>
<p>But if the same partition is “reassigned” to the same consumer, this could be a data loss! The reason is that there is an internal state in Kafka which is a per-consumer, per-partition <em>position</em>. In this case this position would point to <em>after</em> the buffered records, so the next <code>poll</code> will get the next records and the previously buffered ones will not be prepended as usual because the revocation clears the buffer.</p>
<p>Note that this whole problem would not exist if the reassigned partitions get <em>reseted</em> to the last committed offset after rebalancing. I don’t think this is the case, only when a new partition is assigned to a consumer with no previous position.</p>
<p>My first fix was passing the buffered records to the user-defined revoke handler so it could write the remaining records to the Avro files before uploading them. This was just a quick test, as it does not really fit into the API of zio-kafka.</p>
<h4 id="fix-attempt-2">Fix attempt 2</h4>
<p>After playing with the first fix for a while I thought it solved the issue but it was just not reproducing - it is not completely clear why, probably I missed some test results.</p>
<p>But I wrote a second version of the same fix, this time by adding the remaining buffered elements to the end of the partition streams before they stop, instead of explicitly passing them to the revoke handler.</p>
<p>This should work exactly the same but handles the problem transparently.</p>
<h4 id="fix-attempt-3">Fix attempt 3</h4>
<p>After some more testing it was clear that the QoS tests were still showing data loss. The investigation continued and the next problem I have found was that in <code>handlePoll</code> after a rebalance we were not storing the buffered records anymore in this “restarting streams” mode. I did not catch this in the first fix attempts I was focusing on dealing with the buffered records at the <em>end</em> of the revoked streams.</p>
<p>What does it mean it was not storing the buffered records? In <code>handlePoll</code> there is a series of state manipulation functions and the buffered records map is part of this state. The logic here is quite complicated and it very much depends on whether we are running the consumer in <em>normal</em> or <em>stream restarting</em> mode. The problem was that for some reason after a rebalance (in the new mode only) this buffered records field was cleared instead of preserving records from before the rebalance.</p>
<h4 id="fix-attempt-4">Fix attempt 4</h4>
<p>Very soon turned out that my previous fix was not doing anything, because there was one more problem in the state handling in <code>handlePoll</code>. As I wrote, it bufferes only those records which were not <em>requested</em>. For those partitions which have a request, it fulfills these requests with the new records instead. When the reassigned partitions are not restarted during rebalancing (as in the <em>normal mode</em>) this is OK but for us, as we are creating new streams, the old requests must be dropped and not taken into account when deciding which records to buffer.</p>
<p>In other words, in <em>restarting streams mode</em> we have to buffer all records after a rebalance.</p>
<h4 id="fix-attempt-5">Fix attempt 5</h4>
<p>I was very confident about the previous fix but something was still not OK, the test continued to report data loss. After several code reviews and discussions, I realized that it is not guaranteed that the <code>onRevoked</code> and <code>onAssigned</code> callbacks are called within a single <code>poll</code>! My code was not prepared for this (the original zio-kafka code was, actually, but I did not realize this for a long time).</p>
<p>First of all I had to change the way how the rebalance callbacks are passing information to the poll handler. The previously added rebalance event (which was a simple case class) was changed to be either <code>Revoked</code>, <code>Assigned</code> or <code>RevokedAndAssigned</code> and I made sure that for each case all the run loop state variables are modified correctly.</p>
<p>Immediately after deploying this, I saw evidence in the logs that indeed the revoked and assigned callbacks are called separately, so the fix was definitely needed. The only problem was that I did not really understand how could this cause data loss, and by doing some rebalancing tests it turned out that the problem still exists.</p>
<h4 id="fix-attempt-6">Fix attempt 6</h4>
<p>One more thing I added in the previous attempt was a log in a place that was suspicious to me and I did not care about it earlier. When adding requests to the run loop - these are added to the run loop’s command queue when a partition stream tries to pull, completely asynchronous to the run loop itself - it was checking if currently the run loop is in the middle of a rebalancing. So in case the rebalancing takes multiple <code>poll</code>s, as we have seen, it is possible that between the <code>onRevoked</code> and <code>onAssigned</code> events we get some new requests from the streams.</p>
<p>In the restart-streams mode all partition streams are interrupted on the revoke event, and no new streams are created until the assigned event. This means that these requests can <em>only</em> come from the previous streams so they should be ignored. But what zio-kafka was doing was to add these requests to the run loop’s pending requests. This is correct behavior in its normal mode, because on rebalance some of the streams survive it and their requests can be still fulfilled.</p>
<p>But in our case it is incorrect, because after the assignment is done and some records are fetched by <code>poll</code>, these pending requests get fulfilled with them, “stealing” the records from the new partition streams!</p>
<p>At this point I really felt like this was the last missing piece of the puzzle.</p>
<h4 id="conclusion">Conclusion</h4>
<p>And it was!</p>
<p>The final set of fixes are published <a href="https://github.com/zio/zio-kafka/pull/473">in this pull request</a>. The service and its tests are running perfectly since more than 10 days, proving that it is correct.</p>
]]></summary>
</entry>
<entry>
    <title>[Video] ZIO Parser @ ZIO World 2022</title>
    <link href="http://vigoo.github.io/posts/2022-03-11-zioworld-talk.html" />
    <id>http://vigoo.github.io/posts/2022-03-11-zioworld-talk.html</id>
    <published>2022-03-11T00:00:00Z</published>
    <updated>2022-03-11T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on March 11, 2022
    
</div>

<p>My talk at <a href="https://zioworld.com/">ZIO World 2022</a> introducing <a href="https://github.com/zio/zio-parser">ZIO Parser</a></p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/IG6SmKPPamY" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen>
</iframe>
]]></summary>
</entry>
<entry>
    <title>[Video] Generating Libraries @ Functional Scala 2021</title>
    <link href="http://vigoo.github.io/posts/2021-12-03-funscala2021-talk.html" />
    <id>http://vigoo.github.io/posts/2021-12-03-funscala2021-talk.html</id>
    <published>2021-12-03T00:00:00Z</published>
    <updated>2021-12-03T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on December  3, 2021
    
</div>

<p>My talk at <a href="https://www.functionalscala.com/">Functional Scala 2021</a> about generating libraries in Scala:</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/HCPTmytex3U" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen>
</iframe>
]]></summary>
</entry>
<entry>
    <title>Writing kubectl plugins with ZIO K8s</title>
    <link href="http://vigoo.github.io/posts/2021-03-07-zio-k8s-plugins.html" />
    <id>http://vigoo.github.io/posts/2021-03-07-zio-k8s-plugins.html</id>
    <published>2021-03-07T00:00:00Z</published>
    <updated>2021-03-07T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on March  7, 2021
    
</div>

<p>Originally posted <a href="https://ziverge.com/blog/zio-k8s-kubectl-plugin">at the Ziverge blog</a>.</p>
<p>Andrea Peruffo recently published <a href="https://www.lightbend.com/blog/writing-kubectl-plugins-with-scala-or-java-with-fabric8-kubernetes-client-on-graalvm?utm_campaign=Oktopost-BLG+-+Writing+Kubectl+plugins+in+Java+or+Scala">a blog post on the Lightbend blog</a> about how they migrated a <code>kubectl</code> plugin from Golang to Scala using the <a href="https://github.com/fabric8io/kubernetes-client">Fabric8</a> Kubernetes client and a few Scala libraries. This is a perfect use case for the <a href="https://coralogix.github.io/zio-k8s/">zio-k8s library</a> announced <a href="https://coralogix.com/log-analytics-blog/the-coralogix-operator-a-tale-of-zio-and-kubernetes/">two weeks ago</a>, so we decided to write this post demonstrating how to implement the same example using the ZIO ecosystem.</p>
<p>We are going to implement the same example, originally described in the <a href="https://dev.to/ikwattro/write-a-kubectl-plugin-in-java-with-jbang-and-fabric8-566">Write a kubectl plugin in Java with JBang and fabric8</a> article, using the following libraries:</p>
<ul>
<li><a href="https://zio.dev/">ZIO</a></li>
<li><a href="https://coralogix.github.io/zio-k8s/">ZIO K8s</a></li>
<li><a href="https://zio.github.io/zio-logging/">ZIO Logging</a></li>
<li><a href="https://vigoo.github.io/clipp/docs/">clipp</a></li>
<li><a href="https://sttp.softwaremill.com/en/latest/">sttp</a></li>
<li><a href="https://circe.github.io/circe/">circe</a></li>
</ul>
<p>The source code of the example <a href="https://github.com/zivergetech/zio-k8s-kubectl-plugin-example">can be found here</a>.</p>
<p>The linked blog post does a great job in explaining the benefits and difficulties of compiling to native image with GraalVM so we are not going to repeat it here. Instead, we will focus on how the implementation looks in the functional Scala world.</p>
<p>The example has to implement two <em>kubectl commands</em>: <code>version</code> to print its own version and <code>list</code> to list information about <em>all Pods of the Kubernetes cluster</em> in either ASCII table, JSON or YAML format.</p>
<h3 id="cli-parameters">CLI parameters</h3>
<p>Let’s start with defining these command line options with the <a href="https://vigoo.github.io/clipp/docs/">clipp</a> library!</p>
<p>First, we define the data structures that describe our parameters:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="kw">sealed</span> <span class="kw">trait</span> <span class="ex">Format</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a><span class="kw">object</span> <span class="ex">Format</span> <span class="op">{</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>  <span class="cf">case</span> <span class="kw">object</span> Default <span class="kw">extends</span> <span class="ex">Format</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>  <span class="cf">case</span> <span class="kw">object</span> Json <span class="kw">extends</span> <span class="ex">Format</span></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>  <span class="cf">case</span> <span class="kw">object</span> Yaml <span class="kw">extends</span> <span class="ex">Format</span></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a><span class="kw">sealed</span> <span class="kw">trait</span> Command</span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a><span class="kw">object</span> Command <span class="op">{</span></span>
<span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a>  <span class="kw">final</span> <span class="cf">case</span> <span class="kw">class</span> <span class="fu">ListPods</span><span class="op">(</span>format<span class="op">:</span> <span class="ex">Format</span><span class="op">)</span> <span class="kw">extends</span> Command</span>
<span id="cb1-11"><a href="#cb1-11" aria-hidden="true" tabindex="-1"></a>  <span class="cf">case</span> <span class="kw">object</span> Version <span class="kw">extends</span> Command</span>
<span id="cb1-12"><a href="#cb1-12" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb1-13"><a href="#cb1-13" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-14"><a href="#cb1-14" aria-hidden="true" tabindex="-1"></a><span class="kw">final</span> <span class="cf">case</span> <span class="kw">class</span> <span class="fu">Parameters</span><span class="op">(</span>verbose<span class="op">:</span> <span class="ex">Boolean</span><span class="op">,</span> command<span class="op">:</span> Command<span class="op">)</span></span></code></pre></div>
<p>When parsing the arguments (passed as an array of strings), we need to either produce a <code>Parameters</code> value or fail and print some usage information.</p>
<p>With <code>clipp</code>, this is done by defining a parameter parser using its parser DSL in a <em>for comprehension</em>:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="kw">val</span> spec <span class="op">=</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>  <span class="cf">for</span> <span class="op">{</span></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>    _           <span class="op">&lt;-</span> <span class="fu">metadata</span><span class="op">(</span><span class="st">&quot;kubectl lp&quot;</span><span class="op">)</span></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a>    verbose     <span class="op">&lt;-</span> <span class="fu">flag</span><span class="op">(</span><span class="st">&quot;Verbose logging&quot;</span><span class="op">,</span> <span class="ch">&#39;v&#39;</span><span class="op">,</span> <span class="st">&quot;verbose&quot;</span><span class="op">)</span></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a>    commandName <span class="op">&lt;-</span> <span class="fu">command</span><span class="op">(</span><span class="st">&quot;version&quot;</span><span class="op">,</span> <span class="st">&quot;list&quot;</span><span class="op">)</span></span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a>    command     <span class="op">&lt;-</span> </span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a>      commandName <span class="cf">match</span> <span class="op">{</span></span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a>        <span class="cf">case</span> <span class="st">&quot;version&quot;</span> <span class="op">=&gt;</span> </span>
<span id="cb2-9"><a href="#cb2-9" aria-hidden="true" tabindex="-1"></a>          <span class="fu">pure</span><span class="op">(</span>Command<span class="op">.</span>Version<span class="op">)</span></span>
<span id="cb2-10"><a href="#cb2-10" aria-hidden="true" tabindex="-1"></a>        <span class="cf">case</span> <span class="st">&quot;list&quot;</span>    <span class="op">=&gt;</span></span>
<span id="cb2-11"><a href="#cb2-11" aria-hidden="true" tabindex="-1"></a>          <span class="cf">for</span> <span class="op">{</span></span>
<span id="cb2-12"><a href="#cb2-12" aria-hidden="true" tabindex="-1"></a>            specifiedFormat <span class="op">&lt;-</span> optional <span class="op">{</span></span>
<span id="cb2-13"><a href="#cb2-13" aria-hidden="true" tabindex="-1"></a>                                namedParameter<span class="op">[</span><span class="ex">Format</span><span class="op">](</span></span>
<span id="cb2-14"><a href="#cb2-14" aria-hidden="true" tabindex="-1"></a>                                  <span class="st">&quot;Output format&quot;</span><span class="op">,</span></span>
<span id="cb2-15"><a href="#cb2-15" aria-hidden="true" tabindex="-1"></a>                                  <span class="st">&quot;default|json|yaml&quot;</span><span class="op">,</span></span>
<span id="cb2-16"><a href="#cb2-16" aria-hidden="true" tabindex="-1"></a>                                  <span class="ch">&#39;o&#39;</span><span class="op">,</span></span>
<span id="cb2-17"><a href="#cb2-17" aria-hidden="true" tabindex="-1"></a>                                  <span class="st">&quot;output&quot;</span></span>
<span id="cb2-18"><a href="#cb2-18" aria-hidden="true" tabindex="-1"></a>                                <span class="op">)</span></span>
<span id="cb2-19"><a href="#cb2-19" aria-hidden="true" tabindex="-1"></a>                              <span class="op">}</span></span>
<span id="cb2-20"><a href="#cb2-20" aria-hidden="true" tabindex="-1"></a>            format           <span class="op">=</span> specifiedFormat<span class="op">.</span><span class="fu">getOrElse</span><span class="op">(</span><span class="ex">Format</span><span class="op">.</span>Default<span class="op">)</span></span>
<span id="cb2-21"><a href="#cb2-21" aria-hidden="true" tabindex="-1"></a>          <span class="op">}</span> <span class="cf">yield</span> Command<span class="op">.</span><span class="fu">ListPods</span><span class="op">(</span>format<span class="op">)</span></span>
<span id="cb2-22"><a href="#cb2-22" aria-hidden="true" tabindex="-1"></a>      <span class="op">}</span></span>
<span id="cb2-23"><a href="#cb2-23" aria-hidden="true" tabindex="-1"></a>  <span class="op">}</span> <span class="cf">yield</span> <span class="fu">Parameters</span><span class="op">(</span>verbose<span class="op">,</span> command<span class="op">)</span></span></code></pre></div>
<p>As we can see, it is possible to make decisions in the parser based on the previously parsed values, so each <em>command</em> can have a different set of arguments. In order to parse the possible <em>output formats</em>, we also implement the <code>ParameterParser</code> type class for <code>Format</code>:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="kw">implicit</span> <span class="kw">val</span> parameterParser<span class="op">:</span> ParameterParser<span class="op">[</span><span class="ex">Format</span><span class="op">]</span> <span class="op">=</span> <span class="kw">new</span> ParameterParser<span class="op">[</span><span class="ex">Format</span><span class="op">]</span> <span class="op">{</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a>    <span class="kw">override</span> <span class="kw">def</span> <span class="fu">parse</span><span class="op">(</span>value<span class="op">:</span> <span class="ex">String</span><span class="op">):</span> Either<span class="op">[</span><span class="ex">String</span><span class="op">,</span> <span class="ex">Format</span><span class="op">]</span> <span class="op">=</span></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a>      value<span class="op">.</span>toLowerCase <span class="cf">match</span> <span class="op">{</span></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a>        <span class="cf">case</span> <span class="st">&quot;default&quot;</span> <span class="op">=&gt;</span> <span class="fu">Right</span><span class="op">(</span><span class="ex">Format</span><span class="op">.</span>Default<span class="op">)</span></span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a>        <span class="cf">case</span> <span class="st">&quot;json&quot;</span>    <span class="op">=&gt;</span> <span class="fu">Right</span><span class="op">(</span><span class="ex">Format</span><span class="op">.</span>Json<span class="op">)</span></span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a>        <span class="cf">case</span> <span class="st">&quot;yaml&quot;</span>    <span class="op">=&gt;</span> <span class="fu">Right</span><span class="op">(</span><span class="ex">Format</span><span class="op">.</span>Yaml<span class="op">)</span></span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a>        <span class="cf">case</span> _         <span class="op">=&gt;</span> <span class="fu">Left</span><span class="op">(</span><span class="ss">s&quot;</span><span class="st">Invalid output format &#39;</span><span class="ss">$value</span><span class="st">&#39;, use &#39;default&#39;, &#39;json&#39; or &#39;yaml&#39;</span><span class="ss">&quot;</span><span class="op">)</span></span>
<span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a>      <span class="op">}</span></span>
<span id="cb3-9"><a href="#cb3-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-10"><a href="#cb3-10" aria-hidden="true" tabindex="-1"></a>    <span class="kw">override</span> <span class="kw">def</span> example<span class="op">:</span> <span class="ex">Format</span> <span class="op">=</span> <span class="ex">Format</span><span class="op">.</span>Default</span>
<span id="cb3-11"><a href="#cb3-11" aria-hidden="true" tabindex="-1"></a>  <span class="op">}</span></span></code></pre></div>
<p>This is all we need to bootstrap our command line application. The following main function parses the arguments and provides the parsed <code>Parameters</code> value to the <code>ZIO</code> program:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> <span class="fu">run</span><span class="op">(</span>args<span class="op">:</span> <span class="ex">List</span><span class="op">[</span><span class="ex">String</span><span class="op">]):</span> URIO<span class="op">[</span>zio<span class="op">.</span>ZEnv<span class="op">,</span> ExitCode<span class="op">]</span> <span class="op">=</span> <span class="op">{</span></span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a>  <span class="kw">val</span> clippConfig <span class="op">=</span> config<span class="op">.</span><span class="fu">fromArgsWithUsageInfo</span><span class="op">(</span>args<span class="op">,</span> Parameters<span class="op">.</span>spec<span class="op">)</span></span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a>  <span class="fu">runWithParameters</span><span class="op">()</span></span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a>    <span class="op">.</span><span class="fu">provideCustomLayer</span><span class="op">(</span>clippConfig<span class="op">)</span></span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a>    <span class="op">.</span>catchAll <span class="op">{</span> _<span class="op">:</span> ParserFailure <span class="op">=&gt;</span> ZIO<span class="op">.</span><span class="fu">succeed</span><span class="op">(</span>ExitCode<span class="op">.</span>failure<span class="op">)</span> <span class="op">}</span></span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-8"><a href="#cb4-8" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> <span class="fu">runWithParameters</span><span class="op">():</span> ZIO<span class="op">[</span>ZEnv <span class="kw">with</span> ClippConfig<span class="op">[</span>Parameters<span class="op">],</span> Nothing<span class="op">,</span> ExitCode<span class="op">]</span> <span class="op">=</span> <span class="co">// ...</span></span></code></pre></div>
<h3 id="working-with-kubernetes">Working with Kubernetes</h3>
<p>In <code>runWithParameters</code>, we have everything needed to initialize the logging and Kubernetes modules and perform the actual command. Before talking about the initialization though, let’s take a look at how we can list the pods!</p>
<p>We define a data type holding all the information we want to report about each pod:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="cf">case</span> <span class="kw">class</span> <span class="fu">PodInfo</span><span class="op">(</span>name<span class="op">:</span> <span class="ex">String</span><span class="op">,</span> namespace<span class="op">:</span> <span class="ex">String</span><span class="op">,</span> status<span class="op">:</span> <span class="ex">String</span><span class="op">,</span> message<span class="op">:</span> <span class="ex">String</span><span class="op">)</span></span></code></pre></div>
<p>The task now is to fetch <em>all pods</em> from Kubernetes and construct <code>PodInfo</code> values. In <code>zio-k8s</code> <em>getting a list of pods</em> is defined as a <strong>ZIO Stream</strong>, which under the hood sends multiple HTTP requests to Kubernetes taking advantage of its <em>pagination</em> capability. In this <em>stream</em> each element will be a <code>Pod</code> and we can start processing them one by one as soon they arrive over the wire. This way the implementation of the <code>list</code> command can be something like this:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> <span class="fu">run</span><span class="op">(</span>format<span class="op">:</span> <span class="ex">Format</span><span class="op">)</span> <span class="op">=</span> </span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a>  <span class="cf">for</span> <span class="op">{</span></span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a>    _ <span class="op">&lt;-</span> log<span class="op">.</span><span class="fu">debug</span><span class="op">(</span><span class="st">&quot;Executing the list command&quot;</span><span class="op">)</span></span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a>    _ <span class="op">&lt;-</span> pods</span>
<span id="cb6-5"><a href="#cb6-5" aria-hidden="true" tabindex="-1"></a>            <span class="op">.</span><span class="fu">getAll</span><span class="op">(</span>namespace <span class="op">=</span> <span class="bu">None</span><span class="op">)</span></span>
<span id="cb6-6"><a href="#cb6-6" aria-hidden="true" tabindex="-1"></a>            <span class="op">.</span><span class="fu">mapM</span><span class="op">(</span>toModel<span class="op">)</span></span>
<span id="cb6-7"><a href="#cb6-7" aria-hidden="true" tabindex="-1"></a>            <span class="op">.</span><span class="fu">run</span><span class="op">(</span>reports<span class="op">.</span><span class="fu">sink</span><span class="op">(</span>format<span class="op">))</span></span>
<span id="cb6-8"><a href="#cb6-8" aria-hidden="true" tabindex="-1"></a>            <span class="op">.</span>catchAll <span class="op">{</span> k8sFailure <span class="op">=&gt;</span></span>
<span id="cb6-9"><a href="#cb6-9" aria-hidden="true" tabindex="-1"></a>              console<span class="op">.</span><span class="fu">putStrLnErr</span><span class="op">(</span><span class="ss">s&quot;</span><span class="st">Failed to get the list of pods: </span><span class="ss">$k8sFailure&quot;</span><span class="op">)</span></span>
<span id="cb6-10"><a href="#cb6-10" aria-hidden="true" tabindex="-1"></a>            <span class="op">}</span></span>
<span id="cb6-11"><a href="#cb6-11" aria-hidden="true" tabindex="-1"></a>  <span class="op">}</span> <span class="cf">yield</span> <span class="op">()</span></span></code></pre></div>
<p>Let’s take a look at each line!</p>
<p>First, <code>log.debug</code> uses the <em>ZIO logging</em> library. We are going to initialize logging in a way that these messages only appear if the <code>--verbose</code> option was enabled.</p>
<p>Then <code>pods.getAll</code> is the ZIO Stream provided by the <em>ZIO K8s</em> library. Not providing a specific namespace means that we are getting pods from <em>all</em> namespaces.</p>
<p>With <code>mapM(toModel)</code> we transform each <code>Pod</code> in the stream to our <code>PodInfo</code> data structure.</p>
<p>Finally we <code>run</code> the stream into a <em>sink</em> that is responsible for displaying the <code>PodInfo</code> structures with the specific <em>output format</em>.</p>
<p>The <code>Pod</code> objects returned in the stream are simple <em>case classes</em> containing all the information available for the given resource. Most of the fields of these case classes are <em>optional</em> though, even though we can be sure that in our case each pod would have a name, a namespace and a status. To make working with these data structures easier within a set of expectations, they feature <em>getter methods</em> that are ZIO functions either returning the field’s value, or failing if they are not specified. With these we can implement <code>toModel</code>:</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> <span class="fu">toModel</span><span class="op">(</span>pod<span class="op">:</span> Pod<span class="op">):</span> IO<span class="op">[</span>K8sFailure<span class="op">,</span> PodInfo<span class="op">]</span> <span class="op">=</span></span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span> <span class="op">{</span></span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a>      metadata  <span class="op">&lt;-</span> pod<span class="op">.</span>getMetadata</span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true" tabindex="-1"></a>      name      <span class="op">&lt;-</span> metadata<span class="op">.</span>getName</span>
<span id="cb7-5"><a href="#cb7-5" aria-hidden="true" tabindex="-1"></a>      namespace <span class="op">&lt;-</span> metadata<span class="op">.</span>getNamespace</span>
<span id="cb7-6"><a href="#cb7-6" aria-hidden="true" tabindex="-1"></a>      status    <span class="op">&lt;-</span> pod<span class="op">.</span>getStatus</span>
<span id="cb7-7"><a href="#cb7-7" aria-hidden="true" tabindex="-1"></a>      phase     <span class="op">&lt;-</span> status<span class="op">.</span>getPhase</span>
<span id="cb7-8"><a href="#cb7-8" aria-hidden="true" tabindex="-1"></a>      message    <span class="op">=</span> status<span class="op">.</span>message<span class="op">.</span><span class="fu">getOrElse</span><span class="op">(</span><span class="st">&quot;&quot;</span><span class="op">)</span></span>
<span id="cb7-9"><a href="#cb7-9" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span> <span class="cf">yield</span> <span class="fu">PodInfo</span><span class="op">(</span>name<span class="op">,</span> namespace<span class="op">,</span> phase<span class="op">,</span> message<span class="op">)</span></span></code></pre></div>
<p>An alternative would be to just store the optional values in <code>PodInfo</code> and handle their absence in the <em>report sink</em>.</p>
<p>Let’s talk about the <em>type</em> of the above defined <code>run</code> function:</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a>ZIO<span class="op">[</span>Pods <span class="kw">with</span> <span class="ex">Console</span> <span class="kw">with</span> Logging<span class="op">,</span> Nothing<span class="op">,</span> <span class="bu">Unit</span><span class="op">]</span></span></code></pre></div>
<p>The ZIO <em>environment</em> precisely specifies the modules used by our <code>run</code> function:</p>
<table>
<colgroup>
<col style="width: 13%" />
<col style="width: 86%" />
</colgroup>
<thead>
<tr class="header">
<th>Module</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>Pods</code></td>
<td>for accessing K8s pods</td>
</tr>
<tr class="even">
<td><code>Console</code></td>
<td>for printing <em>errors</em> on the standard error channel with <code>putStrLnErr</code></td>
</tr>
<tr class="odd">
<td><code>Logging</code></td>
<td>for emitting some debug logs</td>
</tr>
</tbody>
</table>
<p>The error type is <code>Nothing</code> because it can never fail - all errors are catched and displayed for the user within the run function.</p>
<h3 id="initialization">Initialization</h3>
<p>Now we can see that in order to run the <code>list</code> command in <code>runWithParameters</code>, we must <em>provide</em> <code>Pods</code> and <code>Logging</code> modules to our implementation (<code>Console</code> is part of the default environment and does not need to be provided).</p>
<p>These modules are described by <em>ZIO Layers</em> which can be composed together to provide the <em>environment</em> for running our ZIO program. In this case we need to define a <em>logging layer</em> and a <em>kubernetes pods client</em> layer and then compose the two for our <code>list</code> implementation.</p>
<p>Let’s start with logging:</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> <span class="fu">configuredLogging</span><span class="op">(</span>verbose<span class="op">:</span> <span class="ex">Boolean</span><span class="op">):</span> ZLayer<span class="op">[</span><span class="ex">Console</span> <span class="kw">with</span> Clock<span class="op">,</span> Nothing<span class="op">,</span> Logging<span class="op">]</span> <span class="op">=</span> <span class="op">{</span></span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true" tabindex="-1"></a>    <span class="kw">val</span> logLevel <span class="op">=</span> <span class="cf">if</span> <span class="op">(</span>verbose<span class="op">)</span> LogLevel<span class="op">.</span>Trace <span class="cf">else</span> LogLevel<span class="op">.</span>Info</span>
<span id="cb9-3"><a href="#cb9-3" aria-hidden="true" tabindex="-1"></a>    Logging<span class="op">.</span><span class="fu">consoleErr</span><span class="op">(</span>logLevel<span class="op">)</span> <span class="op">&gt;&gt;&gt;</span> initializeSlf4jBridge</span>
<span id="cb9-4"><a href="#cb9-4" aria-hidden="true" tabindex="-1"></a>  <span class="op">}</span></span></code></pre></div>
<p>We create a simple ZIO console logger that will print lines to the standard error channel; the enabled log level is determined by the <code>verbose</code> command line argument. As this logger writes to the console and also prints timestamps, our logging layer <em>requires</em> <code>Console with Clock</code> to be able to build a <code>Logging</code> module. Enabling the <em>SLF4j bridge</em> guarantees that logs coming from third party libraries will also get logged through ZIO logging. In our example this means that when we enable verbose logging, our <code>kubectl</code> plugin will log the HTTP requests made by the Kubernetes library!</p>
<p>The second layer we must define constructs a <code>Pods</code> module:</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true" tabindex="-1"></a><span class="kw">val</span> pods <span class="op">=</span> k8sDefault <span class="op">&gt;&gt;&gt;</span> Pods<span class="op">.</span>live<span class="op">)</span></span></code></pre></div>
<p>By using <code>k8sDefault</code> we ask <code>zio-k8s</code> to use the <em>default configuration chain</em>, which first tries to load the <code>kubeconfig</code> and use the active <em>context</em> stored in it. This is exactly what <code>kubectl</code> does, so it is the perfect choice when writing a <code>kubectl</code> plugin. Other variants provide more flexibility such as loading custom configuration with the <a href="https://zio.github.io/zio-config/">ZIO Config</a> library. Once we have a <em>k8s configuration</em> we just feed it to the set of resource modules we need. In this example we only need to access pods. In more complex applications this would be something like <code>k8sDefault &gt;&gt;&gt; (Pods.live ++ Deployments.live ++ ...)</code>.</p>
<p>With both layers defined, we can now provide them to our command implementation:</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true" tabindex="-1"></a><span class="fu">runCommand</span><span class="op">(</span>parameters<span class="op">.</span>command<span class="op">)</span></span>
<span id="cb11-2"><a href="#cb11-2" aria-hidden="true" tabindex="-1"></a>  <span class="op">.</span><span class="fu">provideCustomLayer</span><span class="op">(</span>logging <span class="op">++</span> pods<span class="op">)</span></span></code></pre></div>
<h3 id="output">Output</h3>
<p>The last thing missing is the <em>report sink</em> that we are running the stream of pods into. We are going to define three different sinks for the three output types.</p>
<p>Let’s start with JSON!</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb12-1"><a href="#cb12-1" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> sink<span class="op">[</span>T<span class="op">:</span> <span class="ex">Encoder</span><span class="op">]:</span> ZSink<span class="op">[</span><span class="ex">Console</span><span class="op">,</span> Nothing<span class="op">,</span> T<span class="op">,</span> T<span class="op">,</span> <span class="bu">Unit</span><span class="op">]</span> <span class="op">=</span></span>
<span id="cb12-2"><a href="#cb12-2" aria-hidden="true" tabindex="-1"></a>  ZSink<span class="op">.</span>foreach <span class="op">{</span> <span class="op">(</span>item<span class="op">:</span> T<span class="op">)</span> <span class="op">=&gt;</span></span>
<span id="cb12-3"><a href="#cb12-3" aria-hidden="true" tabindex="-1"></a>    console<span class="op">.</span><span class="fu">putStrLn</span><span class="op">(</span>item<span class="op">.</span>asJson<span class="op">.</span><span class="fu">printWith</span><span class="op">(</span>Printer<span class="op">.</span>spaces2SortKeys<span class="op">))</span></span>
<span id="cb12-4"><a href="#cb12-4" aria-hidden="true" tabindex="-1"></a>  <span class="op">}</span></span></code></pre></div>
<p>The JSON sink requires <code>Console</code> and then for each element <code>T</code> it converts it to JSON and pretty prints it to console. Note that this is going to be a JSON document per each line. We could easily define a different sink that collects each element and produces a single valid JSON array of them:</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb13-1"><a href="#cb13-1" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> arraySink<span class="op">[</span>T<span class="op">:</span> <span class="ex">Encoder</span><span class="op">]:</span> ZSink<span class="op">[</span><span class="ex">Console</span><span class="op">,</span> Nothing<span class="op">,</span> T<span class="op">,</span> T<span class="op">,</span> <span class="bu">Unit</span><span class="op">]</span> <span class="op">=</span></span>
<span id="cb13-2"><a href="#cb13-2" aria-hidden="true" tabindex="-1"></a>    ZSink<span class="op">.</span>collectAll<span class="op">.</span>flatMap <span class="op">{</span> <span class="op">(</span>items<span class="op">:</span> Chunk<span class="op">[</span>T<span class="op">])</span> <span class="op">=&gt;</span></span>
<span id="cb13-3"><a href="#cb13-3" aria-hidden="true" tabindex="-1"></a>      ZSink<span class="op">.</span>fromEffect <span class="op">{</span></span>
<span id="cb13-4"><a href="#cb13-4" aria-hidden="true" tabindex="-1"></a>        console<span class="op">.</span><span class="fu">putStrLn</span><span class="op">(</span>Json<span class="op">.</span><span class="fu">arr</span><span class="op">(</span>items<span class="op">.</span><span class="fu">map</span><span class="op">(</span>_<span class="op">.</span>asJson<span class="op">):</span> _<span class="op">*).</span><span class="fu">printWith</span><span class="op">(</span>Printer<span class="op">.</span>spaces2SortKeys<span class="op">))</span></span>
<span id="cb13-5"><a href="#cb13-5" aria-hidden="true" tabindex="-1"></a>      <span class="op">}</span></span>
<span id="cb13-6"><a href="#cb13-6" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span></code></pre></div>
<p>The <code>T</code> type paramter in our example will always be <code>PodInfo</code>. By requiring it to have an implementation of circe’s <code>Encoder</code> type class we can call <code>.asJson</code> on instances of <code>T</code>, encoding it into a JSON object. We can <em>derive</em> these encoders automatically:</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb14-1"><a href="#cb14-1" aria-hidden="true" tabindex="-1"></a><span class="kw">implicit</span> <span class="kw">val</span> encoder<span class="op">:</span> <span class="ex">Encoder</span><span class="op">[</span>PodInfo<span class="op">]</span> <span class="op">=</span> deriveEncoder</span></code></pre></div>
<p>Producing YAML output is exactly the same except of first converting the JSON model to YAML with <code>asJson.asYaml</code>.</p>
<p>The third output format option is to generate ASCII tables. We implement that with the same Java library as the original post, called <a href="https://github.com/vdmeer/asciitable"><code>asciitable</code></a>. In order to separate the specification of how to convert a <code>PodInfo</code> to a table from the sink implementation, we can define our own type class similar to the JSON <code>Encoder</code>:</p>
<div class="sourceCode" id="cb15"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb15-1"><a href="#cb15-1" aria-hidden="true" tabindex="-1"></a><span class="kw">trait</span> Tabular<span class="op">[</span>T<span class="op">]</span> <span class="op">{</span></span>
<span id="cb15-2"><a href="#cb15-2" aria-hidden="true" tabindex="-1"></a>    <span class="co">/**</span> Initializes a table by setting properties and adding header rows</span>
<span id="cb15-3"><a href="#cb15-3" aria-hidden="true" tabindex="-1"></a>      <span class="co">*/</span></span>
<span id="cb15-4"><a href="#cb15-4" aria-hidden="true" tabindex="-1"></a>    <span class="kw">def</span> <span class="fu">createTableRenderer</span><span class="op">():</span> ZManaged<span class="op">[</span><span class="ex">Any</span><span class="op">,</span> Nothing<span class="op">,</span> AsciiTable<span class="op">]</span></span>
<span id="cb15-5"><a href="#cb15-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb15-6"><a href="#cb15-6" aria-hidden="true" tabindex="-1"></a>    <span class="co">/**</span> Adds a single item of type T to the table created with <span class="co">[[</span>createTableRenderer<span class="co">()]]</span></span>
<span id="cb15-7"><a href="#cb15-7" aria-hidden="true" tabindex="-1"></a>      <span class="co">*/</span></span>
<span id="cb15-8"><a href="#cb15-8" aria-hidden="true" tabindex="-1"></a>    <span class="kw">def</span> <span class="fu">addRow</span><span class="op">(</span>table<span class="op">:</span> AsciiTable<span class="op">)(</span>item<span class="op">:</span> T<span class="op">):</span> UIO<span class="op">[</span><span class="bu">Unit</span><span class="op">]</span></span>
<span id="cb15-9"><a href="#cb15-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb15-10"><a href="#cb15-10" aria-hidden="true" tabindex="-1"></a>    <span class="co">/**</span> Adds the table<span class="co">&#39;</span>s footer and renders it to a string</span>
<span id="cb15-11"><a href="#cb15-11" aria-hidden="true" tabindex="-1"></a>      <span class="co">*/</span></span>
<span id="cb15-12"><a href="#cb15-12" aria-hidden="true" tabindex="-1"></a>    <span class="kw">def</span> <span class="fu">renderTable</span><span class="op">(</span>table<span class="op">:</span> AsciiTable<span class="op">):</span> UIO<span class="op">[</span><span class="ex">String</span><span class="op">]</span></span>
<span id="cb15-13"><a href="#cb15-13" aria-hidden="true" tabindex="-1"></a>  <span class="op">}</span></span></code></pre></div>
<p>We can implement this for <code>PodInfo</code> and then use a generic sink for printing the result table, similar to the previous examples:</p>
<div class="sourceCode" id="cb16"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb16-1"><a href="#cb16-1" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> sink<span class="op">[</span>T<span class="op">](</span><span class="kw">implicit</span> tabular<span class="op">:</span> Tabular<span class="op">[</span>T<span class="op">]):</span> ZSink<span class="op">[</span><span class="ex">Console</span><span class="op">,</span> Nothing<span class="op">,</span> T<span class="op">,</span> T<span class="op">,</span> <span class="bu">Unit</span><span class="op">]</span> <span class="op">=</span></span>
<span id="cb16-2"><a href="#cb16-2" aria-hidden="true" tabindex="-1"></a>  ZSink<span class="op">.</span>managed<span class="op">[</span><span class="ex">Console</span><span class="op">,</span> Nothing<span class="op">,</span> T<span class="op">,</span> AsciiTable<span class="op">,</span> T<span class="op">,</span> <span class="bu">Unit</span><span class="op">](</span>tabular<span class="op">.</span><span class="fu">createTableRenderer</span><span class="op">())</span> <span class="op">{</span></span>
<span id="cb16-3"><a href="#cb16-3" aria-hidden="true" tabindex="-1"></a>    table <span class="op">=&gt;</span> <span class="co">// initialize the table</span></span>
<span id="cb16-4"><a href="#cb16-4" aria-hidden="true" tabindex="-1"></a>      ZSink<span class="op">.</span><span class="fu">foreach</span><span class="op">(</span>tabular<span class="op">.</span><span class="fu">addRow</span><span class="op">(</span>table<span class="op">))</span> <span class="op">&lt;*</span> <span class="co">// add each row</span></span>
<span id="cb16-5"><a href="#cb16-5" aria-hidden="true" tabindex="-1"></a>      printResultTable<span class="op">[</span>T<span class="op">](</span>table<span class="op">)</span> <span class="co">// print the result</span></span>
<span id="cb16-6"><a href="#cb16-6" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb16-7"><a href="#cb16-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb16-8"><a href="#cb16-8" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> printResultTable<span class="op">[</span>T<span class="op">](</span></span>
<span id="cb16-9"><a href="#cb16-9" aria-hidden="true" tabindex="-1"></a>  table<span class="op">:</span> AsciiTable</span>
<span id="cb16-10"><a href="#cb16-10" aria-hidden="true" tabindex="-1"></a><span class="op">)(</span><span class="kw">implicit</span> tabular<span class="op">:</span> Tabular<span class="op">[</span>T<span class="op">]):</span> ZSink<span class="op">[</span><span class="ex">Console</span><span class="op">,</span> Nothing<span class="op">,</span> T<span class="op">,</span> T<span class="op">,</span> <span class="bu">Unit</span><span class="op">]</span> <span class="op">=</span></span>
<span id="cb16-11"><a href="#cb16-11" aria-hidden="true" tabindex="-1"></a>  ZSink<span class="op">.</span>fromEffect <span class="op">{</span></span>
<span id="cb16-12"><a href="#cb16-12" aria-hidden="true" tabindex="-1"></a>    tabular</span>
<span id="cb16-13"><a href="#cb16-13" aria-hidden="true" tabindex="-1"></a>      <span class="op">.</span><span class="fu">renderTable</span><span class="op">(</span>table<span class="op">)</span></span>
<span id="cb16-14"><a href="#cb16-14" aria-hidden="true" tabindex="-1"></a>      <span class="op">.</span><span class="fu">flatMap</span><span class="op">(</span>str <span class="op">=&gt;</span> console<span class="op">.</span><span class="fu">putStrLn</span><span class="op">(</span>str<span class="op">))</span></span>
<span id="cb16-15"><a href="#cb16-15" aria-hidden="true" tabindex="-1"></a>  <span class="op">}</span></span></code></pre></div>
<h3 id="trying-it-out">Trying it out</h3>
<p>With the report sinks implemenented we have everything ready to try out our new <code>kubectl</code> plugin!</p>
<p>We can compile the example to <em>native image</em> and copy the resulting image to a location on the <code>PATH</code>:</p>
<pre><code>sbt nativeImage
cp target/native-image/kubectl-lp ~/bin</code></pre>
<p>Then use <code>kubectl lp</code> to access our custom functions:</p>
<figure>
<img src="/images/blog-ziok8s-kubectlplugin.png" alt="kubectl-example" />
<figcaption aria-hidden="true">kubectl-example</figcaption>
</figure>
]]></summary>
</entry>
<entry>
    <title>The Coralogix Operator: A Tale of ZIO and Kubernetes</title>
    <link href="http://vigoo.github.io/posts/2021-02-16-zio-k8s.html" />
    <id>http://vigoo.github.io/posts/2021-02-16-zio-k8s.html</id>
    <published>2021-02-16T00:00:00Z</published>
    <updated>2021-02-16T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on February 16, 2021
    
</div>

<p>My blog post <a href="https://coralogix.com/blog/the-coralogix-operator-a-tale-of-zio-and-kubernetes/">published at the Coralogix blog</a> about using <a href="https://coralogix.github.io/zio-k8s/">zio-k8s</a> for writing operators.</p>
]]></summary>
</entry>
<entry>
    <title>ZIO-AWS with ZIO Query</title>
    <link href="http://vigoo.github.io/posts/2020-11-01-zioaws-zioquery.html" />
    <id>http://vigoo.github.io/posts/2020-11-01-zioaws-zioquery.html</id>
    <published>2020-11-01T00:00:00Z</published>
    <updated>2020-11-01T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on November  1, 2020
    
</div>

<p>A few years ago I wrote a <a href="https://vigoo.github.io/posts/2018-09-21-aws-rate-limits-prezidig.html">post</a> about how I refactored one of our internal tools at <a href="https://prezi.com">Prezi</a>. This command line tool was able to discover a set of AWS resources and present them in a nice human readable way. The primary motivation at that time was to introduce circuit breaking to survive AWS API rate limits.</p>
<p>I have recently published a set of libraries, <a href="https://github.com/vigoo/zio-aws"><strong>zio-aws</strong></a>, and thought it would be interesting to rewrite this tool on top of it, and use this opportunity to try out <a href="https://zio.github.io/zio-query/"><strong>ZIO Query</strong></a> on a real-world example. In this post I’m going to show step by step how to build an efficient and easily extensible query tool with the help of <em>ZIO</em> libraries. The full source can be found <a href="https://github.com/vigoo/aws-query">on GitHub</a>.</p>
<h2 id="the-task">The task</h2>
<p>The CLI tool we build will get an arbitrary string as an input, and search for it in various AWS resources. Once it has a match, it has to traverse a graph of these resources and finally pretty-print all the gathered information to the console.</p>
<p><img src="/images/awsquery-1.png"/></p>
<p>The provided input could mean any of the following:</p>
<ul>
<li>An <strong>EC2</strong> <em>instance ID</em></li>
<li>An <strong>ELB</strong> (load balancer)’s <em>name</em></li>
<li>An <strong>ElasticBeanstalk</strong> <em>environment name</em> or <em>ID</em></li>
<li>An <strong>ElasticBeanstalk</strong> <em>application name</em></li>
<li>An <strong>ASG</strong> (auto-scaling group) <em>ID</em></li>
</ul>
<p>For the level of detail to be reported I copied the original tool. This means finding all the related resources in the above sets (plus among <em>launch configurations</em>) but only include a single <em>EC2 instance</em> in the output if it was explicitly queried. So for example if the search term matches an <em>ELB</em> that belongs to an <em>ElasticBeanstalk environment</em>, the report will contain the <em>EB app</em> and all its other environments as well, but won’t show individual instances. This choice does not affect the design and could be easily changed or extended with additional resource types.</p>
<h2 id="aws-client">AWS client</h2>
<p>For querying the above mentioned resources, we have to call four different AWS services. The <code>zio-aws</code> project adds a streaming ZIO wrapper for <em>all</em> the libraries in <a href="https://docs.aws.amazon.com/sdk-for-java/v2/developer-guide/welcome.html">AWS Java SDK v2</a>, each published as separate artifact:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a>libraryDependencies <span class="op">++=</span> <span class="bu">Seq</span><span class="op">(</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>  <span class="st">&quot;io.github.vigoo&quot;</span> <span class="op">%%</span> <span class="st">&quot;zio-aws-autoscaling&quot;</span> <span class="op">%</span> zioAwsVersion<span class="op">,</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>  <span class="st">&quot;io.github.vigoo&quot;</span> <span class="op">%%</span> <span class="st">&quot;zio-aws-ec2&quot;</span> <span class="op">%</span> zioAwsVersion<span class="op">,</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>  <span class="st">&quot;io.github.vigoo&quot;</span> <span class="op">%%</span> <span class="st">&quot;zio-aws-elasticloadbalancing&quot;</span> <span class="op">%</span> zioAwsVersion<span class="op">,</span></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>  <span class="st">&quot;io.github.vigoo&quot;</span> <span class="op">%%</span> <span class="st">&quot;zio-aws-elasticbeanstalk&quot;</span> <span class="op">%</span> zioAwsVersion</span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a>  <span class="st">&quot;io.github.vigoo&quot;</span> <span class="op">%%</span> <span class="st">&quot;zio-aws-netty&quot;</span> <span class="op">%</span> zioAwsVersion<span class="op">,</span>    </span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a><span class="op">)</span></span></code></pre></div>
<p>In addition to loading the necessary client libraries, we also need one of the <em>http implementations</em>, in this case I chose the default <em>Netty</em>. Other possibilities are <em>akka-http</em> and <em>http4s</em>. If your application already uses one of these for other HTTP communications you may want to use them to share their configuration and pools.</p>
<p>The client libraries have a <code>ZStream</code> API for all the operations that either support streaming (like for example S3 download/upload) or pagination, and <code>ZIO</code> wrapper for non-streaming simple operations. Instead of using the Java SDK’s builders, the requests are described by <em>case classes</em>, and the <em>result</em> types have convenience accessors to handle the nullable results.</p>
<p>Let’s see some examples!</p>
<p>We can get information about <em>EB applications</em> with the <em>ElasticBeanstalk</em> API’s <a href="https://docs.aws.amazon.com/elasticbeanstalk/latest/api/API_DescribeApplications.html"><code>DescribeApplications</code> operation</a>. This is defined like the following in <code>zio-aws-elasticbeanstalk</code>:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> <span class="fu">describeApplications</span><span class="op">(</span>request<span class="op">:</span> DescribeApplicationsRequest<span class="op">):</span> ZIO<span class="op">[</span>ElasticBeanstalk<span class="op">,</span> AwsError<span class="op">,</span> DescribeApplicationsResponse<span class="op">.</span>ReadOnly<span class="op">]</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> ApplicationName <span class="op">=</span> <span class="ex">String</span></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a><span class="cf">case</span> <span class="kw">class</span> <span class="fu">DescribeApplicationsRequest</span><span class="op">(</span>applicationNames<span class="op">:</span> <span class="ex">Option</span><span class="op">[</span><span class="ex">Iterable</span><span class="op">[</span>ApplicationName<span class="op">]])</span></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a><span class="cf">case</span> <span class="kw">class</span> <span class="fu">DescribeApplicationsResponse</span><span class="op">(</span>applications <span class="op">:</span> <span class="ex">Option</span><span class="op">[</span><span class="ex">Iterable</span><span class="op">[</span>ApplicationDescription<span class="op">]])</span></span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a><span class="kw">object</span> DescribeApplicationsResponse <span class="op">{</span></span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a>  <span class="kw">trait</span> ReadOnly <span class="op">{</span></span>
<span id="cb2-9"><a href="#cb2-9" aria-hidden="true" tabindex="-1"></a>    <span class="kw">def</span> editable<span class="op">:</span> DescribeApplicationsResponse</span>
<span id="cb2-10"><a href="#cb2-10" aria-hidden="true" tabindex="-1"></a>    <span class="kw">def</span> applicationsValue<span class="op">:</span> <span class="ex">Option</span><span class="op">[</span><span class="ex">List</span><span class="op">[</span>ApplicationDescription<span class="op">.</span>ReadOnly<span class="op">]]</span></span>
<span id="cb2-11"><a href="#cb2-11" aria-hidden="true" tabindex="-1"></a>    <span class="kw">def</span> applications<span class="op">:</span> ZIO<span class="op">[</span><span class="ex">Any</span><span class="op">,</span> AwsError<span class="op">,</span> <span class="ex">List</span><span class="op">[</span>ApplicationDescription<span class="op">.</span>ReadOnly<span class="op">]]</span></span>
<span id="cb2-12"><a href="#cb2-12" aria-hidden="true" tabindex="-1"></a>  <span class="op">}</span></span>
<span id="cb2-13"><a href="#cb2-13" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>A few things to notice here:</p>
<ul>
<li>The client function requires the <code>ElasticBeanstalk</code> module. We will see how to set up the dependencies in the <em>Putting all together</em> section.</li>
<li>The primitive types defined by the AWS schema are currently simple type aliases. In the future they will be probably replaced by <a href="https://github.com/zio/zio-prelude">zio-prelude</a>’s <em>newtypes</em>.</li>
<li>Each wrapper type has a <code>ReadOnly</code> trait and a <em>case class</em>. The case classes are used as input, and the read-only interfaces as outputs. This way the result provided by the Java SDK can be accessed directly and it only has to be rewrapped in the case class if it is passed to another call as input.</li>
<li>In many cases the AWS SDK describes fields as optional even if in normal circumstances it would never be <code>None</code>. To make it more convenient to work with these, the <code>ReadOnly</code> interface contains <em>accessor functions</em> which fail with <code>FieldIsNone</code> in case the field did not have any value. The pure optional values can be accessed with the <code>xxxValue</code> variants. See <code>applications</code> and <code>applicationsValue</code> in the above example.</li>
</ul>
<p>For operations support pagination, the wrapper functions return a stream. The actual first AWS call happens when the stream is first pulled. An example for this that we have to use in this application is the <em>EC2</em> API’s <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeInstances.html"><code>DescribeInstances</code> operation</a>.</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> <span class="fu">describeInstances</span><span class="op">(</span>request<span class="op">:</span> DescribeInstancesRequest<span class="op">):</span> ZStream<span class="op">[</span>Ec2<span class="op">,</span> AwsError<span class="op">,</span> Reservation<span class="op">.</span>ReadOnly<span class="op">]</span></span></code></pre></div>
<p>The pagination can be controlled by setting the <code>MaxResults</code> property in <code>DescribeInstancesRequest</code>. For the user of the <code>describeInstances</code> function this is completely transparent, the returned stream will gather all the results, possibly by performing multiple AWS requests.</p>
<h2 id="queries">Queries</h2>
<p>We could implement the resource discovery directly using the low level AWS wrappers described above, using ZIO’s tools to achieve concurrency. There are several things to consider though:</p>
<ul>
<li>We don’t know what resource we are looking for, so we should start multiple queries in parallel to find a match as soon as possible</li>
<li>Some queries return additional data that could be reused later. For example it is not possible to search for an ELB by a instance ID contained by it; for that we have to query <em>all</em> load balancers and check the members on client side.</li>
<li>There are AWS operations that support querying multiple entities, for example by providing a list of IDs to look for</li>
<li>We should minimize the number of calls to AWS, both for performance reasons, and to avoid getting rate limited</li>
</ul>
<p>We can achieve all this by expressing our AWS queries with a higher level abstraction, delegating the execution to a library called <a href="https://zio.github.io/zio-query/">ZIO Query</a>. This library let us define composable <em>queries</em> to arbitrary <em>data sources</em>, and it automatically provides <em>pipelining</em>, <em>batching</em> and <em>caching</em>. A perfect match for the problem we have to solve here.</p>
<p>To be able to cache results that became available as a side effect of a query, we need a <a href="https://github.com/zio/zio-query/pull/105">recent improvement</a> that is not published yet, so <code>aws-query</code> currently uses a snapshot release of <code>zio-query</code>:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a>libraryDependencies <span class="op">+=</span> <span class="st">&quot;dev.zio&quot;</span> <span class="op">%%</span> <span class="st">&quot;zio-query&quot;</span> <span class="op">%</span> <span class="st">&quot;0.2.5+12-c41557f7-SNAPSHOT&quot;</span></span></code></pre></div>
<p>The first step is to define custom <em>data sources</em>. Data sources must implement a function <code>runAll</code> with the following signature:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> <span class="fu">runAll</span><span class="op">(</span>requests<span class="op">:</span> Chunk<span class="op">[</span>Chunk<span class="op">[</span>A<span class="op">]]):</span> ZIO<span class="op">[</span>R<span class="op">,</span> Nothing<span class="op">,</span> CompletedRequestMap<span class="op">]</span></span></code></pre></div>
<p>Here <code>A</code> is the <em>request type</em> specific to a given data source (extending <code>Request[E, A]</code>, and the returned <code>CompletedRequestMap</code> will store an <code>Either[E, A]</code> result for each request. The two nested chunks model sequential and parallel execution: the requests in the inner chunks can be executed in parallel, while these batches contained by the outer chunk must be performed sequentially. In practice we won’t implement this method but use <code>DataSource.Batched</code> that is a simplified version that can perform requests in parallel but does not make further optimizations on the requests to be performed sequentially.</p>
<p>What should belong to one data source? It could be a single data source for all the AWS queries, or one per service, or one per resource type. The best choice in this case is to have one for each resource type, for the following reasons:</p>
<ul>
<li>There are no opportunities to do any cross-resource-type caching. For example when we are querying EC2 instances, we won’t fetch auto scaling groups as a side effect.</li>
<li>If all requests are about the same data type, implementing the data source is much simpler</li>
</ul>
<p>Let’s see a simple example. EC2 instances can be queried by <em>instance ID</em> with the <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeInstances.html"><code>DescribeInstances</code></a> operation, and it supports querying for multiple IDs in a single request. We first define a <em>request type</em>:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="cf">case</span> <span class="kw">class</span> <span class="fu">GetEc2Instance</span><span class="op">(</span>id<span class="op">:</span> InstanceId<span class="op">)</span> <span class="kw">extends</span> <span class="ex">Request</span><span class="op">[</span>AwsError<span class="op">,</span> Instance<span class="op">.</span>ReadOnly<span class="op">]</span></span></code></pre></div>
<p>Then the data source:</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="kw">val</span> ec2InstancesDataSource<span class="op">:</span> <span class="ex">DataSource</span><span class="op">[</span>Logging <span class="kw">with</span> Ec2<span class="op">,</span> GetEc2Instance<span class="op">]</span> <span class="op">=</span> </span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a>  <span class="ex">DataSource</span><span class="op">.</span>Batched<span class="op">.</span><span class="fu">make</span><span class="op">(</span><span class="st">&quot;ec2&quot;</span><span class="op">)</span> <span class="op">{</span> <span class="op">(</span>requests<span class="op">:</span> Chunk<span class="op">[</span>GetEc2Instance<span class="op">])</span> <span class="op">=&gt;</span></span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a>    <span class="kw">import</span> AwsDataSource<span class="op">.</span>_</span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb7-5"><a href="#cb7-5" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span> <span class="op">{</span></span>
<span id="cb7-6"><a href="#cb7-6" aria-hidden="true" tabindex="-1"></a>      result <span class="op">&lt;-</span> ec2<span class="op">.</span><span class="fu">describeInstances</span><span class="op">(</span><span class="fu">DescribeInstancesRequest</span><span class="op">(</span>instanceIds <span class="op">=</span> <span class="bu">Some</span><span class="op">(</span>requests<span class="op">.</span><span class="fu">map</span><span class="op">(</span>_<span class="op">.</span>id<span class="op">))))</span></span>
<span id="cb7-7"><a href="#cb7-7" aria-hidden="true" tabindex="-1"></a>        <span class="op">.</span><span class="fu">mapM</span><span class="op">(</span>_<span class="op">.</span>instances<span class="op">)</span></span>
<span id="cb7-8"><a href="#cb7-8" aria-hidden="true" tabindex="-1"></a>        <span class="op">.</span><span class="fu">flatMap</span><span class="op">(</span>instances <span class="op">=&gt;</span> ZStream<span class="op">.</span><span class="fu">fromIterable</span><span class="op">(</span>instances<span class="op">))</span></span>
<span id="cb7-9"><a href="#cb7-9" aria-hidden="true" tabindex="-1"></a>        <span class="op">.</span><span class="fu">foldM</span><span class="op">(</span>CompletedRequestMap<span class="op">.</span>empty<span class="op">)</span> <span class="op">{</span> <span class="op">(</span>resultMap<span class="op">,</span> item<span class="op">)</span> <span class="op">=&gt;</span></span>
<span id="cb7-10"><a href="#cb7-10" aria-hidden="true" tabindex="-1"></a>          <span class="cf">for</span> <span class="op">{</span></span>
<span id="cb7-11"><a href="#cb7-11" aria-hidden="true" tabindex="-1"></a>            instanceId <span class="op">&lt;-</span> item<span class="op">.</span>instanceId</span>
<span id="cb7-12"><a href="#cb7-12" aria-hidden="true" tabindex="-1"></a>          <span class="op">}</span> <span class="cf">yield</span> resultMap<span class="op">.</span><span class="fu">insert</span><span class="op">(</span><span class="fu">GetEc2Instance</span><span class="op">(</span>instanceId<span class="op">))(</span><span class="fu">Right</span><span class="op">(</span>item<span class="op">))</span></span>
<span id="cb7-13"><a href="#cb7-13" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span>
<span id="cb7-14"><a href="#cb7-14" aria-hidden="true" tabindex="-1"></a>        <span class="op">.</span><span class="fu">recordFailures</span><span class="op">(</span><span class="st">&quot;DescribeInstances&quot;</span><span class="op">,</span> requests<span class="op">)</span></span>
<span id="cb7-15"><a href="#cb7-15" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span> <span class="cf">yield</span> result</span>
<span id="cb7-16"><a href="#cb7-16" aria-hidden="true" tabindex="-1"></a>  <span class="op">}</span></span></code></pre></div>
<p>Here <code>requests</code> holds a set of <code>GetEc2Instance</code> requests to be performed in parallel. We can simply do this by taking all the <em>instance IDs</em> from these requests and performing a single <code>describeInstances</code> AWS call. The result, as I explained before, is a <code>ZStream</code> of instances. We have to construct a <code>CompletedRequestMap</code> holding one entry for each request in <code>requests</code>. To do this we <code>foldM</code> the stream, using the <code>instanceId</code> accessor function to reconstruct the request value for each item in the result stream.</p>
<p>The <code>.recordFailures</code> function is a helper extension method defined in <code>AwsDataSource</code>. It catches all errors and produces a <code>CompletedRequestMap</code> where all requested items are recorded as failures:</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> recordFailures<span class="op">[</span>A<span class="op">](</span>description<span class="op">:</span> <span class="ex">String</span><span class="op">,</span> </span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a>                      requests<span class="op">:</span> <span class="ex">Iterable</span><span class="op">[</span><span class="ex">Request</span><span class="op">[</span>AwsError<span class="op">,</span> A<span class="op">]]):</span> ZIO<span class="op">[</span>R<span class="op">,</span> Nothing<span class="op">,</span> CompletedRequestMap<span class="op">]</span> <span class="op">=</span></span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true" tabindex="-1"></a>  f<span class="op">.</span>catchAll <span class="op">{</span> error <span class="op">=&gt;</span></span>
<span id="cb8-4"><a href="#cb8-4" aria-hidden="true" tabindex="-1"></a>    log<span class="op">.</span><span class="fu">error</span><span class="op">(</span><span class="ss">s&quot;$description</span><span class="st"> failed with </span><span class="ss">$error&quot;</span><span class="op">)</span> <span class="op">*&gt;</span></span>
<span id="cb8-5"><a href="#cb8-5" aria-hidden="true" tabindex="-1"></a>      ZIO<span class="op">.</span>succeed <span class="op">{</span></span>
<span id="cb8-6"><a href="#cb8-6" aria-hidden="true" tabindex="-1"></a>        requests<span class="op">.</span><span class="fu">foldLeft</span><span class="op">(</span>CompletedRequestMap<span class="op">.</span>empty<span class="op">)</span> <span class="op">{</span> <span class="cf">case</span> <span class="op">(</span>resultMap<span class="op">,</span> req<span class="op">)</span> <span class="op">=&gt;</span></span>
<span id="cb8-7"><a href="#cb8-7" aria-hidden="true" tabindex="-1"></a>          resultMap<span class="op">.</span><span class="fu">insert</span><span class="op">(</span>req<span class="op">)(</span><span class="fu">Left</span><span class="op">(</span>error<span class="op">))</span></span>
<span id="cb8-8"><a href="#cb8-8" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span>
<span id="cb8-9"><a href="#cb8-9" aria-hidden="true" tabindex="-1"></a>      <span class="op">}</span></span>
<span id="cb8-10"><a href="#cb8-10" aria-hidden="true" tabindex="-1"></a>  <span class="op">}</span></span></code></pre></div>
<p>This is necessary because the data source requires a function of type <code>Chunk[A] =&gt; ZIO[R, Nothing, CompletedRequestMap]</code> that cannot fail.</p>
<p>With the data source defined, we can define primitive <em>queries</em> on it:</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> <span class="fu">getEc2Instance</span><span class="op">(</span>id<span class="op">:</span> InstanceId<span class="op">):</span> ZQuery<span class="op">[</span>Logging <span class="kw">with</span> Ec2<span class="op">,</span> AwsError<span class="op">,</span> Instance<span class="op">.</span>ReadOnly<span class="op">]</span> <span class="op">=</span></span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true" tabindex="-1"></a>  ZQuery<span class="op">.</span><span class="fu">fromRequest</span><span class="op">(</span><span class="fu">GetEc2Instance</span><span class="op">(</span>id<span class="op">))(</span>ec2InstancesDataSource<span class="op">)</span></span></code></pre></div>
<p>A more complex example is <code>ebEnvDataSource</code>, the data source of <em>ElasticBeanstalk environments</em>. For this resource, we have different request types:</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true" tabindex="-1"></a><span class="kw">sealed</span> <span class="kw">trait</span> EbEnvRequest<span class="op">[+</span>A<span class="op">]</span> <span class="kw">extends</span> <span class="ex">Request</span><span class="op">[</span>AwsError<span class="op">,</span> A<span class="op">]</span></span>
<span id="cb10-2"><a href="#cb10-2" aria-hidden="true" tabindex="-1"></a><span class="cf">case</span> <span class="kw">class</span> <span class="fu">GetEnvironmentByName</span><span class="op">(</span>name<span class="op">:</span> EnvironmentName<span class="op">)</span> </span>
<span id="cb10-3"><a href="#cb10-3" aria-hidden="true" tabindex="-1"></a>  <span class="kw">extends</span> EbEnvRequest<span class="op">[</span><span class="ex">Option</span><span class="op">[</span>EnvironmentDescription<span class="op">.</span>ReadOnly<span class="op">]]</span></span>
<span id="cb10-4"><a href="#cb10-4" aria-hidden="true" tabindex="-1"></a><span class="cf">case</span> <span class="kw">class</span> <span class="fu">GetEnvironmentById</span><span class="op">(</span>id<span class="op">:</span> EnvironmentId<span class="op">)</span> </span>
<span id="cb10-5"><a href="#cb10-5" aria-hidden="true" tabindex="-1"></a>  <span class="kw">extends</span> EbEnvRequest<span class="op">[</span><span class="ex">Option</span><span class="op">[</span>EnvironmentDescription<span class="op">.</span>ReadOnly<span class="op">]]</span></span>
<span id="cb10-6"><a href="#cb10-6" aria-hidden="true" tabindex="-1"></a><span class="cf">case</span> <span class="kw">class</span> <span class="fu">GetEnvironmentByApplicationName</span><span class="op">(</span>name<span class="op">:</span> ApplicationName<span class="op">)</span> </span>
<span id="cb10-7"><a href="#cb10-7" aria-hidden="true" tabindex="-1"></a>  <span class="kw">extends</span> EbEnvRequest<span class="op">[</span><span class="ex">List</span><span class="op">[</span>EnvironmentDescription<span class="op">.</span>ReadOnly<span class="op">]]</span></span></code></pre></div>
<p>In the data source implementation we get a <code>Chunk</code> of <code>EbEnvRequest</code> to be performed in parallel. We start it by separating it per request type:</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true" tabindex="-1"></a><span class="kw">val</span> byName <span class="op">=</span> requests<span class="op">.</span>collect <span class="op">{</span> <span class="cf">case</span> <span class="fu">GetEnvironmentByName</span><span class="op">(</span>name<span class="op">)</span> <span class="op">=&gt;</span> name <span class="op">}</span></span>
<span id="cb11-2"><a href="#cb11-2" aria-hidden="true" tabindex="-1"></a><span class="kw">val</span> byId <span class="op">=</span> requests<span class="op">.</span>collect <span class="op">{</span> <span class="cf">case</span> <span class="fu">GetEnvironmentById</span><span class="op">(</span>id<span class="op">)</span> <span class="op">=&gt;</span> id <span class="op">}</span></span>
<span id="cb11-3"><a href="#cb11-3" aria-hidden="true" tabindex="-1"></a><span class="kw">val</span> byAppName <span class="op">=</span> requests<span class="op">.</span>collect <span class="op">{</span> <span class="cf">case</span> <span class="fu">GetEnvironmentByApplicationName</span><span class="op">(</span>name<span class="op">)</span> <span class="op">=&gt;</span> name <span class="op">}</span></span></code></pre></div>
<p>Then for each of these collections, if not empty, we can perform a <code>describeEnvironments</code> AWS call and then fold the result stream to create partial <code>CompletedRequestMap</code> values. What is interesting here is that if we already queried an environment by either name or id or it’s application name, we already know both its identifier and name, so we can store additional items in <code>CompletedRequestMap</code> that will be cached and reused in future queries. For example this is how the query by-id gets processed:</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb12-1"><a href="#cb12-1" aria-hidden="true" tabindex="-1"></a>resultMap <span class="op">&lt;-</span> elasticbeanstalk</span>
<span id="cb12-2"><a href="#cb12-2" aria-hidden="true" tabindex="-1"></a>  <span class="op">.</span><span class="fu">describeEnvironments</span><span class="op">(</span><span class="fu">DescribeEnvironmentsRequest</span><span class="op">(</span>environmentIds <span class="op">=</span> <span class="bu">Some</span><span class="op">(</span>byId<span class="op">)))</span></span>
<span id="cb12-3"><a href="#cb12-3" aria-hidden="true" tabindex="-1"></a>  <span class="op">.</span><span class="fu">foldM</span><span class="op">(</span>initialResultMap<span class="op">)</span> <span class="op">{</span> <span class="op">(</span>resultMap<span class="op">,</span> item<span class="op">)</span> <span class="op">=&gt;</span></span>
<span id="cb12-4"><a href="#cb12-4" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span> <span class="op">{</span></span>
<span id="cb12-5"><a href="#cb12-5" aria-hidden="true" tabindex="-1"></a>      name <span class="op">&lt;-</span> item<span class="op">.</span>environmentName</span>
<span id="cb12-6"><a href="#cb12-6" aria-hidden="true" tabindex="-1"></a>      id <span class="op">&lt;-</span> item<span class="op">.</span>environmentId</span>
<span id="cb12-7"><a href="#cb12-7" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span> <span class="cf">yield</span> resultMap</span>
<span id="cb12-8"><a href="#cb12-8" aria-hidden="true" tabindex="-1"></a>        <span class="op">.</span><span class="fu">insert</span><span class="op">(</span><span class="fu">GetEnvironmentById</span><span class="op">(</span>id<span class="op">))(</span><span class="fu">Right</span><span class="op">(</span><span class="bu">Some</span><span class="op">(</span>item<span class="op">)))</span></span>
<span id="cb12-9"><a href="#cb12-9" aria-hidden="true" tabindex="-1"></a>        <span class="op">.</span><span class="fu">insert</span><span class="op">(</span><span class="fu">GetEnvironmentByName</span><span class="op">(</span>name<span class="op">))(</span><span class="fu">Right</span><span class="op">(</span><span class="bu">Some</span><span class="op">(</span>item<span class="op">)))</span></span>
<span id="cb12-10"><a href="#cb12-10" aria-hidden="true" tabindex="-1"></a>  <span class="op">}</span></span>
<span id="cb12-11"><a href="#cb12-11" aria-hidden="true" tabindex="-1"></a>  <span class="op">.</span><span class="fu">recordFailures</span><span class="op">(</span><span class="st">&quot;DescribeEnvironmentRequest(id)&quot;</span><span class="op">,</span> byId<span class="op">.</span><span class="fu">map</span><span class="op">(</span>GetEnvironmentById<span class="op">))</span></span></code></pre></div>
<p>For all three request types we describe the computation to create a partial <code>CompletedRequestMap</code> for them. Then we can implement the data source by executing these (maximum) three queries in parallel and combining the results:</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb13-1"><a href="#cb13-1" aria-hidden="true" tabindex="-1"></a>byNameResultMap</span>
<span id="cb13-2"><a href="#cb13-2" aria-hidden="true" tabindex="-1"></a>  <span class="op">.</span><span class="fu">zipWithPar</span><span class="op">(</span>byIdResultMap<span class="op">)(</span>_ <span class="op">++</span> _<span class="op">)</span></span>
<span id="cb13-3"><a href="#cb13-3" aria-hidden="true" tabindex="-1"></a>  <span class="op">.</span><span class="fu">zipWithPar</span><span class="op">(</span>byAppNameResultMap<span class="op">)(</span>_ <span class="op">++</span> _<span class="op">)</span></span></code></pre></div>
<p>There are some cases where being able to query <em>all</em> instances of a given resource is also a requirement. An example is <em>load balancers</em>, where the only way to find if an ELB contains a given <em>EC2 instance</em> is to query <em>all</em> ELBs and check their members. There are a few more cases that require a very similar implementation, so it makes sense extracting it to a common place. We define an <code>AllOrPerItem</code> trait that defines the specifics per use case:</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb14-1"><a href="#cb14-1" aria-hidden="true" tabindex="-1"></a><span class="kw">trait</span> AllOrPerItem<span class="op">[</span>R<span class="op">,</span> Req<span class="op">,</span> Item<span class="op">]</span> <span class="op">{</span></span>
<span id="cb14-2"><a href="#cb14-2" aria-hidden="true" tabindex="-1"></a>  <span class="kw">val</span> name<span class="op">:</span> <span class="ex">String</span></span>
<span id="cb14-3"><a href="#cb14-3" aria-hidden="true" tabindex="-1"></a>  <span class="kw">def</span> <span class="fu">isGetAll</span><span class="op">(</span>request<span class="op">:</span> Req<span class="op">):</span> <span class="ex">Boolean</span></span>
<span id="cb14-4"><a href="#cb14-4" aria-hidden="true" tabindex="-1"></a>  <span class="kw">def</span> <span class="fu">isPerItem</span><span class="op">(</span>request<span class="op">:</span> Req<span class="op">):</span> <span class="ex">Boolean</span></span>
<span id="cb14-5"><a href="#cb14-5" aria-hidden="true" tabindex="-1"></a>  <span class="kw">val</span> allReq<span class="op">:</span> Req</span>
<span id="cb14-6"><a href="#cb14-6" aria-hidden="true" tabindex="-1"></a>  <span class="kw">def</span> <span class="fu">itemToReq</span><span class="op">(</span>item<span class="op">:</span> Item<span class="op">):</span> ZIO<span class="op">[</span>R<span class="op">,</span> AwsError<span class="op">,</span> Req<span class="op">]</span></span>
<span id="cb14-7"><a href="#cb14-7" aria-hidden="true" tabindex="-1"></a>  <span class="kw">def</span> <span class="fu">getAll</span><span class="op">():</span> ZStream<span class="op">[</span>R<span class="op">,</span> AwsError<span class="op">,</span> Item<span class="op">]</span></span>
<span id="cb14-8"><a href="#cb14-8" aria-hidden="true" tabindex="-1"></a>  <span class="kw">def</span> <span class="fu">getSome</span><span class="op">(</span>reqs<span class="op">:</span> <span class="ex">Set</span><span class="op">[</span>Req<span class="op">]):</span> ZStream<span class="op">[</span>R<span class="op">,</span> AwsError<span class="op">,</span> Item<span class="op">]</span></span>
<span id="cb14-9"><a href="#cb14-9" aria-hidden="true" tabindex="-1"></a>  <span class="kw">def</span> <span class="fu">processAdditionalRequests</span><span class="op">(</span>requests<span class="op">:</span> Chunk<span class="op">[</span>Req<span class="op">],</span> </span>
<span id="cb14-10"><a href="#cb14-10" aria-hidden="true" tabindex="-1"></a>                                partialResult<span class="op">:</span> CompletedRequestMap<span class="op">):</span> ZIO<span class="op">[</span>R<span class="op">,</span> Nothing<span class="op">,</span> CompletedRequestMap<span class="op">]</span> <span class="op">=</span></span>
<span id="cb14-11"><a href="#cb14-11" aria-hidden="true" tabindex="-1"></a>    ZIO<span class="op">.</span><span class="fu">succeed</span><span class="op">(</span>partialResult<span class="op">)</span></span>
<span id="cb14-12"><a href="#cb14-12" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>By implementing these one-liners the actual data source implementation can be a shared code defined in <code>AllOrPerItem.make</code>. It’s very similar to the examples already seen. If any of the requests is the <em>get all request</em>, that’s the only thing to be performed, and all the result items will be cached. Otherwise a single batched request is made.</p>
<p>These primitive <code>ZQuery</code>s then can be composed to more complex queries. For example the following code:</p>
<div class="sourceCode" id="cb15"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb15-1"><a href="#cb15-1" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> <span class="op">{</span></span>
<span id="cb15-2"><a href="#cb15-2" aria-hidden="true" tabindex="-1"></a>  instance <span class="op">&lt;-</span> ec2query<span class="op">.</span><span class="fu">getEc2Instance</span><span class="op">(</span>instanceId<span class="op">)</span></span>
<span id="cb15-3"><a href="#cb15-3" aria-hidden="true" tabindex="-1"></a>  imageId <span class="op">&lt;-</span> ZQuery<span class="op">.</span><span class="fu">fromEffect</span><span class="op">(</span>instance<span class="op">.</span>imageId<span class="op">)</span></span>
<span id="cb15-4"><a href="#cb15-4" aria-hidden="true" tabindex="-1"></a>  imgElb <span class="op">&lt;-</span> <span class="op">(</span>ec2query<span class="op">.</span><span class="fu">getImage</span><span class="op">(</span>imageId<span class="op">)</span> <span class="op">&lt;&amp;&gt;</span> elbquery<span class="op">.</span><span class="fu">loadBalancerOf</span><span class="op">(</span>instanceId<span class="op">))</span></span>
<span id="cb15-5"><a href="#cb15-5" aria-hidden="true" tabindex="-1"></a>  <span class="op">(</span>image<span class="op">,</span> elb<span class="op">)</span> <span class="op">=</span> imgElb</span>
<span id="cb15-6"><a href="#cb15-6" aria-hidden="true" tabindex="-1"></a>  elbReport <span class="op">&lt;-</span> <span class="fu">optionally</span><span class="op">(</span>elb<span class="op">)(</span>getElbReport<span class="op">)</span></span>
<span id="cb15-7"><a href="#cb15-7" aria-hidden="true" tabindex="-1"></a>  result <span class="op">&lt;-</span> <span class="co">// ...</span></span>
<span id="cb15-8"><a href="#cb15-8" aria-hidden="true" tabindex="-1"></a><span class="op">}</span> <span class="cf">yield</span> result    </span></code></pre></div>
<p>This is part of the definition of a query of type <code>ZQuery[QueryEnv, AwsError, LinkedReport[Ec2InstanceKey, Ec2InstanceReport]]</code>. We will talk about <code>QueryEnv</code> and <code>LinkedReport</code> later, for now it’s enough to understand that this is a more complex query that provides an <em>EC2 instance report</em>; the data type that will be used to render the human-readable output. The query first gets an EC2 instance by <em>instance ID</em>. Then with <code>ZQuery.fromEffect</code> we lift a <code>ZIO</code> effect to the query. In this case this is a <code>zio-aws</code> <em>accessor function</em> that fails if <code>imageId</code> is <code>None</code>.</p>
<p>By this we express that we <em>expect</em> that <code>imageId</code> is always specified, and if not, we fail the <em>whole query</em>. Then we use <code>&lt;&amp;&gt;</code> (it’s alias is <code>zipPar</code>) to perform two queries <strong>in parallel</strong>: getting an EC2 image and finding the load balancer containing the instance. Once both queries are finished, we optionally generate a <em>load balancer report</em> (if we have found an ELB link) and then we construct the result.</p>
<p>Here <code>optionally</code> is a simple helper function that makes our query more readable. It could have been written as <code>elb.fold(ZQuery.none)(getElbReport)</code>.</p>
<p>Another useful combinator on <code>ZQuery</code> is <code>collectAllPar</code> that runs a subquery on each item of a collection in parallel:</p>
<div class="sourceCode" id="cb16"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb16-1"><a href="#cb16-1" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> <span class="op">{</span></span>
<span id="cb16-2"><a href="#cb16-2" aria-hidden="true" tabindex="-1"></a>  elbNames <span class="op">&lt;-</span> ZQuery<span class="op">.</span><span class="fu">fromEffect</span><span class="op">(</span>asg<span class="op">.</span>loadBalancerNames<span class="op">)</span></span>
<span id="cb16-3"><a href="#cb16-3" aria-hidden="true" tabindex="-1"></a>  result <span class="op">&lt;-</span> ZQuery<span class="op">.</span><span class="fu">collectAllPar</span><span class="op">(</span>elbNames<span class="op">.</span><span class="fu">map</span><span class="op">(</span>name <span class="op">=&gt;</span> elbquery<span class="op">.</span><span class="fu">getLoadBalancer</span><span class="op">(</span>name<span class="op">)</span> <span class="op">&gt;&gt;=</span> getElbReport<span class="op">))</span></span>
<span id="cb16-4"><a href="#cb16-4" aria-hidden="true" tabindex="-1"></a><span class="op">}</span> <span class="cf">yield</span> result</span></code></pre></div>
<p>As I mentioned earlier, we have no way to know what resource we are looking for (in fact we could for example detect EC2 <em>instance IDs</em> by a pattern but let’s ignore that for now). So on top level we simply start _all the possible queries <strong>at once</strong> and let print all the non-failing ones:</p>
<div class="sourceCode" id="cb17"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb17-1"><a href="#cb17-1" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> <span class="op">{</span></span>
<span id="cb17-2"><a href="#cb17-2" aria-hidden="true" tabindex="-1"></a>  renderers <span class="op">&lt;-</span> ZQuery<span class="op">.</span><span class="fu">collectAllPar</span><span class="op">(</span>possibleQueries<span class="op">).</span>run</span>
<span id="cb17-3"><a href="#cb17-3" aria-hidden="true" tabindex="-1"></a>  _ <span class="op">&lt;-</span> ZIO<span class="op">.</span><span class="fu">foreach_</span><span class="op">(</span>renderers<span class="op">.</span>flatten<span class="op">)(</span>identity<span class="op">)</span></span>
<span id="cb17-4"><a href="#cb17-4" aria-hidden="true" tabindex="-1"></a><span class="op">}</span> <span class="cf">yield</span> <span class="op">()</span></span></code></pre></div>
<p>Where <code>possibleQueries</code> is a where we list all the queries we want to support, tied to the <em>renderer</em> to show it on the console.</p>
<h2 id="report-cache">Report cache</h2>
<p><em>ZIO Query</em> solves caching and optimizes the requests on the AWS resource level, but we still have a problem. The queries form a cyclic graph. For example an <em>EC2 instance</em> holds a link to its <em>load balancer</em>, that holds a link to the <em>EB environment</em> it is defined in. The environment refers back to the ELB, and it also links to the <em>EB app</em> and the application has again links to all the <em>environments</em> it contains.</p>
<p>We want to collect all these resources exactly once, and there is a chance that parallel queries reach to the same resource. To solve this we can add an extra <em>caching layer</em> on top of <em>ZIO Query</em>. Let’s define this caching layer as a ZIO <em>module</em>:</p>
<div class="sourceCode" id="cb18"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb18-1"><a href="#cb18-1" aria-hidden="true" tabindex="-1"></a><span class="kw">object</span> ReportCache <span class="op">{</span></span>
<span id="cb18-2"><a href="#cb18-2" aria-hidden="true" tabindex="-1"></a>  <span class="kw">trait</span> <span class="ex">Service</span> <span class="op">{</span></span>
<span id="cb18-3"><a href="#cb18-3" aria-hidden="true" tabindex="-1"></a>    <span class="kw">def</span> storeIfNew<span class="op">[</span>A <span class="op">&lt;:</span> Report<span class="op">](</span>reportKey<span class="op">:</span> ReportKey<span class="op">,</span> </span>
<span id="cb18-4"><a href="#cb18-4" aria-hidden="true" tabindex="-1"></a>                                query<span class="op">:</span> ZQuery<span class="op">[</span><span class="ex">Any</span><span class="op">,</span> AwsError<span class="op">,</span> A<span class="op">]):</span> ZQuery<span class="op">[</span><span class="ex">Any</span><span class="op">,</span> AwsError<span class="op">,</span> <span class="ex">Boolean</span><span class="op">]</span></span>
<span id="cb18-5"><a href="#cb18-5" aria-hidden="true" tabindex="-1"></a>    <span class="kw">def</span> retrieve<span class="op">[</span>A <span class="op">&lt;:</span> Report<span class="op">](</span>key<span class="op">:</span> ReportKey<span class="op">):</span> ZIO<span class="op">[</span><span class="ex">Any</span><span class="op">,</span> AwsError<span class="op">,</span> <span class="ex">Option</span><span class="op">[</span>A<span class="op">]]</span></span>
<span id="cb18-6"><a href="#cb18-6" aria-hidden="true" tabindex="-1"></a>  <span class="op">}</span></span>
<span id="cb18-7"><a href="#cb18-7" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>The <code>storeIfNew</code> function is a <em>query</em>, to be used in high level queries to shortcut cycles in case a given report is already stored in the cache. We can define a helper function <code>cached</code> like the following:</p>
<div class="sourceCode" id="cb19"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb19-1"><a href="#cb19-1" aria-hidden="true" tabindex="-1"></a><span class="kw">protected</span> <span class="kw">def</span> cached<span class="op">[</span>R <span class="op">&lt;:</span> ReportCache <span class="kw">with</span> Logging<span class="op">,</span> A<span class="op">,</span> B <span class="op">&lt;:</span> Report<span class="op">,</span> K <span class="op">&lt;:</span> ReportKey<span class="op">]</span></span>
<span id="cb19-2"><a href="#cb19-2" aria-hidden="true" tabindex="-1"></a>  <span class="op">(</span>input<span class="op">:</span> A<span class="op">)</span></span>
<span id="cb19-3"><a href="#cb19-3" aria-hidden="true" tabindex="-1"></a>  <span class="op">(</span>keyFn<span class="op">:</span> A <span class="op">=&gt;</span> ZIO<span class="op">[</span><span class="ex">Any</span><span class="op">,</span> AwsError<span class="op">,</span> K<span class="op">])</span></span>
<span id="cb19-4"><a href="#cb19-4" aria-hidden="true" tabindex="-1"></a>  <span class="op">(</span>query<span class="op">:</span> K <span class="op">=&gt;</span> ZQuery<span class="op">[</span>R<span class="op">,</span> AwsError<span class="op">,</span> B<span class="op">]):</span> ZQuery<span class="op">[</span>R<span class="op">,</span> AwsError<span class="op">,</span> LinkedReport<span class="op">[</span>K<span class="op">,</span> B<span class="op">]]</span> <span class="op">=</span></span>
<span id="cb19-5"><a href="#cb19-5" aria-hidden="true" tabindex="-1"></a>  <span class="cf">for</span> <span class="op">{</span></span>
<span id="cb19-6"><a href="#cb19-6" aria-hidden="true" tabindex="-1"></a>    key <span class="op">&lt;-</span> ZQuery<span class="op">.</span><span class="fu">fromEffect</span><span class="op">(</span><span class="fu">keyFn</span><span class="op">(</span>input<span class="op">))</span></span>
<span id="cb19-7"><a href="#cb19-7" aria-hidden="true" tabindex="-1"></a>    env <span class="op">&lt;-</span> ZQuery<span class="op">.</span>environment<span class="op">[</span>R<span class="op">]</span></span>
<span id="cb19-8"><a href="#cb19-8" aria-hidden="true" tabindex="-1"></a>    _ <span class="op">&lt;-</span> <span class="fu">storeIfNew</span><span class="op">(</span></span>
<span id="cb19-9"><a href="#cb19-9" aria-hidden="true" tabindex="-1"></a>      key<span class="op">,</span></span>
<span id="cb19-10"><a href="#cb19-10" aria-hidden="true" tabindex="-1"></a>      <span class="fu">query</span><span class="op">(</span>key<span class="op">).</span><span class="fu">provide</span><span class="op">(</span>env <span class="op">?</span> <span class="st">&quot;provided environment&quot;</span><span class="op">)</span></span>
<span id="cb19-11"><a href="#cb19-11" aria-hidden="true" tabindex="-1"></a>    <span class="op">)</span></span>
<span id="cb19-12"><a href="#cb19-12" aria-hidden="true" tabindex="-1"></a>  <span class="op">}</span> <span class="cf">yield</span> LinkedReport<span class="op">[</span>K<span class="op">,</span> B<span class="op">](</span>key<span class="op">)</span></span></code></pre></div>
<p>Then we can use it in queries like this:</p>
<div class="sourceCode" id="cb20"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb20-1"><a href="#cb20-1" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> <span class="fu">getEbAppReport</span><span class="op">(</span>name<span class="op">:</span> ApplicationName<span class="op">):</span> ZQuery<span class="op">[</span>QueryEnv<span class="op">,</span> AwsError<span class="op">,</span> LinkedReport<span class="op">[</span>EbAppKey<span class="op">,</span> EbAppReport<span class="op">]]</span> <span class="op">=</span></span>
<span id="cb20-2"><a href="#cb20-2" aria-hidden="true" tabindex="-1"></a>  <span class="fu">cached</span><span class="op">(</span>name<span class="op">)(</span>name <span class="op">=&gt;</span> ZIO<span class="op">.</span><span class="fu">succeed</span><span class="op">(</span><span class="fu">EbAppKey</span><span class="op">(</span>name<span class="op">)))</span> <span class="op">{</span> <span class="op">(</span>key<span class="op">:</span> EbAppKey<span class="op">)</span> <span class="op">=&gt;</span></span>
<span id="cb20-3"><a href="#cb20-3" aria-hidden="true" tabindex="-1"></a>     <span class="co">// ...</span></span>
<span id="cb20-4"><a href="#cb20-4" aria-hidden="true" tabindex="-1"></a>  <span class="op">}</span></span></code></pre></div>
<p>Let’s see in detail how this works!</p>
<p>First of all, we define the following types:</p>
<div class="sourceCode" id="cb21"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb21-1"><a href="#cb21-1" aria-hidden="true" tabindex="-1"></a><span class="kw">final</span> <span class="cf">case</span> <span class="kw">class</span> LinkedReport<span class="op">[+</span>K <span class="op">&lt;:</span> ReportKey<span class="op">,</span> <span class="op">+</span>R <span class="op">&lt;:</span> Report<span class="op">](</span>key<span class="op">:</span> K<span class="op">)</span></span>
<span id="cb21-2"><a href="#cb21-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb21-3"><a href="#cb21-3" aria-hidden="true" tabindex="-1"></a><span class="kw">sealed</span> <span class="kw">trait</span> ReportKey</span>
<span id="cb21-4"><a href="#cb21-4" aria-hidden="true" tabindex="-1"></a><span class="kw">final</span> <span class="cf">case</span> <span class="kw">class</span> <span class="fu">Ec2InstanceKey</span><span class="op">(</span>instanceId<span class="op">:</span> InstanceId<span class="op">)</span> <span class="kw">extends</span> ReportKey</span>
<span id="cb21-5"><a href="#cb21-5" aria-hidden="true" tabindex="-1"></a><span class="co">// ...</span></span>
<span id="cb21-6"><a href="#cb21-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb21-7"><a href="#cb21-7" aria-hidden="true" tabindex="-1"></a><span class="kw">sealed</span> <span class="kw">trait</span> Report</span>
<span id="cb21-8"><a href="#cb21-8" aria-hidden="true" tabindex="-1"></a><span class="kw">final</span> <span class="cf">case</span> <span class="kw">class</span> <span class="fu">Ec2InstanceReport</span><span class="op">(</span>instanceId<span class="op">:</span> ec2<span class="op">.</span>model<span class="op">.</span>primitives<span class="op">.</span>InstanceId<span class="op">,</span></span>
<span id="cb21-9"><a href="#cb21-9" aria-hidden="true" tabindex="-1"></a>                                   <span class="co">// ...</span></span>
<span id="cb21-10"><a href="#cb21-10" aria-hidden="true" tabindex="-1"></a>                                   elb<span class="op">:</span> <span class="ex">Option</span><span class="op">[</span>LinkedReport<span class="op">[</span>ElbKey<span class="op">,</span> ElbReport<span class="op">]]</span></span>
<span id="cb21-11"><a href="#cb21-11" aria-hidden="true" tabindex="-1"></a>                                  <span class="op">)</span> <span class="kw">extends</span> Report</span></code></pre></div>
<p>In <code>cached</code>, we provide a <code>keyFn</code> that is an effectful function to extract the <code>ReportKey</code> from the arbitrary input that can be the key itself, or an already fetched resource. Then we call the <code>ReportCache</code> module’s <code>storeIfNew</code> query and return a <code>LinkedReport</code>. A <em>linked report</em> is just a wrapper around a report key, it is the type to be used in <code>Report</code> types to refer to each other. We store the cyclic resource graph by using these report keys and the cache’s <code>retrieve</code> function to resolve the references on demand.</p>
<p>One thing to notice is the <code>.provide</code> in the code of <code>cached</code>. The report cache does not know about the environments needed for the queries it caches the results of; the <code>query</code> parameter of <code>storeIfNew</code> has the type <code>ZQuery[Any, AwsError, A]</code>. For this reason <code>cached</code> eliminates the environment of its inner query by getting it and calling <code>.provide(env)</code> before passing it to the cache.</p>
<p>The report cache itself can be implemented with <a href="https://zio.dev/docs/datatypes/datatypes_stm"><em>STM</em></a>. First we create a <a href="https://zio.dev/docs/datatypes/datatypes_tmap"><code>TMap</code></a>:</p>
<div class="sourceCode" id="cb22"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb22-1"><a href="#cb22-1" aria-hidden="true" tabindex="-1"></a>cache <span class="op">&lt;-</span> TMap<span class="op">.</span>empty<span class="op">[</span>ReportKey<span class="op">,</span> Promise<span class="op">[</span>AwsError<span class="op">,</span> Report<span class="op">]].</span>commit</span></code></pre></div>
<p>We want to store the fact that a query <em>has been started</em> for a given report key. This can be modelled with a <code>Promise</code> that eventually gets a <code>Report</code> value. With this <code>TMap</code> structure, the <code>storeIfNew</code> function can be defined as:</p>
<div class="sourceCode" id="cb23"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb23-1"><a href="#cb23-1" aria-hidden="true" tabindex="-1"></a><span class="kw">override</span> <span class="kw">def</span> storeIfNew<span class="op">[</span>A <span class="op">&lt;:</span> Report<span class="op">](</span>reportKey<span class="op">:</span> ReportKey<span class="op">,</span> </span>
<span id="cb23-2"><a href="#cb23-2" aria-hidden="true" tabindex="-1"></a>                                     query<span class="op">:</span> ZQuery<span class="op">[</span><span class="ex">Any</span><span class="op">,</span> AwsError<span class="op">,</span> A<span class="op">]):</span> ZQuery<span class="op">[</span><span class="ex">Any</span><span class="op">,</span> AwsError<span class="op">,</span> <span class="ex">Boolean</span><span class="op">]</span> <span class="op">=</span></span>
<span id="cb23-3"><a href="#cb23-3" aria-hidden="true" tabindex="-1"></a>  ZQuery<span class="op">.</span>fromEffect <span class="op">{</span></span>
<span id="cb23-4"><a href="#cb23-4" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span> <span class="op">{</span></span>
<span id="cb23-5"><a href="#cb23-5" aria-hidden="true" tabindex="-1"></a>      promise <span class="op">&lt;-</span> Promise<span class="op">.</span>make<span class="op">[</span>AwsError<span class="op">,</span> Report<span class="op">]</span></span>
<span id="cb23-6"><a href="#cb23-6" aria-hidden="true" tabindex="-1"></a>      finalQuery <span class="op">&lt;-</span> cache<span class="op">.</span><span class="fu">get</span><span class="op">(</span>reportKey<span class="op">).</span>flatMap <span class="op">{</span></span>
<span id="cb23-7"><a href="#cb23-7" aria-hidden="true" tabindex="-1"></a>        <span class="cf">case</span> <span class="bu">Some</span><span class="op">(</span>report<span class="op">)</span> <span class="op">=&gt;</span></span>
<span id="cb23-8"><a href="#cb23-8" aria-hidden="true" tabindex="-1"></a>          <span class="co">// replacing the query with the cached value</span></span>
<span id="cb23-9"><a href="#cb23-9" aria-hidden="true" tabindex="-1"></a>          ZSTM<span class="op">.</span><span class="fu">succeed</span><span class="op">(</span>ZQuery<span class="op">.</span><span class="fu">succeed</span><span class="op">(</span><span class="kw">false</span><span class="op">))</span></span>
<span id="cb23-10"><a href="#cb23-10" aria-hidden="true" tabindex="-1"></a>        <span class="cf">case</span> <span class="bu">None</span> <span class="op">=&gt;</span></span>
<span id="cb23-11"><a href="#cb23-11" aria-hidden="true" tabindex="-1"></a>          <span class="co">// replacing the query with the cached value</span></span>
<span id="cb23-12"><a href="#cb23-12" aria-hidden="true" tabindex="-1"></a>          cache<span class="op">.</span><span class="fu">put</span><span class="op">(</span>reportKey<span class="op">,</span> promise<span class="op">).</span>map <span class="op">{</span> _ <span class="op">=&gt;</span></span>
<span id="cb23-13"><a href="#cb23-13" aria-hidden="true" tabindex="-1"></a>            query<span class="op">.</span><span class="fu">foldM</span><span class="op">(</span></span>
<span id="cb23-14"><a href="#cb23-14" aria-hidden="true" tabindex="-1"></a>              failure <span class="op">=&gt;</span> ZQuery<span class="op">.</span><span class="fu">fromEffect</span><span class="op">(</span>promise<span class="op">.</span><span class="fu">fail</span><span class="op">(</span>failure<span class="op">))</span> <span class="op">*&gt;</span> ZQuery<span class="op">.</span><span class="fu">fail</span><span class="op">(</span>failure<span class="op">),</span></span>
<span id="cb23-15"><a href="#cb23-15" aria-hidden="true" tabindex="-1"></a>              success <span class="op">=&gt;</span> ZQuery<span class="op">.</span><span class="fu">fromEffect</span><span class="op">(</span>promise<span class="op">.</span><span class="fu">succeed</span><span class="op">(</span>success<span class="op">))</span></span>
<span id="cb23-16"><a href="#cb23-16" aria-hidden="true" tabindex="-1"></a>            <span class="op">)</span></span>
<span id="cb23-17"><a href="#cb23-17" aria-hidden="true" tabindex="-1"></a>          <span class="op">}</span></span>
<span id="cb23-18"><a href="#cb23-18" aria-hidden="true" tabindex="-1"></a>      <span class="op">}.</span>commit</span>
<span id="cb23-19"><a href="#cb23-19" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span> <span class="cf">yield</span> finalQuery</span>
<span id="cb23-20"><a href="#cb23-20" aria-hidden="true" tabindex="-1"></a>  <span class="op">}.</span><span class="fu">flatMap</span><span class="op">(</span>identity<span class="op">)</span></span></code></pre></div>
<p>This may seem simple but actually we are combining three different layers of abstraction here!</p>
<ul>
<li>The whole thing is a <em>query</em>. But we first run a <em>ZIO effect</em> that <strong>produces</strong> a query, and then execute that result query (in <code>.flatMap(identity)</code>)</li>
<li>In the effect we create a promise that might be used or not, depending on the outcome of the transaction. Then we do <code>cache.get</code> which is an <em>STM transaction</em>.</li>
<li>In the transaction we produce a <code>ZQuery</code> value that is either returning a simple <code>false</code> value if the report was already cached, or we store the already created promise in the map and return the query that constructs the report as the <em>result</em> of the transaction.</li>
<li>As it is an <em>STM transaction</em> it may be retried multiple times but eventually it returns with a query that is either a NOP or calculates the <em>report</em> <strong>and</strong> sets the promise in the end.</li>
</ul>
<p>The other function of <code>ReportCache</code>, <code>retrieve</code> will be used when traversing the gathered <em>reports</em> to follow the <code>LinkedReport</code> links. It is simply a combination of getting an item from the <code>TMap</code> and then waiting for the stored promise.</p>
<h2 id="throttling">Throttling</h2>
<p>The original implementation of this tool did not control the amount and rate of AWS requests in any way, and a few years ago API rate limits made it somewhat unusable. As I explained <a href="https://vigoo.github.io/posts/2018-09-21-aws-rate-limits-prezidig.html">in a previous post</a>, I solved it by centralizing the calls to AWS then adding <em>circuit breaking and retry</em> to handle the <em>throttling errors</em>.</p>
<p>In this new implementation <em>ZIO Query</em> ’s batching feature already reduces the load but AWS has a global rate limit that can be reached any time, regardless of the actual request rate provided by this application. So how could we handle this with <code>zio-aws</code> and ZIO Query?</p>
<p>There is useful ZIO library called <a href="https://www.vroste.nl/rezilience/">rezilience</a> that defines utilities to express circuit breaking, retries, rate limiting and other similar policies. With this library we can create a policy that detects <code>AwsError</code>s representing throttling failures:</p>
<div class="sourceCode" id="cb24"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb24-1"><a href="#cb24-1" aria-hidden="true" tabindex="-1"></a><span class="kw">private</span> <span class="kw">def</span> throttlingPolicy<span class="op">:</span> ZManaged<span class="op">[</span><span class="ex">Random</span> <span class="kw">with</span> Clock <span class="kw">with</span> Logging<span class="op">,</span> Nothing<span class="op">,</span> <span class="ex">Policy</span><span class="op">[</span>AwsError<span class="op">]]</span> <span class="op">=</span></span>
<span id="cb24-2"><a href="#cb24-2" aria-hidden="true" tabindex="-1"></a>  <span class="cf">for</span> <span class="op">{</span></span>
<span id="cb24-3"><a href="#cb24-3" aria-hidden="true" tabindex="-1"></a>    cb <span class="op">&lt;-</span> CircuitBreaker<span class="op">.</span>make<span class="op">[</span>AwsError<span class="op">](</span></span>
<span id="cb24-4"><a href="#cb24-4" aria-hidden="true" tabindex="-1"></a>      trippingStrategy <span class="op">=</span> TrippingStrategy<span class="op">.</span><span class="fu">failureCount</span><span class="op">(</span><span class="dv">1</span><span class="op">),</span></span>
<span id="cb24-5"><a href="#cb24-5" aria-hidden="true" tabindex="-1"></a>      resetPolicy <span class="op">=</span> Retry<span class="op">.</span>Schedules<span class="op">.</span><span class="fu">exponentialBackoff</span><span class="op">(</span>min <span class="op">=</span> <span class="fl">1.</span>second<span class="op">,</span> max <span class="op">=</span> <span class="fl">1.</span>minute<span class="op">),</span></span>
<span id="cb24-6"><a href="#cb24-6" aria-hidden="true" tabindex="-1"></a>      isFailure <span class="op">=</span> <span class="op">{</span></span>
<span id="cb24-7"><a href="#cb24-7" aria-hidden="true" tabindex="-1"></a>        <span class="cf">case</span> <span class="fu">GenericAwsError</span><span class="op">(</span>error<span class="op">:</span> AwsServiceException<span class="op">)</span> <span class="cf">if</span> error<span class="op">.</span>isThrottlingException <span class="op">=&gt;</span> <span class="kw">true</span></span>
<span id="cb24-8"><a href="#cb24-8" aria-hidden="true" tabindex="-1"></a>      <span class="op">}</span></span>
<span id="cb24-9"><a href="#cb24-9" aria-hidden="true" tabindex="-1"></a>    <span class="op">)</span></span>
<span id="cb24-10"><a href="#cb24-10" aria-hidden="true" tabindex="-1"></a>    retry <span class="op">&lt;-</span> Retry<span class="op">.</span><span class="fu">make</span><span class="op">(</span>min <span class="op">=</span> <span class="fl">1.</span>second<span class="op">,</span> max <span class="op">=</span> <span class="fl">1.</span>minute<span class="op">)</span></span>
<span id="cb24-11"><a href="#cb24-11" aria-hidden="true" tabindex="-1"></a>    retryComposable <span class="op">=</span> retry<span class="op">.</span>widen<span class="op">[</span><span class="ex">PolicyError</span><span class="op">[</span>AwsError<span class="op">]]</span> <span class="op">{</span> <span class="cf">case</span> <span class="ex">Policy</span><span class="op">.</span><span class="fu">WrappedError</span><span class="op">(</span>e<span class="op">)</span> <span class="op">=&gt;</span> e <span class="op">}</span></span>
<span id="cb24-12"><a href="#cb24-12" aria-hidden="true" tabindex="-1"></a>  <span class="op">}</span> <span class="cf">yield</span> cb<span class="op">.</span>toPolicy compose retryComposable<span class="op">.</span>toPolicy</span></code></pre></div>
<p>This will open a circuit breaker in case of throttling errors, and retry the operation with exponential back-off.</p>
<p>These policies can be applied to <code>ZIO</code> effects. What we really need is to apply a policy like this to <em>all</em> AWS call. It should be the actual call to the underlying <em>AWS Java SDK</em>, not on the <code>zio-aws</code> wrapper level, because for example a streaming API function may produce multiple AWS requests.</p>
<p>The <code>zio-aws</code> library supports applying <code>AwsCallAspect</code>s on the <em>AWS service client layers</em> to modify the underlying SDK calls. This is exactly what we need to apply the throttling policy to all calls! What’s even better, by creating a single <code>throttlingPolicy</code> and applying it to all the service layers (<code>ec2</code>, <code>elasticloadbalancing</code>, <code>elasticbeanstalk</code> and <code>autoscaling</code>) they will share a common circuit breaker that matches the situation perfectly as the AWS API rate limiting is applied to globally to all services.</p>
<p>An AWS call aspect has the following form:</p>
<div class="sourceCode" id="cb25"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb25-1"><a href="#cb25-1" aria-hidden="true" tabindex="-1"></a><span class="kw">val</span> throttling <span class="op">=</span> <span class="kw">new</span> AwsCallAspect<span class="op">[</span><span class="ex">Any</span><span class="op">]</span> <span class="op">{</span></span>
<span id="cb25-2"><a href="#cb25-2" aria-hidden="true" tabindex="-1"></a>  <span class="kw">override</span> <span class="kw">def</span> apply<span class="op">[</span>R1<span class="op">,</span> A<span class="op">](</span>f<span class="op">:</span> ZIO<span class="op">[</span>R1<span class="op">,</span> AwsError<span class="op">,</span> Described<span class="op">[</span>A<span class="op">]]):</span> ZIO<span class="op">[</span>R1<span class="op">,</span> AwsError<span class="op">,</span> aspects<span class="op">.</span>Described<span class="op">[</span>A<span class="op">]]</span> <span class="op">=</span></span>
<span id="cb25-3"><a href="#cb25-3" aria-hidden="true" tabindex="-1"></a>    <span class="fu">policy</span><span class="op">(</span>f<span class="op">).</span>mapError <span class="op">{</span></span>
<span id="cb25-4"><a href="#cb25-4" aria-hidden="true" tabindex="-1"></a>      <span class="cf">case</span> <span class="ex">Policy</span><span class="op">.</span><span class="fu">WrappedError</span><span class="op">(</span>e<span class="op">)</span> <span class="op">=&gt;</span> e</span>
<span id="cb25-5"><a href="#cb25-5" aria-hidden="true" tabindex="-1"></a>      <span class="cf">case</span> <span class="ex">Policy</span><span class="op">.</span>BulkheadRejection <span class="op">=&gt;</span> AwsError<span class="op">.</span><span class="fu">fromThrowable</span><span class="op">(</span><span class="kw">new</span> <span class="ex">RuntimeException</span><span class="op">(</span><span class="ss">s&quot;</span><span class="st">Bulkhead rejection</span><span class="ss">&quot;</span><span class="op">))</span></span>
<span id="cb25-6"><a href="#cb25-6" aria-hidden="true" tabindex="-1"></a>      <span class="cf">case</span> <span class="ex">Policy</span><span class="op">.</span>CircuitBreakerOpen <span class="op">=&gt;</span> AwsError<span class="op">.</span><span class="fu">fromThrowable</span><span class="op">(</span><span class="kw">new</span> <span class="ex">RuntimeException</span><span class="op">(</span><span class="ss">s&quot;</span><span class="st">AWS rate limit exceeded</span><span class="ss">&quot;</span><span class="op">))</span></span>
<span id="cb25-7"><a href="#cb25-7" aria-hidden="true" tabindex="-1"></a>      <span class="op">}</span></span>
<span id="cb25-8"><a href="#cb25-8" aria-hidden="true" tabindex="-1"></a>  <span class="op">}</span></span></code></pre></div>
<p>Another simple example could be logging all AWS requests:</p>
<div class="sourceCode" id="cb26"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb26-1"><a href="#cb26-1" aria-hidden="true" tabindex="-1"></a><span class="kw">val</span> callLogging<span class="op">:</span> AwsCallAspect<span class="op">[</span>Logging<span class="op">]</span> <span class="op">=</span></span>
<span id="cb26-2"><a href="#cb26-2" aria-hidden="true" tabindex="-1"></a>  <span class="kw">new</span> AwsCallAspect<span class="op">[</span>Logging<span class="op">]</span> <span class="op">{</span></span>
<span id="cb26-3"><a href="#cb26-3" aria-hidden="true" tabindex="-1"></a>   <span class="kw">override</span> <span class="kw">final</span> <span class="kw">def</span> apply<span class="op">[</span>R1 <span class="op">&lt;:</span> Logging<span class="op">,</span> A<span class="op">](</span>f<span class="op">:</span> ZIO<span class="op">[</span>R1<span class="op">,</span> AwsError<span class="op">,</span> Described<span class="op">[</span>A<span class="op">]]):</span> ZIO<span class="op">[</span>R1<span class="op">,</span> AwsError<span class="op">,</span> Described<span class="op">[</span>A<span class="op">]]</span> <span class="op">=</span></span>
<span id="cb26-4"><a href="#cb26-4" aria-hidden="true" tabindex="-1"></a>     f<span class="op">.</span>flatMap <span class="op">{</span> <span class="cf">case</span> r@<span class="fu">Described</span><span class="op">(</span>_<span class="op">,</span> description<span class="op">)</span> <span class="op">=&gt;</span></span>
<span id="cb26-5"><a href="#cb26-5" aria-hidden="true" tabindex="-1"></a>       log<span class="op">.</span><span class="fu">info</span><span class="op">(</span><span class="ss">s&quot;</span><span class="st">[</span><span class="ss">${</span>description<span class="op">.</span>service<span class="ss">}</span><span class="st">/</span><span class="ss">${</span>description<span class="op">.</span>operation<span class="ss">}</span><span class="st">]</span><span class="ss">&quot;</span><span class="op">).</span><span class="fu">as</span><span class="op">(</span>r<span class="op">)</span></span>
<span id="cb26-6"><a href="#cb26-6" aria-hidden="true" tabindex="-1"></a>     <span class="op">}</span></span>
<span id="cb26-7"><a href="#cb26-7" aria-hidden="true" tabindex="-1"></a> <span class="op">}</span></span></code></pre></div>
<p>These aspects can be applied to a <code>zio-aws</code> <code>ZLayer</code> directly, such as:</p>
<div class="sourceCode" id="cb27"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb27-1"><a href="#cb27-1" aria-hidden="true" tabindex="-1"></a>ec2<span class="op">.</span>live @@ <span class="op">(</span>throttling <span class="op">&gt;&gt;&gt;</span> callLogging<span class="op">)</span></span></code></pre></div>
<h2 id="rendering">Rendering</h2>
<p>With the queries and report cache ready the last missing building block is <em>rendering</em> the gathered reports. We implement it in its own ZIO module with the following interface:</p>
<div class="sourceCode" id="cb28"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb28-1"><a href="#cb28-1" aria-hidden="true" tabindex="-1"></a><span class="kw">object</span> Rendering <span class="op">{</span></span>
<span id="cb28-2"><a href="#cb28-2" aria-hidden="true" tabindex="-1"></a>  <span class="kw">trait</span> <span class="ex">Service</span> <span class="op">{</span></span>
<span id="cb28-3"><a href="#cb28-3" aria-hidden="true" tabindex="-1"></a>    <span class="kw">def</span> <span class="fu">renderEc2Instance</span><span class="op">(</span>report<span class="op">:</span> LinkedReport<span class="op">[</span>Ec2InstanceKey<span class="op">,</span> Ec2InstanceReport<span class="op">]):</span> UIO<span class="op">[</span><span class="bu">Unit</span><span class="op">]</span></span>
<span id="cb28-4"><a href="#cb28-4" aria-hidden="true" tabindex="-1"></a>    <span class="kw">def</span> <span class="fu">renderElb</span><span class="op">(</span>report<span class="op">:</span> LinkedReport<span class="op">[</span>ElbKey<span class="op">,</span> ElbReport<span class="op">],</span> context<span class="op">:</span> <span class="ex">Option</span><span class="op">[</span><span class="ex">String</span><span class="op">]):</span> UIO<span class="op">[</span><span class="bu">Unit</span><span class="op">]</span></span>
<span id="cb28-5"><a href="#cb28-5" aria-hidden="true" tabindex="-1"></a>    <span class="kw">def</span> <span class="fu">renderAsg</span><span class="op">(</span>report<span class="op">:</span> LinkedReport<span class="op">[</span>AsgKey<span class="op">,</span> AsgReport<span class="op">]):</span> UIO<span class="op">[</span><span class="bu">Unit</span><span class="op">]</span></span>
<span id="cb28-6"><a href="#cb28-6" aria-hidden="true" tabindex="-1"></a>    <span class="kw">def</span> <span class="fu">renderEbEnv</span><span class="op">(</span>report<span class="op">:</span> LinkedReport<span class="op">[</span>EbEnvKey<span class="op">,</span> EbEnvReport<span class="op">]):</span> UIO<span class="op">[</span><span class="bu">Unit</span><span class="op">]</span></span>
<span id="cb28-7"><a href="#cb28-7" aria-hidden="true" tabindex="-1"></a>    <span class="kw">def</span> <span class="fu">renderEbApp</span><span class="op">(</span>report<span class="op">:</span> LinkedReport<span class="op">[</span>EbAppKey<span class="op">,</span> EbAppReport<span class="op">]):</span> UIO<span class="op">[</span><span class="bu">Unit</span><span class="op">]</span></span>
<span id="cb28-8"><a href="#cb28-8" aria-hidden="true" tabindex="-1"></a>  <span class="op">}</span></span>
<span id="cb28-9"><a href="#cb28-9" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>The live implementation of course needs access to <code>ReportCache</code> and writes the report out to <code>Console</code>:</p>
<div class="sourceCode" id="cb29"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb29-1"><a href="#cb29-1" aria-hidden="true" tabindex="-1"></a><span class="kw">val</span> live<span class="op">:</span> ZLayer<span class="op">[</span><span class="ex">Console</span> <span class="kw">with</span> ReportCache<span class="op">,</span> Nothing<span class="op">,</span> Rendering<span class="op">]</span> <span class="op">=</span> <span class="co">// ...</span></span></code></pre></div>
<p>We need two main things to implement report rendering:</p>
<ul>
<li>A way to pretty-print reports to the console</li>
<li>We have to track which report was already rendered to be able to traverse the cyclic result graph</li>
</ul>
<p>To track the already printed reports we can simply create a <code>Ref</code> holding a set of visited <code>ReportKey</code>s:</p>
<div class="sourceCode" id="cb30"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb30-1"><a href="#cb30-1" aria-hidden="true" tabindex="-1"></a><span class="kw">private</span> <span class="cf">case</span> <span class="kw">class</span> <span class="ex">State</span><span class="op">(</span>alreadyVisited<span class="op">:</span> <span class="ex">Set</span><span class="op">[</span>ReportKey<span class="op">])</span></span>
<span id="cb30-2"><a href="#cb30-2" aria-hidden="true" tabindex="-1"></a><span class="co">// ...</span></span>
<span id="cb30-3"><a href="#cb30-3" aria-hidden="true" tabindex="-1"></a>alreadyVisited <span class="op">&lt;-</span> <span class="ex">Ref</span><span class="op">.</span><span class="fu">make</span><span class="op">(</span><span class="ex">State</span><span class="op">(</span><span class="ex">Set</span><span class="op">.</span>empty<span class="op">))</span></span></code></pre></div>
<p>For pretty printing the reports there are several possibilities. Eventually we want to call <code>console.putStr</code> to write to the console. The original implementation of this tool used a string templating engine to define the output. Instead of doing that we can write a pretty-printing DSL to define our output in Scala. Take a look at the following example:</p>
<div class="sourceCode" id="cb31"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb31-1"><a href="#cb31-1" aria-hidden="true" tabindex="-1"></a><span class="fu">ifNotVisitedYet</span><span class="op">(</span>report<span class="op">)</span> <span class="op">{</span> env <span class="op">=&gt;</span></span>
<span id="cb31-2"><a href="#cb31-2" aria-hidden="true" tabindex="-1"></a>  <span class="fu">sectionHeader</span><span class="op">(</span><span class="st">&quot;Beanstalk/Env&quot;</span><span class="op">)</span> <span class="op">&lt;-&gt;</span> <span class="fu">highlighted</span><span class="op">(</span>env<span class="op">.</span>name<span class="op">)</span> <span class="op">&lt;-&gt;</span> </span>
<span id="cb31-3"><a href="#cb31-3" aria-hidden="true" tabindex="-1"></a>    <span class="fu">details</span><span class="op">(</span>env<span class="op">.</span>id<span class="op">)</span> <span class="op">&lt;-&gt;</span> </span>
<span id="cb31-4"><a href="#cb31-4" aria-hidden="true" tabindex="-1"></a>    <span class="fu">normal</span><span class="op">(</span><span class="ss">s&quot;</span><span class="st">is a Beanstalk environment of the application </span><span class="ss">${</span>env<span class="op">.</span>appName<span class="ss">}&quot;</span><span class="op">)</span> \\</span>
<span id="cb31-5"><a href="#cb31-5" aria-hidden="true" tabindex="-1"></a>  indented <span class="op">{</span></span>
<span id="cb31-6"><a href="#cb31-6" aria-hidden="true" tabindex="-1"></a>    <span class="fu">keyword</span><span class="op">(</span><span class="st">&quot;AWS Console&quot;</span><span class="op">)</span> <span class="op">&lt;:&gt;</span> </span>
<span id="cb31-7"><a href="#cb31-7" aria-hidden="true" tabindex="-1"></a>      <span class="fu">link</span><span class="op">(</span><span class="ss">s&quot;</span><span class="st">https://console.aws.amazon.com/elasticbeanstalk/home?region=</span><span class="ss">${</span>env<span class="op">.</span>region<span class="ss">}</span><span class="st">#/environment/dashboard?applicationName=</span><span class="ss">${</span>env<span class="op">.</span>appName<span class="ss">}</span><span class="st">&amp;environmentId=</span><span class="ss">${</span>env<span class="op">.</span>id<span class="ss">}&quot;</span><span class="op">)</span> \\</span>
<span id="cb31-8"><a href="#cb31-8" aria-hidden="true" tabindex="-1"></a>    <span class="fu">keyword</span><span class="op">(</span><span class="st">&quot;Health&quot;</span><span class="op">)</span> <span class="op">&lt;:&gt;</span> <span class="fu">highlighted</span><span class="op">(</span>env<span class="op">.</span>health<span class="op">.</span>toString<span class="op">)</span> \\</span>
<span id="cb31-9"><a href="#cb31-9" aria-hidden="true" tabindex="-1"></a>    <span class="fu">keyword</span><span class="op">(</span><span class="st">&quot;Currently running version&quot;</span><span class="op">)</span> <span class="op">&lt;:&gt;</span> <span class="fu">normal</span><span class="op">(</span>env<span class="op">.</span>version<span class="op">)</span> \\</span>
<span id="cb31-10"><a href="#cb31-10" aria-hidden="true" tabindex="-1"></a>    <span class="fu">normal</span><span class="op">(</span><span class="ss">s&quot;${</span>env<span class="op">.</span>asgs<span class="op">.</span>size<span class="ss">}</span><span class="st"> ASGs, </span><span class="ss">${</span>env<span class="op">.</span>instanceCount<span class="ss">}</span><span class="st"> instances, </span><span class="ss">${</span>env<span class="op">.</span>elbs<span class="op">.</span>size<span class="ss">}</span><span class="st"> ELBs</span><span class="ss">&quot;</span><span class="op">)</span> \\</span>
<span id="cb31-11"><a href="#cb31-11" aria-hidden="true" tabindex="-1"></a>    env<span class="op">.</span>elbs<span class="op">.</span><span class="fu">foreach_</span><span class="op">(</span><span class="fu">elb</span><span class="op">(</span>_<span class="op">,</span> <span class="bu">None</span><span class="op">))</span> \\</span>
<span id="cb31-12"><a href="#cb31-12" aria-hidden="true" tabindex="-1"></a>    env<span class="op">.</span>asgs<span class="op">.</span><span class="fu">foreach_</span><span class="op">(</span>asg<span class="op">)</span> \\</span>
<span id="cb31-13"><a href="#cb31-13" aria-hidden="true" tabindex="-1"></a>    <span class="fu">ebApp</span><span class="op">(</span>env<span class="op">.</span>app<span class="op">)</span></span>
<span id="cb31-14"><a href="#cb31-14" aria-hidden="true" tabindex="-1"></a>  <span class="op">}</span></span>
<span id="cb31-15"><a href="#cb31-15" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>We can see here a couple of functions and operators, all created to the specific task of printing <em>AWS resource reports</em>:</p>
<ul>
<li><code>ifNotYetVisitedYet</code> must somehow interact with the <code>Ref</code> we defined above</li>
<li><code>&lt;-&gt;</code> concatenates two texts with a space</li>
<li><code>&lt;:&gt;</code> concatenates two texts with a colon and a space</li>
<li><code>\\</code> concatenates two texts with a newline</li>
<li><code>keyword</code>, <code>link</code>, <code>normal</code>, <code>highlighted</code> etc. add styling to the given text</li>
<li><code>foreach_</code> is coming from <code>zio-prelude</code>-s <code>Traversable</code>. We will see why is it used soon.</li>
</ul>
<p>We could define these styling functions as <code>ZIO</code> effects and the helper operators as general extension methods on <code>ZIO</code>. Then we could store required state (for example for indentation) in a <code>Ref</code> for example. This works but we can do better. By defining our own monadic data type <code>Print[A]</code> we get the following advantages:</p>
<ul>
<li>It is more type safe. The pretty printing operators will be only applicable to pretty printing functions, not to arbitrary ZIO effects</li>
<li>Pretty printing state gets completely hidden from the pretty printing definitions</li>
<li>We can easily do some optimizations such as collapsing multiple newlines into one, which makes rendering optional lines more convenient</li>
</ul>
<p>So let’s define a data type to represent pretty printing:</p>
<div class="sourceCode" id="cb32"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb32-1"><a href="#cb32-1" aria-hidden="true" tabindex="-1"></a><span class="kw">sealed</span> <span class="kw">trait</span> Print<span class="op">[+</span>A<span class="op">]</span></span>
<span id="cb32-2"><a href="#cb32-2" aria-hidden="true" tabindex="-1"></a><span class="kw">final</span> <span class="cf">case</span> <span class="kw">class</span> PrintPure<span class="op">[</span>A<span class="op">](</span>a<span class="op">:</span> A<span class="op">)</span> <span class="kw">extends</span> Print<span class="op">[</span>A<span class="op">]</span></span>
<span id="cb32-3"><a href="#cb32-3" aria-hidden="true" tabindex="-1"></a><span class="kw">final</span> <span class="cf">case</span> <span class="kw">class</span> <span class="fu">PrintS</span><span class="op">(</span>s<span class="op">:</span> <span class="ex">String</span><span class="op">)</span> <span class="kw">extends</span> Print<span class="op">[</span><span class="bu">Unit</span><span class="op">]</span></span>
<span id="cb32-4"><a href="#cb32-4" aria-hidden="true" tabindex="-1"></a><span class="kw">final</span> <span class="cf">case</span> <span class="kw">class</span> <span class="fu">PrintModified</span><span class="op">(</span>s<span class="op">:</span> <span class="ex">String</span><span class="op">,</span> modifiers<span class="op">:</span> <span class="ex">String</span><span class="op">)</span> <span class="kw">extends</span> Print<span class="op">[</span><span class="bu">Unit</span><span class="op">]</span></span>
<span id="cb32-5"><a href="#cb32-5" aria-hidden="true" tabindex="-1"></a><span class="kw">final</span> <span class="cf">case</span> <span class="kw">object</span> PrintNL <span class="kw">extends</span> Print<span class="op">[</span><span class="bu">Unit</span><span class="op">]</span></span>
<span id="cb32-6"><a href="#cb32-6" aria-hidden="true" tabindex="-1"></a><span class="kw">final</span> <span class="cf">case</span> <span class="kw">class</span> PrintIndented<span class="op">[</span>A<span class="op">](</span>p<span class="op">:</span> Print<span class="op">[</span>A<span class="op">])</span> <span class="kw">extends</span> Print<span class="op">[</span>A<span class="op">]</span></span>
<span id="cb32-7"><a href="#cb32-7" aria-hidden="true" tabindex="-1"></a><span class="kw">final</span> <span class="cf">case</span> <span class="kw">class</span> PrintFlatMap<span class="op">[</span>A<span class="op">,</span> B<span class="op">](</span>a<span class="op">:</span> Print<span class="op">[</span>A<span class="op">],</span> f<span class="op">:</span> A <span class="op">=&gt;</span> Print<span class="op">[</span>B<span class="op">])</span> <span class="kw">extends</span> Print<span class="op">[</span>B<span class="op">]</span></span>
<span id="cb32-8"><a href="#cb32-8" aria-hidden="true" tabindex="-1"></a><span class="kw">final</span> <span class="cf">case</span> <span class="kw">class</span> PrintEffect<span class="op">[</span>A<span class="op">](</span>f<span class="op">:</span> UIO<span class="op">[</span>A<span class="op">])</span> <span class="kw">extends</span> Print<span class="op">[</span>A<span class="op">]</span></span></code></pre></div>
<p><code>PrintPure</code> and <code>PrintFlatMap</code> can be used to implement <code>zio-prelude</code>s type classes:</p>
<div class="sourceCode" id="cb33"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb33-1"><a href="#cb33-1" aria-hidden="true" tabindex="-1"></a><span class="kw">implicit</span> <span class="kw">val</span> print <span class="op">=</span> <span class="kw">new</span> Covariant<span class="op">[</span>Print<span class="op">]</span> <span class="kw">with</span> IdentityFlatten<span class="op">[</span>Print<span class="op">]</span> <span class="kw">with</span> IdentityBoth<span class="op">[</span>Print<span class="op">]</span> <span class="op">{</span></span>
<span id="cb33-2"><a href="#cb33-2" aria-hidden="true" tabindex="-1"></a>  <span class="kw">override</span> <span class="kw">def</span> map<span class="op">[</span>A<span class="op">,</span> B<span class="op">](</span>f<span class="op">:</span> A <span class="op">=&gt;</span> B<span class="op">):</span> Print<span class="op">[</span>A<span class="op">]</span> <span class="op">=&gt;</span> Print<span class="op">[</span>B<span class="op">]</span> <span class="op">=</span> </span>
<span id="cb33-3"><a href="#cb33-3" aria-hidden="true" tabindex="-1"></a>    fa <span class="op">=&gt;</span> <span class="fu">PrintFlatMap</span><span class="op">(</span>fa<span class="op">,</span> <span class="op">(</span>a<span class="op">:</span> A<span class="op">)</span> <span class="op">=&gt;</span> <span class="fu">PrintPure</span><span class="op">(</span><span class="fu">f</span><span class="op">(</span>a<span class="op">)))</span></span>
<span id="cb33-4"><a href="#cb33-4" aria-hidden="true" tabindex="-1"></a>  <span class="kw">override</span> <span class="kw">def</span> any<span class="op">:</span> Print<span class="op">[</span><span class="ex">Any</span><span class="op">]</span> <span class="op">=</span></span>
<span id="cb33-5"><a href="#cb33-5" aria-hidden="true" tabindex="-1"></a>    <span class="fu">PrintPure</span><span class="op">(())</span></span>
<span id="cb33-6"><a href="#cb33-6" aria-hidden="true" tabindex="-1"></a>  <span class="kw">override</span> <span class="kw">def</span> flatten<span class="op">[</span>A<span class="op">](</span>ffa<span class="op">:</span> Print<span class="op">[</span>Print<span class="op">[</span>A<span class="op">]]):</span> Print<span class="op">[</span>A<span class="op">]</span> <span class="op">=</span> </span>
<span id="cb33-7"><a href="#cb33-7" aria-hidden="true" tabindex="-1"></a>    <span class="fu">PrintFlatMap</span><span class="op">(</span>ffa<span class="op">,</span> <span class="op">(</span>fa<span class="op">:</span> Print<span class="op">[</span>A<span class="op">])</span> <span class="op">=&gt;</span> fa<span class="op">)</span></span>
<span id="cb33-8"><a href="#cb33-8" aria-hidden="true" tabindex="-1"></a>  <span class="kw">override</span> <span class="kw">def</span> both<span class="op">[</span>A<span class="op">,</span> B<span class="op">](</span>fa<span class="op">:</span> <span class="op">=&gt;</span> Print<span class="op">[</span>A<span class="op">],</span> fb<span class="op">:</span> <span class="op">=&gt;</span> Print<span class="op">[</span>B<span class="op">]):</span> Print<span class="op">[(</span>A<span class="op">,</span> B<span class="op">)]</span> <span class="op">=</span> </span>
<span id="cb33-9"><a href="#cb33-9" aria-hidden="true" tabindex="-1"></a>    <span class="fu">PrintFlatMap</span><span class="op">(</span>fa<span class="op">,</span> <span class="op">(</span>a<span class="op">:</span> A<span class="op">)</span> <span class="op">=&gt;</span> <span class="fu">map</span><span class="op">((</span>b<span class="op">:</span> B<span class="op">)</span> <span class="op">=&gt;</span> <span class="op">(</span>a<span class="op">,</span> b<span class="op">))(</span>fb<span class="op">))</span></span>
<span id="cb33-10"><a href="#cb33-10" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>What are these type classes providing to us?</p>
<ul>
<li><code>Covariant</code> basically gives us <code>map</code></li>
<li><code>IdentityFlatten</code> means that the data type can be “flattened” associatively and has an identity element. This gives us <code>flatten</code> and <code>flatMap</code>.</li>
<li><code>IdentityBoth</code> means we have an associative binary operator to combine two values. This enables syntax like <code>&lt;*&gt;</code>.</li>
</ul>
<p>Having this we can define primitive pretty printing operators like:</p>
<div class="sourceCode" id="cb34"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb34-1"><a href="#cb34-1" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> <span class="fu">normal</span><span class="op">(</span>text<span class="op">:</span> <span class="ex">String</span><span class="op">):</span> Print<span class="op">[</span><span class="bu">Unit</span><span class="op">]</span> <span class="op">=</span> <span class="fu">PrintS</span><span class="op">(</span>text<span class="op">)</span></span>
<span id="cb34-2"><a href="#cb34-2" aria-hidden="true" tabindex="-1"></a><span class="kw">val</span> space<span class="op">:</span> Print<span class="op">[</span><span class="bu">Unit</span><span class="op">]</span> <span class="op">=</span> <span class="fu">PrintS</span><span class="op">(</span><span class="st">&quot; &quot;</span><span class="op">)</span></span>
<span id="cb34-3"><a href="#cb34-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb34-4"><a href="#cb34-4" aria-hidden="true" tabindex="-1"></a><span class="kw">implicit</span> <span class="kw">class</span> PrintOps<span class="op">[</span>A<span class="op">](</span>self<span class="op">:</span> Print<span class="op">[</span>A<span class="op">])</span> <span class="op">{</span></span>
<span id="cb34-5"><a href="#cb34-5" aria-hidden="true" tabindex="-1"></a>  <span class="kw">def</span> <span class="op">&lt;-&gt;[</span>B<span class="op">](</span>next<span class="op">:</span> <span class="op">=&gt;</span> Print<span class="op">[</span>B<span class="op">]):</span> Print<span class="op">[</span>B<span class="op">]</span> <span class="op">=</span></span>
<span id="cb34-6"><a href="#cb34-6" aria-hidden="true" tabindex="-1"></a>    self <span class="op">*&gt;</span> space <span class="op">*&gt;</span> next</span>
<span id="cb34-7"><a href="#cb34-7" aria-hidden="true" tabindex="-1"></a>  <span class="co">// ...</span></span>
<span id="cb34-8"><a href="#cb34-8" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>Then we can use the syntax provided by <code>zio-prelude</code> to compose these pretty printer values. The only thing remaining is to provide a transformation of <code>Print[A]</code> to <code>UIO[A]</code>. This is where we can hide the pretty printer state and can handle special rules like collapsing newlines:</p>
<div class="sourceCode" id="cb35"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb35-1"><a href="#cb35-1" aria-hidden="true" tabindex="-1"></a><span class="kw">private</span> <span class="kw">trait</span> PrettyConsole <span class="op">{</span></span>
<span id="cb35-2"><a href="#cb35-2" aria-hidden="true" tabindex="-1"></a>  <span class="kw">protected</span> <span class="kw">val</span> console<span class="op">:</span> <span class="ex">Console</span><span class="op">.</span><span class="ex">Service</span></span>
<span id="cb35-3"><a href="#cb35-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb35-4"><a href="#cb35-4" aria-hidden="true" tabindex="-1"></a>  <span class="kw">private</span> <span class="cf">case</span> <span class="kw">class</span> <span class="fu">PrettyState</span><span class="op">(</span>indentation<span class="op">:</span> <span class="ex">String</span><span class="op">,</span> afterNL<span class="op">:</span> <span class="ex">Boolean</span><span class="op">)</span></span>
<span id="cb35-5"><a href="#cb35-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb35-6"><a href="#cb35-6" aria-hidden="true" tabindex="-1"></a>  <span class="kw">private</span> <span class="kw">def</span> printFlatMap<span class="op">[</span>A<span class="op">,</span> B<span class="op">](</span>a<span class="op">:</span> Print<span class="op">[</span>A<span class="op">],</span> f<span class="op">:</span> A <span class="op">=&gt;</span> Print<span class="op">[</span>B<span class="op">],</span> state<span class="op">:</span> PrettyState<span class="op">):</span> UIO<span class="op">[(</span>B<span class="op">,</span> PrettyState<span class="op">)]</span> <span class="op">=</span></span>
<span id="cb35-7"><a href="#cb35-7" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span> <span class="op">{</span></span>
<span id="cb35-8"><a href="#cb35-8" aria-hidden="true" tabindex="-1"></a>      r1 <span class="op">&lt;-</span> <span class="fu">runImpl</span><span class="op">(</span>a<span class="op">,</span> state<span class="op">)</span></span>
<span id="cb35-9"><a href="#cb35-9" aria-hidden="true" tabindex="-1"></a>      r2 <span class="op">&lt;-</span> <span class="fu">runImpl</span><span class="op">(</span><span class="fu">f</span><span class="op">(</span>r1<span class="op">.</span>_1<span class="op">),</span> r1<span class="op">.</span>_2<span class="op">)</span></span>
<span id="cb35-10"><a href="#cb35-10" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span> <span class="cf">yield</span> r2</span>
<span id="cb35-11"><a href="#cb35-11" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb35-12"><a href="#cb35-12" aria-hidden="true" tabindex="-1"></a>  <span class="kw">private</span> <span class="kw">def</span> runImpl<span class="op">[</span>A<span class="op">](</span>p<span class="op">:</span> Print<span class="op">[</span>A<span class="op">],</span> state<span class="op">:</span> PrettyState<span class="op">):</span> UIO<span class="op">[(</span>A<span class="op">,</span> PrettyState<span class="op">)]</span> <span class="op">=</span></span>
<span id="cb35-13"><a href="#cb35-13" aria-hidden="true" tabindex="-1"></a>    p <span class="cf">match</span> <span class="op">{</span></span>
<span id="cb35-14"><a href="#cb35-14" aria-hidden="true" tabindex="-1"></a>      <span class="cf">case</span> <span class="fu">PrintPure</span><span class="op">(</span>a<span class="op">)</span> <span class="op">=&gt;</span> ZIO<span class="op">.</span><span class="fu">succeed</span><span class="op">((</span>a<span class="op">,</span> state<span class="op">))</span></span>
<span id="cb35-15"><a href="#cb35-15" aria-hidden="true" tabindex="-1"></a>      <span class="cf">case</span> <span class="fu">PrintS</span><span class="op">(</span>s<span class="op">)</span> <span class="op">=&gt;</span> ZIO<span class="op">.</span><span class="fu">when</span><span class="op">(</span>state<span class="op">.</span>afterNL<span class="op">)(</span>console<span class="op">.</span><span class="fu">putStr</span><span class="op">(</span>state<span class="op">.</span>indentation<span class="op">))</span> <span class="op">*&gt;</span> </span>
<span id="cb35-16"><a href="#cb35-16" aria-hidden="true" tabindex="-1"></a>        console<span class="op">.</span><span class="fu">putStr</span><span class="op">(</span>s<span class="op">).</span><span class="fu">as</span><span class="op">(((),</span> state<span class="op">.</span><span class="fu">copy</span><span class="op">(</span>afterNL <span class="op">=</span> <span class="kw">false</span><span class="op">)))</span></span>
<span id="cb35-17"><a href="#cb35-17" aria-hidden="true" tabindex="-1"></a>      <span class="cf">case</span> <span class="fu">PrintModified</span><span class="op">(</span>s<span class="op">,</span> modifiers<span class="op">)</span> <span class="op">=&gt;</span> ZIO<span class="op">.</span><span class="fu">when</span><span class="op">(</span>state<span class="op">.</span>afterNL<span class="op">)(</span>console<span class="op">.</span><span class="fu">putStr</span><span class="op">(</span>state<span class="op">.</span>indentation<span class="op">))</span> <span class="op">*&gt;</span></span>
<span id="cb35-18"><a href="#cb35-18" aria-hidden="true" tabindex="-1"></a>        console<span class="op">.</span><span class="fu">putStr</span><span class="op">(</span><span class="ss">s&quot;${</span>modifiers<span class="ss">}$s$RESET&quot;</span><span class="op">).</span><span class="fu">as</span><span class="op">(((),</span> state<span class="op">.</span><span class="fu">copy</span><span class="op">(</span>afterNL <span class="op">=</span> <span class="kw">false</span><span class="op">)))</span></span>
<span id="cb35-19"><a href="#cb35-19" aria-hidden="true" tabindex="-1"></a>      <span class="cf">case</span> PrintNL <span class="op">=&gt;</span> </span>
<span id="cb35-20"><a href="#cb35-20" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="op">(</span>state<span class="op">.</span>afterNL<span class="op">)</span> ZIO<span class="op">.</span><span class="fu">succeed</span><span class="op">(((),</span> state<span class="op">))</span> </span>
<span id="cb35-21"><a href="#cb35-21" aria-hidden="true" tabindex="-1"></a>        <span class="cf">else</span> console<span class="op">.</span><span class="fu">putStrLn</span><span class="op">(</span><span class="st">&quot;&quot;</span><span class="op">).</span><span class="fu">as</span><span class="op">(((),</span> state<span class="op">.</span><span class="fu">copy</span><span class="op">(</span>afterNL <span class="op">=</span> <span class="kw">true</span><span class="op">)))</span></span>
<span id="cb35-22"><a href="#cb35-22" aria-hidden="true" tabindex="-1"></a>      <span class="cf">case</span> <span class="fu">PrintIndented</span><span class="op">(</span>f<span class="op">)</span> <span class="op">=&gt;</span> <span class="fu">runImpl</span><span class="op">(</span>f<span class="op">,</span> state<span class="op">.</span><span class="fu">copy</span><span class="op">(</span>indentation <span class="op">=</span> state<span class="op">.</span>indentation <span class="op">+</span> <span class="st">&quot;  &quot;</span><span class="op">)).</span>map <span class="op">{</span> <span class="cf">case</span> <span class="op">(</span>a<span class="op">,</span> s<span class="op">)</span> <span class="op">=&gt;</span> </span>
<span id="cb35-23"><a href="#cb35-23" aria-hidden="true" tabindex="-1"></a>          <span class="op">(</span>a<span class="op">,</span> s<span class="op">.</span><span class="fu">copy</span><span class="op">(</span>indentation <span class="op">=</span> state<span class="op">.</span>indentation<span class="op">))</span> <span class="op">}</span></span>
<span id="cb35-24"><a href="#cb35-24" aria-hidden="true" tabindex="-1"></a>      <span class="cf">case</span> <span class="fu">PrintFlatMap</span><span class="op">(</span>a<span class="op">,</span> f<span class="op">)</span> <span class="op">=&gt;</span> <span class="fu">printFlatMap</span><span class="op">(</span>a<span class="op">,</span> f<span class="op">,</span> state<span class="op">)</span></span>
<span id="cb35-25"><a href="#cb35-25" aria-hidden="true" tabindex="-1"></a>      <span class="cf">case</span> <span class="fu">PrintEffect</span><span class="op">(</span>f<span class="op">)</span> <span class="op">=&gt;</span> f<span class="op">.</span><span class="fu">map</span><span class="op">((</span>_<span class="op">,</span> state<span class="op">))</span></span>
<span id="cb35-26"><a href="#cb35-26" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb35-27"><a href="#cb35-27" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb35-28"><a href="#cb35-28" aria-hidden="true" tabindex="-1"></a>  <span class="kw">def</span> run<span class="op">[</span>A<span class="op">](</span>p<span class="op">:</span> Print<span class="op">[</span>A<span class="op">]):</span> UIO<span class="op">[</span>A<span class="op">]</span> <span class="op">=</span> <span class="fu">runImpl</span><span class="op">(</span>p<span class="op">,</span> <span class="fu">PrettyState</span><span class="op">(</span><span class="st">&quot;&quot;</span><span class="op">,</span> afterNL <span class="op">=</span> <span class="kw">false</span><span class="op">)).</span><span class="fu">map</span><span class="op">(</span>_<span class="op">.</span>_1<span class="op">)</span></span>
<span id="cb35-29"><a href="#cb35-29" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>A couple of things to notice here:</p>
<ul>
<li><code>PrettyState</code> holds the indentation and a flag that is true when the last print was a <em>new line</em></li>
<li><code>runImpl</code> gets the state as input and has the capability to modify it, by returning the modified state together with the computation’s result</li>
<li>there is a <code>PrintEffect</code> constructor that allows lifting arbitrary <code>ZIO</code> effects to the pretty printer. This is needed for interacting with the <code>Ref</code> that holds the record of already printed reports.</li>
</ul>
<h2 id="putting-all-together">Putting all together</h2>
<p>Putting all this together means getting command line arguments, setting up the AWS client libraries, the report cache and the rendering modules and running the top level queries.</p>
<p>To parse the command line arguments we can use my <a href="https://vigoo.github.io/clipp/docs/">clipp library</a>:</p>
<div class="sourceCode" id="cb36"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb36-1"><a href="#cb36-1" aria-hidden="true" tabindex="-1"></a><span class="kw">final</span> <span class="cf">case</span> <span class="kw">class</span> <span class="fu">Parameters</span><span class="op">(</span>verbose<span class="op">:</span> <span class="ex">Boolean</span><span class="op">,</span></span>
<span id="cb36-2"><a href="#cb36-2" aria-hidden="true" tabindex="-1"></a>                            searchInput<span class="op">:</span> <span class="ex">String</span><span class="op">,</span></span>
<span id="cb36-3"><a href="#cb36-3" aria-hidden="true" tabindex="-1"></a>                            region<span class="op">:</span> <span class="ex">String</span><span class="op">)</span></span>
<span id="cb36-4"><a href="#cb36-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb36-5"><a href="#cb36-5" aria-hidden="true" tabindex="-1"></a><span class="co">// ...</span></span>
<span id="cb36-6"><a href="#cb36-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb36-7"><a href="#cb36-7" aria-hidden="true" tabindex="-1"></a><span class="kw">val</span> paramSpec <span class="op">=</span> <span class="cf">for</span> <span class="op">{</span></span>
<span id="cb36-8"><a href="#cb36-8" aria-hidden="true" tabindex="-1"></a>  _ <span class="op">&lt;-</span> <span class="fu">metadata</span><span class="op">(</span><span class="st">&quot;aws-query&quot;</span><span class="op">,</span> <span class="st">&quot;search for AWS infrastructure resources&quot;</span><span class="op">)</span></span>
<span id="cb36-9"><a href="#cb36-9" aria-hidden="true" tabindex="-1"></a>  verbose <span class="op">&lt;-</span> <span class="fu">flag</span><span class="op">(</span><span class="st">&quot;Verbose logging&quot;</span><span class="op">,</span> <span class="ch">&#39;v&#39;</span><span class="op">,</span> <span class="st">&quot;verbose&quot;</span><span class="op">)</span></span>
<span id="cb36-10"><a href="#cb36-10" aria-hidden="true" tabindex="-1"></a>  searchInput <span class="op">&lt;-</span> parameter<span class="op">[</span><span class="ex">String</span><span class="op">](</span><span class="st">&quot;Search input&quot;</span><span class="op">,</span> <span class="st">&quot;NAME_OR_ID&quot;</span><span class="op">)</span></span>
<span id="cb36-11"><a href="#cb36-11" aria-hidden="true" tabindex="-1"></a>  region <span class="op">&lt;-</span> optional <span class="op">{</span> namedParameter<span class="op">[</span><span class="ex">String</span><span class="op">](</span><span class="st">&quot;AWS region&quot;</span><span class="op">,</span> <span class="st">&quot;REGION&quot;</span><span class="op">,</span> <span class="st">&quot;region&quot;</span><span class="op">)</span> <span class="op">}</span></span>
<span id="cb36-12"><a href="#cb36-12" aria-hidden="true" tabindex="-1"></a><span class="op">}</span> <span class="cf">yield</span> <span class="fu">Parameters</span><span class="op">(</span>verbose<span class="op">,</span> searchInput<span class="op">,</span> region<span class="op">.</span><span class="fu">getOrElse</span><span class="op">(</span><span class="st">&quot;us-east-1&quot;</span><span class="op">))</span></span>
<span id="cb36-13"><a href="#cb36-13" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb36-14"><a href="#cb36-14" aria-hidden="true" tabindex="-1"></a><span class="kw">val</span> params <span class="op">=</span> clipp<span class="op">.</span>zioapi<span class="op">.</span>config<span class="op">.</span><span class="fu">fromArgsWithUsageInfo</span><span class="op">(</span>args<span class="op">,</span> paramSpec<span class="op">)</span></span></code></pre></div>
<p>The <code>verbose</code> flag is used to set up logging. We use <a href="https://zio.github.io/zio-logging/">zio-logging</a> with SLF4j support (to be able to see logs from the underlying AWS Java SDK) with lo4j2 backend. In order to control the log level by the command line <code>verbose</code> flag, instead of the usual XML-based configuration for log4j2 we define a ZIO <em>layer</em> that’s only purpose is to perform the configuration programmatically:</p>
<div class="sourceCode" id="cb37"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb37-1"><a href="#cb37-1" aria-hidden="true" tabindex="-1"></a><span class="kw">private</span> <span class="kw">def</span> log4j2Configuration<span class="op">:</span> ZLayer<span class="op">[</span>Has<span class="op">[</span>ClippConfig<span class="op">.</span><span class="ex">Service</span><span class="op">[</span>Parameters<span class="op">]],</span> <span class="ex">Throwable</span><span class="op">,</span> Has<span class="op">[</span>Log4jConfiguration<span class="op">]]</span> <span class="op">=</span> <span class="op">{</span></span>
<span id="cb37-2"><a href="#cb37-2" aria-hidden="true" tabindex="-1"></a>  ZLayer<span class="op">.</span>fromServiceM<span class="op">[</span>ClippConfig<span class="op">.</span><span class="ex">Service</span><span class="op">[</span>Parameters<span class="op">],</span> <span class="ex">Any</span><span class="op">,</span> <span class="ex">Throwable</span><span class="op">,</span> Log4jConfiguration<span class="op">]</span> <span class="op">{</span> params <span class="op">=&gt;</span></span>
<span id="cb37-3"><a href="#cb37-3" aria-hidden="true" tabindex="-1"></a>    ZIO<span class="op">.</span>effect <span class="op">{</span></span>
<span id="cb37-4"><a href="#cb37-4" aria-hidden="true" tabindex="-1"></a>      <span class="kw">val</span> builder <span class="op">=</span> ConfigurationBuilderFactory<span class="op">.</span><span class="fu">newConfigurationBuilder</span><span class="op">()</span>       </span>
<span id="cb37-5"><a href="#cb37-5" aria-hidden="true" tabindex="-1"></a>      <span class="co">// ...</span></span>
<span id="cb37-6"><a href="#cb37-6" aria-hidden="true" tabindex="-1"></a>      Configurator<span class="op">.</span><span class="fu">initialize</span><span class="op">(</span>builder<span class="op">.</span><span class="fu">build</span><span class="op">())</span></span>
<span id="cb37-7"><a href="#cb37-7" aria-hidden="true" tabindex="-1"></a>      <span class="fu">Log4jConfiguration</span><span class="op">()</span></span>
<span id="cb37-8"><a href="#cb37-8" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb37-9"><a href="#cb37-9" aria-hidden="true" tabindex="-1"></a>  <span class="op">}</span></span></code></pre></div>
<p>This way the root logger’s level can depend on the <code>Parameters</code> parsed by <code>clipp</code>. Composing this layer with <code>zio-logger</code>s <code>Slf4jLogger</code> gives us a working <code>Logging</code> layer:</p>
<div class="sourceCode" id="cb38"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb38-1"><a href="#cb38-1" aria-hidden="true" tabindex="-1"></a><span class="kw">val</span> logging <span class="op">=</span> log4j2Configuration <span class="op">&gt;+&gt;</span> Slf4jLogger<span class="op">.</span>make <span class="op">{</span> <span class="op">(</span>_<span class="op">,</span> message<span class="op">)</span> <span class="op">=&gt;</span> message <span class="op">}</span></span></code></pre></div>
<p>By bootstrapping the parameters and the logging we can run our main application like this:</p>
<div class="sourceCode" id="cb39"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb39-1"><a href="#cb39-1" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> <span class="op">{</span></span>
<span id="cb39-2"><a href="#cb39-2" aria-hidden="true" tabindex="-1"></a>  result <span class="op">&lt;-</span> <span class="fu">awsQuery</span><span class="op">()</span></span>
<span id="cb39-3"><a href="#cb39-3" aria-hidden="true" tabindex="-1"></a>    <span class="op">.</span><span class="fu">provideCustomLayer</span><span class="op">(</span>params <span class="op">&gt;+&gt;</span> logging<span class="op">)</span></span>
<span id="cb39-4"><a href="#cb39-4" aria-hidden="true" tabindex="-1"></a>    <span class="op">.</span>catchAll <span class="op">{</span> _ <span class="op">=&gt;</span> ZIO<span class="op">.</span><span class="fu">succeed</span><span class="op">(</span>ExitCode<span class="op">.</span>failure<span class="op">)</span> <span class="op">}</span></span>
<span id="cb39-5"><a href="#cb39-5" aria-hidden="true" tabindex="-1"></a>  _ <span class="op">&lt;-</span> ZIO<span class="op">.</span><span class="fu">effect</span><span class="op">(</span><span class="ex">LogManager</span><span class="op">.</span><span class="fu">shutdown</span><span class="op">()).</span>orDie</span>
<span id="cb39-6"><a href="#cb39-6" aria-hidden="true" tabindex="-1"></a><span class="op">}</span> <span class="cf">yield</span> result</span></code></pre></div>
<p>The <code>clipp</code> parser will print detailed usage info in case it fails, and other runtime errors are logged, so we can simply catch all errors and exit with a failure on top level.</p>
<p>In <code>awsQuery</code> we create all the other layers necessary for running the queries. First we need to create the <em>throttling policy</em> that is used by all the AWS service clients as I explained above:</p>
<div class="sourceCode" id="cb40"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb40-1"><a href="#cb40-1" aria-hidden="true" tabindex="-1"></a><span class="kw">private</span> <span class="kw">def</span> <span class="fu">awsQuery</span><span class="op">():</span> ZIO<span class="op">[</span><span class="ex">Random</span> <span class="kw">with</span> Clock <span class="kw">with</span> <span class="ex">Console</span> <span class="kw">with</span> Logging <span class="kw">with</span> ClippConfig<span class="op">[</span>Parameters<span class="op">],</span> Nothing<span class="op">,</span> ExitCode<span class="op">]</span> <span class="op">=</span></span>
<span id="cb40-2"><a href="#cb40-2" aria-hidden="true" tabindex="-1"></a>    throttlingPolicy<span class="op">.</span>use <span class="op">{</span> policy <span class="op">=&gt;</span>      </span></code></pre></div>
<p>The <code>zio-aws</code> library uses <a href="https://zio.github.io/zio-config/">ZIO Config</a> for configuration. This means we need a <code>ZConfig[CommonAwsConfig]</code> to construct the <code>AwsConfig</code> layer:</p>
<div class="sourceCode" id="cb41"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb41-1"><a href="#cb41-1" aria-hidden="true" tabindex="-1"></a><span class="kw">val</span> commonConfig <span class="op">=</span> ZLayer<span class="op">.</span><span class="fu">succeed</span><span class="op">(</span><span class="fu">CommonAwsConfig</span><span class="op">(</span></span>
<span id="cb41-2"><a href="#cb41-2" aria-hidden="true" tabindex="-1"></a>  region <span class="op">=</span> <span class="bu">Some</span><span class="op">(</span><span class="ex">Region</span><span class="op">.</span><span class="fu">of</span><span class="op">(</span>params<span class="op">.</span>region<span class="op">)),</span></span>
<span id="cb41-3"><a href="#cb41-3" aria-hidden="true" tabindex="-1"></a>  credentialsProvider <span class="op">=</span> DefaultCredentialsProvider<span class="op">.</span><span class="fu">create</span><span class="op">(),</span></span>
<span id="cb41-4"><a href="#cb41-4" aria-hidden="true" tabindex="-1"></a>  endpointOverride <span class="op">=</span> <span class="bu">None</span><span class="op">,</span></span>
<span id="cb41-5"><a href="#cb41-5" aria-hidden="true" tabindex="-1"></a>  commonClientConfig <span class="op">=</span> <span class="bu">None</span></span>
<span id="cb41-6"><a href="#cb41-6" aria-hidden="true" tabindex="-1"></a><span class="op">))</span></span>
<span id="cb41-7"><a href="#cb41-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb41-8"><a href="#cb41-8" aria-hidden="true" tabindex="-1"></a><span class="kw">val</span> awsCore <span class="op">=</span> <span class="op">(</span>netty<span class="op">.</span>default <span class="op">++</span> commonConfig<span class="op">)</span> <span class="op">&gt;&gt;&gt;</span> core<span class="op">.</span>config<span class="op">.</span><span class="fu">configured</span><span class="op">()</span></span></code></pre></div>
<p>The <code>AwsConfig</code> layer combines the configuration with a selected HTTP backend. In our case this is the <em>Netty</em> backend, using its default configuration.</p>
<p>Then we define the per-service client layers, applying the throttling and call logging <em>aspects</em> as I described before:</p>
<div class="sourceCode" id="cb42"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb42-1"><a href="#cb42-1" aria-hidden="true" tabindex="-1"></a><span class="kw">val</span> awsClients <span class="op">=</span></span>
<span id="cb42-2"><a href="#cb42-2" aria-hidden="true" tabindex="-1"></a>  ec2<span class="op">.</span>live @@ <span class="op">(</span>throttling <span class="op">&gt;&gt;&gt;</span> callLogging<span class="op">)</span> <span class="op">++</span></span>
<span id="cb42-3"><a href="#cb42-3" aria-hidden="true" tabindex="-1"></a>  elasticloadbalancing<span class="op">.</span>live @@ <span class="op">(</span>throttling <span class="op">&gt;&gt;&gt;</span> callLogging<span class="op">)</span> <span class="op">++</span></span>
<span id="cb42-4"><a href="#cb42-4" aria-hidden="true" tabindex="-1"></a>  elasticbeanstalk<span class="op">.</span>live @@ <span class="op">(</span>throttling <span class="op">&gt;&gt;&gt;</span> callLogging<span class="op">)</span> <span class="op">++</span></span>
<span id="cb42-5"><a href="#cb42-5" aria-hidden="true" tabindex="-1"></a>  autoscaling<span class="op">.</span>live @@ <span class="op">(</span>throttling <span class="op">&gt;&gt;&gt;</span> callLogging<span class="op">)</span></span></code></pre></div>
<p>To produce the final layer, we feed the logging and the <code>AwsConfig</code> layers to the client layers, and add the <code>ReportCache</code> and <code>Render</code> implementations:</p>
<div class="sourceCode" id="cb43"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb43-1"><a href="#cb43-1" aria-hidden="true" tabindex="-1"></a><span class="kw">val</span> finalLayer <span class="op">=</span> </span>
<span id="cb43-2"><a href="#cb43-2" aria-hidden="true" tabindex="-1"></a>  <span class="op">((</span>ZLayer<span class="op">.</span>service<span class="op">[</span><span class="ex">Logger</span><span class="op">[</span><span class="ex">String</span><span class="op">]]</span> <span class="op">++</span> awsCore<span class="op">)</span> <span class="op">&gt;&gt;&gt;</span> awsClients<span class="op">)</span> <span class="op">++</span></span>
<span id="cb43-3"><a href="#cb43-3" aria-hidden="true" tabindex="-1"></a>  <span class="op">((</span><span class="ex">Console</span><span class="op">.</span>any <span class="op">++</span> cache<span class="op">.</span>live<span class="op">)</span> <span class="op">&gt;+&gt;</span> render<span class="op">.</span>live<span class="op">)</span></span></code></pre></div>
<p>This has the environment <code>ClippConfig[Parameters] with Console with Logging with ReportCache with Rendering with AllServices</code> where</p>
<div class="sourceCode" id="cb44"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb44-1"><a href="#cb44-1" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> AllServices <span class="op">=</span> Ec2 <span class="kw">with</span> ElasticLoadBalancing <span class="kw">with</span> ElasticBeanstalk <span class="kw">with</span> AutoScaling</span></code></pre></div>
<h2 id="conclusion">Conclusion</h2>
<p>We reimplemented the tool to query AWS resources using functional programming techniques, built on top of ZIO libraries. By separating the execution from the problem specification we get an easily readable and maintainable code that can be easily extended with new queries or reports without having to thing about how caching and concurrency is implemented under the hood. We can rate limit AWS requests without touching the actual queries, and take advantage of batching AWS operations while keeping the query logic simple and unaware of this optimization.</p>
]]></summary>
</entry>
<entry>
    <title>Code generation in ZIO-AWS</title>
    <link href="http://vigoo.github.io/posts/2020-09-23-zioaws-code-generation.html" />
    <id>http://vigoo.github.io/posts/2020-09-23-zioaws-code-generation.html</id>
    <published>2020-09-23T00:00:00Z</published>
    <updated>2020-09-23T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on September 23, 2020
    
</div>

<p>I have recently published a set of libraries, <a href="https://github.com/vigoo/zio-aws"><strong>zio-aws</strong></a>, aiming to provide a better interface for working with <em>AWS services</em> from <a href="https://zio.dev/">ZIO</a> applications. For more information about how the ZIO <em>interface</em> works and how to get started with these libraries, read the repository’s README. In this post, I will focus on how these libraries are generated from the schema provided by the <a href="https://github.com/aws/aws-sdk-java-v2">AWS Java SDK v2</a>.</p>
<h2 id="generating-code">Generating code</h2>
<p>I wanted to cover <em>all</em> AWS services at once. This means client libraries for more than 200 services, so the only possible approach was to <em>generate</em> these libraries on top of a small hand-written core.</p>
<h3 id="schema">Schema</h3>
<p>The first thing we need for generating code is a source schema. This is the model that we use to create the source code from. It is usually constructed by some kind of DSL or more directly described by a JSON or YAML or similar data model. In the case of <strong>zio-aws</strong> this was already defined in the <a href="https://github.com/aws/aws-sdk-java-v2">AWS Java SDK v2</a> project. The way it works is:</p>
<ul>
<li>There is a <code>codegen</code> project, published in the <code>software.amazon.awssdk</code> group among the client libraries, that contains the Java classes used for generating the Java SDK itself. This contains the data model classes for parsing the actual schema as well.</li>
<li>In the AWS Java SDK v2 repository, the schema is located in the subdirectory called <a href="https://github.com/aws/aws-sdk-java-v2/tree/master/services"><code>services</code></a>. There is a directory for each AWS service and it contains among other things some relevant <em>JSON</em> schema files:
<ul>
<li><code>service-2.json</code> is the main schema of the service, describing the data structures and operations</li>
<li><code>paginators-1.json</code> describes the operations that the Java SDK creates a <em>paginator interface</em> for</li>
<li><code>customization.config</code> contains extra information, including changes to be applied on top of the service model</li>
</ul></li>
<li>Fortunately, these are also embedded in the generated <em>AWS Java SDK</em> libraries as resources, so getting <em>all client libraries</em> on the classpath gives us an easy way to get the corresponding schemas as well</li>
</ul>
<p>I decided to use the low-level data classes from the AWS <code>codegen</code> library to parse these files and using that build a higher-level model that can be then used as an input for the <em>code generator</em>.</p>
<p>This is encapsulated in a <em>ZIO layer</em> called <code>Loader</code>, which has two functions:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> <span class="fu">findModels</span><span class="op">():</span> ZIO<span class="op">[</span>Blocking<span class="op">,</span> <span class="ex">Throwable</span><span class="op">,</span> <span class="ex">Set</span><span class="op">[</span>ModelId<span class="op">]]</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> <span class="fu">loadCodegenModel</span><span class="op">(</span>id<span class="op">:</span> ModelId<span class="op">):</span> ZIO<span class="op">[</span>Blocking<span class="op">,</span> <span class="ex">Throwable</span><span class="op">,</span> C2jModels<span class="op">]</span></span></code></pre></div>
<p>The first one, <code>findModels</code> uses the <code>ClassLoader</code> to enumerate all <code>codegen-resources</code> folders on the <em>classpath</em> and just returns a set of <code>ModelId</code>s. <code>ModelId</code> is a pair of a model name (such as <code>s3</code>) and an optional submodule name (for example <code>dynamodb:dynamodbstreams</code>).</p>
<p>Then for each detected model we can load it with the <code>loadCodegenModel</code> function, <code>C2jModels</code> is a class from the AWS <code>codegen</code> library.</p>
<p>Figuring out how to interpret these data structures, and how to map them to the generated Java API was the hardest part, but it’s out of scope for this post. Our next topic here is how we generate code from our <em>model</em>.</p>
<h3 id="scalameta">Scalameta</h3>
<p>There are several possibilities to generate source code and I tried many of them during the past years. Let’s see some examples:</p>
<ul>
<li>Using a general-purpose text template engine. An example we used at <a href="https://prezi.com">Prezi</a> is the <a href="https://github.com/bkiers/Liqp">Java implementation of the Liquid templating engine</a>. Another example is the <a href="https://github.com/OpenAPITools/openapi-generator">OpenAPI generator project</a> that uses <a href="https://mustache.github.io/">Mustache</a> templates to generate server and client code from OpenAPI specifications.</li>
<li>Generating from code with some general-purpose pretty-printing library. With this approach, we are using the pretty-printer library’s composability features to create source code building blocks, and map the code generator model to these constructs. It is easier to express complex logic in this case, as we don’t have to encode it in a limited dynamic template model. On the other hand, reading the code generator’s source and imagining the output is not easy, and nothing enforces that the pretty-printer building blocks are actually creating valid source code.</li>
<li>If the target language has an AST with a pretty-printing feature, we can map the model to the AST directly and just pretty print at the end. With this, we get a much more efficient development cycle, as the generated code is at least guaranteed to be syntactically correct. But the AST can be far from how the target language’s textual representation looks like, which makes it difficult to read and write this code.</li>
<li>With a library that supports building ASTs with <em>quasiquotes</em>, we can build the AST fragments with a syntax that is very close to the generated target language. For <em>Scala</em>, a library that supports this and is used in a lot of tooling projects is <a href="https://scalameta.org/">Scalameta</a></li>
</ul>
<p>I wanted to try using <em>Scalameta</em> ever since I met Devon Stewart and he mentioned how he uses it in <a href="https://github.com/twilio/guardrail/">guardrail</a>. Finally, this was a perfect use case to do so!</p>
<p>To get an understanding of what kind of Scala language constructs can be built with <em>quasiquotes</em> with <em>Scalameta</em>, check <a href="https://scalameta.org/docs/trees/quasiquotes.html">the list of them in the official documentation</a>.</p>
<p>We get a good mix of both worlds with this. It is possible to express complex template logic in real code, creating higher-level constructs, taking advantage of the full power of Scala. On the other hand, the actual <em>quasiquoted</em> fragments are still close to the code generator’s target language (which is in this case also Scala).</p>
<p>Let’s see a short example of this:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="kw">private</span> <span class="kw">def</span> <span class="fu">generateMap</span><span class="op">(</span>m<span class="op">:</span> Model<span class="op">):</span> ZIO<span class="op">[</span>GeneratorContext<span class="op">,</span> GeneratorFailure<span class="op">,</span> ModelWrapper<span class="op">]</span> <span class="op">=</span> <span class="op">{</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>  <span class="cf">for</span> <span class="op">{</span></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>    keyModel <span class="op">&lt;-</span> <span class="fu">get</span><span class="op">(</span>m<span class="op">.</span>shape<span class="op">.</span>getMapKeyType<span class="op">.</span>getShape<span class="op">)</span></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a>    valueModel <span class="op">&lt;-</span> <span class="fu">get</span><span class="op">(</span>m<span class="op">.</span>shape<span class="op">.</span>getMapValueType<span class="op">.</span>getShape<span class="op">)</span></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a>    keyT <span class="op">&lt;-</span> TypeMapping<span class="op">.</span><span class="fu">toWrappedType</span><span class="op">(</span>keyModel<span class="op">)</span></span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a>    valueT <span class="op">&lt;-</span> TypeMapping<span class="op">.</span><span class="fu">toWrappedType</span><span class="op">(</span>valueModel<span class="op">)</span></span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a>  <span class="op">}</span> <span class="cf">yield</span> <span class="fu">ModelWrapper</span><span class="op">(</span></span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a>    code <span class="op">=</span> <span class="ex">List</span><span class="op">(</span>q<span class="st">&quot;&quot;&quot;type ${m.asType} = Map[$keyT, $valueT]&quot;&quot;&quot;</span><span class="op">)</span></span>
<span id="cb2-9"><a href="#cb2-9" aria-hidden="true" tabindex="-1"></a>  <span class="op">)</span></span>
<span id="cb2-10"><a href="#cb2-10" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>For each <em>AWS</em> service-specific <em>model type</em> we generate some kind of wrapper code into the ZIO service client library. This is done by processing the schema model to an intermediate format where for each such wrapper, we have a <code>ModelWrapper</code> value that already has the <em>Scalameta AST</em> for that particular wrapper. The above code fragment creates this for <em>map types</em>, which is a simple type alias for a Scala <code>Map</code>. It’s a <code>ZIO</code> function, taking advantage of passing around the context in the <em>environment</em> and safely handling generator failures, while the actual generated code part in the <code>q"""..."""</code> remained quite readable.</p>
<p>Then the whole <em>model package</em> can be expressed like this:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> <span class="op">{</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a>  <span class="co">// ...</span></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a>  primitiveModels <span class="op">&lt;-</span> ZIO<span class="op">.</span><span class="fu">foreach</span><span class="op">(</span>primitiveModels<span class="op">.</span>toList<span class="op">.</span><span class="fu">sortBy</span><span class="op">(</span>_<span class="op">.</span>name<span class="op">))(</span>generateModel<span class="op">)</span></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a>  models <span class="op">&lt;-</span> ZIO<span class="op">.</span><span class="fu">foreach</span><span class="op">(</span>complexModels<span class="op">.</span>toList<span class="op">.</span><span class="fu">sortBy</span><span class="op">(</span>_<span class="op">.</span>name<span class="op">))(</span>generateModel<span class="op">)</span></span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a><span class="op">}</span> <span class="cf">yield</span> q<span class="st">&quot;&quot;&quot;package $fullPkgName {</span></span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a><span class="st">            import scala.jdk.CollectionConverters._</span></span>
<span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a><span class="st">            import java.time.Instant</span></span>
<span id="cb3-9"><a href="#cb3-9" aria-hidden="true" tabindex="-1"></a><span class="st">            import zio.{Chunk, ZIO}</span></span>
<span id="cb3-10"><a href="#cb3-10" aria-hidden="true" tabindex="-1"></a><span class="st">            import software.amazon.awssdk.core.SdkBytes</span></span>
<span id="cb3-11"><a href="#cb3-11" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-12"><a href="#cb3-12" aria-hidden="true" tabindex="-1"></a><span class="st">            ..$parentModuleImport</span></span>
<span id="cb3-13"><a href="#cb3-13" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-14"><a href="#cb3-14" aria-hidden="true" tabindex="-1"></a><span class="st">            package object model {</span></span>
<span id="cb3-15"><a href="#cb3-15" aria-hidden="true" tabindex="-1"></a><span class="st">              object primitives {</span></span>
<span id="cb3-16"><a href="#cb3-16" aria-hidden="true" tabindex="-1"></a><span class="st">                ..${primitiveModels.flatMap(_.code)}</span></span>
<span id="cb3-17"><a href="#cb3-17" aria-hidden="true" tabindex="-1"></a><span class="st">              }</span></span>
<span id="cb3-18"><a href="#cb3-18" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-19"><a href="#cb3-19" aria-hidden="true" tabindex="-1"></a><span class="st">              ..${models.flatMap(_.code)}</span></span>
<span id="cb3-20"><a href="#cb3-20" aria-hidden="true" tabindex="-1"></a><span class="st">            }}&quot;&quot;&quot;</span></span></code></pre></div>
<p>This can be then <em>pretty printed</em> simply with<code>.toString</code> and saved to a <code>.scala</code> file.</p>
<h2 id="building-the-libraries">Building the libraries</h2>
<p>We have a way to collect the service models and generate source code from that, but we still have to use that generated code somehow. In <code>zio-aws</code> the goal was to generate a separate <em>client library</em> for each AWS service. At the time of writing, there were <strong>235</strong> such services. The generated libraries have to be built and published to <em>Sonatype</em>.</p>
<h3 id="first-version">First version</h3>
<p>In the first version I simply wired together the above described <code>loader</code> and <code>generator</code> module into a <code>ZIO</code> <em>command line</em> app, using <a href="https://vigoo.github.io/clipp/docs/">clipp</a> for command line parsing. It’s <code>main</code> was really just something like the following:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="kw">val</span> app <span class="op">=</span> <span class="cf">for</span> <span class="op">{</span></span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a>  svcs <span class="op">&lt;-</span> config<span class="op">.</span>parameters<span class="op">[</span>Parameters<span class="op">].</span><span class="fu">map</span><span class="op">(</span>_<span class="op">.</span>serviceList<span class="op">)</span></span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a>  ids <span class="op">&lt;-</span> svcs <span class="cf">match</span> <span class="op">{</span></span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a>    <span class="cf">case</span> <span class="bu">Some</span><span class="op">(</span>ids<span class="op">)</span> <span class="op">=&gt;</span> ZIO<span class="op">.</span><span class="fu">succeed</span><span class="op">(</span>ids<span class="op">.</span>toSet<span class="op">)</span></span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a>    <span class="cf">case</span> <span class="bu">None</span> <span class="op">=&gt;</span> loader<span class="op">.</span><span class="fu">findModels</span><span class="op">().</span><span class="fu">mapError</span><span class="op">(</span>ReflectionError<span class="op">)</span></span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a>  <span class="op">}</span></span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a>  _ <span class="op">&lt;-</span> ZIO<span class="op">.</span><span class="fu">foreachPar</span><span class="op">(</span>ids<span class="op">)</span> <span class="op">{</span> id <span class="op">=&gt;</span></span>
<span id="cb4-8"><a href="#cb4-8" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span> <span class="op">{</span></span>
<span id="cb4-9"><a href="#cb4-9" aria-hidden="true" tabindex="-1"></a>      model <span class="op">&lt;-</span> loader<span class="op">.</span><span class="fu">loadCodegenModel</span><span class="op">(</span>id<span class="op">).</span><span class="fu">mapError</span><span class="op">(</span>ReflectionError<span class="op">)</span></span>
<span id="cb4-10"><a href="#cb4-10" aria-hidden="true" tabindex="-1"></a>      _ <span class="op">&lt;-</span> generator<span class="op">.</span><span class="fu">generateServiceCode</span><span class="op">(</span>id<span class="op">,</span> model<span class="op">).</span><span class="fu">mapError</span><span class="op">(</span>GeneratorError<span class="op">)</span></span>
<span id="cb4-11"><a href="#cb4-11" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span> <span class="cf">yield</span> <span class="op">()</span></span>
<span id="cb4-12"><a href="#cb4-12" aria-hidden="true" tabindex="-1"></a>  <span class="op">}</span></span>
<span id="cb4-13"><a href="#cb4-13" aria-hidden="true" tabindex="-1"></a>  _ <span class="op">&lt;-</span> generator<span class="op">.</span><span class="fu">generateBuildSbt</span><span class="op">(</span>ids<span class="op">).</span><span class="fu">mapError</span><span class="op">(</span>GeneratorError<span class="op">)</span></span>
<span id="cb4-14"><a href="#cb4-14" aria-hidden="true" tabindex="-1"></a>  _ <span class="op">&lt;-</span> generator<span class="op">.</span><span class="fu">copyCoreProject</span><span class="op">().</span><span class="fu">mapError</span><span class="op">(</span>GeneratorError<span class="op">)</span></span>
<span id="cb4-15"><a href="#cb4-15" aria-hidden="true" tabindex="-1"></a><span class="op">}</span> <span class="cf">yield</span> ExitCode<span class="op">.</span>success</span>
<span id="cb4-16"><a href="#cb4-16" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-17"><a href="#cb4-17" aria-hidden="true" tabindex="-1"></a><span class="kw">val</span> cfg <span class="op">=</span> config<span class="op">.</span><span class="fu">fromArgsWithUsageInfo</span><span class="op">(</span>args<span class="op">,</span> Parameters<span class="op">.</span>spec<span class="op">).</span><span class="fu">mapError</span><span class="op">(</span>ParserError<span class="op">)</span></span>
<span id="cb4-18"><a href="#cb4-18" aria-hidden="true" tabindex="-1"></a><span class="kw">val</span> modules <span class="op">=</span> loader<span class="op">.</span>live <span class="op">++</span> <span class="op">(</span>cfg <span class="op">&gt;+&gt;</span> generator<span class="op">.</span>live<span class="op">)</span></span>
<span id="cb4-19"><a href="#cb4-19" aria-hidden="true" tabindex="-1"></a>app<span class="op">.</span><span class="fu">provideCustomLayer</span><span class="op">(</span>modules<span class="op">)</span></span></code></pre></div>
<p>Then created a <em>multi-module</em> <code>sbt</code> project with the following modules:</p>
<ul>
<li><code>zio-aws-codegen</code> the CLI code generator we were talking about so far</li>
<li><code>zio-aws-core</code> holding the common part of all AWS service wrapper libraries. This contains things like how to translate AWS pagination into <code>ZStream</code> etc.</li>
<li><code>zio-aws-akka-http</code>, <code>zio-aws-http4s</code> and <code>zio-aws-netty</code> are the supported <em>HTTP layers</em>, all depend on <code>zio-aws-core</code></li>
</ul>
<p>I also created a first <em>example</em> project in a separate <code>sbt</code> project, that demonstrated the use of some of the generated AWS client libraries. With this primitive setup, building everything from scratch and running the example took the following steps:</p>
<ol type="1">
<li><code>sbt compile</code> the root project</li>
<li>manually running <code>zio-aws-codegen</code> to generate <em>all client libs at once</em> to a separate directory, with a corresponding <code>build.sbt</code> including all these projects in a single <code>sbt</code> project</li>
<li><code>sbt publishLocal</code> in the generated <code>sbt</code> project</li>
<li><code>sbt run</code> in the <em>examples</em> project</li>
</ol>
<p>For the second, manual step I created some <em>custom sbt tasks</em> called <code>generateAll</code>, <code>buildAll</code>, and <code>publishLocalAll</code>, that downloaded an <code>sbt-launch-*.jar</code> and used it to run the code generator and fork an <code>sbt</code> to build the generated project.</p>
<p>The <code>generateAll</code> task was quite simple:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a>generateAll <span class="op">:=</span> Def<span class="op">.</span>taskDyn <span class="op">{</span></span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a>  <span class="kw">val</span> root <span class="op">=</span> baseDirectory<span class="op">.</span>value<span class="op">.</span>getAbsolutePath</span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a>  Def<span class="op">.</span>task <span class="op">{</span></span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a>    <span class="op">(</span>codegen <span class="op">/</span> Compile <span class="op">/</span> run<span class="op">).</span><span class="fu">toTask</span><span class="op">(</span><span class="ss">s&quot;</span><span class="st"> --target-root </span><span class="ss">${</span>root<span class="ss">}</span><span class="st">/generated --source-root </span><span class="ss">${</span>root<span class="ss">}</span><span class="st"> --version </span><span class="ss">$zioAwsVersion</span><span class="st"> --zio-version </span><span class="ss">$zioVersion</span><span class="st"> --zio-rs-version </span><span class="ss">$zioReactiveStreamsInteropVersion&quot;</span><span class="op">).</span>value</span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a>  <span class="op">}</span></span>
<span id="cb5-6"><a href="#cb5-6" aria-hidden="true" tabindex="-1"></a><span class="op">}.</span>value</span></code></pre></div>
<p>Launching a second <code>sbt</code> took more effort:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a>buildAll <span class="op">:=</span> Def<span class="op">.</span>taskDyn <span class="op">{</span></span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a>  <span class="kw">val</span> _ <span class="op">=</span> generateAll<span class="op">.</span>value</span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a>  <span class="kw">val</span> generatedRoot <span class="op">=</span> baseDirectory<span class="op">.</span>value <span class="op">/</span> <span class="st">&quot;generated&quot;</span></span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a>  <span class="kw">val</span> launcherVersion <span class="op">=</span> sbtVersion<span class="op">.</span>value</span>
<span id="cb6-5"><a href="#cb6-5" aria-hidden="true" tabindex="-1"></a>  <span class="kw">val</span> launcher <span class="op">=</span> <span class="ss">s&quot;</span><span class="st">sbt-launch-</span><span class="ss">$launcherVersion</span><span class="st">.jar</span><span class="ss">&quot;</span></span>
<span id="cb6-6"><a href="#cb6-6" aria-hidden="true" tabindex="-1"></a>  <span class="kw">val</span> launcherFile <span class="op">=</span> generatedRoot <span class="op">/</span> launcher</span>
<span id="cb6-7"><a href="#cb6-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-8"><a href="#cb6-8" aria-hidden="true" tabindex="-1"></a>  Def<span class="op">.</span>task<span class="op">[</span><span class="bu">Unit</span><span class="op">]</span> <span class="op">{</span></span>
<span id="cb6-9"><a href="#cb6-9" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> <span class="op">(!</span>launcherFile<span class="op">.</span>exists<span class="op">)</span> <span class="op">{</span></span>
<span id="cb6-10"><a href="#cb6-10" aria-hidden="true" tabindex="-1"></a>      <span class="kw">val</span> u <span class="op">=</span> <span class="fu">url</span><span class="op">(</span><span class="ss">s&quot;</span><span class="st">https://oss.sonatype.org/content/repositories/public/org/scala-sbt/sbt-launch/</span><span class="ss">$launcherVersion</span><span class="st">/sbt-launch-</span><span class="ss">$launcherVersion</span><span class="st">.jar</span><span class="ss">&quot;</span><span class="op">)</span></span>
<span id="cb6-11"><a href="#cb6-11" aria-hidden="true" tabindex="-1"></a>      sbt<span class="op">.</span>io<span class="op">.</span>Using<span class="op">.</span><span class="fu">urlInputStream</span><span class="op">(</span>u<span class="op">)</span> <span class="op">{</span> inputStream <span class="op">=&gt;</span></span>
<span id="cb6-12"><a href="#cb6-12" aria-hidden="true" tabindex="-1"></a>        IO<span class="op">.</span><span class="fu">transfer</span><span class="op">(</span>inputStream<span class="op">,</span> launcherFile<span class="op">)</span></span>
<span id="cb6-13"><a href="#cb6-13" aria-hidden="true" tabindex="-1"></a>      <span class="op">}</span></span>
<span id="cb6-14"><a href="#cb6-14" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb6-15"><a href="#cb6-15" aria-hidden="true" tabindex="-1"></a>    <span class="kw">val</span> fork <span class="op">=</span> <span class="kw">new</span> <span class="fu">ForkRun</span><span class="op">(</span><span class="fu">ForkOptions</span><span class="op">()</span></span>
<span id="cb6-16"><a href="#cb6-16" aria-hidden="true" tabindex="-1"></a>      <span class="op">.</span><span class="fu">withWorkingDirectory</span><span class="op">(</span>generatedRoot<span class="op">))</span></span>
<span id="cb6-17"><a href="#cb6-17" aria-hidden="true" tabindex="-1"></a>    fork<span class="op">.</span><span class="fu">run</span><span class="op">(</span></span>
<span id="cb6-18"><a href="#cb6-18" aria-hidden="true" tabindex="-1"></a>      <span class="st">&quot;xsbt.boot.Boot&quot;</span><span class="op">,</span></span>
<span id="cb6-19"><a href="#cb6-19" aria-hidden="true" tabindex="-1"></a>      classpath <span class="op">=</span> launcherFile <span class="op">::</span> Nil<span class="op">,</span></span>
<span id="cb6-20"><a href="#cb6-20" aria-hidden="true" tabindex="-1"></a>      options <span class="op">=</span> <span class="st">&quot;compile&quot;</span> <span class="op">::</span> Nil<span class="op">,</span></span>
<span id="cb6-21"><a href="#cb6-21" aria-hidden="true" tabindex="-1"></a>      log <span class="op">=</span> streams<span class="op">.</span>value<span class="op">.</span>log</span>
<span id="cb6-22"><a href="#cb6-22" aria-hidden="true" tabindex="-1"></a>    <span class="op">)</span></span>
<span id="cb6-23"><a href="#cb6-23" aria-hidden="true" tabindex="-1"></a>  <span class="op">}</span></span>
<span id="cb6-24"><a href="#cb6-24" aria-hidden="true" tabindex="-1"></a><span class="op">}.</span>value</span></code></pre></div>
<p>With these extra tasks, I released the first version of the library manually, but there was a lot of annoying difficulties:</p>
<ul>
<li>Having to switch between various <code>sbt</code> projects</li>
<li>The need to <code>publishLocal</code> the generated artifacts in order to build the examples, or any kind of integration tests that I planned to add</li>
<li>The only way to build only those client libraries that are needed for the examples/tests was to build and publish them manually, as this dependency was not tracked at all between the unrelated <code>sbt</code> projects</li>
<li>Because the generated <code>sbt</code> project could not refer to the outer <code>zio-aws-core</code> project, it has to be copied into the generated project in the code generator step</li>
<li>Building and publishing all the <strong>235</strong> projects at once required about <strong>16Gb</strong> memory and hours of compilation time. It was too big to run on any of the (freely available) CI systems.</li>
</ul>
<h3 id="proper-solution">Proper solution</h3>
<p>When I mentioned this, <em>Itamar Ravid</em> recommended trying to make it an <em>sbt code generator</em>. <code>sbt</code> has built-in support for generating source code, as described <a href="https://www.scala-sbt.org/1.0/docs/Howto-Generating-Files.html">on it’s documentation page</a>. This alone though would not be enough to cover our use case, as in <code>zio-aws</code> even the <em>set of projects</em> is dynamic and comes from the enumeration of schema models. Fortunately, there is support for that in too, through the <code>extraProjects</code> property of <code>sbt</code> <em>plugins</em>.</p>
<p>With these two tools, the new project layout became the following:</p>
<ul>
<li><code>zio-aws-codegen</code> is an sbt <strong>plugin</strong>, having it’s own <code>sbt</code> project in a subdirectory</li>
<li>the <code>zio-aws-core</code> and the HTTP libraries are all in the top-level project as before</li>
<li>examples and integration tests are also part of the top-level project</li>
<li>the <code>zio-aws-codegen</code> plugin is referenced using a <code>ProjectRef</code> from the outer project</li>
<li>the plugin adds all the <em>AWS service client wrapper libraries</em> to the top-level project</li>
<li>these projects generate their source on-demand</li>
</ul>
<p>In this setup, it is possible to build any subset of the generated libraries without the need to process and compile all of them, so it needs much less memory. It is also much simpler to run tests or build examples on top of them, as the test and example projects can directly depend on the generated libraries as <code>sbt</code> submodules. And even developing the <em>code generator</em> itself is convenient - although for editing it, it has to be opened as in a separate IDE session, but otherwise, <code>sbt reload</code> on the top level project automatically recompiles the plugin when needed.</p>
<p>Let’s see piece by piece how we can achieve this!</p>
<h4 id="project-as-a-source-dependency">Project as a source dependency</h4>
<p>The first thing I wanted to do is having the <code>zio-aws-codegen</code> project converted to an <code>sbt</code> plugin, but still having it in the same repository and be able to use it without having to install to a local repository. Although the whole code generator code could have been added to the top level <code>sbt</code> project’s <code>project</code> source, I wanted to keep it as a separate module to be able to publish it as a library or a CLI tool in the future if needed.</p>
<p>This can be achieved by putting it in a subdirectory of the top level project, with a separate <code>build.sbt</code> that contains the</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a>sbtPlugin <span class="op">:=</span> <span class="kw">true</span></span></code></pre></div>
<p>(beside the usual ones). Then it can be referenced in the top level project’s <code>project/plugins.sbt</code> in the following way:</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a><span class="kw">lazy</span> <span class="kw">val</span> codegen <span class="op">=</span> project</span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a>  <span class="op">.</span><span class="fu">in</span><span class="op">(</span><span class="fu">file</span><span class="op">(</span><span class="st">&quot;.&quot;</span><span class="op">))</span></span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true" tabindex="-1"></a>  <span class="op">.</span><span class="fu">dependsOn</span><span class="op">(</span><span class="fu">ProjectRef</span><span class="op">(</span><span class="fu">file</span><span class="op">(</span><span class="st">&quot;../zio-aws-codegen&quot;</span><span class="op">),</span> <span class="st">&quot;zio-aws-codegen&quot;</span><span class="op">))</span></span></code></pre></div>
<p>and enabled in the <code>build.sbt</code> as</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true" tabindex="-1"></a><span class="fu">enablePlugins</span><span class="op">(</span>ZioAwsCodegenPlugin<span class="op">)</span></span></code></pre></div>
<h4 id="dynamically-generating-projects">Dynamically generating projects</h4>
<p>To generate the subprojects dynamically, we need the <code>Set[ModelId]</code> coming from the <code>loader</code> module. It is a <code>ZIO</code> module, so from the <code>sbt</code> plugin we have to use <code>Runtime.default.unsafeRun</code> to execute it.</p>
<p>As the code generator project is now an <code>sbt</code> plugin, all the <code>sbt</code> data structures are directly available, so we can just write a function that maps the <code>ModelId</code>s to <code>Project</code>s:</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true" tabindex="-1"></a><span class="kw">protected</span> <span class="kw">def</span> <span class="fu">generateSbtSubprojects</span><span class="op">(</span>ids<span class="op">:</span> <span class="ex">Set</span><span class="op">[</span>ModelId<span class="op">]):</span> <span class="bu">Seq</span><span class="op">[</span>Project<span class="op">]</span> <span class="op">=</span> <span class="op">???</span></span></code></pre></div>
<p>One interesting part here is that some of the subprojects are depending on each other. This happens with AWS service <em>submodules</em>, indicated by the second parameter of <code>ModelId</code>. An example is <code>dynamodbstreams</code> that depends on <code>dynamodb</code>. When creating the <code>Project</code> values, we have to be able to <code>dependOn</code> on some other already generated projects, and they have to be generated in the correct order to do so.</p>
<p>We could do a full topological sort, but it is not necessary, here we know that the maximum depth of dependencies is 1, so it is enough to put the submodules at the end of the sequence:</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true" tabindex="-1"></a><span class="kw">val</span> map <span class="op">=</span> ids</span>
<span id="cb11-2"><a href="#cb11-2" aria-hidden="true" tabindex="-1"></a>  <span class="op">.</span>toSeq</span>
<span id="cb11-3"><a href="#cb11-3" aria-hidden="true" tabindex="-1"></a>  <span class="op">.</span>sortWith <span class="op">{</span> <span class="cf">case</span> <span class="op">(</span>a<span class="op">,</span> b<span class="op">)</span> <span class="op">=&gt;</span></span>
<span id="cb11-4"><a href="#cb11-4" aria-hidden="true" tabindex="-1"></a>    <span class="kw">val</span> aIsDependent <span class="op">=</span> a<span class="op">.</span>subModuleName <span class="cf">match</span> <span class="op">{</span></span>
<span id="cb11-5"><a href="#cb11-5" aria-hidden="true" tabindex="-1"></a>      <span class="cf">case</span> <span class="bu">Some</span><span class="op">(</span>value<span class="op">)</span> <span class="cf">if</span> value <span class="op">!=</span> a<span class="op">.</span>name <span class="op">=&gt;</span> <span class="kw">true</span></span>
<span id="cb11-6"><a href="#cb11-6" aria-hidden="true" tabindex="-1"></a>      <span class="cf">case</span> _ <span class="op">=&gt;</span> <span class="kw">false</span></span>
<span id="cb11-7"><a href="#cb11-7" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb11-8"><a href="#cb11-8" aria-hidden="true" tabindex="-1"></a>    <span class="kw">val</span> bIsDependent <span class="op">=</span> b<span class="op">.</span>subModuleName <span class="cf">match</span> <span class="op">{</span></span>
<span id="cb11-9"><a href="#cb11-9" aria-hidden="true" tabindex="-1"></a>      <span class="cf">case</span> <span class="bu">Some</span><span class="op">(</span>value<span class="op">)</span> <span class="cf">if</span> value <span class="op">!=</span> b<span class="op">.</span>name <span class="op">=&gt;</span> <span class="kw">true</span></span>
<span id="cb11-10"><a href="#cb11-10" aria-hidden="true" tabindex="-1"></a>      <span class="cf">case</span> _ <span class="op">=&gt;</span> <span class="kw">false</span></span>
<span id="cb11-11"><a href="#cb11-11" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb11-12"><a href="#cb11-12" aria-hidden="true" tabindex="-1"></a>    bIsDependent <span class="op">||</span> <span class="op">(!</span>aIsDependent <span class="op">&amp;&amp;</span> a<span class="op">.</span>toString <span class="op">&lt;</span> b<span class="op">.</span>toString<span class="op">)</span></span>
<span id="cb11-13"><a href="#cb11-13" aria-hidden="true" tabindex="-1"></a>  <span class="op">}</span></span></code></pre></div>
<p>Then in order to be able get the dependencies, we do a <em>fold</em> on the ordered <code>ModelId</code>s:</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb12-1"><a href="#cb12-1" aria-hidden="true" tabindex="-1"></a>  <span class="op">.</span><span class="fu">foldLeft</span><span class="op">(</span><span class="ex">Map</span><span class="op">.</span>empty<span class="op">[</span>ModelId<span class="op">,</span> Project<span class="op">])</span> <span class="op">{</span> <span class="op">(</span>mapping<span class="op">,</span> id<span class="op">)</span> <span class="op">=&gt;</span></span>
<span id="cb12-2"><a href="#cb12-2" aria-hidden="true" tabindex="-1"></a>      <span class="co">// ...</span></span>
<span id="cb12-3"><a href="#cb12-3" aria-hidden="true" tabindex="-1"></a>      <span class="kw">val</span> deps <span class="op">=</span> id<span class="op">.</span>subModule <span class="cf">match</span> <span class="op">{</span></span>
<span id="cb12-4"><a href="#cb12-4" aria-hidden="true" tabindex="-1"></a>        <span class="cf">case</span> <span class="bu">Some</span><span class="op">(</span>value<span class="op">)</span> <span class="cf">if</span> value <span class="op">!=</span> id<span class="op">.</span>name <span class="op">=&gt;</span></span>
<span id="cb12-5"><a href="#cb12-5" aria-hidden="true" tabindex="-1"></a>          <span class="bu">Seq</span><span class="op">(</span><span class="fu">ClasspathDependency</span><span class="op">(</span><span class="fu">LocalProject</span><span class="op">(</span><span class="st">&quot;zio-aws-core&quot;</span><span class="op">),</span> <span class="bu">None</span><span class="op">),</span></span>
<span id="cb12-6"><a href="#cb12-6" aria-hidden="true" tabindex="-1"></a>              <span class="fu">ClasspathDependency</span><span class="op">(</span><span class="fu">mapping</span><span class="op">(</span><span class="fu">ModelId</span><span class="op">(</span>id<span class="op">.</span>name<span class="op">,</span> <span class="bu">Some</span><span class="op">(</span>id<span class="op">.</span>name<span class="op">))),</span> <span class="bu">None</span><span class="op">))</span></span>
<span id="cb12-7"><a href="#cb12-7" aria-hidden="true" tabindex="-1"></a>        <span class="cf">case</span> _ <span class="op">=&gt;</span></span>
<span id="cb12-8"><a href="#cb12-8" aria-hidden="true" tabindex="-1"></a>          <span class="bu">Seq</span><span class="op">(</span><span class="fu">ClasspathDependency</span><span class="op">(</span><span class="fu">LocalProject</span><span class="op">(</span><span class="st">&quot;zio-aws-core&quot;</span><span class="op">),</span> <span class="bu">None</span><span class="op">))</span></span>
<span id="cb12-9"><a href="#cb12-9" aria-hidden="true" tabindex="-1"></a>      <span class="op">}</span>      </span>
<span id="cb12-10"><a href="#cb12-10" aria-hidden="true" tabindex="-1"></a>      <span class="kw">val</span> project <span class="op">=</span> <span class="fu">Project</span><span class="op">(</span>fullName<span class="op">,</span> <span class="fu">file</span><span class="op">(</span><span class="st">&quot;generated&quot;</span><span class="op">)</span> <span class="op">/</span> name<span class="op">)</span></span>
<span id="cb12-11"><a href="#cb12-11" aria-hidden="true" tabindex="-1"></a>        <span class="op">.</span><span class="fu">settings</span><span class="op">(</span></span>
<span id="cb12-12"><a href="#cb12-12" aria-hidden="true" tabindex="-1"></a>          libraryDependencies <span class="op">+=</span> <span class="st">&quot;software.amazon.awssdk&quot;</span> <span class="op">%</span> id<span class="op">.</span>name <span class="op">%</span> awsLibraryVersion<span class="op">.</span>value<span class="op">,</span></span>
<span id="cb12-13"><a href="#cb12-13" aria-hidden="true" tabindex="-1"></a>          <span class="co">// ...</span></span>
<span id="cb12-14"><a href="#cb12-14" aria-hidden="true" tabindex="-1"></a>        <span class="op">.</span><span class="fu">dependsOn</span><span class="op">(</span>deps<span class="op">:</span> _<span class="op">*)</span></span>
<span id="cb12-15"><a href="#cb12-15" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb12-16"><a href="#cb12-16" aria-hidden="true" tabindex="-1"></a>      mapping<span class="op">.</span><span class="fu">updated</span><span class="op">(</span>id<span class="op">,</span> project<span class="op">)</span></span>
<span id="cb12-17"><a href="#cb12-17" aria-hidden="true" tabindex="-1"></a>  <span class="op">}</span></span></code></pre></div>
<p>To make it easier to work with the generated projects, we also create a project named <code>all</code> that aggregates all the ones generated above.</p>
<h4 id="applying-settings-to-the-generated-projects">Applying settings to the generated projects</h4>
<p>The code generator only sets the basic settings for the generated projects: name, path and dependencies. We need a lot more, setting organization and version, all the publishing options, controlling the Scala version, etc.</p>
<p>I decided to keep these settings outside of the code generator plugin, in the top-level <code>sbt</code> project. By creating an <code>AutoPlugin</code> end enabling it for all projects, we can inject all the common settings for both the hand-written and the generated projects:</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb13-1"><a href="#cb13-1" aria-hidden="true" tabindex="-1"></a><span class="kw">object</span> Common <span class="kw">extends</span> AutoPlugin <span class="op">{</span></span>
<span id="cb13-2"><a href="#cb13-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-3"><a href="#cb13-3" aria-hidden="true" tabindex="-1"></a>  <span class="kw">object</span> autoImport <span class="op">{</span></span>
<span id="cb13-4"><a href="#cb13-4" aria-hidden="true" tabindex="-1"></a>    <span class="kw">val</span> scala212Version <span class="op">=</span> <span class="st">&quot;2.12.12&quot;</span></span>
<span id="cb13-5"><a href="#cb13-5" aria-hidden="true" tabindex="-1"></a>    <span class="kw">val</span> scala213Version <span class="op">=</span> <span class="st">&quot;2.13.3&quot;</span></span>
<span id="cb13-6"><a href="#cb13-6" aria-hidden="true" tabindex="-1"></a>    <span class="co">// ...</span></span>
<span id="cb13-7"><a href="#cb13-7" aria-hidden="true" tabindex="-1"></a>  <span class="op">}</span></span>
<span id="cb13-8"><a href="#cb13-8" aria-hidden="true" tabindex="-1"></a>  <span class="kw">import</span> autoImport<span class="op">.</span>_</span>
<span id="cb13-9"><a href="#cb13-9" aria-hidden="true" tabindex="-1"></a>    </span>
<span id="cb13-10"><a href="#cb13-10" aria-hidden="true" tabindex="-1"></a>  <span class="kw">override</span> <span class="kw">val</span> trigger <span class="op">=</span> allRequirements</span>
<span id="cb13-11"><a href="#cb13-11" aria-hidden="true" tabindex="-1"></a>  <span class="kw">override</span> <span class="kw">val</span> <span class="kw">requires</span> <span class="op">=</span> Sonatype</span>
<span id="cb13-12"><a href="#cb13-12" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-13"><a href="#cb13-13" aria-hidden="true" tabindex="-1"></a>  <span class="kw">override</span> <span class="kw">lazy</span> <span class="kw">val</span> projectSettings <span class="op">=</span></span>
<span id="cb13-14"><a href="#cb13-14" aria-hidden="true" tabindex="-1"></a>    <span class="bu">Seq</span><span class="op">(</span></span>
<span id="cb13-15"><a href="#cb13-15" aria-hidden="true" tabindex="-1"></a>      scalaVersion <span class="op">:=</span> scala213Version<span class="op">,</span></span>
<span id="cb13-16"><a href="#cb13-16" aria-hidden="true" tabindex="-1"></a>      crossScalaVersions <span class="op">:=</span> <span class="ex">List</span><span class="op">(</span>scala212Version<span class="op">,</span> scala213Version<span class="op">),</span></span>
<span id="cb13-17"><a href="#cb13-17" aria-hidden="true" tabindex="-1"></a>      <span class="co">// ...</span></span>
<span id="cb13-18"><a href="#cb13-18" aria-hidden="true" tabindex="-1"></a>    <span class="op">)</span></span>
<span id="cb13-19"><a href="#cb13-19" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<h4 id="source-generator-task">Source generator task</h4>
<p>At this point, we could also add the already existing <em>source code generation</em> to the initialization of the plugin, and just generate all the subproject’s all source files every time the <code>sbt</code> project is loaded. With this number of generated projects though, it would have been a very big startup overhead and would not allow us to split the build (at least not the code generation part) on CI, to solve the memory and build time issues.</p>
<p>As <code>sbt</code> has built-in support for defining <em>source generator tasks</em>, we can do much better!</p>
<p>Instead of generating the source codes in one step, we define a <code>generateSources</code> task and add it to each <em>generated subproject</em> as a <em>source generator</em>:</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb14-1"><a href="#cb14-1" aria-hidden="true" tabindex="-1"></a>Compile <span class="op">/</span> sourceGenerators <span class="op">+=</span> generateSources<span class="op">.</span>taskValue<span class="op">,</span></span>
<span id="cb14-2"><a href="#cb14-2" aria-hidden="true" tabindex="-1"></a>awsLibraryId <span class="op">:=</span> id<span class="op">.</span>toString</span></code></pre></div>
<p>The <code>awsLibraryId</code> is a custom property that we the <code>generateSources</code> task can use to determine which schema to use for the code generation.</p>
<p>The first part of this task is to gather the information from the project it got applied on, including the custom <code>awsLibraryId</code> property:</p>
<div class="sourceCode" id="cb15"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb15-1"><a href="#cb15-1" aria-hidden="true" tabindex="-1"></a><span class="kw">lazy</span> <span class="kw">val</span> generateSources <span class="op">=</span></span>
<span id="cb15-2"><a href="#cb15-2" aria-hidden="true" tabindex="-1"></a>  Def<span class="op">.</span>task <span class="op">{</span></span>
<span id="cb15-3"><a href="#cb15-3" aria-hidden="true" tabindex="-1"></a>    <span class="kw">val</span> log <span class="op">=</span> streams<span class="op">.</span>value<span class="op">.</span>log</span>
<span id="cb15-4"><a href="#cb15-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb15-5"><a href="#cb15-5" aria-hidden="true" tabindex="-1"></a>    <span class="kw">val</span> idStr <span class="op">=</span> awsLibraryId<span class="op">.</span>value</span>
<span id="cb15-6"><a href="#cb15-6" aria-hidden="true" tabindex="-1"></a>    <span class="kw">val</span> id <span class="op">=</span> ModelId<span class="op">.</span><span class="fu">parse</span><span class="op">(</span>idStr<span class="op">)</span> <span class="cf">match</span> <span class="op">{</span></span>
<span id="cb15-7"><a href="#cb15-7" aria-hidden="true" tabindex="-1"></a>      <span class="cf">case</span> <span class="fu">Left</span><span class="op">(</span>failure<span class="op">)</span> <span class="op">=&gt;</span> sys<span class="op">.</span><span class="fu">error</span><span class="op">(</span>failure<span class="op">)</span></span>
<span id="cb15-8"><a href="#cb15-8" aria-hidden="true" tabindex="-1"></a>      <span class="cf">case</span> <span class="fu">Right</span><span class="op">(</span>value<span class="op">)</span> <span class="op">=&gt;</span> value</span>
<span id="cb15-9"><a href="#cb15-9" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb15-10"><a href="#cb15-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb15-11"><a href="#cb15-11" aria-hidden="true" tabindex="-1"></a>    <span class="kw">val</span> targetRoot <span class="op">=</span> <span class="op">(</span>sourceManaged in Compile<span class="op">).</span>value</span>
<span id="cb15-12"><a href="#cb15-12" aria-hidden="true" tabindex="-1"></a>    <span class="kw">val</span> travisSrc <span class="op">=</span> travisSource<span class="op">.</span>value</span>
<span id="cb15-13"><a href="#cb15-13" aria-hidden="true" tabindex="-1"></a>    <span class="kw">val</span> travisDst <span class="op">=</span> travisTarget<span class="op">.</span>value</span>
<span id="cb15-14"><a href="#cb15-14" aria-hidden="true" tabindex="-1"></a>    <span class="kw">val</span> parallelJobs <span class="op">=</span> travisParallelJobs<span class="op">.</span>value</span></code></pre></div>
<p>From these, we create a <code>Parameters</code> data structure to pass to the <code>generator</code> module. This is what we used to construct with <code>clipp</code> from CLI arguments:</p>
<div class="sourceCode" id="cb16"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb16-1"><a href="#cb16-1" aria-hidden="true" tabindex="-1"></a>    <span class="kw">val</span> params <span class="op">=</span> <span class="fu">Parameters</span><span class="op">(</span></span>
<span id="cb16-2"><a href="#cb16-2" aria-hidden="true" tabindex="-1"></a>      targetRoot <span class="op">=</span> Path<span class="op">.</span><span class="fu">fromJava</span><span class="op">(</span>targetRoot<span class="op">.</span>toPath<span class="op">),</span></span>
<span id="cb16-3"><a href="#cb16-3" aria-hidden="true" tabindex="-1"></a>      travisSource <span class="op">=</span> Path<span class="op">.</span><span class="fu">fromJava</span><span class="op">(</span>travisSrc<span class="op">.</span>toPath<span class="op">),</span></span>
<span id="cb16-4"><a href="#cb16-4" aria-hidden="true" tabindex="-1"></a>      travisTarget <span class="op">=</span> Path<span class="op">.</span><span class="fu">fromJava</span><span class="op">(</span>travisDst<span class="op">.</span>toPath<span class="op">),</span></span>
<span id="cb16-5"><a href="#cb16-5" aria-hidden="true" tabindex="-1"></a>      parallelTravisJobs <span class="op">=</span> parallelJobs</span>
<span id="cb16-6"><a href="#cb16-6" aria-hidden="true" tabindex="-1"></a>    <span class="op">)</span></span></code></pre></div>
<p>And finally, construct the <code>ZIO</code> environment, load a <strong>single</strong> schema model, and generate the library’s source code:</p>
<div class="sourceCode" id="cb17"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb17-1"><a href="#cb17-1" aria-hidden="true" tabindex="-1"></a>    zio<span class="op">.</span><span class="ex">Runtime</span><span class="op">.</span>default<span class="op">.</span>unsafeRun <span class="op">{</span></span>
<span id="cb17-2"><a href="#cb17-2" aria-hidden="true" tabindex="-1"></a>      <span class="kw">val</span> cfg <span class="op">=</span> ZLayer<span class="op">.</span><span class="fu">succeed</span><span class="op">(</span>params<span class="op">)</span></span>
<span id="cb17-3"><a href="#cb17-3" aria-hidden="true" tabindex="-1"></a>      <span class="kw">val</span> env <span class="op">=</span> loader<span class="op">.</span>live <span class="op">++</span> <span class="op">(</span>cfg <span class="op">&gt;+&gt;</span> generator<span class="op">.</span>live<span class="op">)</span></span>
<span id="cb17-4"><a href="#cb17-4" aria-hidden="true" tabindex="-1"></a>      <span class="kw">val</span> task <span class="op">=</span></span>
<span id="cb17-5"><a href="#cb17-5" aria-hidden="true" tabindex="-1"></a>        <span class="cf">for</span> <span class="op">{</span></span>
<span id="cb17-6"><a href="#cb17-6" aria-hidden="true" tabindex="-1"></a>          _ <span class="op">&lt;-</span> ZIO<span class="op">.</span><span class="fu">effect</span><span class="op">(</span>log<span class="op">.</span><span class="fu">info</span><span class="op">(</span><span class="ss">s&quot;</span><span class="st">Generating sources for </span><span class="ss">$id&quot;</span><span class="op">))</span></span>
<span id="cb17-7"><a href="#cb17-7" aria-hidden="true" tabindex="-1"></a>          model <span class="op">&lt;-</span> loader<span class="op">.</span><span class="fu">loadCodegenModel</span><span class="op">(</span>id<span class="op">)</span></span>
<span id="cb17-8"><a href="#cb17-8" aria-hidden="true" tabindex="-1"></a>          files <span class="op">&lt;-</span> generator<span class="op">.</span><span class="fu">generateServiceCode</span><span class="op">(</span>id<span class="op">,</span> model<span class="op">)</span></span>
<span id="cb17-9"><a href="#cb17-9" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span> <span class="cf">yield</span> files<span class="op">.</span>toSeq</span>
<span id="cb17-10"><a href="#cb17-10" aria-hidden="true" tabindex="-1"></a>      task<span class="op">.</span><span class="fu">provideCustomLayer</span><span class="op">(</span>env<span class="op">).</span>catchAll <span class="op">{</span> generatorError <span class="op">=&gt;</span></span>
<span id="cb17-11"><a href="#cb17-11" aria-hidden="true" tabindex="-1"></a>        ZIO<span class="op">.</span><span class="fu">effect</span><span class="op">(</span>log<span class="op">.</span><span class="fu">error</span><span class="op">(</span><span class="ss">s&quot;</span><span class="st">Code generator failure: </span><span class="ss">${</span>generatorError<span class="ss">}&quot;</span><span class="op">)).</span><span class="fu">as</span><span class="op">(</span><span class="bu">Seq</span><span class="op">.</span>empty<span class="op">)</span></span>
<span id="cb17-12"><a href="#cb17-12" aria-hidden="true" tabindex="-1"></a>      <span class="op">}</span></span>
<span id="cb17-13"><a href="#cb17-13" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb17-14"><a href="#cb17-14" aria-hidden="true" tabindex="-1"></a>  <span class="op">}</span></span></code></pre></div>
<p>The <code>generateServiceCode</code> function returns a <code>Set[File]</code> value containing all the generated source files. This is the result of the <em>source generator task</em>, and <code>sbt</code> uses this information to add the generated files to the compilation.</p>
<h4 id="referencing-the-generated-projects">Referencing the generated projects</h4>
<p>When defining downstream projects in the <code>build.sbt</code>, such as integration tests and other examples, we have to refer to the generated projects somehow. There is no value of type <code>Project</code> in scope to do so, but we can do it easily by name using <code>LocalProject</code>. The following example shows how the <code>example1</code> subproject does this:</p>
<div class="sourceCode" id="cb18"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb18-1"><a href="#cb18-1" aria-hidden="true" tabindex="-1"></a><span class="kw">lazy</span> <span class="kw">val</span> example1 <span class="op">=</span> <span class="fu">Project</span><span class="op">(</span><span class="st">&quot;example1&quot;</span><span class="op">,</span> <span class="fu">file</span><span class="op">(</span><span class="st">&quot;examples&quot;</span><span class="op">)</span> <span class="op">/</span> <span class="st">&quot;example1&quot;</span><span class="op">)</span></span>
<span id="cb18-2"><a href="#cb18-2" aria-hidden="true" tabindex="-1"></a>  <span class="op">.</span><span class="fu">dependsOn</span><span class="op">(</span></span>
<span id="cb18-3"><a href="#cb18-3" aria-hidden="true" tabindex="-1"></a>    core<span class="op">,</span></span>
<span id="cb18-4"><a href="#cb18-4" aria-hidden="true" tabindex="-1"></a>    http4s<span class="op">,</span></span>
<span id="cb18-5"><a href="#cb18-5" aria-hidden="true" tabindex="-1"></a>    netty<span class="op">,</span></span>
<span id="cb18-6"><a href="#cb18-6" aria-hidden="true" tabindex="-1"></a>    <span class="fu">LocalProject</span><span class="op">(</span><span class="st">&quot;zio-aws-elasticbeanstalk&quot;</span><span class="op">),</span></span>
<span id="cb18-7"><a href="#cb18-7" aria-hidden="true" tabindex="-1"></a>    <span class="fu">LocalProject</span><span class="op">(</span><span class="st">&quot;zio-aws-ec2&quot;</span><span class="op">)</span></span>
<span id="cb18-8"><a href="#cb18-8" aria-hidden="true" tabindex="-1"></a>  <span class="op">)</span></span></code></pre></div>
<h4 id="parallel-build-on-travis-ci">Parallel build on Travis CI</h4>
<p>The last thing that I wanted to solve is building the full <code>zio-aws</code> suite on a CI. I am using <a href="https://travis-ci.org/">Travis CI</a> for my private projects, so that’s what I built it for. The idea is to split the set of <em>service client libraries</em> to chunks and create <a href="https://docs.travis-ci.com/user/build-matrix/">build matrix</a> to run those in parallel. The tricky part is that the set of generated service libraries is dynamic, collected by the code generator.</p>
<p>To solve this, I started to generate the <code>.travis.yml</code> build descriptor as well. The <em>hand-written</em> part has been moved to <code>.travis.base.yml</code>:</p>
<div class="sourceCode" id="cb19"><pre class="sourceCode yaml"><code class="sourceCode yaml"><span id="cb19-1"><a href="#cb19-1" aria-hidden="true" tabindex="-1"></a><span class="fu">language</span><span class="kw">:</span><span class="at"> scala</span></span>
<span id="cb19-2"><a href="#cb19-2" aria-hidden="true" tabindex="-1"></a><span class="fu">services</span><span class="kw">:</span></span>
<span id="cb19-3"><a href="#cb19-3" aria-hidden="true" tabindex="-1"></a><span class="at">  </span><span class="kw">-</span><span class="at"> docker</span></span>
<span id="cb19-4"><a href="#cb19-4" aria-hidden="true" tabindex="-1"></a><span class="fu">scala</span><span class="kw">:</span></span>
<span id="cb19-5"><a href="#cb19-5" aria-hidden="true" tabindex="-1"></a><span class="at">  </span><span class="kw">-</span><span class="at"> </span><span class="fl">2.12.12</span></span>
<span id="cb19-6"><a href="#cb19-6" aria-hidden="true" tabindex="-1"></a><span class="at">  </span><span class="kw">-</span><span class="at"> </span><span class="fl">2.13.3</span></span>
<span id="cb19-7"><a href="#cb19-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb19-8"><a href="#cb19-8" aria-hidden="true" tabindex="-1"></a><span class="fu">cache</span><span class="kw">:</span></span>
<span id="cb19-9"><a href="#cb19-9" aria-hidden="true" tabindex="-1"></a><span class="at">  </span><span class="fu">directories</span><span class="kw">:</span></span>
<span id="cb19-10"><a href="#cb19-10" aria-hidden="true" tabindex="-1"></a><span class="at">    </span><span class="kw">-</span><span class="at"> $HOME/.cache/coursier</span></span>
<span id="cb19-11"><a href="#cb19-11" aria-hidden="true" tabindex="-1"></a><span class="at">    </span><span class="kw">-</span><span class="at"> $HOME/.ivy2/cache</span></span>
<span id="cb19-12"><a href="#cb19-12" aria-hidden="true" tabindex="-1"></a><span class="at">    </span><span class="kw">-</span><span class="at"> $HOME/.sbt</span></span>
<span id="cb19-13"><a href="#cb19-13" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb19-14"><a href="#cb19-14" aria-hidden="true" tabindex="-1"></a><span class="fu">env</span><span class="kw">:</span></span>
<span id="cb19-15"><a href="#cb19-15" aria-hidden="true" tabindex="-1"></a><span class="at">  </span><span class="kw">-</span><span class="at"> COMMANDS=&quot;clean zio-aws-core/test zio-aws-akka-http/test zio-aws-http4s/test zio-aws-netty/test&quot;</span></span>
<span id="cb19-16"><a href="#cb19-16" aria-hidden="true" tabindex="-1"></a><span class="at">  </span><span class="kw">-</span><span class="at"> COMMANDS=&quot;clean examples/compile&quot;</span></span>
<span id="cb19-17"><a href="#cb19-17" aria-hidden="true" tabindex="-1"></a><span class="at">  </span><span class="kw">-</span><span class="at"> COMMANDS=&quot;clean integtests/test&quot;</span></span>
<span id="cb19-18"><a href="#cb19-18" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb19-19"><a href="#cb19-19" aria-hidden="true" tabindex="-1"></a><span class="fu">before_install</span><span class="kw">:</span></span>
<span id="cb19-20"><a href="#cb19-20" aria-hidden="true" tabindex="-1"></a><span class="at">  </span><span class="kw">-</span><span class="at"> if [ &quot;$COMMANDS&quot; = &quot;clean integtests/test&quot; ]; then docker pull localstack/localstack; fi</span></span>
<span id="cb19-21"><a href="#cb19-21" aria-hidden="true" tabindex="-1"></a><span class="at">  </span><span class="kw">-</span><span class="at"> if [ &quot;$COMMANDS&quot; = &quot;clean integtests/test&quot; ]; then docker run -d -p 4566:4566 --env SERVICES=s3,dynamodb --env START_WEB=0 localstack/localstack; fi</span></span>
<span id="cb19-22"><a href="#cb19-22" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb19-23"><a href="#cb19-23" aria-hidden="true" tabindex="-1"></a><span class="fu">script</span><span class="kw">:</span></span>
<span id="cb19-24"><a href="#cb19-24" aria-hidden="true" tabindex="-1"></a><span class="at">  </span><span class="kw">-</span><span class="at"> sbt ++$TRAVIS_SCALA_VERSION -jvm-opts travis/jvmopts $COMMANDS</span></span></code></pre></div>
<p>I use the <code>COMMANDS</code> environment variable to define the parallel sets of <code>sbt</code> commands here. There are three predefined sets: building <code>zio-aws-core</code> and the HTTP implementations, building the <em>example projects</em> and running the <em>integration test</em>. The last two involve generating actual service client code and building them - but only the few that are necessary, so it is not an issue to do that redundantly.</p>
<p>The real <code>.travis.yml</code> file is then generated by running a task <em>manually</em>, <code>sbt generateTravisYaml</code>. It is implemented in the <code>zio-aws-codegen</code> plugin and it loads the <code>.travis.base.yml</code> file and extends the <code>env</code> section with a set of <code>COMMANDS</code> variants, each compiling a subset of the generated subprojects.</p>
<h2 id="conclusion">Conclusion</h2>
<p>Travis CI can now build <code>zio-aws</code> and run its integration tests. A build runs for hours, but it is stable, and consists of 22 parallel jobs to build all the libraries for both Scala 2.12 and 2.13. At the same time, developing the code generator and the other subprojects and tests became really convenient.</p>
]]></summary>
</entry>
<entry>
    <title>prox part 4 - simplified redesign</title>
    <link href="http://vigoo.github.io/posts/2020-08-03-prox-4-simplify.html" />
    <id>http://vigoo.github.io/posts/2020-08-03-prox-4-simplify.html</id>
    <published>2020-08-03T00:00:00Z</published>
    <updated>2020-08-03T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on August  3, 2020
    
</div>

<h2 id="blog-post-series">Blog post series</h2>
<ul>
<li><a href="2019-02-10-prox-1-types.html">Part 1 - type level programming</a></li>
<li><a href="2019-03-07-prox-2-io-akkastreams.html">Part 2 - akka streams with cats effect</a></li>
<li><a href="2019-08-13-prox-3-zio.html">Part 3 - effect abstraction and ZIO</a></li>
<li><a href="2020-08-03-prox-4-simplify.html">Part 4 - simplified redesign</a></li>
</ul>
<h2 id="intro">Intro</h2>
<p>In <a href="2019-02-10-prox-1-types.html">Part 1</a> I described how the advanced type level programming techniques can be used to describe the execution of system processes. It was both a good playground to experiment with these and the result has been proven useful as we started to use it in more and more production systems and test environments at <a href="https://prezi.com">Prezi</a>.</p>
<p>On the other hand as I mentioned at the end of the first post, there is a tradeoff. These techniques made the original version of <em>prox</em> very hard to maintain and improve, and the error messages library users got by small mistakes were really hard to understand.</p>
<p>Last December (in 2019) I redesigned the library to be simpler and easier to use by making some compromises. Let’s discover how!</p>
<h2 id="a-single-process">A single process</h2>
<p>We start completely from scratch and try to design the library with the same functionality but with simplicity in mind. The code snippets shown here are not necessarily the final, current state of the traits and objects of the library, but some intermediate steps so we see the thought process.</p>
<p>First let’s focus on defining a <strong>single process</strong>:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="kw">trait</span> <span class="ex">Process</span> <span class="op">{</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>  <span class="kw">val</span> command<span class="op">:</span> <span class="ex">String</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>  <span class="kw">val</span> arguments<span class="op">:</span> <span class="ex">List</span><span class="op">[</span><span class="ex">String</span><span class="op">]</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>  <span class="kw">val</span> workingDirectory<span class="op">:</span> <span class="ex">Option</span><span class="op">[</span>Path<span class="op">]</span></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>  <span class="kw">val</span> environmentVariables<span class="op">:</span> <span class="ex">Map</span><span class="op">[</span><span class="ex">String</span><span class="op">,</span> <span class="ex">String</span><span class="op">]</span></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a>  <span class="kw">val</span> removedEnvironmentVariables<span class="op">:</span> <span class="ex">Set</span><span class="op">[</span><span class="ex">String</span><span class="op">]</span>    </span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>Without deciding already how it will be implemented, we know we need these information to be able to launch the process alone. And how to execute it? Let’s separate it completely:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="kw">trait</span> ProcessResult <span class="op">{</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>  <span class="kw">val</span> exitCode<span class="op">:</span> ExitCode</span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a><span class="kw">trait</span> ProcessRunner <span class="op">{</span></span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a>  <span class="kw">def</span> <span class="fu">start</span><span class="op">(</span>process<span class="op">:</span> <span class="ex">Process</span><span class="op">):</span> <span class="ex">Resource</span><span class="op">[</span>IO<span class="op">,</span> Fiber<span class="op">[</span>IO<span class="op">,</span> ProcessResult<span class="op">]]</span></span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>I decided that better integration with the IO library (<a href="https://typelevel.org/cats-effect/">cats-effect</a> in this case) is also a goal of the redesign, so for starter modelled the <em>running process</em> as a cancellable fiber resulting in <code>ProcessResult</code>, where cancellation means <strong>terminating</strong> the process. At this stage of the redesign I worked directly with <code>IO</code> instead of the <em>IO typeclasses</em> and later replaced it like I described in <a href="2019-08-13-prox-3-zio.html">the previous post</a>.</p>
<p>Let’s see how a simple runner implementation would look like:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> java<span class="op">.</span>lang<span class="op">.{</span><span class="ex">Process</span> <span class="op">=&gt;</span> JvmProcess<span class="op">}</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a><span class="kw">class</span> <span class="fu">JVMProcessRunner</span><span class="op">(</span><span class="kw">implicit</span> contextShift<span class="op">:</span> ContextShift<span class="op">[</span>IO<span class="op">])</span> <span class="kw">extends</span> ProcessRunner <span class="op">{</span></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a>  <span class="kw">import</span> JVMProcessRunner<span class="op">.</span>_</span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a>  <span class="kw">override</span> <span class="kw">def</span> <span class="fu">start</span><span class="op">(</span>process<span class="op">:</span> <span class="ex">Process</span><span class="op">):</span> <span class="ex">Resource</span><span class="op">[</span>IO<span class="op">,</span> Fiber<span class="op">[</span>IO<span class="op">,</span> ProcessResult<span class="op">]]</span> <span class="op">=</span> <span class="op">{</span></span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a>    <span class="kw">val</span> builder <span class="op">=</span> <span class="fu">withEnvironmentVariables</span><span class="op">(</span>process<span class="op">,</span></span>
<span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a>      <span class="fu">withWorkingDirectory</span><span class="op">(</span>process<span class="op">,</span></span>
<span id="cb3-9"><a href="#cb3-9" aria-hidden="true" tabindex="-1"></a>        <span class="kw">new</span> <span class="ex">ProcessBuilder</span><span class="op">((</span>process<span class="op">.</span>command <span class="op">::</span> process<span class="op">.</span>arguments<span class="op">).</span>asJava<span class="op">)))</span></span>
<span id="cb3-10"><a href="#cb3-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-11"><a href="#cb3-11" aria-hidden="true" tabindex="-1"></a>    <span class="kw">val</span> start <span class="op">=</span> IO<span class="op">.</span><span class="fu">delay</span><span class="op">(</span><span class="kw">new</span> <span class="fu">JVMRunningProcess</span><span class="op">(</span>builder<span class="op">.</span><span class="fu">start</span><span class="op">())).</span>bracketCase <span class="op">{</span> runningProcess <span class="op">=&gt;</span></span>
<span id="cb3-12"><a href="#cb3-12" aria-hidden="true" tabindex="-1"></a>      runningProcess<span class="op">.</span><span class="fu">waitForExit</span><span class="op">()</span></span>
<span id="cb3-13"><a href="#cb3-13" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span> <span class="op">{</span></span>
<span id="cb3-14"><a href="#cb3-14" aria-hidden="true" tabindex="-1"></a>      <span class="cf">case</span> <span class="op">(</span>_<span class="op">,</span> Completed<span class="op">)</span> <span class="op">=&gt;</span></span>
<span id="cb3-15"><a href="#cb3-15" aria-hidden="true" tabindex="-1"></a>        IO<span class="op">.</span><span class="dt">unit</span></span>
<span id="cb3-16"><a href="#cb3-16" aria-hidden="true" tabindex="-1"></a>      <span class="cf">case</span> <span class="op">(</span>_<span class="op">,</span> <span class="ex">Error</span><span class="op">(</span>reason<span class="op">))</span> <span class="op">=&gt;</span></span>
<span id="cb3-17"><a href="#cb3-17" aria-hidden="true" tabindex="-1"></a>        IO<span class="op">.</span><span class="fu">raiseError</span><span class="op">(</span>reason<span class="op">)</span></span>
<span id="cb3-18"><a href="#cb3-18" aria-hidden="true" tabindex="-1"></a>      <span class="cf">case</span> <span class="op">(</span>runningProcess<span class="op">,</span> Canceled<span class="op">)</span> <span class="op">=&gt;</span></span>
<span id="cb3-19"><a href="#cb3-19" aria-hidden="true" tabindex="-1"></a>        runningProcess<span class="op">.</span><span class="fu">terminate</span><span class="op">()</span> <span class="op">&gt;&gt;</span> IO<span class="op">.</span><span class="dt">unit</span></span>
<span id="cb3-20"><a href="#cb3-20" aria-hidden="true" tabindex="-1"></a>    <span class="op">}.</span>start</span>
<span id="cb3-21"><a href="#cb3-21" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-22"><a href="#cb3-22" aria-hidden="true" tabindex="-1"></a>    <span class="ex">Resource</span><span class="op">.</span><span class="fu">make</span><span class="op">(</span>start<span class="op">)(</span>_<span class="op">.</span>cancel<span class="op">)</span></span>
<span id="cb3-23"><a href="#cb3-23" aria-hidden="true" tabindex="-1"></a>  <span class="op">}</span></span>
<span id="cb3-24"><a href="#cb3-24" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>Here <code>withEnvironmentVariables</code> and <code>withWorkingDirectories</code> are just helper functions around the JVM <em>process builder</em>. The more important part is the <em>cancelation</em> and that we expose it as a <em>resource</em>.</p>
<p>First we wrap the started JVM process in a <code>JVMRunningProcess</code> class which really just wraps some of it’s operations in IO operations:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="cf">case</span> <span class="kw">class</span> <span class="fu">SimpleProcessResult</span><span class="op">(</span><span class="kw">override</span> <span class="kw">val</span> exitCode<span class="op">:</span> ExitCode<span class="op">)</span></span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a>  <span class="kw">extends</span> ProcessResult</span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a><span class="kw">class</span> <span class="fu">JVMRunningProcess</span><span class="op">(</span><span class="kw">val</span> nativeProcess<span class="op">:</span> JvmProcess<span class="op">)</span> <span class="kw">extends</span> RunningProcess <span class="op">{</span></span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a>  <span class="kw">override</span> <span class="kw">def</span> isAlive<span class="op">:</span> IO<span class="op">[</span><span class="ex">Boolean</span><span class="op">]</span> <span class="op">=</span> IO<span class="op">.</span><span class="fu">delay</span><span class="op">(</span>nativeProcess<span class="op">.</span>isAlive<span class="op">)</span></span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a>  <span class="kw">override</span> <span class="kw">def</span> <span class="fu">kill</span><span class="op">():</span> IO<span class="op">[</span>ProcessResult<span class="op">]</span> <span class="op">=</span> IO<span class="op">.</span><span class="fu">delay</span><span class="op">(</span>nativeProcess<span class="op">.</span><span class="fu">destroyForcibly</span><span class="op">())</span> <span class="op">&gt;&gt;</span> <span class="fu">waitForExit</span><span class="op">()</span></span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a>  <span class="kw">override</span> <span class="kw">def</span> <span class="fu">terminate</span><span class="op">():</span> IO<span class="op">[</span>ProcessResult<span class="op">]</span> <span class="op">=</span> IO<span class="op">.</span><span class="fu">delay</span><span class="op">(</span>nativeProcess<span class="op">.</span><span class="fu">destroy</span><span class="op">())</span> <span class="op">&gt;&gt;</span> <span class="fu">waitForExit</span><span class="op">()</span></span>
<span id="cb4-8"><a href="#cb4-8" aria-hidden="true" tabindex="-1"></a>  <span class="kw">override</span> <span class="kw">def</span> <span class="fu">waitForExit</span><span class="op">():</span> IO<span class="op">[</span>ProcessResult<span class="op">]</span> <span class="op">=</span></span>
<span id="cb4-9"><a href="#cb4-9" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span> <span class="op">{</span></span>
<span id="cb4-10"><a href="#cb4-10" aria-hidden="true" tabindex="-1"></a>      exitCode <span class="op">&lt;-</span> IO<span class="op">.</span><span class="fu">delay</span><span class="op">(</span>nativeProcess<span class="op">.</span><span class="fu">waitFor</span><span class="op">())</span></span>
<span id="cb4-11"><a href="#cb4-11" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span> <span class="cf">yield</span> <span class="fu">SimpleProcessResult</span><span class="op">(</span><span class="fu">ExitCode</span><span class="op">(</span>exitCode<span class="op">))</span></span>
<span id="cb4-12"><a href="#cb4-12" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>Then we wrap the <em>starting of the process</em> with <code>bracketCase</code>, specifying the two cases:</p>
<ul>
<li>On normal execution, we <code>waitForExit</code> for the process to stop and create the <code>ProcessResult</code> as the result of the bracketed IO operation.</li>
<li>In the release case, if JVM thrown an exception it is raised to the IO level</li>
<li>And if it got <em>canceled</em>, we <code>terminate</code> the process</li>
</ul>
<p>This way the IO cancelation interface gets a simple way to wait for or terminate an executed process. By calling <code>.start</code> on this bracketed IO operation we move it to a concurrent <em>fiber</em>.</p>
<p>Finally we wrap it in a <code>Resource</code>, so if the user code starting the process got canceled, it <em>releases the resource</em> too that ends up <em>terminating</em> the process, leaving no process leaks. This is something that was missing from the earlier versions of the library.</p>
<p>To make starting processes more convenient we can create an <strong>extension method</strong> on the <code>Process</code> trait:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="kw">implicit</span> <span class="kw">class</span> <span class="fu">ProcessOps</span><span class="op">(</span><span class="kw">private</span> <span class="kw">val</span> process<span class="op">:</span> <span class="ex">Process</span><span class="op">)</span> <span class="kw">extends</span> AnyVal <span class="op">{</span></span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a>  <span class="kw">def</span> <span class="fu">start</span><span class="op">(</span><span class="kw">implicit</span> runner<span class="op">:</span> ProcessRunner<span class="op">):</span> <span class="ex">Resource</span><span class="op">[</span>IO<span class="op">,</span> Fiber<span class="op">[</span>IO<span class="op">,</span> ProcessResult<span class="op">]]</span> <span class="op">=</span></span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a>    runner<span class="op">.</span><span class="fu">start</span><span class="op">(</span>process<span class="op">)</span></span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<h2 id="redirection">Redirection</h2>
<p>The next step was to implement input/output/error <em>redirection</em>. In the original <em>prox</em> library we had two important features, both implemented with type level techniques:</p>
<ul>
<li>Allow redirection only once per channel</li>
<li>The redirection source or target was a type class with <em>dependent result types</em></li>
</ul>
<p>To keep the type signatures simpler I decided to work around these by sacrificing some genericity and terseness. Let’s start by defining an interface for <strong>redirecting process output</strong>:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="kw">trait</span> RedirectableOutput<span class="op">[+</span>P<span class="op">[</span>_<span class="op">]</span> <span class="op">&lt;:</span> <span class="ex">Process</span><span class="op">[</span>_<span class="op">]]</span> <span class="op">{</span></span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a>  <span class="kw">def</span> connectOutput<span class="op">[</span>R <span class="op">&lt;:</span> OutputRedirection<span class="op">,</span> O<span class="op">](</span>target<span class="op">:</span> R<span class="op">)(</span><span class="kw">implicit</span> outputRedirectionType<span class="op">:</span> OutputRedirectionType<span class="op">.</span>Aux<span class="op">[</span>R<span class="op">,</span> O<span class="op">]):</span> P<span class="op">[</span>O<span class="op">]</span></span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a>  </span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a>  <span class="co">// ...</span></span>
<span id="cb6-5"><a href="#cb6-5" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>This is not <em>very</em> much different than the output redirection operator in the previous <em>prox</em> versions:</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> <span class="op">&gt;[</span>F<span class="op">[</span>_<span class="op">],</span> To<span class="op">,</span> NewOut<span class="op">,</span> NewOutResult<span class="op">,</span> <span class="ex">Result</span> <span class="op">&lt;:</span> ProcessNode<span class="op">[</span>_<span class="op">,</span> _<span class="op">,</span> _<span class="op">,</span> Redirected<span class="op">,</span> _<span class="op">]]</span></span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a>    <span class="op">(</span>to<span class="op">:</span> To<span class="op">)</span></span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a>    <span class="op">(</span><span class="kw">implicit</span></span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true" tabindex="-1"></a>     contextOf<span class="op">:</span> ContextOf<span class="op">.</span>Aux<span class="op">[</span>PN<span class="op">,</span> F<span class="op">],</span></span>
<span id="cb7-5"><a href="#cb7-5" aria-hidden="true" tabindex="-1"></a>     target<span class="op">:</span> CanBeProcessOutputTarget<span class="op">.</span>Aux<span class="op">[</span>F<span class="op">,</span> To<span class="op">,</span> NewOut<span class="op">,</span> NewOutResult<span class="op">],</span></span>
<span id="cb7-6"><a href="#cb7-6" aria-hidden="true" tabindex="-1"></a>     redirectOutput<span class="op">:</span> RedirectOutput<span class="op">.</span>Aux<span class="op">[</span>F<span class="op">,</span> PN<span class="op">,</span> To<span class="op">,</span> NewOut<span class="op">,</span> NewOutResult<span class="op">,</span> <span class="ex">Result</span><span class="op">])</span></span></code></pre></div>
<p>One of the primary differences is that we don’t allow arbitrary targets just by requiring a <code>CanBeProcessOutput</code> type class. Instead we can only connect the output to a value of <code>OutputRedirection</code> which is an ADT:</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a><span class="kw">sealed</span> <span class="kw">trait</span> OutputRedirection</span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a><span class="cf">case</span> <span class="kw">object</span> StdOut <span class="kw">extends</span> OutputRedirection</span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true" tabindex="-1"></a><span class="cf">case</span> <span class="kw">class</span> <span class="fu">OutputFile</span><span class="op">(</span>path<span class="op">:</span> Path<span class="op">,</span> append<span class="op">:</span> <span class="ex">Boolean</span><span class="op">)</span> <span class="kw">extends</span> OutputRedirection</span>
<span id="cb8-4"><a href="#cb8-4" aria-hidden="true" tabindex="-1"></a><span class="cf">case</span> <span class="kw">class</span> <span class="ex">OutputStream</span><span class="op">[</span>O<span class="op">,</span> <span class="op">+</span>OR<span class="op">](</span>pipe<span class="op">:</span> <span class="ex">Pipe</span><span class="op">[</span>IO<span class="op">,</span> <span class="ex">Byte</span><span class="op">,</span> O<span class="op">],</span> runner<span class="op">:</span> <span class="bu">Stream</span><span class="op">[</span>IO<span class="op">,</span> O<span class="op">]</span> <span class="op">=&gt;</span> IO<span class="op">[</span>OR<span class="op">],</span> chunkSize<span class="op">:</span> <span class="bu">Int</span> <span class="op">=</span> <span class="dv">8192</span><span class="op">)</span> <span class="kw">extends</span> OutputRedirection</span></code></pre></div>
<p>We still need a type level calculation to extract the result type of the <code>OutputStream</code> case (which is the <code>OR</code> type parameter). This extracted by the following trait with the help of the <code>Aux</code> pattern:</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true" tabindex="-1"></a><span class="kw">trait</span> OutputRedirectionType<span class="op">[</span>R<span class="op">]</span> <span class="op">{</span></span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true" tabindex="-1"></a>  <span class="kw">type</span> Out</span>
<span id="cb9-3"><a href="#cb9-3" aria-hidden="true" tabindex="-1"></a>  <span class="kw">def</span> <span class="fu">runner</span><span class="op">(</span>of<span class="op">:</span> R<span class="op">)(</span>nativeProcess<span class="op">:</span> JvmProcess<span class="op">,</span> blocker<span class="op">:</span> Blocker<span class="op">,</span> contextShift<span class="op">:</span> ContextShift<span class="op">[</span>IO<span class="op">]):</span> IO<span class="op">[</span>Out<span class="op">]</span></span>
<span id="cb9-4"><a href="#cb9-4" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>The important difference from earlier versions of the library is that this remains completely an implementation detail. <code>OutputRedirectionType</code> is implemented for all three cases of the <code>OutputRedirection</code> type and <code>connectOutput</code> is not even used in the default use cases, only when implementing redirection for something custom.</p>
<p>Instead the <code>RedirectableOutput</code> trait itself defines a set of operators and named function versions for redirecting to different targets. With this we loose a general-purpose, type class managed way to redirect to <em>anything</em> but improve a lot on the usability of the library. All these functions are easily discoverable from the IDE and there would not be any weird implicit resolution errors.</p>
<p>Let’s see some examples of these functions:</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true" tabindex="-1"></a><span class="kw">trait</span> RedirectableOutput<span class="op">[+</span>P<span class="op">[</span>_<span class="op">]</span> <span class="op">&lt;:</span> <span class="ex">Process</span><span class="op">[</span>_<span class="op">]]</span> <span class="op">{</span></span>
<span id="cb10-2"><a href="#cb10-2" aria-hidden="true" tabindex="-1"></a>  <span class="co">// ...</span></span>
<span id="cb10-3"><a href="#cb10-3" aria-hidden="true" tabindex="-1"></a>  <span class="kw">def</span> <span class="op">&gt;(</span>sink<span class="op">:</span> <span class="ex">Pipe</span><span class="op">[</span>IO<span class="op">,</span> <span class="ex">Byte</span><span class="op">,</span> <span class="bu">Unit</span><span class="op">]):</span> P<span class="op">[</span><span class="bu">Unit</span><span class="op">]</span> <span class="op">=</span> <span class="fu">toSink</span><span class="op">(</span>sink<span class="op">)</span></span>
<span id="cb10-4"><a href="#cb10-4" aria-hidden="true" tabindex="-1"></a>  <span class="kw">def</span> <span class="fu">toSink</span><span class="op">(</span>sink<span class="op">:</span> <span class="ex">Pipe</span><span class="op">[</span>F<span class="op">,</span> <span class="ex">Byte</span><span class="op">,</span> <span class="bu">Unit</span><span class="op">]):</span> P<span class="op">[</span><span class="bu">Unit</span><span class="op">]</span> <span class="op">=</span> </span>
<span id="cb10-5"><a href="#cb10-5" aria-hidden="true" tabindex="-1"></a>    <span class="fu">connectOutput</span><span class="op">(</span><span class="ex">OutputStream</span><span class="op">(</span>sink<span class="op">,</span> <span class="op">(</span>s<span class="op">:</span> <span class="bu">Stream</span><span class="op">[</span>F<span class="op">,</span> <span class="bu">Unit</span><span class="op">])</span> <span class="op">=&gt;</span> s<span class="op">.</span>compile<span class="op">.</span>drain<span class="op">))</span></span>
<span id="cb10-6"><a href="#cb10-6" aria-hidden="true" tabindex="-1"></a>    </span>
<span id="cb10-7"><a href="#cb10-7" aria-hidden="true" tabindex="-1"></a>  <span class="kw">def</span> <span class="op">&gt;</span>#<span class="op">[</span>O<span class="op">:</span> Monoid<span class="op">](</span>pipe<span class="op">:</span> <span class="ex">Pipe</span><span class="op">[</span>F<span class="op">,</span> <span class="ex">Byte</span><span class="op">,</span> O<span class="op">]):</span> P<span class="op">[</span>O<span class="op">]</span> <span class="op">=</span> <span class="fu">toFoldMonoid</span><span class="op">(</span>pipe<span class="op">)</span></span>
<span id="cb10-8"><a href="#cb10-8" aria-hidden="true" tabindex="-1"></a>  <span class="kw">def</span> toFoldMonoid<span class="op">[</span>O<span class="op">:</span> Monoid<span class="op">](</span>pipe<span class="op">:</span> <span class="ex">Pipe</span><span class="op">[</span>F<span class="op">,</span> <span class="ex">Byte</span><span class="op">,</span> O<span class="op">]):</span> P<span class="op">[</span>O<span class="op">]</span> <span class="op">=</span></span>
<span id="cb10-9"><a href="#cb10-9" aria-hidden="true" tabindex="-1"></a>    <span class="fu">connectOutput</span><span class="op">(</span><span class="ex">OutputStream</span><span class="op">(</span>pipe<span class="op">,</span> <span class="op">(</span>s<span class="op">:</span> <span class="bu">Stream</span><span class="op">[</span>F<span class="op">,</span> O<span class="op">])</span> <span class="op">=&gt;</span> s<span class="op">.</span>compile<span class="op">.</span>foldMonoid<span class="op">))</span></span>
<span id="cb10-10"><a href="#cb10-10" aria-hidden="true" tabindex="-1"></a>    </span>
<span id="cb10-11"><a href="#cb10-11" aria-hidden="true" tabindex="-1"></a>  <span class="kw">def</span> <span class="op">&gt;&gt;(</span>path<span class="op">:</span> Path<span class="op">):</span> P<span class="op">[</span><span class="bu">Unit</span><span class="op">]</span> <span class="op">=</span> <span class="fu">appendToFile</span><span class="op">(</span>path<span class="op">)</span></span>
<span id="cb10-12"><a href="#cb10-12" aria-hidden="true" tabindex="-1"></a>  <span class="kw">def</span> <span class="fu">appendToFile</span><span class="op">(</span>path<span class="op">:</span> Path<span class="op">):</span> P<span class="op">[</span><span class="bu">Unit</span><span class="op">]</span> <span class="op">=</span></span>
<span id="cb10-13"><a href="#cb10-13" aria-hidden="true" tabindex="-1"></a>    <span class="fu">connectOutput</span><span class="op">(</span>OutputFile<span class="op">[</span>F<span class="op">](</span>path<span class="op">,</span> append <span class="op">=</span> <span class="kw">true</span><span class="op">))</span>    </span>
<span id="cb10-14"><a href="#cb10-14" aria-hidden="true" tabindex="-1"></a>  <span class="co">// ...</span></span>
<span id="cb10-15"><a href="#cb10-15" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>All of them are just using the <code>connectOutput</code> function so implementations of the <code>RedirectableOutput</code> trait need to define that single function to get this capability.</p>
<p>Note that <code>connectOutput</code> has a return type of <code>P[O]</code> instead of being just <code>Process</code>. This is important for multiple reasons.</p>
<p>First, in order to actually <em>execute</em> the output streams, we need to store it somehow in the <code>Process</code> data type itself. For this reason we add a type parameter to the <code>Process</code> trait representing the <em>output type</em> and store the <em>output stream runner function</em> itself in it:</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true" tabindex="-1"></a><span class="kw">trait</span> <span class="ex">Process</span><span class="op">[</span>O<span class="op">]</span> <span class="op">{</span></span>
<span id="cb11-2"><a href="#cb11-2" aria-hidden="true" tabindex="-1"></a>  <span class="co">// ...</span></span>
<span id="cb11-3"><a href="#cb11-3" aria-hidden="true" tabindex="-1"></a>  <span class="kw">val</span> outputRedirection<span class="op">:</span> OutputRedirection</span>
<span id="cb11-4"><a href="#cb11-4" aria-hidden="true" tabindex="-1"></a>  <span class="kw">val</span> runOutputStream<span class="op">:</span> <span class="op">(</span>JvmProcess<span class="op">,</span> Blocker<span class="op">,</span> ContextShift<span class="op">[</span>IO<span class="op">])</span> <span class="op">=&gt;</span> IO<span class="op">[</span>O<span class="op">]</span></span>
<span id="cb11-5"><a href="#cb11-5" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>Note that <code>runOutputStream</code> is actually the <code>OutputRedirectiontype.runner</code> function, got from the “hidden” type level operation and stored in the process data structure. With this, the <em>process runner</em> can be extended to pass the started JVM process to this function that sets up the redirection, and then store the result of type <code>O</code> in <code>ProcessResult[O]</code>:</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb12-1"><a href="#cb12-1" aria-hidden="true" tabindex="-1"></a><span class="kw">override</span> <span class="kw">def</span> start<span class="op">[</span>O<span class="op">](</span>process<span class="op">:</span> <span class="ex">Process</span><span class="op">[</span>O<span class="op">],</span> blocker<span class="op">:</span> Blocker<span class="op">):</span> <span class="ex">Resource</span><span class="op">[</span>IO<span class="op">,</span> Fiber<span class="op">[</span>IO<span class="op">,</span> ProcessResult<span class="op">[</span>O<span class="op">]]]</span> <span class="op">=</span> <span class="op">{</span></span>
<span id="cb12-2"><a href="#cb12-2" aria-hidden="true" tabindex="-1"></a>  <span class="co">// ... process builder</span></span>
<span id="cb12-3"><a href="#cb12-3" aria-hidden="true" tabindex="-1"></a>    </span>
<span id="cb12-4"><a href="#cb12-4" aria-hidden="true" tabindex="-1"></a>  <span class="kw">val</span> outputRedirect <span class="op">=</span> process<span class="op">.</span>outputRedirection <span class="cf">match</span> <span class="op">{</span></span>
<span id="cb12-5"><a href="#cb12-5" aria-hidden="true" tabindex="-1"></a>    <span class="cf">case</span> StdOut <span class="op">=&gt;</span> <span class="ex">ProcessBuilder</span><span class="op">.</span>Redirect<span class="op">.</span>INHERIT</span>
<span id="cb12-6"><a href="#cb12-6" aria-hidden="true" tabindex="-1"></a>    <span class="cf">case</span> <span class="fu">OutputFile</span><span class="op">(</span>path<span class="op">)</span> <span class="op">=&gt;</span> <span class="ex">ProcessBuilder</span><span class="op">.</span>Redirect<span class="op">.</span><span class="fu">to</span><span class="op">(</span>path<span class="op">.</span>toFile<span class="op">)</span></span>
<span id="cb12-7"><a href="#cb12-7" aria-hidden="true" tabindex="-1"></a>    <span class="cf">case</span> <span class="ex">OutputStream</span><span class="op">(</span>_<span class="op">,</span> _<span class="op">,</span> _<span class="op">)</span> <span class="op">=&gt;</span> <span class="ex">ProcessBuilder</span><span class="op">.</span>Redirect<span class="op">.</span>PIPE</span>
<span id="cb12-8"><a href="#cb12-8" aria-hidden="true" tabindex="-1"></a>  <span class="op">}</span></span>
<span id="cb12-9"><a href="#cb12-9" aria-hidden="true" tabindex="-1"></a>  builder<span class="op">.</span><span class="fu">redirectOutput</span><span class="op">(</span>outputRedirect<span class="op">)</span></span>
<span id="cb12-10"><a href="#cb12-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb12-11"><a href="#cb12-11" aria-hidden="true" tabindex="-1"></a>  <span class="kw">val</span> startProcess <span class="op">=</span> <span class="cf">for</span> <span class="op">{</span></span>
<span id="cb12-12"><a href="#cb12-12" aria-hidden="true" tabindex="-1"></a>    nativeProcess <span class="op">&lt;-</span> IO<span class="op">.</span><span class="fu">delay</span><span class="op">(</span>builder<span class="op">.</span><span class="fu">start</span><span class="op">())</span></span>
<span id="cb12-13"><a href="#cb12-13" aria-hidden="true" tabindex="-1"></a>    runningOutput <span class="op">&lt;-</span> process<span class="op">.</span><span class="fu">runOutputStream</span><span class="op">(</span>nativeProcess<span class="op">,</span> blocker<span class="op">,</span> contextShift<span class="op">).</span>start</span>
<span id="cb12-14"><a href="#cb12-14" aria-hidden="true" tabindex="-1"></a>  <span class="op">}</span> <span class="cf">yield</span> <span class="kw">new</span> <span class="fu">JVMRunningProcess</span><span class="op">(</span>nativeProcess<span class="op">,</span> runningOutput<span class="op">)</span>  </span>
<span id="cb12-15"><a href="#cb12-15" aria-hidden="true" tabindex="-1"></a>  </span>
<span id="cb12-16"><a href="#cb12-16" aria-hidden="true" tabindex="-1"></a>  <span class="co">// ... bracketCase, start, Resource.make</span></span>
<span id="cb12-17"><a href="#cb12-17" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>It is also important that this <code>RedirectableOutput</code> trait is not something all process has: it is a <strong>capability</strong>, and only processes with unbound output should implement it. This is the new encoding of fixing the three channels of a process. Instead of having three type parameters with <em>phantom types</em>, now we have a combination of capability traits mixed with the <code>Process</code> trait, constraining what kind of redirections we can do. As this is not something unbounded and have relatively small number of cases, I chose to implement the combinations by hand, designing it in a way to minimize the redundancy in these implementation classes. This means, in total <strong>8</strong> classes representing the combinations of bound input, output and error.</p>
<p>I will demonstrate this with a single example. The <code>Process</code> constructor now returns a type with everything unbound, represented by having all the redirection capability traits:</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb13-1"><a href="#cb13-1" aria-hidden="true" tabindex="-1"></a><span class="kw">object</span> <span class="ex">Process</span> <span class="op">{</span></span>
<span id="cb13-2"><a href="#cb13-2" aria-hidden="true" tabindex="-1"></a>  <span class="kw">def</span> <span class="fu">apply</span><span class="op">(</span>command<span class="op">:</span> <span class="ex">String</span><span class="op">,</span> arguments<span class="op">:</span> <span class="ex">List</span><span class="op">[</span><span class="ex">String</span><span class="op">]</span> <span class="op">=</span> <span class="ex">List</span><span class="op">.</span>empty<span class="op">):</span> ProcessImpl <span class="op">=</span></span>
<span id="cb13-3"><a href="#cb13-3" aria-hidden="true" tabindex="-1"></a>    <span class="fu">ProcessImpl</span><span class="op">(</span></span>
<span id="cb13-4"><a href="#cb13-4" aria-hidden="true" tabindex="-1"></a>      command<span class="op">,</span></span>
<span id="cb13-5"><a href="#cb13-5" aria-hidden="true" tabindex="-1"></a>      arguments<span class="op">,</span></span>
<span id="cb13-6"><a href="#cb13-6" aria-hidden="true" tabindex="-1"></a>      workingDirectory <span class="op">=</span> <span class="bu">None</span><span class="op">,</span></span>
<span id="cb13-7"><a href="#cb13-7" aria-hidden="true" tabindex="-1"></a>      environmentVariables <span class="op">=</span> <span class="ex">Map</span><span class="op">.</span>empty<span class="op">,</span></span>
<span id="cb13-8"><a href="#cb13-8" aria-hidden="true" tabindex="-1"></a>      removedEnvironmentVariables <span class="op">=</span> <span class="ex">Set</span><span class="op">.</span>empty<span class="op">,</span></span>
<span id="cb13-9"><a href="#cb13-9" aria-hidden="true" tabindex="-1"></a>      </span>
<span id="cb13-10"><a href="#cb13-10" aria-hidden="true" tabindex="-1"></a>      outputRedirection <span class="op">=</span> StdOut<span class="op">,</span></span>
<span id="cb13-11"><a href="#cb13-11" aria-hidden="true" tabindex="-1"></a>      runOutputStream <span class="op">=</span> <span class="op">(</span>_<span class="op">,</span> _<span class="op">,</span> _<span class="op">)</span> <span class="op">=&gt;</span> IO<span class="op">.</span><span class="dt">unit</span><span class="op">,</span></span>
<span id="cb13-12"><a href="#cb13-12" aria-hidden="true" tabindex="-1"></a>      errorRedirection <span class="op">=</span> StdOut<span class="op">,</span></span>
<span id="cb13-13"><a href="#cb13-13" aria-hidden="true" tabindex="-1"></a>      runErrorStream <span class="op">=</span> <span class="op">(</span>_<span class="op">,</span> _<span class="op">,</span> _<span class="op">)</span> <span class="op">=&gt;</span> IO<span class="op">.</span><span class="dt">unit</span><span class="op">,</span></span>
<span id="cb13-14"><a href="#cb13-14" aria-hidden="true" tabindex="-1"></a>      inputRedirection <span class="op">=</span> StdIn</span>
<span id="cb13-15"><a href="#cb13-15" aria-hidden="true" tabindex="-1"></a>    <span class="op">)</span></span>
<span id="cb13-16"><a href="#cb13-16" aria-hidden="true" tabindex="-1"></a>    </span>
<span id="cb13-17"><a href="#cb13-17" aria-hidden="true" tabindex="-1"></a>  <span class="cf">case</span> <span class="kw">class</span> <span class="fu">ProcessImpl</span><span class="op">(</span><span class="kw">override</span> <span class="kw">val</span> command<span class="op">:</span> <span class="ex">String</span><span class="op">,</span></span>
<span id="cb13-18"><a href="#cb13-18" aria-hidden="true" tabindex="-1"></a>                         <span class="kw">override</span> <span class="kw">val</span> arguments<span class="op">:</span> <span class="ex">List</span><span class="op">[</span><span class="ex">String</span><span class="op">],</span></span>
<span id="cb13-19"><a href="#cb13-19" aria-hidden="true" tabindex="-1"></a>                         <span class="kw">override</span> <span class="kw">val</span> workingDirectory<span class="op">:</span> <span class="ex">Option</span><span class="op">[</span>Path<span class="op">],</span></span>
<span id="cb13-20"><a href="#cb13-20" aria-hidden="true" tabindex="-1"></a>                         <span class="kw">override</span> <span class="kw">val</span> environmentVariables<span class="op">:</span> <span class="ex">Map</span><span class="op">[</span><span class="ex">String</span><span class="op">,</span> <span class="ex">String</span><span class="op">],</span></span>
<span id="cb13-21"><a href="#cb13-21" aria-hidden="true" tabindex="-1"></a>                         <span class="kw">override</span> <span class="kw">val</span> removedEnvironmentVariables<span class="op">:</span> <span class="ex">Set</span><span class="op">[</span><span class="ex">String</span><span class="op">],</span></span>
<span id="cb13-22"><a href="#cb13-22" aria-hidden="true" tabindex="-1"></a>                         <span class="kw">override</span> <span class="kw">val</span> outputRedirection<span class="op">:</span> OutputRedirection<span class="op">[</span>F<span class="op">],</span></span>
<span id="cb13-23"><a href="#cb13-23" aria-hidden="true" tabindex="-1"></a>                         <span class="kw">override</span> <span class="kw">val</span> runOutputStream<span class="op">:</span> <span class="op">(</span>java<span class="op">.</span>io<span class="op">.</span><span class="ex">InputStream</span><span class="op">,</span> Blocker<span class="op">,</span> ContextShift<span class="op">[</span>F<span class="op">])</span> <span class="op">=&gt;</span> F<span class="op">[</span><span class="bu">Unit</span><span class="op">],</span></span>
<span id="cb13-24"><a href="#cb13-24" aria-hidden="true" tabindex="-1"></a>                         <span class="kw">override</span> <span class="kw">val</span> errorRedirection<span class="op">:</span> OutputRedirection<span class="op">[</span>F<span class="op">],</span></span>
<span id="cb13-25"><a href="#cb13-25" aria-hidden="true" tabindex="-1"></a>                         <span class="kw">override</span> <span class="kw">val</span> runErrorStream<span class="op">:</span> <span class="op">(</span>java<span class="op">.</span>io<span class="op">.</span><span class="ex">InputStream</span><span class="op">,</span> Blocker<span class="op">,</span> ContextShift<span class="op">[</span>F<span class="op">])</span> <span class="op">=&gt;</span> F<span class="op">[</span><span class="bu">Unit</span><span class="op">],</span></span>
<span id="cb13-26"><a href="#cb13-26" aria-hidden="true" tabindex="-1"></a>                         <span class="kw">override</span> <span class="kw">val</span> inputRedirection<span class="op">:</span> InputRedirection<span class="op">[</span>F<span class="op">])</span></span>
<span id="cb13-27"><a href="#cb13-27" aria-hidden="true" tabindex="-1"></a>    <span class="kw">extends</span> <span class="ex">Process</span><span class="op">[</span><span class="bu">Unit</span><span class="op">,</span> <span class="bu">Unit</span><span class="op">]</span></span>
<span id="cb13-28"><a href="#cb13-28" aria-hidden="true" tabindex="-1"></a>      <span class="kw">with</span> RedirectableOutput<span class="op">[</span>ProcessImplO<span class="op">[*]]</span></span>
<span id="cb13-29"><a href="#cb13-29" aria-hidden="true" tabindex="-1"></a>      <span class="kw">with</span> RedirectableError<span class="op">[</span>ProcessImplE<span class="op">[*]]</span></span>
<span id="cb13-30"><a href="#cb13-30" aria-hidden="true" tabindex="-1"></a>      <span class="kw">with</span> RedirectableInput<span class="op">[</span>ProcessImplI<span class="op">]]</span> <span class="op">{</span></span>
<span id="cb13-31"><a href="#cb13-31" aria-hidden="true" tabindex="-1"></a>    <span class="co">// ...</span></span>
<span id="cb13-32"><a href="#cb13-32" aria-hidden="true" tabindex="-1"></a>    </span>
<span id="cb13-33"><a href="#cb13-33" aria-hidden="true" tabindex="-1"></a>    <span class="kw">def</span> connectOutput<span class="op">[</span>R <span class="op">&lt;:</span> OutputRedirection<span class="op">,</span> RO<span class="op">](</span>target<span class="op">:</span> R<span class="op">)(</span><span class="kw">implicit</span> outputRedirectionType<span class="op">:</span> OutputRedirectionType<span class="op">.</span>Aux<span class="op">[</span>R<span class="op">,</span> RO<span class="op">]):</span> ProcessImplO<span class="op">[</span>RO<span class="op">]</span> <span class="op">=</span></span>
<span id="cb13-34"><a href="#cb13-34" aria-hidden="true" tabindex="-1"></a>      <span class="fu">ProcessImplO</span><span class="op">(</span></span>
<span id="cb13-35"><a href="#cb13-35" aria-hidden="true" tabindex="-1"></a>        <span class="co">// ...</span></span>
<span id="cb13-36"><a href="#cb13-36" aria-hidden="true" tabindex="-1"></a>        target<span class="op">,</span></span>
<span id="cb13-37"><a href="#cb13-37" aria-hidden="true" tabindex="-1"></a>        outputRedirectionType<span class="op">.</span><span class="fu">runner</span><span class="op">(</span>target<span class="op">),</span></span>
<span id="cb13-38"><a href="#cb13-38" aria-hidden="true" tabindex="-1"></a>        <span class="co">// ...</span></span>
<span id="cb13-39"><a href="#cb13-39" aria-hidden="true" tabindex="-1"></a>      <span class="op">)</span></span>
<span id="cb13-40"><a href="#cb13-40" aria-hidden="true" tabindex="-1"></a>  <span class="op">}</span></span>
<span id="cb13-41"><a href="#cb13-41" aria-hidden="true" tabindex="-1"></a>    </span>
<span id="cb13-42"><a href="#cb13-42" aria-hidden="true" tabindex="-1"></a>  <span class="cf">case</span> <span class="kw">class</span> ProcessImplO<span class="op">[</span>O<span class="op">](</span><span class="co">// ...</span></span>
<span id="cb13-43"><a href="#cb13-43" aria-hidden="true" tabindex="-1"></a>                             <span class="kw">override</span> <span class="kw">val</span> runOutputStream<span class="op">:</span> <span class="op">(</span>java<span class="op">.</span>io<span class="op">.</span><span class="ex">InputStream</span><span class="op">,</span> Blocker<span class="op">,</span> ContextShift<span class="op">[</span>F<span class="op">])</span> <span class="op">=&gt;</span> F<span class="op">[</span>O<span class="op">],</span></span>
<span id="cb13-44"><a href="#cb13-44" aria-hidden="true" tabindex="-1"></a>                             <span class="co">// ...</span></span>
<span id="cb13-45"><a href="#cb13-45" aria-hidden="true" tabindex="-1"></a>                            <span class="op">)</span></span>
<span id="cb13-46"><a href="#cb13-46" aria-hidden="true" tabindex="-1"></a>    <span class="kw">extends</span> <span class="ex">Process</span><span class="op">[</span>O<span class="op">,</span> <span class="bu">Unit</span><span class="op">]</span></span>
<span id="cb13-47"><a href="#cb13-47" aria-hidden="true" tabindex="-1"></a>      <span class="kw">with</span> RedirectableError<span class="op">[</span>ProcessImplOE<span class="op">[</span>O<span class="op">,</span> <span class="op">*]]</span></span>
<span id="cb13-48"><a href="#cb13-48" aria-hidden="true" tabindex="-1"></a>      <span class="kw">with</span> RedirectableInput<span class="op">[</span>ProcessImplIO<span class="op">[</span>O<span class="op">]]</span> <span class="op">{</span>    </span>
<span id="cb13-49"><a href="#cb13-49" aria-hidden="true" tabindex="-1"></a>      <span class="co">// ...</span></span>
<span id="cb13-50"><a href="#cb13-50" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb13-51"><a href="#cb13-51" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>Each implementation class only has the necessary subset of type parameters <code>O</code> and <code>E</code> (<code>E</code> is the error output type), and the <code>I</code> <code>O</code> and <code>E</code> postfixes in the class names represent which channels are <em>bound</em>. Each redirection leads to a different implementation class with less and less redirection <em>capabilities</em>. <code>ProcessImplIOE</code> is the fully bound process.</p>
<p>This makes all the redirection operators completely type inferable and very pleasant to use for building up concrete process definitions. And we don’t loose the ability to create generic function either. We can do it by requiring redirection capabilities:</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb14-1"><a href="#cb14-1" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> withInput<span class="op">[</span>O<span class="op">,</span> E<span class="op">,</span> P <span class="op">&lt;:</span> <span class="ex">Process</span><span class="op">[</span>O<span class="op">,</span> E<span class="op">]](</span>s<span class="op">:</span> <span class="ex">String</span><span class="op">)(</span>process<span class="op">:</span> <span class="ex">Process</span><span class="op">[</span>O<span class="op">,</span> E<span class="op">]</span> <span class="kw">with</span> RedirectableInput<span class="op">[</span>P<span class="op">]):</span> P <span class="op">=</span> <span class="op">{</span></span>
<span id="cb14-2"><a href="#cb14-2" aria-hidden="true" tabindex="-1"></a>  <span class="kw">val</span> input <span class="op">=</span> <span class="bu">Stream</span><span class="op">(</span><span class="st">&quot;This is a test string&quot;</span><span class="op">).</span><span class="fu">through</span><span class="op">(</span>text<span class="op">.</span>utf8Encode<span class="op">)</span></span>
<span id="cb14-3"><a href="#cb14-3" aria-hidden="true" tabindex="-1"></a>  process <span class="op">&lt;</span> input</span>
<span id="cb14-4"><a href="#cb14-4" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>Here we know we want to have a <code>Process</code> with the <code>RedirectableInput</code> capability. We also know that by binding the input we get a something without that trait, so we know the result is a process <code>P</code> but know nothing else about its further capabilities. This is where this solution gets a bit inconvenient, if we want to chain these wrapper functions. To help with it, the library contains <em>type aliases</em> for the whole redirection capability chain that can be used in these functions. For example:</p>
<div class="sourceCode" id="cb15"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb15-1"><a href="#cb15-1" aria-hidden="true" tabindex="-1"></a><span class="co">/**</span> Process with unbound input<span class="co">,</span> output and error streams <span class="co">*/</span></span>
<span id="cb15-2"><a href="#cb15-2" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> UnboundProcess <span class="op">=</span> <span class="ex">Process</span><span class="op">[</span><span class="bu">Unit</span><span class="op">,</span> <span class="bu">Unit</span><span class="op">]</span></span>
<span id="cb15-3"><a href="#cb15-3" aria-hidden="true" tabindex="-1"></a>  <span class="kw">with</span> RedirectableInput<span class="op">[</span>UnboundOEProcess<span class="op">]</span></span>
<span id="cb15-4"><a href="#cb15-4" aria-hidden="true" tabindex="-1"></a>  <span class="kw">with</span> RedirectableOutput<span class="op">[</span>UnboundIEProcess<span class="op">[*]]</span></span>
<span id="cb15-5"><a href="#cb15-5" aria-hidden="true" tabindex="-1"></a>  <span class="kw">with</span> RedirectableError<span class="op">[</span>UnboundIOProcess<span class="op">[*]]</span></span></code></pre></div>
<h2 id="process-piping">Process piping</h2>
<p>The other major feature beside redirection that <em>prox</em> had is <strong>piping processes together</strong>, meaning the first process’ output gets redirected to the second process’ input. Now that we have redesigned processes and redirection capabilities, we can try to implement this on top of them.</p>
<p>The idea is that when we construct a <em>process group</em> from a list of <code>Process</code> instances with the necessary redirection capabilities, this construction could set up the redirection and store the modified processes instead, then running them together. And it can reuse the <code>RedirectableOutput</code> and <code>RedirectableInput</code> capabilities to bind the first/last process!</p>
<p>Let’s again start by defining what we need for the <em>process group</em>:</p>
<div class="sourceCode" id="cb16"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb16-1"><a href="#cb16-1" aria-hidden="true" tabindex="-1"></a><span class="kw">trait</span> ProcessGroup<span class="op">[</span>O<span class="op">,</span> E<span class="op">]</span> <span class="kw">extends</span> ProcessLike <span class="op">{</span></span>
<span id="cb16-2"><a href="#cb16-2" aria-hidden="true" tabindex="-1"></a>  <span class="kw">val</span> firstProcess<span class="op">:</span> <span class="ex">Process</span><span class="op">[</span><span class="bu">Stream</span><span class="op">[</span>IO<span class="op">,</span> <span class="ex">Byte</span><span class="op">],</span> E<span class="op">]</span></span>
<span id="cb16-3"><a href="#cb16-3" aria-hidden="true" tabindex="-1"></a>  <span class="kw">val</span> innerProcesses<span class="op">:</span> <span class="ex">List</span><span class="op">[</span><span class="ex">Process</span><span class="op">.</span>UnboundIProcess<span class="op">[</span><span class="bu">Stream</span><span class="op">[</span>IO<span class="op">,</span> <span class="ex">Byte</span><span class="op">],</span> E<span class="op">]]</span></span>
<span id="cb16-4"><a href="#cb16-4" aria-hidden="true" tabindex="-1"></a>  <span class="kw">val</span> lastProcess<span class="op">:</span> <span class="ex">Process</span><span class="op">.</span>UnboundIProcess<span class="op">[</span>O<span class="op">,</span> E<span class="op">]</span></span>
<span id="cb16-5"><a href="#cb16-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb16-6"><a href="#cb16-6" aria-hidden="true" tabindex="-1"></a>  <span class="kw">val</span> originalProcesses<span class="op">:</span> <span class="ex">List</span><span class="op">[</span><span class="ex">Process</span><span class="op">[</span><span class="bu">Unit</span><span class="op">,</span> <span class="bu">Unit</span><span class="op">]]</span></span>
<span id="cb16-7"><a href="#cb16-7" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p><code>ProcessLike</code> is a common base trait for <code>Process</code> and <code>ProcessGroup</code>. By introducing it, we can change the <code>RedirectableOutput</code> trait’s self type bounds so it works for both processes and process groups.</p>
<p>A valid process group always have at least <strong>2</strong> processes and they get pre-configured during the construction of the group so when they get started, their channels can be joined. This means the group members can be split into three groups:</p>
<ul>
<li>The <strong>first process</strong> has it’s output redirected to a stream, but <em>running</em> the stream just returns the stream itself; this way it can be connected to the next process’s input</li>
<li>The <strong>inner processes</strong> are all having their output redirected in the same way, and it is also a <em>requirement</em> that these must have their <em>input channel</em> unbound. This is needed for the operation described above, when we plug the previous process’ output into the input</li>
<li>The <strong>last process</strong> can have its output freely redirected by the user, but it’s <em>input</em> must be unbound so the previous process can be plugged in</li>
</ul>
<p>We also store the <em>original</em> process values for reasons explained later.</p>
<p>So as we can see the piping has two stages:</p>
<ol type="1">
<li>First we prepare the processes by setting up their output to return an un-executed stream</li>
<li>And we need a process group specific start function into the <code>ProcessRunner</code> that plugs everything together</li>
</ol>
<p>The first step is performed by the <em>pipe operator</em> (<code>|</code>), which is defined on <code>Process</code> via an extension method to construct group of two processes, and on <code>ProcessGroupImpl</code> to add more. For simplicity the piping operator is currently not defined on the bound process group types. So it has to be first constructed, and then the redirection set up.</p>
<p>Let’s see the one that adds one more process to a group:</p>
<div class="sourceCode" id="cb17"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb17-1"><a href="#cb17-1" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> <span class="fu">pipeInto</span><span class="op">(</span>other<span class="op">:</span> <span class="ex">Process</span><span class="op">.</span>UnboundProcess<span class="op">,</span></span>
<span id="cb17-2"><a href="#cb17-2" aria-hidden="true" tabindex="-1"></a>             channel<span class="op">:</span> <span class="ex">Pipe</span><span class="op">[</span>IO<span class="op">,</span> <span class="ex">Byte</span><span class="op">,</span> <span class="ex">Byte</span><span class="op">]):</span> ProcessGroupImpl <span class="op">=</span> <span class="op">{</span></span>
<span id="cb17-3"><a href="#cb17-3" aria-hidden="true" tabindex="-1"></a>  <span class="kw">val</span> pl1 <span class="op">=</span> lastProcess<span class="op">.</span><span class="fu">connectOutput</span><span class="op">(</span><span class="ex">OutputStream</span><span class="op">(</span>channel<span class="op">,</span> <span class="op">(</span>stream<span class="op">:</span> <span class="bu">Stream</span><span class="op">[</span>IO<span class="op">,</span> <span class="ex">Byte</span><span class="op">])</span> <span class="op">=&gt;</span> IO<span class="op">.</span><span class="fu">pure</span><span class="op">(</span>stream<span class="op">)))</span></span>
<span id="cb17-4"><a href="#cb17-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb17-5"><a href="#cb17-5" aria-hidden="true" tabindex="-1"></a>  <span class="fu">copy</span><span class="op">(</span></span>
<span id="cb17-6"><a href="#cb17-6" aria-hidden="true" tabindex="-1"></a>    innerProcesses <span class="op">=</span> pl1 <span class="op">::</span> innerProcesses<span class="op">,</span></span>
<span id="cb17-7"><a href="#cb17-7" aria-hidden="true" tabindex="-1"></a>    lastProcess <span class="op">=</span> other<span class="op">,</span></span>
<span id="cb17-8"><a href="#cb17-8" aria-hidden="true" tabindex="-1"></a>    originalProcesses <span class="op">=</span> other <span class="op">::</span> originalProcesses</span>
<span id="cb17-9"><a href="#cb17-9" aria-hidden="true" tabindex="-1"></a>  <span class="op">)</span></span>
<span id="cb17-10"><a href="#cb17-10" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb17-11"><a href="#cb17-11" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb17-12"><a href="#cb17-12" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> <span class="op">|(</span>other<span class="op">:</span> <span class="ex">Process</span><span class="op">.</span>UnboundProcess<span class="op">):</span> ProcessGroupImpl <span class="op">=</span> <span class="fu">pipeInto</span><span class="op">(</span>other<span class="op">,</span> identity<span class="op">)</span></span></code></pre></div>
<p>Other than moving processes around in the <code>innerProcesses</code> and <code>lastProcess</code>, we also set up the <strong>previous last process</strong>’s output in the way I described:</p>
<ul>
<li>It gets redirected to a pipe which is by default <code>identity</code></li>
<li>And it’s <em>runner</em> instead of actually running the stream, just returns the stream definition</li>
</ul>
<p>This way we can write a process group specific start function into the <em>process runner</em>:</p>
<div class="sourceCode" id="cb18"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb18-1"><a href="#cb18-1" aria-hidden="true" tabindex="-1"></a><span class="kw">override</span> <span class="kw">def</span> startProcessGroup<span class="op">[</span>O<span class="op">,</span> E<span class="op">](</span>processGroup<span class="op">:</span> ProcessGroup<span class="op">[</span>O<span class="op">,</span> E<span class="op">],</span> blocker<span class="op">:</span> Blocker<span class="op">):</span> IO<span class="op">[</span>RunningProcessGroup<span class="op">[</span>O<span class="op">,</span> E<span class="op">]]</span> <span class="op">=</span></span>
<span id="cb18-2"><a href="#cb18-2" aria-hidden="true" tabindex="-1"></a>  <span class="cf">for</span> <span class="op">{</span></span>
<span id="cb18-3"><a href="#cb18-3" aria-hidden="true" tabindex="-1"></a>    first <span class="op">&lt;-</span> <span class="fu">startProcess</span><span class="op">(</span>processGroup<span class="op">.</span>firstProcess<span class="op">,</span> blocker<span class="op">)</span></span>
<span id="cb18-4"><a href="#cb18-4" aria-hidden="true" tabindex="-1"></a>    firstOutput <span class="op">&lt;-</span> first<span class="op">.</span>runningOutput<span class="op">.</span>join</span>
<span id="cb18-5"><a href="#cb18-5" aria-hidden="true" tabindex="-1"></a>    innerResult <span class="op">&lt;-</span> <span class="cf">if</span> <span class="op">(</span>processGroup<span class="op">.</span>innerProcesses<span class="op">.</span>isEmpty<span class="op">)</span> <span class="op">{</span></span>
<span id="cb18-6"><a href="#cb18-6" aria-hidden="true" tabindex="-1"></a>      IO<span class="op">.</span><span class="fu">pure</span><span class="op">((</span><span class="ex">List</span><span class="op">.</span>empty<span class="op">,</span> firstOutput<span class="op">))</span></span>
<span id="cb18-7"><a href="#cb18-7" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span> <span class="cf">else</span> <span class="op">{</span></span>
<span id="cb18-8"><a href="#cb18-8" aria-hidden="true" tabindex="-1"></a>      <span class="kw">val</span> inner <span class="op">=</span> processGroup<span class="op">.</span>innerProcesses<span class="op">.</span>reverse</span>
<span id="cb18-9"><a href="#cb18-9" aria-hidden="true" tabindex="-1"></a>      <span class="fu">connectAndStartProcesses</span><span class="op">(</span>inner<span class="op">.</span>head<span class="op">,</span> firstOutput<span class="op">,</span> inner<span class="op">.</span>tail<span class="op">,</span> blocker<span class="op">,</span> <span class="ex">List</span><span class="op">.</span>empty<span class="op">)</span></span>
<span id="cb18-10"><a href="#cb18-10" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb18-11"><a href="#cb18-11" aria-hidden="true" tabindex="-1"></a>    <span class="op">(</span>inner<span class="op">,</span> lastInput<span class="op">)</span> <span class="op">=</span> innerResult</span>
<span id="cb18-12"><a href="#cb18-12" aria-hidden="true" tabindex="-1"></a>    last <span class="op">&lt;-</span> <span class="fu">startProcess</span><span class="op">(</span>processGroup<span class="op">.</span>lastProcess<span class="op">.</span><span class="fu">connectInput</span><span class="op">(</span><span class="ex">InputStream</span><span class="op">(</span>lastInput<span class="op">,</span> flushChunks <span class="op">=</span> <span class="kw">false</span><span class="op">)),</span> blocker<span class="op">)</span></span>
<span id="cb18-13"><a href="#cb18-13" aria-hidden="true" tabindex="-1"></a>    runningProcesses <span class="op">=</span> processGroup<span class="op">.</span>originalProcesses<span class="op">.</span>reverse<span class="op">.</span><span class="fu">zip</span><span class="op">((</span>first <span class="op">::</span> inner<span class="op">)</span> <span class="op">:+</span> last<span class="op">).</span>toMap</span>
<span id="cb18-14"><a href="#cb18-14" aria-hidden="true" tabindex="-1"></a>  <span class="op">}</span> <span class="cf">yield</span> <span class="kw">new</span> JVMRunningProcessGroup<span class="op">[</span>O<span class="op">,</span> E<span class="op">](</span>runningProcesses<span class="op">,</span> last<span class="op">.</span>runningOutput<span class="op">)</span></span></code></pre></div>
<p>where <code>connectAndStartProcesses</code> is a recursive function that does the same as we do with the first process:</p>
<ul>
<li>start it with the <code>startProcess</code> function (this is the same function we discussed in the first section, that starts <code>Process</code> values)</li>
<li>then “join” the output fiber; this completes immediately as it is not really running the output stream just returning it</li>
<li>we connect the <em>input</em> of the next process to the previous process’ output</li>
</ul>
<p>One thing we did not talk about yet is getting the <strong>results</strong> of a process group. This is where the old implementation again used some type level techniques and returned a <code>RunningProcess</code> value with specific per-process output and error types for each member of the group, as a <code>HList</code> (or converted to a <em>tuple</em>).</p>
<p>By making the library a bit more dynamic we can drop this part too. What is that we really want to do with a running process group?</p>
<ul>
<li><strong>Terminating</strong> the whole group together. Terminating just one part is something we does not support currently although it would not be hard to add.</li>
<li><strong>Waiting</strong> for all processes to stop</li>
<li>Examining the <strong>exit code</strong> for each member of the group</li>
<li>Redirecting the <strong>error</strong> channel of each process to something and getting them in the result</li>
<li>Redirecting the <strong>input</strong> of the group’s first process</li>
<li>Redirecting the <strong>output</strong> of the group’s last process, and getting it in the result</li>
</ul>
<p>The most difficult and primary reason for the <code>HList</code> in the old version is the error redirection, as it can be done <em>per process</em>. With some restrictions we can make a reasonable implementation though.</p>
<p>First, we require that the processes participating in forming a <em>process group</em> does not have their <em>error channel</em> bound yet. Then we create a <code>RedirectableErrors</code> capability that is very similar to the existing <code>RedirectableError</code> trait, but provides an advanced interface through it’s <code>customizedPerProcess</code> field:</p>
<div class="sourceCode" id="cb19"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb19-1"><a href="#cb19-1" aria-hidden="true" tabindex="-1"></a><span class="kw">trait</span> RedirectableErrors<span class="op">[+</span>P<span class="op">[</span>_<span class="op">]</span> <span class="op">&lt;:</span> ProcessGroup<span class="op">[</span>_<span class="op">,</span> _<span class="op">]]</span> <span class="op">{</span></span>
<span id="cb19-2"><a href="#cb19-2" aria-hidden="true" tabindex="-1"></a>  <span class="kw">lazy</span> <span class="kw">val</span> customizedPerProcess<span class="op">:</span> RedirectableErrors<span class="op">.</span>CustomizedPerProcess<span class="op">[</span>P<span class="op">]</span> <span class="op">=</span> <span class="co">// ...</span></span>
<span id="cb19-3"><a href="#cb19-3" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>where the <code>CustomizedPerProcess</code> interface contains the same redirection functions but accept a function of a <code>Process</code> as parameter.</p>
<p>For example:</p>
<div class="sourceCode" id="cb20"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb20-1"><a href="#cb20-1" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> <span class="fu">errorsToSink</span><span class="op">(</span>sink<span class="op">:</span> <span class="ex">Pipe</span><span class="op">[</span>IO<span class="op">,</span> <span class="ex">Byte</span><span class="op">,</span> <span class="bu">Unit</span><span class="op">]):</span> P<span class="op">[</span><span class="bu">Unit</span><span class="op">]</span></span>
<span id="cb20-2"><a href="#cb20-2" aria-hidden="true" tabindex="-1"></a><span class="co">// vs</span></span>
<span id="cb20-3"><a href="#cb20-3" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> <span class="fu">errorsToSink</span><span class="op">(</span>sinkFn<span class="op">:</span> <span class="ex">Process</span><span class="op">[</span>_<span class="op">,</span> _<span class="op">]</span> <span class="op">=&gt;</span> <span class="ex">Pipe</span><span class="op">[</span>IO<span class="op">,</span> <span class="ex">Byte</span><span class="op">,</span> <span class="bu">Unit</span><span class="op">]):</span> P<span class="op">[</span><span class="bu">Unit</span><span class="op">]</span> <span class="op">=</span></span></code></pre></div>
<p>The limitation is that for all process we need to have the same <strong>error result type</strong> but it still gets a lot of freedom via the advanced interface: we can tag the output with the process and split their processing further in the stream.</p>
<p>With this choice, we can finally define the result type of the process group too:</p>
<div class="sourceCode" id="cb21"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb21-1"><a href="#cb21-1" aria-hidden="true" tabindex="-1"></a><span class="kw">trait</span> ProcessGroupResult<span class="op">[+</span>O<span class="op">,</span> <span class="op">+</span>E<span class="op">]</span> <span class="op">{</span></span>
<span id="cb21-2"><a href="#cb21-2" aria-hidden="true" tabindex="-1"></a>  <span class="kw">val</span> exitCodes<span class="op">:</span> <span class="ex">Map</span><span class="op">[</span><span class="ex">Process</span><span class="op">[</span><span class="bu">Unit</span><span class="op">,</span> <span class="bu">Unit</span><span class="op">],</span> ExitCode<span class="op">]</span></span>
<span id="cb21-3"><a href="#cb21-3" aria-hidden="true" tabindex="-1"></a>  <span class="kw">val</span> output<span class="op">:</span> O</span>
<span id="cb21-4"><a href="#cb21-4" aria-hidden="true" tabindex="-1"></a>  <span class="kw">val</span> errors<span class="op">:</span> <span class="ex">Map</span><span class="op">[</span><span class="ex">Process</span><span class="op">[</span><span class="bu">Unit</span><span class="op">,</span> <span class="bu">Unit</span><span class="op">],</span> E<span class="op">]</span></span>
<span id="cb21-5"><a href="#cb21-5" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>The error results and the exit codes are in a map indexed by the <strong>original process</strong>. This is the value passed to the piping operator, the one that the user constructing the group has. That’s why in the <code>ProcessGroup</code> trait we also had to store the original process values.</p>
<p>As the output of all the inner processes are piped to the next process, we only have to care about the last process’ output.</p>
<h2 id="conclusion">Conclusion</h2>
<p>With a full redesign and making some compromises, we get a library that has a much more readable and easier to maintain code, and an API that is discoverable by the IDE and does not produce any weird error messages on misuse.</p>
<p>Note that in all the code snippets above I removed the <em>effect abstraction</em> and just used <code>IO</code> to make them simpler. The real code of course can be used with any IO library such as ZIO, just like the previous versions.</p>
]]></summary>
</entry>
<entry>
    <title>prox part 3 - effect abstraction and ZIO</title>
    <link href="http://vigoo.github.io/posts/2019-08-13-prox-3-zio.html" />
    <id>http://vigoo.github.io/posts/2019-08-13-prox-3-zio.html</id>
    <published>2019-08-13T00:00:00Z</published>
    <updated>2019-08-13T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on August 13, 2019
    
</div>

<h2 id="blog-post-series">Blog post series</h2>
<ul>
<li><a href="2019-02-10-prox-1-types.html">Part 1 - type level programming</a></li>
<li><a href="2019-03-07-prox-2-io-akkastreams.html">Part 2 - akka streams with cats effect</a></li>
<li><a href="2019-08-13-prox-3-zio.html">Part 3 - effect abstraction and ZIO</a></li>
<li><a href="2020-08-03-prox-4-simplify.html">Part 4 - simplified redesign</a></li>
</ul>
<h2 id="intro">Intro</h2>
<p>The <a href="2019-02-10-prox-1-types.html">first post</a> introduced the <em>prox library</em> and demonstrated the advanced type level programming techniques it uses. Then in the <a href="2019-03-07-prox-2-io-akkastreams.html">second part</a> of this series we experimented with replacing the <em>streaming library</em> from <a href="https://fs2.io/">fs2</a> to <a href="https://doc.akka.io/docs/akka/2.5/stream/">Akka Streams</a>.</p>
<p>In both cases the library used <a href="https://typelevel.org/cats-effect/">cats-effect</a> for describing side effects. But it did not really take advantage of <em>cats-effect</em>’s effect abstraction: it explicitly defined everything to be a computation in <a href="https://typelevel.org/cats-effect/datatypes/io.html"><code>IO</code></a>, cats-effect’s implementation of describing effectful computations.</p>
<p>But we can do better! By not relying on <code>IO</code> but the various type classes the <em>cats-effect</em> library provides we can make <em>prox</em> work with any kind of effect library out of the box. One such example is <a href="https://github.com/zio/zio">ZIO</a>.</p>
<h2 id="effect-abstraction">Effect abstraction</h2>
<p>Let’s see an example of how <code>IO</code> used to be used in the library! The following function is in the <code>Start</code> type class, and it starts a process or piped process group:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> <span class="fu">apply</span><span class="op">(</span>process<span class="op">:</span> PN<span class="op">,</span> dontStartOutput<span class="op">:</span> <span class="ex">Boolean</span> <span class="op">=</span> <span class="kw">false</span><span class="op">,</span> blocker<span class="op">:</span> Blocker<span class="op">)</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>         <span class="op">(</span><span class="kw">implicit</span> contextShift<span class="op">:</span> ContextShift<span class="op">[</span>IO<span class="op">]):</span> IO<span class="op">[</span>RunningProcesses<span class="op">]</span></span></code></pre></div>
<p>We can observe two things here:
- The function returns an effectful computation in <code>IO</code>
- An implicit <em>context shifter</em> is needed by the implementations which are calling some streaming functions needing it.</p>
<p>To make it independent of the effect library implementation we have to get rid of <code>IO</code> and use a generic type instead, let’s call it <code>F</code>:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> <span class="fu">apply</span><span class="op">(</span>process<span class="op">:</span> PN<span class="op">,</span> </span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>          dontStartOutput<span class="op">:</span> <span class="ex">Boolean</span> <span class="op">=</span> <span class="kw">false</span><span class="op">,</span> </span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>          blocker<span class="op">:</span> Blocker<span class="op">)</span></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a>         <span class="op">(</span><span class="kw">implicit</span></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a>          concurrent<span class="op">:</span> Concurrent<span class="op">[</span>F<span class="op">],</span></span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a>          contextShift<span class="op">:</span> ContextShift<span class="op">[</span>F<span class="op">]):</span> F<span class="op">[</span>RunningProcesses<span class="op">]</span></span></code></pre></div>
<p>Beside using <code>F</code> instead of <code>IO</code> everywhere we also have a new requirement, our context type (<code>F</code>) have to have an implementation of the <a href="https://typelevel.org/cats-effect/typeclasses/concurrent.html"><code>Concurrent</code></a> type class.</p>
<p><em>Cats-effect</em> defines a hierarchy of type classes to deal with effectful computations. At the time of writing it looks like this:
<img src="https://typelevel.org/cats-effect/img/cats-effect-typeclasses.svg"/></p>
<p>Read the <a href="https://typelevel.org/cats-effect/typeclasses/">official documentation</a> for more information.</p>
<p>Prox is based on the <code>ProcessNode</code> type which has two implementations, a single <code>Process</code> or a set of processes piped together to a <code>PipedProcess</code>. Because these types store their I/O redirection within themselves, they also have to be enriched with a context type parameter.</p>
<p>For example <code>Process</code> will look like this:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="kw">class</span> <span class="ex">Process</span><span class="op">[</span>F<span class="op">[</span>_<span class="op">],</span> Out<span class="op">,</span> Err<span class="op">,</span> OutResult<span class="op">,</span> ErrResult<span class="op">,</span> IRS <span class="op">&lt;:</span> RedirectionState<span class="op">,</span> ORS <span class="op">&lt;:</span> RedirectionState<span class="op">,</span> ERS <span class="op">&lt;:</span> RedirectionState<span class="op">]</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a><span class="op">(</span><span class="kw">val</span> command<span class="op">:</span> <span class="ex">String</span><span class="op">,</span></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a> <span class="kw">val</span> arguments<span class="op">:</span> <span class="ex">List</span><span class="op">[</span><span class="ex">String</span><span class="op">],</span></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a> <span class="kw">val</span> workingDirectory<span class="op">:</span> <span class="ex">Option</span><span class="op">[</span>Path<span class="op">],</span></span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a> <span class="kw">val</span> inputSource<span class="op">:</span> ProcessInputSource<span class="op">[</span>F<span class="op">],</span></span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a> <span class="kw">val</span> outputTarget<span class="op">:</span> ProcessOutputTarget<span class="op">[</span>F<span class="op">,</span> Out<span class="op">,</span> OutResult<span class="op">],</span></span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a> <span class="kw">val</span> errorTarget<span class="op">:</span> ProcessErrorTarget<span class="op">[</span>F<span class="op">,</span> Err<span class="op">,</span> ErrResult<span class="op">],</span></span>
<span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a> <span class="kw">val</span> environmentVariables<span class="op">:</span> <span class="ex">Map</span><span class="op">[</span><span class="ex">String</span><span class="op">,</span> <span class="ex">String</span><span class="op">],</span></span>
<span id="cb3-9"><a href="#cb3-9" aria-hidden="true" tabindex="-1"></a> <span class="kw">val</span> removedEnvironmentVariables<span class="op">:</span> <span class="ex">Set</span><span class="op">[</span><span class="ex">String</span><span class="op">])</span></span>
<span id="cb3-10"><a href="#cb3-10" aria-hidden="true" tabindex="-1"></a>  <span class="kw">extends</span> ProcessNode<span class="op">[</span>Out<span class="op">,</span> Err<span class="op">,</span> IRS<span class="op">,</span> ORS<span class="op">,</span> ERS<span class="op">]</span> <span class="op">{</span></span>
<span id="cb3-11"><a href="#cb3-11" aria-hidden="true" tabindex="-1"></a>    <span class="co">// ...</span></span>
<span id="cb3-12"><a href="#cb3-12" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>The context parameter (<code>F</code>) is needed because the <em>input source</em> and <em>output target</em> are all representing effectful code such as writing to the standard output, reading from a file, or passing data through concurrent streams.</p>
<p>Let’s see some examples of how the abstract types of <em>cats-effect</em> can be used to describe the computation, when we cannot rely on <code>IO</code> itself!</p>
<p>The most basic operation is to <em>delay the execution</em> of some code that does not use the effect abstractions. This is how we wrap the Java process API, for example.</p>
<p>While with the original implementation of <em>prox</em> it was done by using the <code>IO</code> constructor:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a>IO <span class="op">{</span></span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a>    systemProcess<span class="op">.</span>isAlive</span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>with an arbitrary <code>F</code> we only need to require that it has an implementation of the <code>Sync</code> type class:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="kw">private</span> <span class="kw">class</span> WrappedProcess<span class="op">[</span>F<span class="op">[</span>_<span class="op">]</span> <span class="op">:</span> Sync<span class="op">,</span>  <span class="co">// ...</span></span></code></pre></div>
<p>and then use the <code>delay</code> function:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a>Sync<span class="op">[</span>F<span class="op">].</span>delay <span class="op">{</span></span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a>    systemProcess<span class="op">.</span>isAlive</span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>Similarily the <code>Concurrent</code> type class can be used to start a concurrent computation on a <em>fiber</em>:</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a>Concurrent<span class="op">[</span>F<span class="op">].</span><span class="fu">start</span><span class="op">(</span>stream<span class="op">.</span>compile<span class="op">.</span>toVector<span class="op">)</span></span></code></pre></div>
<h2 id="type-level">Type level</h2>
<p>This would be it - except that we need one more thing because of the type level techniques described in the <a href="2019-02-10-prox-1-types.html">first post</a>.</p>
<p>To understand the problem, let’s see how the <em>output redirection</em> operator works. It is implemented as an <em>extension method</em> on the <code>ProcessNode</code> type:</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a><span class="kw">implicit</span> <span class="kw">class</span> ProcessNodeOutputRedirect<span class="op">[</span>PN <span class="op">&lt;:</span> ProcessNode<span class="op">[</span>_<span class="op">,</span> _<span class="op">,</span> _<span class="op">,</span> NotRedirected<span class="op">,</span> _<span class="op">]](</span>processNode<span class="op">:</span> PN<span class="op">)</span> <span class="op">{</span></span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a>    <span class="kw">def</span> <span class="op">&gt;[</span>F<span class="op">[</span>_<span class="op">],</span> To<span class="op">,</span> NewOut<span class="op">,</span> NewOutResult<span class="op">,</span> <span class="ex">Result</span> <span class="op">&lt;:</span> ProcessNode<span class="op">[</span>_<span class="op">,</span> _<span class="op">,</span> _<span class="op">,</span> Redirected<span class="op">,</span> _<span class="op">]]</span></span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true" tabindex="-1"></a>    <span class="op">(</span>to<span class="op">:</span> To<span class="op">)</span></span>
<span id="cb8-4"><a href="#cb8-4" aria-hidden="true" tabindex="-1"></a>    <span class="op">(</span><span class="kw">implicit</span></span>
<span id="cb8-5"><a href="#cb8-5" aria-hidden="true" tabindex="-1"></a>     target<span class="op">:</span> CanBeProcessOutputTarget<span class="op">.</span>Aux<span class="op">[</span>F<span class="op">,</span> To<span class="op">,</span> NewOut<span class="op">,</span> NewOutResult<span class="op">],</span></span>
<span id="cb8-6"><a href="#cb8-6" aria-hidden="true" tabindex="-1"></a>     redirectOutput<span class="op">:</span> RedirectOutput<span class="op">.</span>Aux<span class="op">[</span>F<span class="op">,</span> PN<span class="op">,</span> To<span class="op">,</span> NewOut<span class="op">,</span> NewOutResult<span class="op">,</span> <span class="ex">Result</span><span class="op">]):</span> <span class="ex">Result</span> <span class="op">=</span> <span class="op">{</span></span>
<span id="cb8-7"><a href="#cb8-7" aria-hidden="true" tabindex="-1"></a>      <span class="fu">redirectOutput</span><span class="op">(</span>processNode<span class="op">,</span> to<span class="op">)</span></span>
<span id="cb8-8"><a href="#cb8-8" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb8-9"><a href="#cb8-9" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>This extension method basically just finds the appropriate type class implementations and then call it to alter the process node to register the output redirection:
- we are redirecting the output of <code>processNode</code> (of type <code>PN</code>) to <code>to</code> (of type <code>To</code>)
- <code>target</code> is the <code>CanBeProcessOutputTarget</code> implementation, containing the actual code to set up the redirection
- <code>redirectOutput</code> is the process node type specific implementation of the <code>RedirectOutput</code> interface, knowing how to set up the redirection of a <code>Process</code> or a <code>PipedProcess</code></p>
<p>This code would compile, but we won’t be able to use it. For example for the following code:</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true" tabindex="-1"></a>running <span class="op">&lt;-</span> <span class="op">(</span><span class="ex">Process</span><span class="op">[</span>IO<span class="op">](</span><span class="st">&quot;echo&quot;</span><span class="op">,</span> <span class="ex">List</span><span class="op">(</span><span class="st">&quot;Hello world!&quot;</span><span class="op">))</span> <span class="op">&gt;</span> tempFile<span class="op">.</span>toPath<span class="op">).</span><span class="fu">start</span><span class="op">(</span>blocker<span class="op">)</span></span></code></pre></div>
<p>It fails with not being able to resolve the implicits correctly. The exact error of course depends much on the context but one example for the above line could be:</p>
<pre><code>[error] prox/src/test/scala/io/github/vigoo/prox/ProcessSpecs.scala:95:63: diverging implicit expansion for type cats.effect.Concurrent[F]
[error] starting with method catsIorTConcurrent in object Concurrent
[error]         running &lt;- (Process[IO](&quot;echo&quot;, List(&quot;Hello world!&quot;)) &gt; tempFile.toPath).start(blocker)</code></pre>
<p>This does not really help understanding the real problem though. As we have seen earlier, in this library the <code>Process</code> types have to be parameterized with the context as well, because they store their redirection logic within themselves. That’s why we specify it explicitly in the example to be <code>IO</code>: <code>Process[IO](...)</code>. What we would expect is that by tying <code>F[_]</code> to <code>IO</code> at the beginning, all the subsequent operations such as the <code>&gt;</code> redirection would respect this and the context gets inferred to be <code>IO</code> everywhere in the expression.</p>
<p>The compiler cannot do this. If we check the definition of <code>&gt;</code> again, you can see that there is no connection expressed between the type <code>PN</code> (the actual process node type) and <code>F</code> which is used as a type parameter for the implicit parameters.</p>
<p>The fix is to link the two, and we have a technique exactly for this that I described earlier: the <em>aux pattern</em>.</p>
<p>First let’s write some code that, in compile time, can “extract” the context type from a process node type:</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true" tabindex="-1"></a><span class="kw">trait</span> ContextOf<span class="op">[</span>PN<span class="op">]</span> <span class="op">{</span></span>
<span id="cb11-2"><a href="#cb11-2" aria-hidden="true" tabindex="-1"></a>  <span class="kw">type</span> <span class="ex">Context</span><span class="op">[</span>_<span class="op">]</span></span>
<span id="cb11-3"><a href="#cb11-3" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb11-4"><a href="#cb11-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb11-5"><a href="#cb11-5" aria-hidden="true" tabindex="-1"></a><span class="kw">object</span> ContextOf <span class="op">{</span></span>
<span id="cb11-6"><a href="#cb11-6" aria-hidden="true" tabindex="-1"></a>  <span class="kw">type</span> Aux<span class="op">[</span>PN<span class="op">,</span> F<span class="op">[</span>_<span class="op">]]</span> <span class="op">=</span> ContextOf<span class="op">[</span>PN<span class="op">]</span> <span class="op">{</span></span>
<span id="cb11-7"><a href="#cb11-7" aria-hidden="true" tabindex="-1"></a>    <span class="kw">type</span> <span class="ex">Context</span><span class="op">[</span>_<span class="op">]</span> <span class="op">=</span> F<span class="op">[</span>_<span class="op">]</span></span>
<span id="cb11-8"><a href="#cb11-8" aria-hidden="true" tabindex="-1"></a>  <span class="op">}</span></span>
<span id="cb11-9"><a href="#cb11-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb11-10"><a href="#cb11-10" aria-hidden="true" tabindex="-1"></a>  <span class="kw">def</span> apply<span class="op">[</span>PN <span class="op">&lt;:</span> ProcessNode<span class="op">[</span>_<span class="op">,</span> _<span class="op">,</span> _<span class="op">,</span> _<span class="op">,</span> _<span class="op">],</span> F<span class="op">[</span>_<span class="op">]](</span><span class="kw">implicit</span> contextOf<span class="op">:</span> ContextOf<span class="op">.</span>Aux<span class="op">[</span>PN<span class="op">,</span> F<span class="op">]):</span> Aux<span class="op">[</span>PN<span class="op">,</span> F<span class="op">]</span> <span class="op">=</span> contextOf</span>
<span id="cb11-11"><a href="#cb11-11" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb11-12"><a href="#cb11-12" aria-hidden="true" tabindex="-1"></a>  <span class="kw">implicit</span> <span class="kw">def</span> contextOfProcess<span class="op">[</span>F<span class="op">[</span>_<span class="op">],</span> Out<span class="op">,</span> Err<span class="op">,</span> OutResult<span class="op">,</span> ErrResult<span class="op">,</span> IRS <span class="op">&lt;:</span> RedirectionState<span class="op">,</span> ORS <span class="op">&lt;:</span> RedirectionState<span class="op">,</span> ERS <span class="op">&lt;:</span> RedirectionState<span class="op">]:</span></span>
<span id="cb11-13"><a href="#cb11-13" aria-hidden="true" tabindex="-1"></a>  Aux<span class="op">[</span><span class="ex">Process</span><span class="op">[</span>F<span class="op">,</span> Out<span class="op">,</span> Err<span class="op">,</span> OutResult<span class="op">,</span> ErrResult<span class="op">,</span> IRS<span class="op">,</span> ORS<span class="op">,</span> ERS<span class="op">],</span> F<span class="op">]</span> <span class="op">=</span></span>
<span id="cb11-14"><a href="#cb11-14" aria-hidden="true" tabindex="-1"></a>    <span class="kw">new</span> ContextOf<span class="op">[</span><span class="ex">Process</span><span class="op">[</span>F<span class="op">,</span> Out<span class="op">,</span> Err<span class="op">,</span> OutResult<span class="op">,</span> ErrResult<span class="op">,</span> IRS<span class="op">,</span> ORS<span class="op">,</span> ERS<span class="op">]]</span> <span class="op">{</span></span>
<span id="cb11-15"><a href="#cb11-15" aria-hidden="true" tabindex="-1"></a>      <span class="kw">override</span> <span class="kw">type</span> <span class="ex">Context</span><span class="op">[</span>_<span class="op">]</span> <span class="op">=</span> F<span class="op">[</span>_<span class="op">]</span></span>
<span id="cb11-16"><a href="#cb11-16" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb11-17"><a href="#cb11-17" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb11-18"><a href="#cb11-18" aria-hidden="true" tabindex="-1"></a>  <span class="kw">implicit</span> <span class="kw">def</span> contextOfPipedProcess<span class="op">[</span></span>
<span id="cb11-19"><a href="#cb11-19" aria-hidden="true" tabindex="-1"></a>  F<span class="op">[</span>_<span class="op">],</span></span>
<span id="cb11-20"><a href="#cb11-20" aria-hidden="true" tabindex="-1"></a>  Out<span class="op">,</span> Err<span class="op">,</span></span>
<span id="cb11-21"><a href="#cb11-21" aria-hidden="true" tabindex="-1"></a>  PN1 <span class="op">&lt;:</span> ProcessNode<span class="op">[</span>_<span class="op">,</span> _<span class="op">,</span> _<span class="op">,</span> _<span class="op">,</span> _<span class="op">],</span></span>
<span id="cb11-22"><a href="#cb11-22" aria-hidden="true" tabindex="-1"></a>  PN2 <span class="op">&lt;:</span> ProcessNode<span class="op">[</span>_<span class="op">,</span> _<span class="op">,</span> _<span class="op">,</span> _<span class="op">,</span> _<span class="op">],</span></span>
<span id="cb11-23"><a href="#cb11-23" aria-hidden="true" tabindex="-1"></a>  IRS <span class="op">&lt;:</span> RedirectionState<span class="op">,</span> ORS <span class="op">&lt;:</span> RedirectionState<span class="op">,</span> ERS <span class="op">&lt;:</span> RedirectionState<span class="op">]:</span></span>
<span id="cb11-24"><a href="#cb11-24" aria-hidden="true" tabindex="-1"></a>  Aux<span class="op">[</span>PipedProcess<span class="op">[</span>F<span class="op">,</span> Out<span class="op">,</span> Err<span class="op">,</span> <span class="ex">Byte</span><span class="op">,</span> PN1<span class="op">,</span> PN2<span class="op">,</span> IRS<span class="op">,</span> ORS<span class="op">,</span> ERS<span class="op">],</span> F<span class="op">]</span> <span class="op">=</span></span>
<span id="cb11-25"><a href="#cb11-25" aria-hidden="true" tabindex="-1"></a>    <span class="kw">new</span> ContextOf<span class="op">[</span>PipedProcess<span class="op">[</span>F<span class="op">,</span> Out<span class="op">,</span> Err<span class="op">,</span> <span class="ex">Byte</span><span class="op">,</span> PN1<span class="op">,</span> PN2<span class="op">,</span> IRS<span class="op">,</span> ORS<span class="op">,</span> ERS<span class="op">]]</span> <span class="op">{</span></span>
<span id="cb11-26"><a href="#cb11-26" aria-hidden="true" tabindex="-1"></a>      <span class="kw">override</span> <span class="kw">type</span> <span class="ex">Context</span><span class="op">[</span>_<span class="op">]</span> <span class="op">=</span> F<span class="op">[</span>_<span class="op">]</span></span>
<span id="cb11-27"><a href="#cb11-27" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb11-28"><a href="#cb11-28" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>Both <code>Process</code> and <code>PipedProcess</code> have the context as their first type parameter. By creating the <code>ContextOf</code> type class and the corresponding <code>Aux</code> type we can extend the <code>&gt;</code> operator to <em>require</em> such a connection (a way to get a <code>F[_]</code> context out of a type <code>PN</code>) in compile time, and with the aux pattern it unifies the type parameters and the context type gets <em>chained</em> through all the subsequent calls as we desired:</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb12-1"><a href="#cb12-1" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> <span class="op">&gt;[</span>F<span class="op">[</span>_<span class="op">],</span> To<span class="op">,</span> NewOut<span class="op">,</span> NewOutResult<span class="op">,</span> <span class="ex">Result</span> <span class="op">&lt;:</span> ProcessNode<span class="op">[</span>_<span class="op">,</span> _<span class="op">,</span> _<span class="op">,</span> Redirected<span class="op">,</span> _<span class="op">]]</span></span>
<span id="cb12-2"><a href="#cb12-2" aria-hidden="true" tabindex="-1"></a>    <span class="op">(</span>to<span class="op">:</span> To<span class="op">)</span></span>
<span id="cb12-3"><a href="#cb12-3" aria-hidden="true" tabindex="-1"></a>    <span class="op">(</span><span class="kw">implicit</span></span>
<span id="cb12-4"><a href="#cb12-4" aria-hidden="true" tabindex="-1"></a>     contextOf<span class="op">:</span> ContextOf<span class="op">.</span>Aux<span class="op">[</span>PN<span class="op">,</span> F<span class="op">],</span></span>
<span id="cb12-5"><a href="#cb12-5" aria-hidden="true" tabindex="-1"></a>     target<span class="op">:</span> CanBeProcessOutputTarget<span class="op">.</span>Aux<span class="op">[</span>F<span class="op">,</span> To<span class="op">,</span> NewOut<span class="op">,</span> NewOutResult<span class="op">],</span></span>
<span id="cb12-6"><a href="#cb12-6" aria-hidden="true" tabindex="-1"></a>     redirectOutput<span class="op">:</span> RedirectOutput<span class="op">.</span>Aux<span class="op">[</span>F<span class="op">,</span> PN<span class="op">,</span> To<span class="op">,</span> NewOut<span class="op">,</span> NewOutResult<span class="op">,</span> <span class="ex">Result</span><span class="op">]):</span> <span class="ex">Result</span> <span class="op">=</span> <span class="op">{</span></span>
<span id="cb12-7"><a href="#cb12-7" aria-hidden="true" tabindex="-1"></a>      <span class="fu">redirectOutput</span><span class="op">(</span>processNode<span class="op">,</span> to<span class="op">)</span></span>
<span id="cb12-8"><a href="#cb12-8" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span></code></pre></div>
<h2 id="zio">ZIO</h2>
<p>Now that everything is in place, we can try out whether <em>prox</em> is really working with other effect libraries such as <a href="https://github.com/zio/zio">ZIO</a>.</p>
<p><em>ZIO</em> has a compatibility layer for <em>cats-effect</em>. It’s the implementation of the type classes cats-effect provides. It is in an extra library called <a href="https://github.com/zio/interop-cats">zio-interop-cats</a>.</p>
<p>For running processes with <em>prox</em> we can use the following variants of the <code>ZIO</code> type:</p>
<ul>
<li><code>RIO[-R, +A]</code> which is an alias for <code>ZIO[R, scala.Throwable, A]</code></li>
<li>or <code>Task[A]</code> which is an alias for <code>ZIO[scala.Any, scala.Throwable, A]</code> if we don’t take advantage of the environment parameter <code>R</code>.</li>
</ul>
<p>This in fact assuming the correct context only means switching <code>IO</code> to <code>RIO</code> or <code>Task</code> in the type parameter for <code>Process</code>:</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb13-1"><a href="#cb13-1" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> zio<span class="op">.</span>interop<span class="op">.</span>catz<span class="op">.</span>_</span>
<span id="cb13-2"><a href="#cb13-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-3"><a href="#cb13-3" aria-hidden="true" tabindex="-1"></a>Blocker<span class="op">[</span>RIO<span class="op">[</span><span class="ex">Console</span><span class="op">,</span> <span class="op">?]].</span>use <span class="op">{</span> blocker <span class="op">=&gt;</span></span>
<span id="cb13-4"><a href="#cb13-4" aria-hidden="true" tabindex="-1"></a>  <span class="cf">for</span> <span class="op">{</span></span>
<span id="cb13-5"><a href="#cb13-5" aria-hidden="true" tabindex="-1"></a>      <span class="co">// ...</span></span>
<span id="cb13-6"><a href="#cb13-6" aria-hidden="true" tabindex="-1"></a>      _ <span class="op">&lt;-</span> console<span class="op">.</span><span class="fu">putStrLn</span><span class="op">(</span><span class="st">&quot;Starting external process...&quot;</span><span class="op">)</span></span>
<span id="cb13-7"><a href="#cb13-7" aria-hidden="true" tabindex="-1"></a>      _ <span class="op">&lt;-</span> <span class="op">(</span><span class="ex">Process</span><span class="op">[</span>Task<span class="op">](</span><span class="st">&quot;echo&quot;</span><span class="op">,</span> <span class="ex">List</span><span class="op">(</span><span class="st">&quot;Hello world!&quot;</span><span class="op">))</span> <span class="op">&gt;</span> tempFile<span class="op">.</span>toPath<span class="op">).</span><span class="fu">start</span><span class="op">(</span>blocker<span class="op">)</span></span>
<span id="cb13-8"><a href="#cb13-8" aria-hidden="true" tabindex="-1"></a>      <span class="co">// ...</span></span>
<span id="cb13-9"><a href="#cb13-9" aria-hidden="true" tabindex="-1"></a>  <span class="op">}</span> <span class="cf">yield</span> <span class="op">()</span></span>
<span id="cb13-10"><a href="#cb13-10" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>A nice way to have everything set up for this is to use the interop library’s <a href="https://zio.dev/docs/interop/interop_catseffect#cats-app"><code>CatsApp</code></a> trait as an entrypoint for the application.</p>
<p>This brings all the necessary implicits in scope and requires you to implement the following function as the entry point of the application:</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb14-1"><a href="#cb14-1" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> <span class="fu">run</span><span class="op">(</span>args<span class="op">:</span> <span class="ex">List</span><span class="op">[</span><span class="ex">String</span><span class="op">]):</span> ZIO<span class="op">[</span><span class="ex">Environment</span><span class="op">,</span> Nothing<span class="op">,</span> <span class="bu">Int</span><span class="op">]</span></span></code></pre></div>
]]></summary>
</entry>
<entry>
    <title>prox part 2 - akka streams with cats effect</title>
    <link href="http://vigoo.github.io/posts/2019-03-07-prox-2-io-akkastreams.html" />
    <id>http://vigoo.github.io/posts/2019-03-07-prox-2-io-akkastreams.html</id>
    <published>2019-03-07T00:00:00Z</published>
    <updated>2019-03-07T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on March  7, 2019
    
</div>

<h2 id="blog-post-series">Blog post series</h2>
<ul>
<li><a href="2019-02-10-prox-1-types.html">Part 1 - type level programming</a></li>
<li><a href="2019-03-07-prox-2-io-akkastreams.html">Part 2 - akka streams with cats effect</a></li>
<li><a href="2019-08-13-prox-3-zio.html">Part 3 - effect abstraction and ZIO</a></li>
<li><a href="2020-08-03-prox-4-simplify.html">Part 4 - simplified redesign</a></li>
</ul>
<h2 id="intro">Intro</h2>
<p>In the previous post we have seen how <a href="https://github.com/vigoo/prox">prox</a> applies advanced type level programming techniques to express executing external system processes. The input and output of these processes can be connected to <strong>streams</strong>. The current version of <a href="https://github.com/vigoo/prox">prox</a> uses the <a href="https://fs2.io/">fs2</a> library to describe these streams, and <a href="https://typelevel.org/cats-effect/">cats-effect</a> as an <strong>IO</strong> abstraction, allowing it to separate the specification of a process pipeline from its actual execution.</p>
<p>In this post we will keep <a href="https://typelevel.org/cats-effect/">cats-effect</a> but replace <a href="https://fs2.io/">fs2</a> with the stream library of the Akka toolkit, <a href="https://doc.akka.io/docs/akka/2.5/stream/">Akka Streams</a>. This will be a hybrid solution, as Akka Streams is not using any kind of IO abstraction, unlike <a href="https://fs2.io/">fs2</a> which is implemented on top of <a href="https://typelevel.org/cats-effect/">cats-effect</a>. We will experiment with implementing <a href="https://github.com/vigoo/prox">prox</a> purely with the <em>Akka</em> libraries in a future post.</p>
<h2 id="replacing-fs2-with-akka-streams">Replacing fs2 with Akka Streams</h2>
<p>We start by removing the <a href="https://fs2.io/">fs2</a> dependency and adding <em>Akka Streams</em>:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="op">-</span> <span class="st">&quot;co.fs2&quot;</span> <span class="op">%%</span> <span class="st">&quot;fs2-core&quot;</span> <span class="op">%</span> <span class="st">&quot;1.0.3&quot;</span><span class="op">,</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a><span class="op">-</span> <span class="st">&quot;co.fs2&quot;</span> <span class="op">%%</span> <span class="st">&quot;fs2-io&quot;</span> <span class="op">%</span> <span class="st">&quot;1.0.3&quot;</span><span class="op">,</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a><span class="op">+</span> <span class="st">&quot;com.typesafe.akka&quot;</span> <span class="op">%%</span> <span class="st">&quot;akka-stream&quot;</span> <span class="op">%</span> <span class="st">&quot;2.5.20&quot;</span><span class="op">,</span></span></code></pre></div>
<p>Then we have to change all the <em>fs2</em> types used in the codebase to the matching <em>Akka Streams</em> types. The following table describe these pairs:</p>
<table>
<thead>
<tr class="header">
<th>fs2</th>
<th>Akka Streams</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>Stream[IO, O]</code></td>
<td><code>Source[O, Any]</code></td>
</tr>
<tr class="even">
<td><code>Pipe[IO, I, O]</code></td>
<td><code>Flow[I, O, Any]</code></td>
</tr>
<tr class="odd">
<td><code>Sink[IO, O]</code></td>
<td><code>Sink[O, Future[Done]</code></td>
</tr>
</tbody>
</table>
<p>Another small difference that requires changing a lot of our functions is the <em>implicit context</em> these streaming solutions require.</p>
<p>With the original implementation it used to be:
- an implicit <code>ContextShift[IO]</code> instance
- and an explicitly passed <em>blocking execution context</em> of type <code>ExecutionContext</code></p>
<p>We can treat the blocking execution context as part of the implicit context for <em>prox</em> too, and could refactor the library to pass both of them wrapped together within a context object.</p>
<p>Let’s see what we need for the <em>Akka Streams</em> based implementation!
- an implicit <code>ContextShift[IO]</code> is <em>still needed</em> because we are still using <code>cats-effect</code> as our IO abstraction
- The blocking execution context however was only used for passing it to <em>fs2</em>, so we can remove that
- And for <em>Akka Streams</em> we will need an execution context of type <code>ExecutionContext</code> and also a <code>Materializer</code>. The materializer is used by <em>Akka Streams</em> to execute blueprints of streams. The usual implementation is <code>ActorMaterializer</code> which does that by spawning actors implementing the stream graph.</p>
<p>So for example the <code>start</code> extension method, is modified like this:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="op">-</span> <span class="kw">def</span> start<span class="op">[</span>RP<span class="op">](</span>blockingExecutionContext<span class="op">:</span> ExecutionContext<span class="op">)</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>               <span class="op">(</span><span class="kw">implicit</span> start<span class="op">:</span> Start<span class="op">.</span>Aux<span class="op">[</span>PN<span class="op">,</span> RP<span class="op">,</span> _<span class="op">],</span> </span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>                contextShift<span class="op">:</span> ContextShift<span class="op">[</span>IO<span class="op">]):</span> IO<span class="op">[</span>RP<span class="op">]</span></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a><span class="op">+</span> <span class="kw">def</span> start<span class="op">[</span>RP<span class="op">]()</span></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a>               <span class="op">(</span><span class="kw">implicit</span> start<span class="op">:</span> Start<span class="op">.</span>Aux<span class="op">[</span>PN<span class="op">,</span> RP<span class="op">,</span> _<span class="op">],</span></span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a>                contextShift<span class="op">:</span> ContextShift<span class="op">[</span>IO<span class="op">],</span></span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a>                materializer<span class="op">:</span> Materializer<span class="op">,</span></span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a>                executionContext<span class="op">:</span> ExecutionContext<span class="op">):</span> IO<span class="op">[</span>RP<span class="op">]</span></span></code></pre></div>
<p>It turns out that there is one more minor difference that needs changes in the internal type signatures.</p>
<p>In <em>Akka Streams</em> byte streams are represented by not streams of element type <code>Byte</code>. like in <em>fs2</em>, but streams of <em>chunks</em> called <code>ByteString</code>s. So everywhere we used <code>Byte</code> as element type, such as on the process boundaries, we now simply have to use <code>ByteStrings</code>, for example:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="op">-</span> <span class="kw">def</span> <span class="fu">apply</span><span class="op">(</span>from<span class="op">:</span> PN1<span class="op">,</span> to<span class="op">:</span> PN2<span class="op">,</span> via<span class="op">:</span> <span class="ex">Pipe</span><span class="op">[</span>IO<span class="op">,</span> <span class="ex">Byte</span><span class="op">,</span> <span class="ex">Byte</span><span class="op">]):</span> ResultProcess </span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a><span class="op">+</span> <span class="kw">def</span> <span class="fu">apply</span><span class="op">(</span>from<span class="op">:</span> PN1<span class="op">,</span> to<span class="op">:</span> PN2<span class="op">,</span> via<span class="op">:</span> Flow<span class="op">[</span>ByteString<span class="op">,</span> ByteString<span class="op">,</span> <span class="ex">Any</span><span class="op">]):</span> ResultProcess </span></code></pre></div>
<p>Another thing to notice is that <em>fs2</em> had a type parameter for passing the <code>IO</code> monad to run on. As I wrote earlier, <em>Akka Streams</em> does not depend on such abstractions, so this parameter is missing. On the other hand, it has a third type parameter which is set in the above example to <code>Any</code>. This parameter is called <code>Mat</code> and represents the type of the value the flow will materialize to. At this point we don’t care about it so we set it to <code>Any</code>.</p>
<p>Let’s take a look of the <code>connect</code> function of the <code>ProcessIO</code> trait. With <em>fs2</em> the <code>InputStreamingSource</code> is implemented like this:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="kw">class</span> <span class="fu">InputStreamingSource</span><span class="op">(</span>source<span class="op">:</span> <span class="ex">Source</span><span class="op">[</span>ByteString<span class="op">,</span> <span class="ex">Any</span><span class="op">])</span> <span class="kw">extends</span> ProcessInputSource <span class="op">{</span></span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a>    <span class="kw">override</span> <span class="kw">def</span> toRedirect<span class="op">:</span> Redirect <span class="op">=</span> Redirect<span class="op">.</span>PIPE</span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a>    </span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a>    <span class="kw">override</span> <span class="kw">def</span> <span class="fu">connect</span><span class="op">(</span>systemProcess<span class="op">:</span> lang<span class="op">.</span><span class="ex">Process</span><span class="op">,</span> blockingExecutionContext<span class="op">:</span> ExecutionContext<span class="op">)</span></span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a>                        <span class="op">(</span><span class="kw">implicit</span> contextShift<span class="op">:</span> ContextShift<span class="op">[</span>IO<span class="op">]):</span> <span class="bu">Stream</span><span class="op">[</span>IO<span class="op">,</span> <span class="ex">Byte</span><span class="op">]</span> <span class="op">=</span> <span class="op">{</span></span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a>        source<span class="op">.</span><span class="fu">observe</span><span class="op">(</span></span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a>            io<span class="op">.</span>writeOutputStream<span class="op">[</span>IO<span class="op">](</span></span>
<span id="cb4-8"><a href="#cb4-8" aria-hidden="true" tabindex="-1"></a>                IO <span class="op">{</span> systemProcess<span class="op">.</span>getOutputStream <span class="op">},</span></span>
<span id="cb4-9"><a href="#cb4-9" aria-hidden="true" tabindex="-1"></a>                closeAfterUse <span class="op">=</span> <span class="kw">true</span><span class="op">,</span></span>
<span id="cb4-10"><a href="#cb4-10" aria-hidden="true" tabindex="-1"></a>                blockingExecutionContext <span class="op">=</span> blockingExecutionContext<span class="op">))</span></span>
<span id="cb4-11"><a href="#cb4-11" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb4-12"><a href="#cb4-12" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-13"><a href="#cb4-13" aria-hidden="true" tabindex="-1"></a>    <span class="kw">override</span> <span class="kw">def</span> <span class="fu">run</span><span class="op">(</span>stream<span class="op">:</span> <span class="bu">Stream</span><span class="op">[</span>IO<span class="op">,</span> <span class="ex">Byte</span><span class="op">])(</span><span class="kw">implicit</span> contextShift<span class="op">:</span> ContextShift<span class="op">[</span>IO<span class="op">]):</span> IO<span class="op">[</span>Fiber<span class="op">[</span>IO<span class="op">,</span> <span class="bu">Unit</span><span class="op">]]</span> <span class="op">=</span></span>
<span id="cb4-14"><a href="#cb4-14" aria-hidden="true" tabindex="-1"></a>        Concurrent<span class="op">[</span>IO<span class="op">].</span><span class="fu">start</span><span class="op">(</span>stream<span class="op">.</span>compile<span class="op">.</span>drain<span class="op">)</span> </span>
<span id="cb4-15"><a href="#cb4-15" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>We have a <code>source</code> stream and during the setup of the process graph, when the system process has been already created, we have to set up the redirection of this source stream to this process. This is separated to a <code>connect</code> and a <code>run</code> step:
- The <code>connect</code> step creates an <em>fs2 stream</em> that observers the source stream and sends each byte to the system process’s standard input. This just <strong>defines</strong> this stream, and returns it as a pure functional value.
- The <code>run</code> step on the other hand has the result type <code>IO[Fiber[IO, Unit]]</code>. It <strong>defines</strong> the effect of starting a new thread and running the stream on it.</p>
<p>In the case of <em>fs2</em> we can be sure that the <code>source.observe</code> function is pure just by checking it’s type signature:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> <span class="fu">observe</span><span class="op">(</span>p<span class="op">:</span> <span class="ex">Pipe</span><span class="op">[</span>F<span class="op">,</span> O<span class="op">,</span> <span class="bu">Unit</span><span class="op">])(</span><span class="kw">implicit</span> F<span class="op">:</span> Concurrent<span class="op">[</span>F<span class="op">]):</span> <span class="bu">Stream</span><span class="op">[</span>F<span class="op">,</span> O<span class="op">]</span></span></code></pre></div>
<p>All side-effecting functions in <em>fs2</em> are defined as <code>IO</code> functions, so we simply know that this one is not among them, and that’s why the <code>connect</code> was a pure, non-<code>IO</code> function in the original implementation. With <em>Akka Streams</em> we don’t have any information about this encoded in the type system. We use the <code>source.alsoTo</code> function:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> <span class="fu">alsoTo</span><span class="op">(</span>that<span class="op">:</span> Graph<span class="op">[</span>SinkShape<span class="op">[</span>Out<span class="op">],</span> _<span class="op">]):</span> Repr<span class="op">[</span>Out<span class="op">]</span></span></code></pre></div>
<p>which is actually also pure (only creating a blueprint of the graph to be executed), so we can safely replace the implementation to this in the <em>Akka Streams</em> version:</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="kw">class</span> <span class="fu">InputStreamingSource</span><span class="op">(</span>source<span class="op">:</span> <span class="ex">Source</span><span class="op">[</span>ByteString<span class="op">,</span> <span class="ex">Any</span><span class="op">])</span> <span class="kw">extends</span> ProcessInputSource <span class="op">{</span></span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a>    <span class="kw">override</span> <span class="kw">def</span> toRedirect<span class="op">:</span> Redirect <span class="op">=</span> Redirect<span class="op">.</span>PIPE</span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true" tabindex="-1"></a>    <span class="kw">override</span> <span class="kw">def</span> <span class="fu">connect</span><span class="op">(</span>systemProcess<span class="op">:</span> lang<span class="op">.</span><span class="ex">Process</span><span class="op">)(</span><span class="kw">implicit</span> contextShift<span class="op">:</span> ContextShift<span class="op">[</span>IO<span class="op">]):</span> <span class="ex">Source</span><span class="op">[</span>ByteString<span class="op">,</span> <span class="ex">Any</span><span class="op">]</span> <span class="op">=</span></span>
<span id="cb7-5"><a href="#cb7-5" aria-hidden="true" tabindex="-1"></a>        source<span class="op">.</span><span class="fu">alsoTo</span><span class="op">(</span><span class="fu">fromOutputStream</span><span class="op">(()</span> <span class="op">=&gt;</span> systemProcess<span class="op">.</span>getOutputStream<span class="op">,</span> autoFlush <span class="op">=</span> <span class="kw">true</span><span class="op">))</span></span>
<span id="cb7-6"><a href="#cb7-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb7-7"><a href="#cb7-7" aria-hidden="true" tabindex="-1"></a>    <span class="kw">override</span> <span class="kw">def</span> <span class="fu">run</span><span class="op">(</span>stream<span class="op">:</span> <span class="ex">Source</span><span class="op">[</span>ByteString<span class="op">,</span> <span class="ex">Any</span><span class="op">])</span></span>
<span id="cb7-8"><a href="#cb7-8" aria-hidden="true" tabindex="-1"></a>                    <span class="op">(</span><span class="kw">implicit</span> contextShift<span class="op">:</span> ContextShift<span class="op">[</span>IO<span class="op">],</span></span>
<span id="cb7-9"><a href="#cb7-9" aria-hidden="true" tabindex="-1"></a>                     materializer<span class="op">:</span> Materializer<span class="op">,</span></span>
<span id="cb7-10"><a href="#cb7-10" aria-hidden="true" tabindex="-1"></a>                     executionContext<span class="op">:</span> ExecutionContext<span class="op">):</span> IO<span class="op">[</span>Fiber<span class="op">[</span>IO<span class="op">,</span> <span class="bu">Unit</span><span class="op">]]</span> <span class="op">=</span> <span class="op">{</span></span>
<span id="cb7-11"><a href="#cb7-11" aria-hidden="true" tabindex="-1"></a>        Concurrent<span class="op">[</span>IO<span class="op">].</span><span class="fu">start</span><span class="op">(</span>IO<span class="op">.</span>async <span class="op">{</span> finish <span class="op">=&gt;</span></span>
<span id="cb7-12"><a href="#cb7-12" aria-hidden="true" tabindex="-1"></a>            stream<span class="op">.</span><span class="fu">runWith</span><span class="op">(</span>Sink<span class="op">.</span>ignore<span class="op">).</span>onComplete <span class="op">{</span></span>
<span id="cb7-13"><a href="#cb7-13" aria-hidden="true" tabindex="-1"></a>                <span class="cf">case</span> <span class="fu">Success</span><span class="op">(</span>Done<span class="op">)</span> <span class="op">=&gt;</span> <span class="fu">finish</span><span class="op">(</span><span class="fu">Right</span><span class="op">(()))</span></span>
<span id="cb7-14"><a href="#cb7-14" aria-hidden="true" tabindex="-1"></a>                <span class="cf">case</span> <span class="fu">Failure</span><span class="op">(</span>reason<span class="op">)</span> <span class="op">=&gt;</span> <span class="fu">finish</span><span class="op">(</span><span class="fu">Left</span><span class="op">(</span>reason<span class="op">))</span></span>
<span id="cb7-15"><a href="#cb7-15" aria-hidden="true" tabindex="-1"></a>            <span class="op">}</span></span>
<span id="cb7-16"><a href="#cb7-16" aria-hidden="true" tabindex="-1"></a>        <span class="op">})</span></span>
<span id="cb7-17"><a href="#cb7-17" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb7-18"><a href="#cb7-18" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>The implementation of <code>run</code> above is a nice example of how we can integrate asynchronous operations not implemented with <code>cats-effect</code> to an <code>IO</code> based program. With <code>IO.async</code> we define how to start the asynchronous operation (in this case running the <em>Akka stream</em>) and we get a callback function, <code>finish</code> to be called when the asynchronous operation ends. The stream here <em>materializes</em> to a <code>Future[T]</code> value, so we can use it’s <code>onComplete</code> function to notify the IO system about the finished stream. The <code>IO</code> value returned by <code>IO.async</code> represents the whole asynchronous operation, it returns it’s final result when the callback is called, and “blocks” the program flow until it is done. This does not mean actually blocking a thread; but the next IO function will be executed only when it finished running (as it’s type is <code>IO[A]</code>). That is not what we need here, so we use <code>Concurrent[IO].start</code> to put this <code>IO</code> action on a separate <em>fiber</em>. This way all streams involved in the process graph will be executing in parallel.</p>
<h3 id="calculating-the-result">Calculating the result</h3>
<p><a href="https://github.com/vigoo/prox">prox</a> supports multiple ways to calculate a result of running a process graph:</p>
<ul>
<li>If the target is a <code>Sink</code>, the result type is <code>Unit</code></li>
<li>If the pipe’s output is <code>Out</code> and there is a <code>Monoid</code> instance for <code>Out</code>, the stream is folded into an <code>Out</code> value</li>
<li>Otherwise if the pipe’s output is <code>Out</code>, the result type will be <code>Vector[Out]</code></li>
</ul>
<p>These cases can be enforced by the <code>Drain</code>, <code>ToVector</code> and <code>Fold</code> wrapper classes.</p>
<p>Let’s see how we can implement them with <em>Akka Streams</em> compared to <em>fs2</em>.</p>
<h4 id="drain-sink">Drain sink</h4>
<p>The sink version was implemented like this with <em>fs2</em>:</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a>Concurrent<span class="op">[</span>IO<span class="op">].</span><span class="fu">start</span><span class="op">(</span>stream<span class="op">.</span>compile<span class="op">.</span>drain<span class="op">)</span></span></code></pre></div>
<ul>
<li><code>.compile</code> gets an interface that can be used to convert the stream to a <code>IO[A]</code> value in multiple ways.</li>
<li><code>.drain</code> is one of them. It runs the stream but ignores its elements, having a result type of <code>IO[Unit]</code>.</li>
<li>We want to run this concurrently with the other streams so we move it to a <em>fiber</em></li>
</ul>
<p>With <em>Akka Streams</em> there is one big difference. In <em>fs2</em> the sink is represented as a <code>Pipe[F, E, Unit]</code>, so we could treat it in the same way as other stream segments. In this case the <code>Sink</code> is not a <code>Flow</code>, so we do a trick to keep the interface as close to the original one as possible:</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true" tabindex="-1"></a><span class="fu">create</span><span class="op">((</span>sink<span class="op">:</span> Sink<span class="op">[</span>ByteString<span class="op">,</span> <span class="ex">Future</span><span class="op">[</span>R<span class="op">]])</span> <span class="op">=&gt;</span> <span class="kw">new</span> <span class="fu">OutputStreamingTarget</span><span class="op">(</span>Flow<span class="op">.</span><span class="fu">fromFunction</span><span class="op">(</span>identity<span class="op">))</span> </span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true" tabindex="-1"></a>                                                <span class="kw">with</span> ProcessOutputTarget<span class="op">[</span>ByteString<span class="op">,</span> R<span class="op">]</span> <span class="op">{</span></span>
<span id="cb9-3"><a href="#cb9-3" aria-hidden="true" tabindex="-1"></a>    <span class="kw">override</span> <span class="kw">def</span> <span class="fu">run</span><span class="op">(</span>stream<span class="op">:</span> <span class="ex">Source</span><span class="op">[</span>ByteString<span class="op">,</span> <span class="ex">Any</span><span class="op">])</span></span>
<span id="cb9-4"><a href="#cb9-4" aria-hidden="true" tabindex="-1"></a>                    <span class="op">(</span><span class="kw">implicit</span> contextShift<span class="op">:</span> ContextShift<span class="op">[</span>IO<span class="op">],</span></span>
<span id="cb9-5"><a href="#cb9-5" aria-hidden="true" tabindex="-1"></a>                    materializer<span class="op">:</span> Materializer<span class="op">,</span></span>
<span id="cb9-6"><a href="#cb9-6" aria-hidden="true" tabindex="-1"></a>                    executionContext<span class="op">:</span> ExecutionContext<span class="op">):</span> IO<span class="op">[</span>Fiber<span class="op">[</span>IO<span class="op">,</span> R<span class="op">]]</span> <span class="op">=</span></span>
<span id="cb9-7"><a href="#cb9-7" aria-hidden="true" tabindex="-1"></a>    Concurrent<span class="op">[</span>IO<span class="op">].</span><span class="fu">start</span><span class="op">(</span>IO<span class="op">.</span>async <span class="op">{</span> complete <span class="op">=&gt;</span></span>
<span id="cb9-8"><a href="#cb9-8" aria-hidden="true" tabindex="-1"></a>        stream<span class="op">.</span><span class="fu">runWith</span><span class="op">(</span>sink<span class="op">).</span>onComplete <span class="op">{</span></span>
<span id="cb9-9"><a href="#cb9-9" aria-hidden="true" tabindex="-1"></a>            <span class="cf">case</span> <span class="fu">Success</span><span class="op">(</span>value<span class="op">)</span> <span class="op">=&gt;</span> <span class="fu">complete</span><span class="op">(</span><span class="fu">Right</span><span class="op">(</span>value<span class="op">))</span></span>
<span id="cb9-10"><a href="#cb9-10" aria-hidden="true" tabindex="-1"></a>            <span class="cf">case</span> <span class="fu">Failure</span><span class="op">(</span>reason<span class="op">)</span> <span class="op">=&gt;</span> <span class="fu">complete</span><span class="op">(</span><span class="fu">Left</span><span class="op">(</span>reason<span class="op">))</span></span>
<span id="cb9-11"><a href="#cb9-11" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span>
<span id="cb9-12"><a href="#cb9-12" aria-hidden="true" tabindex="-1"></a>    <span class="op">})</span></span>
<span id="cb9-13"><a href="#cb9-13" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>The trick is that we create the <code>OutputStreamingTarget</code> with an identity flow, and only use the <code>Sink</code> when we actually run the stream, passing it to the <code>runWith</code> function. This materializes the stream into a <code>Future[Done]</code> value, that we can tie back to our <code>IO</code> system with <code>IO.async</code> as I already described it.</p>
<h4 id="combine-with-monoid">Combine with Monoid</h4>
<p>When the element type is a <em>monoid</em> we can fold it into a single value. <em>Fs2</em> directly supports this:</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true" tabindex="-1"></a>Concurrent<span class="op">[</span>IO<span class="op">].</span><span class="fu">start</span><span class="op">(</span>stream<span class="op">.</span>compile<span class="op">.</span>foldMonoid<span class="op">)</span></span></code></pre></div>
<p><em>Akka Streams</em> does not use cats type classes, but it also has a way to <em>fold</em> the stream, so we can easily implement it using the <em>monoid instance</em>:</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true" tabindex="-1"></a>Concurrent<span class="op">[</span>IO<span class="op">].</span><span class="fu">start</span><span class="op">(</span>IO<span class="op">.</span>async <span class="op">{</span> complete <span class="op">=&gt;</span></span>
<span id="cb11-2"><a href="#cb11-2" aria-hidden="true" tabindex="-1"></a>    stream<span class="op">.</span><span class="fu">runFold</span><span class="op">(</span>monoid<span class="op">.</span>empty<span class="op">)(</span>monoid<span class="op">.</span>combine<span class="op">).</span>onComplete <span class="op">{</span></span>
<span id="cb11-3"><a href="#cb11-3" aria-hidden="true" tabindex="-1"></a>        <span class="cf">case</span> <span class="fu">Success</span><span class="op">(</span>value<span class="op">)</span> <span class="op">=&gt;</span> <span class="fu">complete</span><span class="op">(</span><span class="fu">Right</span><span class="op">(</span>value<span class="op">))</span></span>
<span id="cb11-4"><a href="#cb11-4" aria-hidden="true" tabindex="-1"></a>        <span class="cf">case</span> <span class="fu">Failure</span><span class="op">(</span>reason<span class="op">)</span> <span class="op">=&gt;</span> <span class="fu">complete</span><span class="op">(</span><span class="fu">Left</span><span class="op">(</span>reason<span class="op">))</span></span>
<span id="cb11-5"><a href="#cb11-5" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb11-6"><a href="#cb11-6" aria-hidden="true" tabindex="-1"></a><span class="op">})</span></span></code></pre></div>
<h4 id="vector-of-elements">Vector of elements</h4>
<p>Finally let’s see the version that keeps all the stream elements in a vector as a result:</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb12-1"><a href="#cb12-1" aria-hidden="true" tabindex="-1"></a>Concurrent<span class="op">[</span>IO<span class="op">].</span><span class="fu">start</span><span class="op">(</span>stream<span class="op">.</span>compile<span class="op">.</span>toVector<span class="op">)</span></span></code></pre></div>
<p>With <em>Akka Streams</em> we can do it by running the stream into a <em>sink</em> created for this, <code>Sink.seq</code>. It materializes into a <code>Future[Seq[T]]</code> value that holds all the elements
of the executed stream:</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb13-1"><a href="#cb13-1" aria-hidden="true" tabindex="-1"></a>Concurrent<span class="op">[</span>IO<span class="op">].</span><span class="fu">start</span><span class="op">(</span>IO<span class="op">.</span>async <span class="op">{</span> complete <span class="op">=&gt;</span></span>
<span id="cb13-2"><a href="#cb13-2" aria-hidden="true" tabindex="-1"></a>    stream<span class="op">.</span><span class="fu">runWith</span><span class="op">(</span>Sink<span class="op">.</span>seq<span class="op">).</span>onComplete <span class="op">{</span></span>
<span id="cb13-3"><a href="#cb13-3" aria-hidden="true" tabindex="-1"></a>        <span class="cf">case</span> <span class="fu">Success</span><span class="op">(</span>value<span class="op">)</span> <span class="op">=&gt;</span> <span class="fu">complete</span><span class="op">(</span><span class="fu">Right</span><span class="op">(</span>value<span class="op">.</span>toVector<span class="op">))</span></span>
<span id="cb13-4"><a href="#cb13-4" aria-hidden="true" tabindex="-1"></a>        <span class="cf">case</span> <span class="fu">Failure</span><span class="op">(</span>reason<span class="op">)</span> <span class="op">=&gt;</span> <span class="fu">complete</span><span class="op">(</span><span class="fu">Left</span><span class="op">(</span>reason<span class="op">))</span></span>
<span id="cb13-5"><a href="#cb13-5" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb13-6"><a href="#cb13-6" aria-hidden="true" tabindex="-1"></a><span class="op">})</span></span></code></pre></div>
<h3 id="testing">Testing</h3>
<p>At this point the only remaining thing is to modify the tests too. One of the more complex examples is the <code>customProcessPiping</code> test case. With <em>fs2</em> it takes advantage of some <em>text processing</em> pipe elements coming with the library:</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb14-1"><a href="#cb14-1" aria-hidden="true" tabindex="-1"></a><span class="kw">val</span> customPipe<span class="op">:</span> <span class="ex">Pipe</span><span class="op">[</span>IO<span class="op">,</span> <span class="ex">Byte</span><span class="op">,</span> <span class="ex">Byte</span><span class="op">]</span> <span class="op">=</span></span>
<span id="cb14-2"><a href="#cb14-2" aria-hidden="true" tabindex="-1"></a>    <span class="op">(</span>s<span class="op">:</span> <span class="bu">Stream</span><span class="op">[</span>IO<span class="op">,</span> <span class="ex">Byte</span><span class="op">])</span> <span class="op">=&gt;</span> s</span>
<span id="cb14-3"><a href="#cb14-3" aria-hidden="true" tabindex="-1"></a>    <span class="op">.</span><span class="fu">through</span><span class="op">(</span>text<span class="op">.</span>utf8Decode<span class="op">)</span></span>
<span id="cb14-4"><a href="#cb14-4" aria-hidden="true" tabindex="-1"></a>    <span class="op">.</span><span class="fu">through</span><span class="op">(</span>text<span class="op">.</span>lines<span class="op">)</span></span>
<span id="cb14-5"><a href="#cb14-5" aria-hidden="true" tabindex="-1"></a>    <span class="op">.</span><span class="fu">map</span><span class="op">(</span>_<span class="op">.</span><span class="fu">split</span><span class="op">(</span><span class="ch">&#39; &#39;</span><span class="op">).</span>toVector<span class="op">)</span></span>
<span id="cb14-6"><a href="#cb14-6" aria-hidden="true" tabindex="-1"></a>    <span class="op">.</span><span class="fu">map</span><span class="op">(</span>v <span class="op">=&gt;</span> v<span class="op">.</span><span class="fu">map</span><span class="op">(</span>_ <span class="op">+</span> <span class="st">&quot; !!!&quot;</span><span class="op">).</span><span class="fu">mkString</span><span class="op">(</span><span class="st">&quot; &quot;</span><span class="op">))</span></span>
<span id="cb14-7"><a href="#cb14-7" aria-hidden="true" tabindex="-1"></a>    <span class="op">.</span><span class="fu">intersperse</span><span class="op">(</span><span class="st">&quot;</span><span class="ch">\n</span><span class="st">&quot;</span><span class="op">)</span></span>
<span id="cb14-8"><a href="#cb14-8" aria-hidden="true" tabindex="-1"></a>    <span class="op">.</span><span class="fu">through</span><span class="op">(</span>text<span class="op">.</span>utf8Encode<span class="op">)</span></span>
<span id="cb14-9"><a href="#cb14-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb14-10"><a href="#cb14-10" aria-hidden="true" tabindex="-1"></a><span class="kw">val</span> proc <span class="op">=</span> <span class="ex">Process</span><span class="op">(</span><span class="st">&quot;echo&quot;</span><span class="op">,</span> <span class="ex">List</span><span class="op">(</span><span class="st">&quot;This is a test string&quot;</span><span class="op">))</span></span>
<span id="cb14-11"><a href="#cb14-11" aria-hidden="true" tabindex="-1"></a>            <span class="op">.</span><span class="fu">via</span><span class="op">(</span>customPipe<span class="op">)</span></span>
<span id="cb14-12"><a href="#cb14-12" aria-hidden="true" tabindex="-1"></a>            <span class="op">.</span><span class="fu">to</span><span class="op">(</span><span class="ex">Process</span><span class="op">(</span><span class="st">&quot;wc&quot;</span><span class="op">,</span> <span class="ex">List</span><span class="op">(</span><span class="st">&quot;-w&quot;</span><span class="op">))</span> <span class="op">&gt;</span> text<span class="op">.</span>utf8Decode<span class="op">[</span>IO<span class="op">])</span></span></code></pre></div>
<p>There are similar tools in <em>Akka Streams</em> to express this in the <code>Framing</code> module:</p>
<div class="sourceCode" id="cb15"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb15-1"><a href="#cb15-1" aria-hidden="true" tabindex="-1"></a> <span class="kw">val</span> customPipe <span class="op">=</span> Framing<span class="op">.</span><span class="fu">delimiter</span><span class="op">(</span></span>
<span id="cb15-2"><a href="#cb15-2" aria-hidden="true" tabindex="-1"></a>      delimiter <span class="op">=</span> <span class="fu">ByteString</span><span class="op">(</span><span class="st">&quot;</span><span class="ch">\n</span><span class="st">&quot;</span><span class="op">),</span></span>
<span id="cb15-3"><a href="#cb15-3" aria-hidden="true" tabindex="-1"></a>      maximumFrameLength <span class="op">=</span> <span class="dv">10000</span><span class="op">,</span></span>
<span id="cb15-4"><a href="#cb15-4" aria-hidden="true" tabindex="-1"></a>      allowTruncation <span class="op">=</span> <span class="kw">true</span></span>
<span id="cb15-5"><a href="#cb15-5" aria-hidden="true" tabindex="-1"></a>    <span class="op">).</span><span class="fu">map</span><span class="op">(</span>_<span class="op">.</span>utf8String<span class="op">)</span></span>
<span id="cb15-6"><a href="#cb15-6" aria-hidden="true" tabindex="-1"></a>     <span class="op">.</span><span class="fu">map</span><span class="op">(</span>_<span class="op">.</span><span class="fu">split</span><span class="op">(</span><span class="ch">&#39; &#39;</span><span class="op">).</span>toVector<span class="op">)</span></span>
<span id="cb15-7"><a href="#cb15-7" aria-hidden="true" tabindex="-1"></a>     <span class="op">.</span><span class="fu">map</span><span class="op">(</span>v <span class="op">=&gt;</span> v<span class="op">.</span><span class="fu">map</span><span class="op">(</span>_ <span class="op">+</span> <span class="st">&quot; !!!&quot;</span><span class="op">).</span><span class="fu">mkString</span><span class="op">(</span><span class="st">&quot; &quot;</span><span class="op">))</span></span>
<span id="cb15-8"><a href="#cb15-8" aria-hidden="true" tabindex="-1"></a>     <span class="op">.</span><span class="fu">intersperse</span><span class="op">(</span><span class="st">&quot;</span><span class="ch">\n</span><span class="st">&quot;</span><span class="op">)</span></span>
<span id="cb15-9"><a href="#cb15-9" aria-hidden="true" tabindex="-1"></a>     <span class="op">.</span><span class="fu">map</span><span class="op">(</span>ByteString<span class="op">.</span>apply<span class="op">)</span></span>
<span id="cb15-10"><a href="#cb15-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb15-11"><a href="#cb15-11" aria-hidden="true" tabindex="-1"></a><span class="kw">val</span> proc <span class="op">=</span> <span class="ex">Process</span><span class="op">(</span><span class="st">&quot;echo&quot;</span><span class="op">,</span> <span class="ex">List</span><span class="op">(</span><span class="st">&quot;This is a test string&quot;</span><span class="op">))</span></span>
<span id="cb15-12"><a href="#cb15-12" aria-hidden="true" tabindex="-1"></a>            <span class="op">.</span><span class="fu">via</span><span class="op">(</span>customPipe<span class="op">)</span></span>
<span id="cb15-13"><a href="#cb15-13" aria-hidden="true" tabindex="-1"></a>            <span class="op">.</span><span class="fu">to</span><span class="op">(</span><span class="ex">Process</span><span class="op">(</span><span class="st">&quot;wc&quot;</span><span class="op">,</span> <span class="ex">List</span><span class="op">(</span><span class="st">&quot;-w&quot;</span><span class="op">))</span> <span class="op">&gt;</span> utf8Decode<span class="op">)</span></span></code></pre></div>
<p>where <code>utf8Decode</code> is a helper sink defined as:</p>
<div class="sourceCode" id="cb16"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb16-1"><a href="#cb16-1" aria-hidden="true" tabindex="-1"></a><span class="kw">val</span> utf8Decode<span class="op">:</span> Sink<span class="op">[</span>ByteString<span class="op">,</span> <span class="ex">Future</span><span class="op">[</span><span class="ex">String</span><span class="op">]]</span> <span class="op">=</span></span>
<span id="cb16-2"><a href="#cb16-2" aria-hidden="true" tabindex="-1"></a>    Flow<span class="op">[</span>ByteString<span class="op">]</span></span>
<span id="cb16-3"><a href="#cb16-3" aria-hidden="true" tabindex="-1"></a>        <span class="op">.</span><span class="fu">reduce</span><span class="op">(</span>_ <span class="op">++</span> _<span class="op">)</span></span>
<span id="cb16-4"><a href="#cb16-4" aria-hidden="true" tabindex="-1"></a>        <span class="op">.</span><span class="fu">map</span><span class="op">(</span>_<span class="op">.</span>utf8String<span class="op">)</span></span>
<span id="cb16-5"><a href="#cb16-5" aria-hidden="true" tabindex="-1"></a>        <span class="op">.</span><span class="fu">toMat</span><span class="op">(</span>Sink<span class="op">.</span>head<span class="op">)(</span>Keep<span class="op">.</span>right<span class="op">)</span></span></code></pre></div>
<p>First it concatenates the <code>ByteString</code> chunks, then simply calls <code>.utf8String</code> on the result.</p>
<h2 id="final-thoughts">Final thoughts</h2>
<p>We have seen that it is relatively easy to replace the stream library in <a href="https://github.com/vigoo/prox">prox</a> without changing it’s interface much, if we keep <a href="https://typelevel.org/cats-effect/">cats-effect</a> for expressing the effectful computations. The complete working example is available on the <a href="https://github.com/vigoo/prox/compare/akka-streams"><code>akka-streams</code> branch</a>.</p>
]]></summary>
</entry>
<entry>
    <title>prox part 1 - type level programming</title>
    <link href="http://vigoo.github.io/posts/2019-02-10-prox-1-types.html" />
    <id>http://vigoo.github.io/posts/2019-02-10-prox-1-types.html</id>
    <published>2019-02-10T00:00:00Z</published>
    <updated>2019-02-10T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on February 10, 2019
    
</div>

<h2 id="blog-post-series">Blog post series</h2>
<ul>
<li><a href="2019-02-10-prox-1-types.html">Part 1 - type level programming</a></li>
<li><a href="2019-03-07-prox-2-io-akkastreams.html">Part 2 - akka streams with cats effect</a></li>
<li><a href="2019-08-13-prox-3-zio.html">Part 3 - effect abstraction and ZIO</a></li>
<li><a href="2020-08-03-prox-4-simplify.html">Part 4 - simplified redesign</a></li>
</ul>
<h2 id="intro">Intro</h2>
<p>I started writing <a href="https://github.com/vigoo/prox">prox</a> at the end of 2017 for two reasons. First, I never liked any of the existing solutions for running external processes and capture their input/output streams. And I just returned from the <a href="https://scala.io/">scala.io conference</a> full of inspiration; I wanted to try out some techniques and libraries and this seemed to be a nice small project to do so.</p>
<p>Since then, <a href="https://github.com/vigoo/prox">prox</a> has been proved to be useful, we are using it at <a href="https://prezi.com/">Prezi</a> in all our Scala projects where we have to deal with external processes. The last stable version was created last October, after <a href="https://typelevel.org/cats-effect/">cats-effect 1.0</a> and <a href="https://fs2.io/">fs2 1.0</a> was released.</p>
<p>This is the first part of a series of blog posts dedicated to this library. In the first one I’m going to talk about <a href="https://github.com/milessabin/shapeless">shapeless</a> and <em>type level programming</em> techniques are used to create a strongly typed interface for starting system processes. In future posts I will explore replacing its dependencies such as using <a href="https://doc.akka.io/docs/akka/2.5/stream/">akka-streams</a> instead of <a href="https://fs2.io/">fs2</a> or <a href="https://scalaz.github.io/scalaz-zio/">ZIO</a> instead of <a href="https://typelevel.org/cats-effect/">cats-effect</a>. These different versions will be a good opportunity to do some performance comparison, and to close the series with creating a new version of the library which is easier to use in the alternative environments.</p>
<h2 id="limiting-redirection">Limiting redirection</h2>
<p>When I started writing the library I wanted to explore how I can express some strict constraints on the type level:</p>
<ul>
<li>A process can have its input, output and error streams redirected, but only once</li>
<li>Processes without redirected output can be piped to processes without a redirected input</li>
</ul>
<p>In prox <em>0.2.1</em> a single system process is described by the following type:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="kw">class</span> <span class="ex">Process</span><span class="op">[</span>Out<span class="op">,</span> Err<span class="op">,</span> OutResult<span class="op">,</span> ErrResult<span class="op">,</span> </span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>              IRS <span class="op">&lt;:</span> RedirectionState<span class="op">,</span> ORS <span class="op">&lt;:</span> RedirectionState<span class="op">,</span> ERS <span class="op">&lt;:</span> RedirectionState<span class="op">](</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>    <span class="kw">val</span> command<span class="op">:</span> <span class="ex">String</span><span class="op">,</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>    <span class="kw">val</span> arguments<span class="op">:</span> <span class="ex">List</span><span class="op">[</span><span class="ex">String</span><span class="op">],</span></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>    <span class="kw">val</span> workingDirectory<span class="op">:</span> <span class="ex">Option</span><span class="op">[</span>Path<span class="op">],</span></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a>    <span class="kw">val</span> inputSource<span class="op">:</span> ProcessInputSource<span class="op">,</span></span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a>    <span class="kw">val</span> outputTarget<span class="op">:</span> ProcessOutputTarget<span class="op">[</span>Out<span class="op">,</span> OutResult<span class="op">],</span></span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a>    <span class="kw">val</span> errorTarget<span class="op">:</span> ProcessErrorTarget<span class="op">[</span>Err<span class="op">,</span> ErrResult<span class="op">],</span></span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a>    <span class="kw">val</span> environmentVariables<span class="op">:</span> <span class="ex">Map</span><span class="op">[</span><span class="ex">String</span><span class="op">,</span> <span class="ex">String</span><span class="op">])</span></span>
<span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a>    <span class="kw">extends</span> ProcessNode<span class="op">[</span>Out<span class="op">,</span> Err<span class="op">,</span> IRS<span class="op">,</span> ORS<span class="op">,</span> ERS<span class="op">]</span> <span class="op">{</span></span>
<span id="cb1-11"><a href="#cb1-11" aria-hidden="true" tabindex="-1"></a>        <span class="co">// ...</span></span>
<span id="cb1-12"><a href="#cb1-12" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>but let’s focus first on the requirement to be able to redirect one of the streams <em>maximum once</em>.
This is encoded by the <code>IRS</code>, <code>ORS</code> and <code>ERS</code> type parameters, which are all have to be subtypes of <code>RedirectionState</code>. <code>RedirectionState</code> is a <strong>phantom type</strong>; there are no values ever created of this type, it is only used in type signatures to encode whether one of the three streams are already redirected or not:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="co">/**</span> Phantom type representing the redirection state of a process <span class="co">*/</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a><span class="kw">sealed</span> <span class="kw">trait</span> RedirectionState</span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a><span class="co">/**</span> Indicates that the given channel is not redirected yet <span class="co">*/</span></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a><span class="kw">trait</span> NotRedirected <span class="kw">extends</span> RedirectionState</span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a><span class="co">/**</span> Indicates that the given channel has already been redirected <span class="co">*/</span></span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a><span class="kw">trait</span> Redirected <span class="kw">extends</span> RedirectionState</span></code></pre></div>
<p>So for example with a simplified model of a <em>process</em>, <code>Process[IRS &lt;: RedirectionState, ORS &lt;: RedirectionState, ERS &lt;: RedirectionState]</code>, using the output redirection operator <code>&gt;</code> would change the types in the following way:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="kw">val</span> p1<span class="op">:</span> <span class="ex">Process</span><span class="op">[</span>NotRedirected<span class="op">,</span> NotRedirected<span class="op">,</span> NotRedirected<span class="op">]</span> <span class="op">=</span> <span class="op">???</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a><span class="kw">val</span> p2<span class="op">:</span> <span class="ex">Process</span><span class="op">[</span>NotRedirected<span class="op">,</span> Redirected<span class="op">,</span> NotRedirected<span class="op">]</span> <span class="op">=</span> p1 <span class="op">&gt;</span> <span class="op">(</span>home <span class="op">/</span> <span class="st">&quot;tmp&quot;</span> <span class="op">/</span> <span class="st">&quot;out.txt&quot;</span><span class="op">)</span></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a><span class="kw">val</span> p3 <span class="op">=</span> p2 <span class="op">&gt;</span> <span class="op">(</span>home <span class="op">/</span> <span class="st">&quot;tmp&quot;</span> <span class="op">/</span> <span class="st">&quot;another.txt&quot;</span><span class="op">)</span> <span class="co">// THIS MUST NOT COMPILE</span></span></code></pre></div>
<p>How can we restrict the redirect function to only work on <code>Process[_, NotRedirected, _]</code>? We can define it as an <strong>extension method</strong> with an implicit class (once again this is a simplified version focusing only on the <em>redirection state</em> handling):</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a>  <span class="kw">implicit</span> <span class="kw">class</span> ProcessNodeOutputRedirect<span class="op">[</span></span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a>      IRS <span class="op">&lt;:</span> RedirectionState<span class="op">,</span> </span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a>      ERS <span class="op">&lt;:</span> RedirectionState<span class="op">,</span> </span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a>      PN <span class="op">&lt;:</span> <span class="ex">Process</span><span class="op">[</span>IRS<span class="op">,</span> NotRedirected<span class="op">,</span> ERS<span class="op">]](</span>process<span class="op">:</span> PN<span class="op">)</span> <span class="op">{</span></span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a>    <span class="kw">def</span> <span class="op">&gt;[</span>To<span class="op">](</span>to<span class="op">:</span> To<span class="op">)(</span><span class="kw">implicit</span> target<span class="op">:</span> CanBeProcessOutputTarget<span class="op">[</span>To<span class="op">]):</span> <span class="ex">Process</span><span class="op">[</span>IRS<span class="op">,</span> Redirected<span class="op">,</span> ERS<span class="op">]</span> <span class="op">=</span> <span class="op">???</span></span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a>  <span class="op">}</span></span></code></pre></div>
<p>By forcing the <code>ORS</code> type parameter to be <code>NotRedirected</code> and setting it to <code>Redirected</code> in the result type we can guarantee that this function can only be called on a process that does not have their output redirected yet. The <em>target</em> of the redirection is extensible through the <code>CanBeProcessOutputTarget</code> type class, as we will see later.</p>
<h2 id="dependent-types">Dependent types</h2>
<p>Reality is much more complicated, because of <em>process piping</em> and because the process types encode the redirection result types too. Let’s get back to our <code>&gt;</code> function and see how we could modify it so it works with piped processes too. Anyway, how is process piping encoded in this library?</p>
<p>Two processes connected through a pipe are represented by the <code>PipedProcess</code> class. Both <code>Procses</code> and <code>PipedProcess</code> implements the following trait:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="kw">sealed</span> <span class="kw">trait</span> ProcessNode<span class="op">[</span>Out<span class="op">,</span> Err<span class="op">,</span> IRS <span class="op">&lt;:</span> RedirectionState<span class="op">,</span> ORS <span class="op">&lt;:</span> RedirectionState<span class="op">,</span> ERS <span class="op">&lt;:</span> RedirectionState<span class="op">]</span></span></code></pre></div>
<p>We’ve already seen <code>Process</code>. <code>PipedProcess</code> is a bit more complicated:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="kw">class</span> PipedProcess<span class="op">[</span>Out<span class="op">,</span> Err<span class="op">,</span> PN1Out<span class="op">,</span> </span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a>                   PN1 <span class="op">&lt;:</span> ProcessNode<span class="op">[</span>_<span class="op">,</span> _<span class="op">,</span> _<span class="op">,</span> _<span class="op">,</span> _<span class="op">],</span> </span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a>                   PN2 <span class="op">&lt;:</span> ProcessNode<span class="op">[</span>_<span class="op">,</span> _<span class="op">,</span> _<span class="op">,</span> _<span class="op">,</span> _<span class="op">],</span> </span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a>                   IRS <span class="op">&lt;:</span> RedirectionState<span class="op">,</span> ORS <span class="op">&lt;:</span> RedirectionState<span class="op">,</span> ERS <span class="op">&lt;:</span> RedirectionState<span class="op">]</span></span>
<span id="cb6-5"><a href="#cb6-5" aria-hidden="true" tabindex="-1"></a>    <span class="op">(</span><span class="kw">val</span> from<span class="op">:</span> PN1<span class="op">,</span> <span class="kw">val</span> createTo<span class="op">:</span> PipeConstruction<span class="op">[</span>PN1Out<span class="op">]</span> <span class="op">=&gt;</span> PN2<span class="op">)</span></span>
<span id="cb6-6"><a href="#cb6-6" aria-hidden="true" tabindex="-1"></a>    <span class="kw">extends</span> ProcessNode<span class="op">[</span>Out<span class="op">,</span> Err<span class="op">,</span> IRS<span class="op">,</span> ORS<span class="op">,</span> ERS<span class="op">]</span> <span class="op">{</span></span>
<span id="cb6-7"><a href="#cb6-7" aria-hidden="true" tabindex="-1"></a>        <span class="co">// ...</span></span>
<span id="cb6-8"><a href="#cb6-8" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>To make <code>&gt;</code> work on both, we can start by modifying its definition to work on <em>any</em> <code>ProcessNode</code> not just <code>Process</code> (omitting the output type params for now):</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="kw">implicit</span> <span class="kw">class</span> ProcessNodeOutputRedirect<span class="op">[</span></span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a>    IRS <span class="op">&lt;:</span> RedirectionState<span class="op">,</span> </span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a>    ERS <span class="op">&lt;:</span> RedirectionState<span class="op">,</span> </span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true" tabindex="-1"></a>    PN <span class="op">&lt;:</span> ProcessNode<span class="op">[</span>IRS<span class="op">,</span> NotRedirected<span class="op">,</span> ERS<span class="op">]](</span>process<span class="op">:</span> PN<span class="op">)</span> <span class="op">{</span></span>
<span id="cb7-5"><a href="#cb7-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb7-6"><a href="#cb7-6" aria-hidden="true" tabindex="-1"></a>  <span class="kw">def</span> <span class="op">&gt;[</span>To<span class="op">](</span>to<span class="op">:</span> To<span class="op">)(</span><span class="kw">implicit</span> target<span class="op">:</span> CanBeProcessOutputTarget<span class="op">[</span>To<span class="op">]):</span> ProcessNode<span class="op">[</span>IRS<span class="op">,</span> Redirected<span class="op">,</span> ERS<span class="op">]</span> <span class="op">=</span> <span class="op">???</span></span>
<span id="cb7-7"><a href="#cb7-7" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>This has a serious problem though. The output type is <code>ProcessNode</code> and not the “real” process type, which means that we lose type information and all the other dependent typed operations will not work. We have to make the result type <strong>depend</strong> on the input!</p>
<p>We may try to use the <code>RedirectionOutput</code> type class like this:</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a><span class="kw">implicit</span> <span class="kw">class</span> ProcessNodeOutputRedirect<span class="op">[</span></span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a>    IRS <span class="op">&lt;:</span> RedirectionState<span class="op">,</span> </span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true" tabindex="-1"></a>    ERS <span class="op">&lt;:</span> RedirectionState<span class="op">,</span> </span>
<span id="cb8-4"><a href="#cb8-4" aria-hidden="true" tabindex="-1"></a>    PN <span class="op">&lt;:</span> ProcessNode<span class="op">[</span>IRS<span class="op">,</span> NotRedirected<span class="op">,</span> ERS<span class="op">]](</span>process<span class="op">:</span> PN<span class="op">)</span> <span class="op">{</span></span>
<span id="cb8-5"><a href="#cb8-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-6"><a href="#cb8-6" aria-hidden="true" tabindex="-1"></a>  <span class="kw">def</span> <span class="op">&gt;[</span>To<span class="op">](</span>to<span class="op">:</span> To<span class="op">)</span></span>
<span id="cb8-7"><a href="#cb8-7" aria-hidden="true" tabindex="-1"></a>           <span class="op">(</span><span class="kw">implicit</span> target<span class="op">:</span> CanBeProcessOutputTarget<span class="op">[</span>To<span class="op">],</span></span>
<span id="cb8-8"><a href="#cb8-8" aria-hidden="true" tabindex="-1"></a>            redirectOutput<span class="op">:</span> RedirectOutput<span class="op">[</span>PN<span class="op">,</span> To<span class="op">]):</span> redirectOutput<span class="op">.</span><span class="ex">Result</span> <span class="op">=</span> <span class="fu">redirectOutput</span><span class="op">(</span>to<span class="op">)</span></span>
<span id="cb8-9"><a href="#cb8-9" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>Here the result (<code>redirectOutput.Result</code>) is a <em>path dependent type</em>. This may work in some simple cases but have two serious issues:
- It is not possible to use <code>redirectOutput.Result</code> in the <em>parameter block</em> of the function, so if another type class needed it as a type parameter we could not pass it.
- Further implicit resolutions and type level operations will quickly break as the compiler will not be able to unify the various path dependent types</p>
<p>The <strong>Aux pattern</strong>, used heavily in the <a href="https://github.com/milessabin/shapeless">shapeless</a> library provides a nice pattern for fixing both problems. We start by defining a <em>type class</em> for describing the operation, in this case <em>redirecting the output channel of a process</em>:</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true" tabindex="-1"></a><span class="kw">trait</span> RedirectOutput<span class="op">[</span>PN <span class="op">&lt;:</span> ProcessNode<span class="op">[</span>_<span class="op">,</span> NotRedirected<span class="op">,</span> _<span class="op">],</span> To<span class="op">]</span> <span class="op">{</span></span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true" tabindex="-1"></a>    <span class="kw">type</span> <span class="ex">Result</span> <span class="op">&lt;:</span> ProcessNode<span class="op">[</span>_<span class="op">,</span> Redirected<span class="op">,</span> _<span class="op">]</span></span>
<span id="cb9-3"><a href="#cb9-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-4"><a href="#cb9-4" aria-hidden="true" tabindex="-1"></a>    <span class="kw">def</span> <span class="fu">apply</span><span class="op">(</span>process<span class="op">:</span> PN<span class="op">,</span> to<span class="op">:</span> To<span class="op">)(</span><span class="kw">implicit</span> target<span class="op">:</span> CanBeProcessOutputTarget<span class="op">[</span>To<span class="op">]):</span> <span class="ex">Result</span></span>
<span id="cb9-5"><a href="#cb9-5" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb9-6"><a href="#cb9-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-7"><a href="#cb9-7" aria-hidden="true" tabindex="-1"></a><span class="kw">object</span> RedirectOutput <span class="op">{</span></span>
<span id="cb9-8"><a href="#cb9-8" aria-hidden="true" tabindex="-1"></a>    <span class="kw">type</span> Aux<span class="op">[</span>PN <span class="op">&lt;:</span> ProcessNode<span class="op">[</span>_<span class="op">,</span> NotRedirected<span class="op">,</span> _<span class="op">],</span> To<span class="op">,</span> Result0<span class="op">]</span> <span class="op">=</span> </span>
<span id="cb9-9"><a href="#cb9-9" aria-hidden="true" tabindex="-1"></a>        RedirectOutput<span class="op">[</span>PN<span class="op">,</span> To<span class="op">]</span> <span class="op">{</span> <span class="kw">type</span> <span class="ex">Result</span> <span class="op">=</span> Result0 <span class="op">}</span></span>
<span id="cb9-10"><a href="#cb9-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-11"><a href="#cb9-11" aria-hidden="true" tabindex="-1"></a>    <span class="co">// ... type class instances</span></span>
<span id="cb9-12"><a href="#cb9-12" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>The type class itself is straightforward. We have to implement it for both <code>Process</code> and <code>PipedProcess</code> and set the <code>Result</code> type accordingly, then implement <code>apply</code> that sets up the actual redirection. But what the <code>Aux</code> type is for?</p>
<p>It solves the problems with the <em>path dependent</em> version if we use it like this:</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true" tabindex="-1"></a><span class="kw">implicit</span> <span class="kw">class</span> ProcessNodeOutputRedirect<span class="op">[</span></span>
<span id="cb10-2"><a href="#cb10-2" aria-hidden="true" tabindex="-1"></a>    IRS <span class="op">&lt;:</span> RedirectionState<span class="op">,</span> </span>
<span id="cb10-3"><a href="#cb10-3" aria-hidden="true" tabindex="-1"></a>    ERS <span class="op">&lt;:</span> RedirectionState<span class="op">,</span> </span>
<span id="cb10-4"><a href="#cb10-4" aria-hidden="true" tabindex="-1"></a>    PN <span class="op">&lt;:</span> ProcessNode<span class="op">[</span>IRS<span class="op">,</span> NotRedirected<span class="op">,</span> ERS<span class="op">]](</span>process<span class="op">:</span> PN<span class="op">)</span> <span class="op">{</span></span>
<span id="cb10-5"><a href="#cb10-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-6"><a href="#cb10-6" aria-hidden="true" tabindex="-1"></a>  <span class="kw">def</span> <span class="op">&gt;[</span>To<span class="op">,</span> <span class="ex">Result</span> <span class="op">&lt;:</span> ProcessNode<span class="op">[</span>_<span class="op">,</span> Redirected<span class="op">,</span> _<span class="op">]](</span>to<span class="op">:</span> To<span class="op">)</span></span>
<span id="cb10-7"><a href="#cb10-7" aria-hidden="true" tabindex="-1"></a>           <span class="op">(</span><span class="kw">implicit</span> target<span class="op">:</span> CanBeProcessOutputTarget<span class="op">[</span>To<span class="op">],</span></span>
<span id="cb10-8"><a href="#cb10-8" aria-hidden="true" tabindex="-1"></a>            redirectOutput<span class="op">:</span> RedirectOutput<span class="op">.</span>Aux<span class="op">[</span>PN<span class="op">,</span> To<span class="op">,</span> <span class="ex">Result</span><span class="op">]):</span> <span class="ex">Result</span> <span class="op">=</span> <span class="fu">redirectOutput</span><span class="op">(</span>to<span class="op">)</span></span>
<span id="cb10-9"><a href="#cb10-9" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>By lifting the <code>Result</code> from the type class instance to a type parameter the compiler can now “extract” the calculated type from <code>redirectOutput.Result</code> to the <code>&gt;</code> function’s <code>Result</code> type parameter and use it directly, both for other further type requirements or as we do here, in the result type.</p>
<p>This is the basic pattern used for <em>all</em> the operations in prox. You can check <a href="http://gigiigig.github.io/posts/2015/09/13/aux-pattern.html">Luigi’s short introduction to the <code>Aux</code> pattern</a> for a more detailed explanation.</p>
<h2 id="starting-the-processes">Starting the processes</h2>
<p>So far we just combined purely functional data structures in a complicated way. The result value may encode the launching of several system processes that are connected via pipes to each other and possibly other streams as we will see.</p>
<p>When we eventually decide to <em>start</em> these processes, we need a way to observe their status, wait for them to stop, get their exit code, and to access the data sent to the output streams if they were redirected. And we need this <em>per process</em>, while launching the whole process graph in a <em>single step</em>.</p>
<p>First let’s model a single <em>running process</em>:</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true" tabindex="-1"></a><span class="kw">trait</span> RunningProcess<span class="op">[</span>Out<span class="op">,</span> OutResult<span class="op">,</span> ErrResult<span class="op">]</span> <span class="op">{</span></span>
<span id="cb11-2"><a href="#cb11-2" aria-hidden="true" tabindex="-1"></a>    <span class="kw">def</span> isAlive<span class="op">:</span> IO<span class="op">[</span><span class="ex">Boolean</span><span class="op">]</span></span>
<span id="cb11-3"><a href="#cb11-3" aria-hidden="true" tabindex="-1"></a>    <span class="kw">def</span> <span class="fu">waitForExit</span><span class="op">():</span> IO<span class="op">[</span>ProcessResult<span class="op">[</span>OutResult<span class="op">,</span> ErrResult<span class="op">]]</span></span>
<span id="cb11-4"><a href="#cb11-4" aria-hidden="true" tabindex="-1"></a>    <span class="kw">def</span> <span class="fu">terminate</span><span class="op">():</span> IO<span class="op">[</span>ProcessResult<span class="op">[</span>OutResult<span class="op">,</span> ErrResult<span class="op">]]</span></span>
<span id="cb11-5"><a href="#cb11-5" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>and <code>ProcessResult</code> that represents an already <em>terminated process</em>:</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb12-1"><a href="#cb12-1" aria-hidden="true" tabindex="-1"></a><span class="cf">case</span> <span class="kw">class</span> ProcessResult<span class="op">[</span>OutResult<span class="op">,</span> ErrResult<span class="op">](</span></span>
<span id="cb12-2"><a href="#cb12-2" aria-hidden="true" tabindex="-1"></a>    exitCode<span class="op">:</span> <span class="bu">Int</span><span class="op">,</span> </span>
<span id="cb12-3"><a href="#cb12-3" aria-hidden="true" tabindex="-1"></a>    fullOutput<span class="op">:</span> OutResult<span class="op">,</span> </span>
<span id="cb12-4"><a href="#cb12-4" aria-hidden="true" tabindex="-1"></a>    fullError<span class="op">:</span> ErrResult</span>
<span id="cb12-5"><a href="#cb12-5" aria-hidden="true" tabindex="-1"></a><span class="op">)</span></span></code></pre></div>
<p>Now we need to define a <code>start</code> extension method on <code>ProcessNode</code> that returns somehow one well typed <code>RunningProcess</code> for <em>each</em> system process that it starts.</p>
<p>Let’s forget for a second about having multiple processes piped together and just consider the single process case. For that, we would need somehing like this (the <code>Out</code> parameter is needed only for piping so I omitted it):</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb13-1"><a href="#cb13-1" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> start<span class="op">:</span> IO<span class="op">[</span>RunningProcess<span class="op">[</span>OutResult<span class="op">,</span> ErrResult<span class="op">]]</span></span></code></pre></div>
<p>Now we can see why <code>Process</code> has those additional type paramters. It is not enough to encode whether the output and error channels were redirected or not, we also have to encode the expected <em>result type</em> of redirecting these. By storing these types in type parameters of <code>Process</code> we can easily imagine that by using the pattern described in the previous section, the <em>result type</em> can <strong>depend</strong> on what we redirected the process to.</p>
<p>Let’s see some examples of what this means!</p>
<table>
<colgroup>
<col style="width: 35%" />
<col style="width: 64%" />
</colgroup>
<thead>
<tr class="header">
<th>Target</th>
<th>Result type</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>A file system path</td>
<td>The result type is <code>Unit</code>, the redirection happens on OS level</td>
</tr>
<tr class="even">
<td>Sink</td>
<td>The result type is <code>Unit</code>, only the sink’s side effect matters</td>
</tr>
<tr class="odd">
<td>Pipe with monoid elem type</td>
<td>The stream is folded by the monoid, the result type is <code>T</code></td>
</tr>
<tr class="even">
<td>Pipe with non-monoid elem type</td>
<td>The stream captures the elements in a vector, the result type is <code>Vector[T]</code></td>
</tr>
<tr class="odd">
<td>Custom fold function</td>
<td>The result type is the function’s result type</td>
</tr>
</tbody>
</table>
<p>The <code>CanBeProcessOutputTarget</code> type class we’ve seen earlier defines both the stream element type and the result type:</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb14-1"><a href="#cb14-1" aria-hidden="true" tabindex="-1"></a><span class="kw">trait</span> CanBeProcessOutputTarget<span class="op">[</span>To<span class="op">]</span> <span class="op">{</span></span>
<span id="cb14-2"><a href="#cb14-2" aria-hidden="true" tabindex="-1"></a>  <span class="co">/**</span> Output stream element type <span class="co">*/</span></span>
<span id="cb14-3"><a href="#cb14-3" aria-hidden="true" tabindex="-1"></a>  <span class="kw">type</span> Out</span>
<span id="cb14-4"><a href="#cb14-4" aria-hidden="true" tabindex="-1"></a>  <span class="co">/**</span> Result type of running the output stream <span class="co">*/</span></span>
<span id="cb14-5"><a href="#cb14-5" aria-hidden="true" tabindex="-1"></a>  <span class="kw">type</span> OutResult</span>
<span id="cb14-6"><a href="#cb14-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb14-7"><a href="#cb14-7" aria-hidden="true" tabindex="-1"></a>  <span class="kw">def</span> <span class="fu">apply</span><span class="op">(</span>to<span class="op">:</span> To<span class="op">):</span> ProcessOutputTarget<span class="op">[</span>Out<span class="op">,</span> OutResult<span class="op">]</span></span>
<span id="cb14-8"><a href="#cb14-8" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p><code>ProcessOutputTarget</code> contains the actual IO code to build the redirection of the streams, I won’t get into details in this post. Note that there are similar type classes for <em>error</em> and <em>input</em> redirection too.</p>
<p>For two processes piped together we have to provide <em>two</em> <code>RunningProcess</code> instances with the proper result type parameters. So we can see that it is not enough that the <em>redirection</em> stores the result type in the process type, the <em>start</em> method must be dependent typed too.</p>
<p>One way to encode this in the type system would be something like this (simplified):</p>
<div class="sourceCode" id="cb15"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb15-1"><a href="#cb15-1" aria-hidden="true" tabindex="-1"></a><span class="kw">val</span> p1 <span class="op">=</span> <span class="ex">Process</span><span class="op">()</span></span>
<span id="cb15-2"><a href="#cb15-2" aria-hidden="true" tabindex="-1"></a><span class="kw">val</span> p2 <span class="op">=</span> <span class="ex">Process</span><span class="op">()</span></span>
<span id="cb15-3"><a href="#cb15-3" aria-hidden="true" tabindex="-1"></a><span class="kw">val</span> p3 <span class="op">=</span> <span class="ex">Process</span><span class="op">()</span></span>
<span id="cb15-4"><a href="#cb15-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb15-5"><a href="#cb15-5" aria-hidden="true" tabindex="-1"></a><span class="kw">val</span> rp1<span class="op">:</span> IO<span class="op">[</span>RunningProcess<span class="op">]</span> <span class="op">=</span> p1<span class="op">.</span>start</span>
<span id="cb15-6"><a href="#cb15-6" aria-hidden="true" tabindex="-1"></a><span class="kw">val</span> rp2<span class="op">:</span> IO<span class="op">[(</span>RunningProcess<span class="op">,</span> RunningProcess<span class="op">)]</span> <span class="op">=</span> <span class="op">(</span>p1 <span class="op">|</span> p2<span class="op">).</span>start</span>
<span id="cb15-7"><a href="#cb15-7" aria-hidden="true" tabindex="-1"></a><span class="kw">val</span> rp3<span class="op">:</span> IO<span class="op">[(</span>RunningProcess<span class="op">,</span> RunningProcess<span class="op">,</span> RunningProcess<span class="op">)]</span> <span class="op">=</span> <span class="op">(</span>p1 <span class="op">|</span> p2 <span class="op">|</span> p3<span class="op">).</span>start</span></code></pre></div>
<p>We encode piped processes with tuples of <code>RunningProcess</code> and single process with a single <code>RunningProcess</code>. To implement this we can make use of the <a href="https://github.com/milessabin/shapeless">shapeless</a> library’s <code>HList</code> implementation.</p>
<p>HLists are heterogeneous lists; basically similar to a tuple, but with all the “usual” list-like functions implemented as dependent typed functions. It’s type describes the types of all its elements, and you can split it to head/tail, append two, etc. And we can do it both on the <em>type level</em> (computing the result type of appending two <code>HList</code>’s, for example) and on the <em>value leve</em> (appending the two values creating a third <code>HList</code> value).</p>
<p>We can implement the <code>start</code> method more easily by building a <code>HList</code>, while still keep the desired interface as <a href="https://github.com/milessabin/shapeless">shapeless</a> implements a conversion from <code>HList</code> to tuples.</p>
<p>We can define two separate <em>start functions</em>, one producing <code>HList</code> and another the tuples (IO releated parameters omitted):</p>
<div class="sourceCode" id="cb16"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb16-1"><a href="#cb16-1" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> start<span class="op">[</span>RP<span class="op">](</span><span class="kw">implicit</span> start<span class="op">:</span> Start<span class="op">.</span>Aux<span class="op">[</span>PN<span class="op">,</span> RP<span class="op">,</span> _<span class="op">]]):</span> IO<span class="op">[</span>RP<span class="op">]</span> <span class="op">=</span> <span class="op">???</span></span>
<span id="cb16-2"><a href="#cb16-2" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> startHL<span class="op">[</span>RPL <span class="op">&lt;:</span> HList<span class="op">](</span><span class="kw">implicit</span> start<span class="op">:</span> Start<span class="op">.</span>Aux<span class="op">[</span>PN<span class="op">,</span> _<span class="op">,</span> RP<span class="op">[</span>IO<span class="op">]):</span> IO<span class="op">[</span>RPL<span class="op">]</span> <span class="op">=</span> <span class="op">???</span></span></code></pre></div>
<p>The <code>Start</code> type class calculates both the tupled and the <code>HList</code> version’s result type. The implementation’s responsibility is to start the actual system processes and wire the streams together.</p>
<p>The interesting part is how we use <em>type level calculations</em> from <a href="https://github.com/milessabin/shapeless">shapeless</a> to calculte the tuple and <code>HList</code> types for piped processes. This is all done using the technique I described earlier, but may look a bit shocking first. Let’s take a look!</p>
<div class="sourceCode" id="cb17"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb17-1"><a href="#cb17-1" aria-hidden="true" tabindex="-1"></a><span class="kw">implicit</span> <span class="kw">def</span> startPipedProcess<span class="op">[</span></span>
<span id="cb17-2"><a href="#cb17-2" aria-hidden="true" tabindex="-1"></a>  Out<span class="op">,</span> Err<span class="op">,</span></span>
<span id="cb17-3"><a href="#cb17-3" aria-hidden="true" tabindex="-1"></a>  PN1 <span class="op">&lt;:</span> ProcessNode<span class="op">[</span>_<span class="op">,</span> _<span class="op">,</span> _<span class="op">,</span> _<span class="op">,</span> _<span class="op">],</span></span>
<span id="cb17-4"><a href="#cb17-4" aria-hidden="true" tabindex="-1"></a>  PN2 <span class="op">&lt;:</span> ProcessNode<span class="op">[</span>_<span class="op">,</span> _<span class="op">,</span> _<span class="op">,</span> _<span class="op">,</span> _<span class="op">],</span></span>
<span id="cb17-5"><a href="#cb17-5" aria-hidden="true" tabindex="-1"></a>  IRS <span class="op">&lt;:</span> RedirectionState<span class="op">,</span> ORS <span class="op">&lt;:</span> RedirectionState<span class="op">,</span> ERS <span class="op">&lt;:</span> RedirectionState<span class="op">,</span></span>
<span id="cb17-6"><a href="#cb17-6" aria-hidden="true" tabindex="-1"></a>  RP1<span class="op">,</span> RPL1 <span class="op">&lt;:</span> HList<span class="op">,</span> RP1Last <span class="op">&lt;:</span> RunningProcess<span class="op">[</span>_<span class="op">,</span> _<span class="op">,</span> _<span class="op">],</span></span>
<span id="cb17-7"><a href="#cb17-7" aria-hidden="true" tabindex="-1"></a>  RP2<span class="op">,</span> RPL2 <span class="op">&lt;:</span> HList<span class="op">,</span> RP2Head <span class="op">&lt;:</span> RunningProcess<span class="op">[</span>_<span class="op">,</span> _<span class="op">,</span> _<span class="op">],</span> RP2Tail <span class="op">&lt;:</span> HList<span class="op">,</span></span>
<span id="cb17-8"><a href="#cb17-8" aria-hidden="true" tabindex="-1"></a>  RPT<span class="op">,</span> RPL <span class="op">&lt;:</span> HList<span class="op">]</span></span>
<span id="cb17-9"><a href="#cb17-9" aria-hidden="true" tabindex="-1"></a>  <span class="op">(</span><span class="kw">implicit</span></span>
<span id="cb17-10"><a href="#cb17-10" aria-hidden="true" tabindex="-1"></a>   start1<span class="op">:</span> Start<span class="op">.</span>Aux<span class="op">[</span>PN1<span class="op">,</span> RP1<span class="op">,</span> RPL1<span class="op">],</span></span>
<span id="cb17-11"><a href="#cb17-11" aria-hidden="true" tabindex="-1"></a>   start2<span class="op">:</span> Start<span class="op">.</span>Aux<span class="op">[</span>PN2<span class="op">,</span> RP2<span class="op">,</span> RPL2<span class="op">],</span></span>
<span id="cb17-12"><a href="#cb17-12" aria-hidden="true" tabindex="-1"></a>   last1<span class="op">:</span> Last<span class="op">.</span>Aux<span class="op">[</span>RPL1<span class="op">,</span> RP1Last<span class="op">],</span></span>
<span id="cb17-13"><a href="#cb17-13" aria-hidden="true" tabindex="-1"></a>   rp1LastType<span class="op">:</span> RP1Last <span class="op">&lt;:&lt;</span> RunningProcess<span class="op">[</span><span class="ex">Byte</span><span class="op">,</span> _<span class="op">,</span> _<span class="op">],</span></span>
<span id="cb17-14"><a href="#cb17-14" aria-hidden="true" tabindex="-1"></a>   hcons2<span class="op">:</span> IsHCons<span class="op">.</span>Aux<span class="op">[</span>RPL2<span class="op">,</span> RP2Head<span class="op">,</span> RP2Tail<span class="op">],</span></span>
<span id="cb17-15"><a href="#cb17-15" aria-hidden="true" tabindex="-1"></a>   prepend<span class="op">:</span> Prepend<span class="op">.</span>Aux<span class="op">[</span>RPL1<span class="op">,</span> RPL2<span class="op">,</span> RPL<span class="op">],</span></span>
<span id="cb17-16"><a href="#cb17-16" aria-hidden="true" tabindex="-1"></a>   tupler<span class="op">:</span> Tupler<span class="op">.</span>Aux<span class="op">[</span>RPL<span class="op">,</span> RPT<span class="op">]):</span></span>
<span id="cb17-17"><a href="#cb17-17" aria-hidden="true" tabindex="-1"></a>  Aux<span class="op">[</span>PipedProcess<span class="op">[</span>Out<span class="op">,</span> Err<span class="op">,</span> <span class="ex">Byte</span><span class="op">,</span> PN1<span class="op">,</span> PN2<span class="op">,</span> IRS<span class="op">,</span> ORS<span class="op">,</span> ERS<span class="op">],</span> RPT<span class="op">,</span> RPL<span class="op">]</span> <span class="op">=</span></span>
<span id="cb17-18"><a href="#cb17-18" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb17-19"><a href="#cb17-19" aria-hidden="true" tabindex="-1"></a>    <span class="kw">new</span> Start<span class="op">[</span>PipedProcess<span class="op">[</span>Out<span class="op">,</span> Err<span class="op">,</span> <span class="ex">Byte</span><span class="op">,</span> PN1<span class="op">,</span> PN2<span class="op">,</span> IRS<span class="op">,</span> ORS<span class="op">,</span> ERS<span class="op">]]</span> <span class="op">{</span></span>
<span id="cb17-20"><a href="#cb17-20" aria-hidden="true" tabindex="-1"></a>      <span class="kw">override</span> <span class="kw">type</span> RunningProcesses <span class="op">=</span> RPT</span>
<span id="cb17-21"><a href="#cb17-21" aria-hidden="true" tabindex="-1"></a>      <span class="kw">override</span> <span class="kw">type</span> RunningProcessList <span class="op">=</span> RPL</span>
<span id="cb17-22"><a href="#cb17-22" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb17-23"><a href="#cb17-23" aria-hidden="true" tabindex="-1"></a>      <span class="co">// ...</span></span>
<span id="cb17-24"><a href="#cb17-24" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span></code></pre></div>
<p>The way to parse this is to follow the type level computations performed through the <em>Aux types</em> in the implicit parameter list:</p>
<ul>
<li><code>PN1</code> and <code>PN2</code> are the types of the two processes piped together</li>
<li>The first two implicit definition calculates the <em>running process tuple</em> and the <em>running process HList</em> types of these inidividual process nodes and “stores” the results in <code>RP1</code>, <code>RPL1</code>, <code>RP2</code> and <code>RPL2</code> type parameters. For example if the two processes pipe together are single <code>Process</code> instances, then <code>RP1</code> and <code>RP2</code> would be some kind of <code>RunningProcess</code>, and the HLists would be one element long, like <code>RunningProcess :: HNil</code>.</li>
<li>The <code>last1</code> implicit parameter is a type level <em>last</em> functinon on the first process’s <code>HList</code>. This is required because <code>PN1</code> itself can also be a sequence of piped processes, and we are connecting <code>PN2</code> to the <strong>last</strong> of these. The <code>RP1Last</code> type parameter becomes the <em>type</em> of the <em>last running process</em> of the first process node.</li>
<li>The next line, <code>rp1LastType</code> is an additional constraint fixing the <em>output stream element type</em> of <code>RP1Last</code> to <code>Byte</code>. The piping implementation is not able to connect streams of arbitrary element types, as the <em>process input</em> is always required to be a <em>byte stream</em>.</li>
<li><code>hcons2</code> is similar to the <code>last1</code> but here we are calculating the type level <em>head type</em> of the <code>HList</code> called <code>RPL2</code>. The head will be in <code>RP2Head</code> and the tail <code>HList</code> in <code>RP2Tail</code>.</li>
<li>In the <code>prepend</code> step we concatenate <code>RPL1</code> with <code>RPL2</code> using the <code>Prepend</code> operation, the result <code>HList</code> type is in <code>RPL</code>. This is the <code>HList</code> representation of the piped running process.</li>
<li>Finally we use the <code>Tupler</code> operation to calculate the tuple type from the <code>HList</code>, and store it in <code>RPT</code>.</li>
</ul>
<p>The compiler perform the type level calculations and we can use the result types <code>RPT</code> and <code>RPL</code> to actually implement the <em>start typeclass</em>. This is the most complicated type level calculation in the library.</p>
<h2 id="final-thoughts">Final thoughts</h2>
<p>As we’ve seen, Scala’s type system can bring us quite far in expressing a dependent typed interface. On the other hand writing and reading code in this style is really hard, and if things go wrong, decoding the compiler’s error messages is not an easy task either. This is a serious tradeoff that has to be considered and in many cases a more dynamic but much more readable and maintainable approach can be better.</p>
<p>With <a href="https://github.com/vigoo/prox">prox</a> I explicitly wanted to explore these features of the Scala language.</p>
<p>In the next posts we will ignore the type level parts of the library and focus on different <em>streaming</em> and <em>effect</em> libraries.</p>
]]></summary>
</entry>
<entry>
    <title>AWS rate limits vs prezidig</title>
    <link href="http://vigoo.github.io/posts/2018-09-21-aws-rate-limits-prezidig.html" />
    <id>http://vigoo.github.io/posts/2018-09-21-aws-rate-limits-prezidig.html</id>
    <published>2018-09-21T00:00:00Z</published>
    <updated>2018-09-21T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on September 21, 2018
    
</div>

<p>At <a href="https://prezi.com">Prezi</a>, we have an internal tool called <strong>prezidig</strong> for discovering AWS resources. I like it a lot so I was quite annoyed recently that it always fails with a <em>throttling exception</em> because of our increased use of the AWS API. It made it completely unusable, so I decided to try to fix this.</p>
<p>Then I decided to write the story in this blog post, as the steps I had to made to achieve the results I aimed for can be useful for writing maintainable, fast and safe Scala code in the future.</p>
<p>I will describe the phases as they happened, as I did not really know anything about this codebase so the path to the success was not exactly clear immediately.</p>
<h2 id="wrapping-the-calls">Wrapping the calls</h2>
<p>So my initial thought was to just find the AWS API calls and wrap them in a helper function which catches the throttling error and retries with an increasing delay.</p>
<p>I basically wrote this in the base class of all the <em>mirrors</em> (the classes which are responsible for fetching AWS and other resource data for <strong>prezidig</strong>):</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a> <span class="kw">protected</span> <span class="kw">def</span> byHandlingThrottling<span class="op">[</span>T<span class="op">](</span>awsCall<span class="op">:</span> <span class="op">=&gt;</span> T<span class="op">):</span> <span class="ex">Future</span><span class="op">[</span>T<span class="op">]</span> <span class="op">=</span> <span class="op">{</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>    <span class="kw">def</span> <span class="fu">call</span><span class="op">(</span>remainingTries<span class="op">:</span> <span class="bu">Int</span><span class="op">,</span> wait<span class="op">:</span> FiniteDuration<span class="op">):</span> <span class="ex">Future</span><span class="op">[</span>T<span class="op">]</span> <span class="op">=</span> <span class="op">{</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>      <span class="ex">Future</span><span class="op">(</span><span class="fu">Try</span><span class="op">(</span>awsCall<span class="op">)).</span>flatMap <span class="op">{</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>        <span class="cf">case</span> <span class="fu">Success</span><span class="op">(</span>result<span class="op">)</span> <span class="op">=&gt;</span> <span class="ex">Future</span><span class="op">.</span><span class="fu">successful</span><span class="op">(</span>result<span class="op">)</span></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>        <span class="cf">case</span> <span class="fu">Failure</span><span class="op">(</span>awsException<span class="op">:</span> AmazonServiceException<span class="op">)</span> <span class="cf">if</span> awsException<span class="op">.</span>getErrorCode <span class="op">==</span> <span class="st">&quot;Throttling&quot;</span> <span class="op">&amp;&amp;</span> remainingTries <span class="op">&gt;</span> <span class="dv">0</span> <span class="op">=&gt;</span></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a>          akka<span class="op">.</span>pattern<span class="op">.</span><span class="fu">after</span><span class="op">(</span>wait<span class="op">,</span> actorSystem<span class="op">.</span>scheduler<span class="op">)</span> <span class="op">{</span></span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a>            <span class="fu">call</span><span class="op">(</span>remainingTries <span class="op">-</span> <span class="dv">1</span><span class="op">,</span> wait <span class="op">*</span> <span class="dv">2</span><span class="op">)</span></span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a>          <span class="op">}</span></span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a>        <span class="cf">case</span> <span class="fu">Failure</span><span class="op">(</span>reason<span class="op">)</span> <span class="op">=&gt;</span> <span class="ex">Future</span><span class="op">.</span><span class="fu">failed</span><span class="op">(</span>reason<span class="op">)</span></span>
<span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a>      <span class="op">}</span></span>
<span id="cb1-11"><a href="#cb1-11" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb1-12"><a href="#cb1-12" aria-hidden="true" tabindex="-1"></a>     <span class="fu">call</span><span class="op">(</span><span class="dv">10</span><span class="op">,</span> <span class="fl">100.</span>millis<span class="op">)</span> <span class="co">// </span><span class="al">TODO</span><span class="co">: make configurable</span></span>
<span id="cb1-13"><a href="#cb1-13" aria-hidden="true" tabindex="-1"></a>  <span class="op">}</span></span></code></pre></div>
<p>Then the only thing I had to do was to was wrapping all the existing AWS calls with this. Then I realized that this won’t be this simple, as these calls were not always asynchronous, just sometimes. To see an example, for an <em>ElasticBeanstalk application</em>, it fetches the <em>application metadata</em> with synchronous call, then fetches the related <em>EB environments</em> asynchronously. The whole thing might be wrapped in another future somewhere else, but that’s a different story.</p>
<p>While making these discoveries I also found several synchronization points, like the code waiting for some futures to complete in a blocking way. Also that the model is mutable. So… just for trying this out, I <em>still <strong>wrapped</strong></em> all the AWS calls with this stuff, by converting the future back to a synchronous call by immediately blocking on it.</p>
<p>What did I achieve with this? Well, some throttling errors were fixed, the code became extremely ugly, and I could not even wrap everything so the errors remained, and because of the tons of blocking, timeouts, etc. it was basically impossible to understand whether this would work or deadlock or just be slow.</p>
<p>That was the point I decided to do this properly</p>
<h2 id="reflection">Reflection</h2>
<p>Before solving the real problem I found that the mirrors are initialized via reflection, something like this:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> buildMirrors<span class="op">[</span>A <span class="op">&lt;:</span> RegionAwareAWSMirror<span class="op">[</span>_<span class="op">,</span> _<span class="op">]](</span><span class="kw">implicit</span> mf<span class="op">:</span> <span class="ex">Manifest</span><span class="op">[</span>A<span class="op">]):</span> <span class="bu">Seq</span><span class="op">[</span>A<span class="op">]</span> <span class="op">=</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>    Config<span class="op">.</span>regions<span class="op">.</span><span class="fu">map</span><span class="op">(</span>region <span class="op">=&gt;</span> mf<span class="op">.</span>runtimeClass<span class="op">.</span><span class="fu">getConstructor</span><span class="op">(</span>classOf<span class="op">[</span><span class="ex">String</span><span class="op">]).</span><span class="fu">newInstance</span><span class="op">(</span>region<span class="op">).</span>asInstanceOf<span class="op">[</span>A<span class="op">])</span></span></code></pre></div>
<p>This is something that you should avoid, as it leads to problems that are not detected by the compiler, only at runtime, every time you refactor something around these classes. There are some use cases where this may be required, like dynamically loading plugins or stuff like this, but to just have a factory for something, it is must simple to use… <strong>functions</strong>!</p>
<p>So I could not hold myself back and quickly changed this to:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> buildMirrors<span class="op">[</span>A <span class="op">&lt;:</span> RegionAwareAWSMirror<span class="op">[</span>_<span class="op">,</span> _<span class="op">]](</span>factory<span class="op">:</span> <span class="op">(</span><span class="ex">String</span><span class="op">,</span> ActorSystem<span class="op">)</span> <span class="op">=&gt;</span> A<span class="op">)</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a>    Config<span class="op">.</span>regions<span class="op">.</span><span class="fu">map</span><span class="op">(</span>region <span class="op">=&gt;</span> <span class="fu">factory</span><span class="op">(</span>region<span class="op">,</span> system<span class="op">))</span></span></code></pre></div>
<p>(Since then even this has disappeared, but don’t run that much forward).</p>
<h2 id="async-fetching">Async fetching</h2>
<p>Ok so the first obvious step was to refactor the whole fetching code in a way that it is just a chain of <strong>futures</strong>. By making everything async in the process, the AWS calls would be simply replaceable with the throttling function above or anything more sophisticated!</p>
<p>But I knew that I cannot safely do this while the model we are building itself is mutable - there is no way I want to debug what happens with it once all the steps are really becoming parallel!</p>
<h3 id="immutable-model">Immutable model</h3>
<p>I believe the following GitHub diff captures the core change of this step:</p>
<p><img src="/images/prezidig-img-1.png" width="800"/></p>
<p>Of course I had to change all the subtypes of Model, and I went through the code looking for</p>
<ul>
<li><strong>var</strong>s</li>
<li>mutable collections</li>
</ul>
<p>and got rid of them. Except for the caching constructs, because I planned to refactor those in the next step, so for now I left them alone.</p>
<h3 id="async-mirrors">Async mirrors</h3>
<p>Once I felt the model is safe enough, I went to the next big change, making everything asynchronous.</p>
<p><img src="/images/prezidig-img-2.png" width="800"/></p>
<p>This took some hours, to be honest. But really, the core idea is only that the result must be a <code>Future[T]</code>, not <code>T</code>.</p>
<p>So how do you refactor a code that was previously half synchronous, half asynchronous to achieve this? Let’s see an example! It will be the <em>key-pair mirror</em> as it is the smallest.</p>
<p>Originally (with my ugly wrapping in the previous step) it looked like this:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a>  <span class="kw">override</span> <span class="kw">protected</span> <span class="kw">def</span> <span class="fu">fetch</span><span class="op">(</span>input<span class="op">:</span> SimpleParsedInput<span class="op">,</span> context<span class="op">:</span> <span class="ex">Context</span><span class="op">):</span> <span class="bu">Seq</span><span class="op">[</span><span class="ex">KeyPair</span><span class="op">]</span> <span class="op">=</span></span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a>    <span class="cf">try</span> <span class="op">{</span></span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a>      <span class="kw">val</span> futureResult <span class="op">=</span> <span class="fu">byHandlingThrottling</span><span class="op">(</span></span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a>        <span class="fu">buildClient</span><span class="op">(</span>AmazonEC2ClientBuilder<span class="op">.</span><span class="fu">standard</span><span class="op">()).</span><span class="fu">describeKeyPairs</span><span class="op">(</span></span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a>          <span class="kw">new</span> <span class="fu">DescribeKeyPairsRequest</span><span class="op">().</span><span class="fu">withKeyNames</span><span class="op">(</span>input<span class="op">.</span>id<span class="op">)</span></span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a>        <span class="op">))</span></span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-8"><a href="#cb4-8" aria-hidden="true" tabindex="-1"></a>      <span class="kw">val</span> result <span class="op">=</span> Await<span class="op">.</span><span class="fu">result</span><span class="op">(</span>futureResult<span class="op">,</span> <span class="fl">10.</span>seconds<span class="op">)</span></span>
<span id="cb4-9"><a href="#cb4-9" aria-hidden="true" tabindex="-1"></a>      result<span class="op">.</span>getKeyPairs<span class="op">.</span>asScala<span class="op">.</span><span class="fu">map</span><span class="op">(</span>info <span class="op">=&gt;</span> <span class="ex">KeyPair</span><span class="op">(</span>info<span class="op">,</span> region<span class="op">)).</span>seq</span>
<span id="cb4-10"><a href="#cb4-10" aria-hidden="true" tabindex="-1"></a>        <span class="op">.</span><span class="fu">map</span><span class="op">(</span>keypair <span class="op">=&gt;</span> keypair<span class="op">.</span><span class="fu">withFutureChildren</span><span class="op">(</span><span class="fu">LaunchConfigurationMirror</span><span class="op">(</span>region<span class="op">,</span> actorSystem<span class="op">).</span><span class="fu">apply</span><span class="op">(</span>context<span class="op">.</span><span class="fu">withInput</span><span class="op">(</span>keypair<span class="op">.</span>description<span class="op">.</span>getKeyName<span class="op">))))</span></span>
<span id="cb4-11"><a href="#cb4-11" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span> <span class="cf">catch</span> <span class="op">{</span></span>
<span id="cb4-12"><a href="#cb4-12" aria-hidden="true" tabindex="-1"></a>      <span class="cf">case</span> _<span class="op">:</span> AmazonEC2Exception <span class="op">=&gt;</span> <span class="bu">Seq</span><span class="op">()</span></span>
<span id="cb4-13"><a href="#cb4-13" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span></code></pre></div>
<p>So as you can see fetching the key pairs by name was a synchronous request, but then the <em>launch configurations</em> are fetched asynchronously and are being updated back the result model in a mutable way. We want to transform this function so it does not have any side effects, just performs a chain of asynchronous operations and in the end have a fully fetched <em>key pair</em> with the related <em>launch configurations</em>.</p>
<p>In every case the only thing needed was a combination of <code>map</code> and <code>flatMap</code> on futures, and of course the <em>for syntax</em> can also be used to make the code more readable:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a> <span class="kw">private</span> <span class="kw">def</span> <span class="fu">fetchKeyPair</span><span class="op">(</span>client<span class="op">:</span> AmazonEC2<span class="op">,</span> context<span class="op">:</span> <span class="ex">Context</span><span class="op">,</span> info<span class="op">:</span> KeyPairInfo<span class="op">):</span> <span class="ex">Future</span><span class="op">[</span><span class="ex">KeyPair</span><span class="op">]</span> <span class="op">=</span> <span class="op">{</span></span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span> <span class="op">{</span></span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a>      launchConfigurations <span class="op">&lt;-</span> <span class="fu">LaunchConfigurationMirror</span><span class="op">(</span>region<span class="op">,</span> actorSystem<span class="op">).</span><span class="fu">apply</span><span class="op">(</span>context<span class="op">.</span><span class="fu">withInput</span><span class="op">(</span>info<span class="op">.</span>getKeyName<span class="op">))</span></span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span> <span class="cf">yield</span> <span class="ex">KeyPair</span><span class="op">(</span></span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a>      description <span class="op">=</span> info<span class="op">,</span></span>
<span id="cb5-6"><a href="#cb5-6" aria-hidden="true" tabindex="-1"></a>      region <span class="op">=</span> region<span class="op">,</span></span>
<span id="cb5-7"><a href="#cb5-7" aria-hidden="true" tabindex="-1"></a>      children <span class="op">=</span> launchConfigurations</span>
<span id="cb5-8"><a href="#cb5-8" aria-hidden="true" tabindex="-1"></a>    <span class="op">)</span></span>
<span id="cb5-9"><a href="#cb5-9" aria-hidden="true" tabindex="-1"></a>  <span class="op">}</span></span>
<span id="cb5-10"><a href="#cb5-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-11"><a href="#cb5-11" aria-hidden="true" tabindex="-1"></a>  <span class="kw">override</span> <span class="kw">protected</span> <span class="kw">def</span> <span class="fu">fetch</span><span class="op">(</span>input<span class="op">:</span> SimpleParsedInput<span class="op">,</span> context<span class="op">:</span> <span class="ex">Context</span><span class="op">):</span> <span class="ex">Future</span><span class="op">[</span><span class="ex">List</span><span class="op">[</span><span class="ex">KeyPair</span><span class="op">]]</span> <span class="op">=</span> <span class="op">{</span></span>
<span id="cb5-12"><a href="#cb5-12" aria-hidden="true" tabindex="-1"></a>    <span class="kw">val</span> client <span class="op">=</span> <span class="fu">buildClient</span><span class="op">(</span>AmazonEC2ClientBuilder<span class="op">.</span><span class="fu">standard</span><span class="op">())</span></span>
<span id="cb5-13"><a href="#cb5-13" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-14"><a href="#cb5-14" aria-hidden="true" tabindex="-1"></a>    <span class="fu">byHandlingThrottling</span><span class="op">(</span>client<span class="op">.</span><span class="fu">describeKeyPairs</span><span class="op">(</span><span class="kw">new</span> <span class="fu">DescribeKeyPairsRequest</span><span class="op">().</span><span class="fu">withKeyNames</span><span class="op">(</span>input<span class="op">.</span>id<span class="op">))).</span>flatMap <span class="op">{</span> result <span class="op">=&gt;</span></span>
<span id="cb5-15"><a href="#cb5-15" aria-hidden="true" tabindex="-1"></a>      <span class="ex">Future</span><span class="op">.</span><span class="fu">sequence</span><span class="op">(</span></span>
<span id="cb5-16"><a href="#cb5-16" aria-hidden="true" tabindex="-1"></a>        result<span class="op">.</span>getKeyPairs<span class="op">.</span>asScala<span class="op">.</span>toList<span class="op">.</span><span class="fu">map</span><span class="op">(</span><span class="fu">fetchKeyPair</span><span class="op">(</span>client<span class="op">,</span> context<span class="op">,</span> _<span class="op">))</span></span>
<span id="cb5-17"><a href="#cb5-17" aria-hidden="true" tabindex="-1"></a>      <span class="op">)</span></span>
<span id="cb5-18"><a href="#cb5-18" aria-hidden="true" tabindex="-1"></a>    <span class="op">}.</span>recover <span class="op">{</span></span>
<span id="cb5-19"><a href="#cb5-19" aria-hidden="true" tabindex="-1"></a>      <span class="cf">case</span> _<span class="op">:</span> AmazonEC2Exception <span class="op">=&gt;</span> <span class="ex">List</span><span class="op">()</span> <span class="co">// </span><span class="al">TODO</span><span class="co">: log?</span></span>
<span id="cb5-20"><a href="#cb5-20" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb5-21"><a href="#cb5-21" aria-hidden="true" tabindex="-1"></a>  <span class="op">}</span></span></code></pre></div>
<p>Note that the <code>Future.sequence</code> function is quite useful in these scenarios, as it makes a <code>Future[List[T]]</code> from <code>List[Future[T]]</code>.</p>
<p>Of course the code became more verbose because of all this chaining, this is the price of this transformation. And why I don’t like to express complex logic with a chain of futures, rather with some higher level abstraction such as actors (or for this use case, streams would fit even better).</p>
<p>But I wanted to make iterative changes, so I did this transformation on all the mirrors and eventually got a <code>Future[List[Model]]</code> in the main function that I could await for. I also thrown out the global atomic integer that counted the running stuff for completion, as in this model the completion of the composed future should mark the end of the whole computation.</p>
<p>So did I succeed at this point? Of course not. Actually this whole thing is a big deadlock :)</p>
<h2 id="caching-and-circular-references">Caching and circular references</h2>
<p>It was not immediately obvious what causes the deadlock. In a system like this it can happen in different ways. For example I knew that there are global singleton caches in the code, protected by <strong>locks</strong>. This <em>could</em> cause deadlocks if all the executors got blocked and no new threads can be spawned by the active executor. I did not know if this is happening, but would not have been surprised at all, as much more things were happening in parallel because of the previous refactoring step.</p>
<p>And circular references in the huge chained future graph can also lead to this. Let’s consider this simplified example:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="kw">trait</span> Cache <span class="op">{</span> </span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a>  <span class="kw">def</span> <span class="fu">get</span><span class="op">(</span>key<span class="op">:</span> <span class="ex">String</span><span class="op">):</span> <span class="ex">Future</span><span class="op">[</span>Work<span class="op">]</span></span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a>  <span class="kw">def</span> <span class="fu">put</span><span class="op">(</span>key<span class="op">:</span> <span class="ex">String</span><span class="op">,</span> compute<span class="op">:</span> <span class="op">()</span> <span class="op">=&gt;</span> <span class="ex">Future</span><span class="op">[</span>Work<span class="op">]):</span> <span class="bu">Unit</span></span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb6-5"><a href="#cb6-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-6"><a href="#cb6-6" aria-hidden="true" tabindex="-1"></a><span class="kw">val</span> cache<span class="op">:</span> Cache <span class="op">=</span> <span class="op">???</span></span>
<span id="cb6-7"><a href="#cb6-7" aria-hidden="true" tabindex="-1"></a><span class="kw">val</span> work1<span class="op">:</span> <span class="ex">Future</span><span class="op">[</span>Work<span class="op">]</span> <span class="op">=</span> cache<span class="op">.</span><span class="fu">get</span><span class="op">(</span><span class="st">&quot;work2&quot;</span><span class="op">).</span>map <span class="op">{</span> w2 <span class="op">=&gt;</span> <span class="fu">Work</span><span class="op">(</span><span class="ss">s&quot;</span><span class="st">Hello </span><span class="ss">$w2&quot;</span><span class="op">))</span> <span class="op">}</span></span>
<span id="cb6-8"><a href="#cb6-8" aria-hidden="true" tabindex="-1"></a><span class="kw">val</span> work2<span class="op">:</span> <span class="ex">Future</span><span class="op">[</span>Work<span class="op">]</span> <span class="op">=</span> cache<span class="op">.</span><span class="fu">get</span><span class="op">(</span><span class="st">&quot;work1&quot;</span><span class="op">).</span>map <span class="op">{</span> w1 <span class="op">=&gt;</span> <span class="fu">Work</span><span class="op">(</span><span class="ss">s&quot;</span><span class="st">Hello </span><span class="ss">$w1&quot;</span><span class="op">))</span> <span class="op">}</span></span>
<span id="cb6-9"><a href="#cb6-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-10"><a href="#cb6-10" aria-hidden="true" tabindex="-1"></a>cache<span class="op">.</span><span class="fu">put</span><span class="op">(</span>work1<span class="op">)</span></span>
<span id="cb6-11"><a href="#cb6-11" aria-hidden="true" tabindex="-1"></a>cache<span class="op">.</span><span class="fu">put</span><span class="op">(</span>work2<span class="op">)</span></span>
<span id="cb6-12"><a href="#cb6-12" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-13"><a href="#cb6-13" aria-hidden="true" tabindex="-1"></a><span class="fu">println</span><span class="op">(</span>Await<span class="op">.</span><span class="fu">result</span><span class="op">(</span>work1<span class="op">),</span> <span class="fl">1.</span>second<span class="op">)</span></span></code></pre></div>
<p>This can never work. If you think about what <strong>prezidig</strong> does, you will have a feeling that this happens. A lot.</p>
<p>But let’s go in order.</p>
<h3 id="non-blocking-cache">Non-blocking cache</h3>
<p>First I wanted to get rid of the global, lock-protected mutable maps used as caches, and have a non-blocking implementation with more control and better performance and safety. This is the kind of job that an <strong>actor</strong> can model nicely, so I created a <em>model cache actor</em> that is spawned for <em>each mirror</em> and can store and retrieve lists of AWS models for a given key.</p>
<p>I won’t list the whole actor’s code here, let’s see the messages it consumes:</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a>  <span class="kw">sealed</span> <span class="kw">trait</span> ModelCacheMessage<span class="op">[</span>M <span class="op">&lt;:</span> Model<span class="op">]</span></span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a>  <span class="kw">final</span> <span class="cf">case</span> <span class="kw">class</span> Put<span class="op">[</span>M <span class="op">&lt;:</span> Model<span class="op">](</span>key<span class="op">:</span> <span class="ex">String</span><span class="op">,</span> value<span class="op">:</span> <span class="ex">List</span><span class="op">[</span>M<span class="op">])</span></span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true" tabindex="-1"></a>    <span class="kw">extends</span> ModelCacheMessage<span class="op">[</span>M<span class="op">]</span></span>
<span id="cb7-5"><a href="#cb7-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb7-6"><a href="#cb7-6" aria-hidden="true" tabindex="-1"></a>  <span class="kw">final</span> <span class="cf">case</span> <span class="kw">class</span> FetchFailed<span class="op">[</span>M <span class="op">&lt;:</span> Model<span class="op">](</span>key<span class="op">:</span> <span class="ex">String</span><span class="op">,</span> failure<span class="op">:</span> Failure<span class="op">[</span>_<span class="op">])</span></span>
<span id="cb7-7"><a href="#cb7-7" aria-hidden="true" tabindex="-1"></a>    <span class="kw">extends</span> ModelCacheMessage<span class="op">[</span>M<span class="op">]</span></span>
<span id="cb7-8"><a href="#cb7-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb7-9"><a href="#cb7-9" aria-hidden="true" tabindex="-1"></a>  <span class="kw">final</span> <span class="cf">case</span> <span class="kw">class</span> GetOrFetch<span class="op">[</span>M <span class="op">&lt;:</span> Model<span class="op">](</span>key<span class="op">:</span> <span class="ex">String</span><span class="op">,</span> fetch<span class="op">:</span> <span class="op">()</span> <span class="op">=&gt;</span> <span class="ex">Future</span><span class="op">[</span><span class="ex">List</span><span class="op">[</span>M<span class="op">]],</span> respondTo<span class="op">:</span> ActorRef<span class="op">[</span>Try<span class="op">[</span><span class="ex">List</span><span class="op">[</span>M<span class="op">]]])</span></span>
<span id="cb7-10"><a href="#cb7-10" aria-hidden="true" tabindex="-1"></a>    <span class="kw">extends</span> ModelCacheMessage<span class="op">[</span>M<span class="op">]</span></span>
<span id="cb7-11"><a href="#cb7-11" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb7-12"><a href="#cb7-12" aria-hidden="true" tabindex="-1"></a>  <span class="kw">final</span> <span class="cf">case</span> <span class="kw">class</span> GetRefOrFetch<span class="op">[</span>M <span class="op">&lt;:</span> Model<span class="op">](</span>key<span class="op">:</span> <span class="ex">String</span><span class="op">,</span> fetch<span class="op">:</span> <span class="op">()</span> <span class="op">=&gt;</span> <span class="ex">Future</span><span class="op">[</span><span class="ex">List</span><span class="op">[</span>M<span class="op">]],</span> respondTo<span class="op">:</span> ActorRef<span class="op">[</span>ModelRef<span class="op">[</span>M<span class="op">]])</span></span>
<span id="cb7-13"><a href="#cb7-13" aria-hidden="true" tabindex="-1"></a>    <span class="kw">extends</span> ModelCacheMessage<span class="op">[</span>M<span class="op">]</span></span>
<span id="cb7-14"><a href="#cb7-14" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb7-15"><a href="#cb7-15" aria-hidden="true" tabindex="-1"></a>  <span class="kw">final</span> <span class="cf">case</span> <span class="kw">class</span> Dump<span class="op">[</span>M <span class="op">&lt;:</span> Model<span class="op">](</span>respondTo<span class="op">:</span> ActorRef<span class="op">[</span><span class="ex">Map</span><span class="op">[</span><span class="ex">String</span><span class="op">,</span> <span class="ex">List</span><span class="op">[</span>M<span class="op">]]])</span></span>
<span id="cb7-16"><a href="#cb7-16" aria-hidden="true" tabindex="-1"></a>    <span class="kw">extends</span> ModelCacheMessage<span class="op">[</span>M<span class="op">]</span></span></code></pre></div>
<p>This cache itself is responsible for executing the <em>fetch function</em> only if needed, when the value for the given key is not cached yet. It is done by using the <strong>pipe pattern</strong>: it starts the asynchronous fetch function on a configured worker executor (which can be the actor system, or a fix thread pool, etc.) and registers an <code>onFinish</code> callback for the future which <em>pipes back</em> the future’s result to the actor as actor messages (<code>Put</code> and <code>FetchFailed</code>).</p>
<p>I will talk about references and cache dumps in the next section.</p>
<p>There was one more big problem with the existing code that prevented introducing these cache actors: that the mirrors were not really singletons but some mirrors created new instances of existing mirrors (without any difference to the ones created in the main function). These shared the singleton mutable lock-protected cache map in the original version, that’s why it worked. But in the new implementation each mirror spawned its own cache actor, so it was no longer allowed to create multiple instances of the same thing.</p>
<p>So in this step I collected all the mirrors to a class called <code>Mirrors</code>, which later became the collection of all the resources needed to perform the “dig”, so in the final version it is called <code>DigSite</code>.</p>
<p>With this change the caching could be replaced, and with the <strong>ask pattern</strong> I was able to fit it to the chain of futures created in the previous step.</p>
<p>Did it solve the deadlock? No, of course not</p>
<h3 id="circular-references">Circular references</h3>
<p>But now it was obvious that there are some circular references. And by simply drawing it, I could see that this is actually the core concept of the whole thing :)</p>
<p>Let me show you <em>the drawing</em>:</p>
<p><img src="/images/prezidig-img-3.png" width="800"/></p>
<p>So everything refers back to everything, not a surprise that this chained-together code cannot finish.</p>
<p>To be honest, I was not sure how exactly did it work in the original version, whether the boundary of sync and async calls were carefully designed to make this work or just accidentally, whatever.</p>
<p>I wanted to have a solution where you don’t have to think about it so nobody will fuck it up next time when it has to be modified.</p>
<p>The chosen solution can be summarized in the following way:</p>
<ul>
<li>The <em>models</em> are only storing <strong>references to other models</strong> encoded by the <code>ModelRef</code> type. A reference is basically selecting a mirror (by its <em>cache</em>) and an item in it by its <em>key</em></li>
<li>When fetching a model, you immediately get back a <em>model reference</em> from the cache so it can be stored in the owner model, even with circular references. The real data is still fetched and cached as before.</li>
<li>This works because nobody uses the actual child models until the <strong>rendering</strong> of the output. So we have the asynchronous, parallel fetching of all the models, and then a completely separate, non-async step where we need the real connections to actually render the output based on the templates. I could change how the rendering works to query the model references from the cache, but I did not want to touch that part. So I introduced a middle step where all the <em>model cache actors</em> <strong>dump</strong> their state to simple immutable maps, and then the model gets <em>updated</em> by selecting the referenced models from this map and changing a field. Yes, a mutable field. It is a non-threadsafe operation that has a single, well defined place to be called, and this way the whole third part (rendering the output) could remain untouched.</li>
<li>Because of decoupling the actual fetching from the result future (it is completed earlier, as it only needs the references!), I had to have something that keeps track of the ongoing tasks ran by the cache actors, so there is also a <em>work monitor actor</em> that notifies the main logic once everything is complete.</li>
</ul>
<p>Considering all this, the main steps before starting to render the output looks like this:</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a><span class="kw">val</span> result <span class="op">=</span> <span class="cf">for</span> <span class="op">{</span></span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a>    models <span class="op">&lt;-</span> <span class="fu">runRelevantMirrors</span><span class="op">(</span>digSite<span class="op">.</span>allMirrors<span class="op">,</span> <span class="ex">Context</span><span class="op">.</span><span class="fu">initial</span><span class="op">(</span>input<span class="op">))</span></span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true" tabindex="-1"></a>    fetchingDone <span class="op">&lt;-</span> digSite<span class="op">.</span>workMonitor <span class="op">?</span> WorkMonitor<span class="op">.</span>WaitForReady</span>
<span id="cb8-4"><a href="#cb8-4" aria-hidden="true" tabindex="-1"></a>    cacheDumps <span class="op">&lt;-</span> CacheDumps<span class="op">.</span><span class="fu">fromMirrors</span><span class="op">(</span>digSite<span class="op">.</span>allMirrors<span class="op">)</span></span>
<span id="cb8-5"><a href="#cb8-5" aria-hidden="true" tabindex="-1"></a>    _ <span class="op">=</span> models<span class="op">.</span><span class="fu">foreach</span><span class="op">(</span>_<span class="op">.</span><span class="fu">resolveChildren</span><span class="op">(</span>cacheDumps<span class="op">))</span> <span class="co">// side effect!</span></span>
<span id="cb8-6"><a href="#cb8-6" aria-hidden="true" tabindex="-1"></a><span class="op">}</span> <span class="cf">yield</span> models</span></code></pre></div>
<h2 id="anyone-else-blocking">Anyone else blocking?</h2>
<p>At this point the tool started to work again and produce results. So I went back checking if any other blocking code remained that can be implemented in other ways. The progress tracker was like that, it had mutable state and locks, so I converted that to an actor too. It was quite simple, and on the usage side almost nothing changed compared to the original.</p>
<h2 id="and-what-about-the-throttling">And what about the throttling?</h2>
<p>Ok so at this point I refactored the whole stuff but still did not solve the throttling issue, right?</p>
<p>Right.</p>
<p>But now finally I knew how to do it!</p>
<p>I already wrapped all AWS calls with that specific function (and at this point it was really <em>all</em> calls, not just <em>almost)</em>. So I just had to write it in a better way.</p>
<p>I wanted to:</p>
<ul>
<li>Have control on how many AWS requests are we doing in parallel</li>
<li>In case of throttling errors delay <strong>everything</strong> as soon as possible</li>
</ul>
<p>This can be achieved easily by some standard patterns like treating AWS as an encapsulated resource and putting some circuit breaking logic in it, and explicitly distributing the work among multiple workers.</p>
<p>Let’s see the designed solution on a drawing:</p>
<p><img src="/images/prezidig-img-4.png" width="800"/></p>
<p><strong>Note</strong>: the <em>classic Akka</em> has built-in support for this routing and circuit breaking, but I prefer <em>Akka-typed</em> because of its type safety, where there are no official reusable higher level components like this yet. The one I implemented here is quite specific, later could be refactored to be built from more reusable typed actor components.</p>
<p>So how does this work?</p>
<ul>
<li>There is a single coordinator actor called <strong>AWS</strong> and multiple (32 by default) worker actors called <strong>AWS Worker</strong>.</li>
<li>The number of worker actors control the maximum number of parallel AWS operations, because each worker actor is guaranteed to run maximum one such operation at the same time. All the other incoming requests are distributed among the workers and gets enqueued.</li>
<li>The AWS calls are executed on a different thread pool, not blocking the actors. Their result is sent back by the already mentioned <em>pipe to</em> pattern</li>
<li>AWS throttling errors are detected on the worker nodes, and the worker node immediately switches to <strong>open circuit state</strong> in which it does not start any new AWS command. The length of the open state increases with every throttling error, and gets reseted after a number of successful requests.</li>
<li>Opening the circuit breaker on one worker node is immediately followed by opening it on <strong>all other</strong> worker nodes too, to stop overloading AWS.</li>
</ul>
<p>This could be further improved with more advanced logic but I believe it is good enough for our current purposes, and now we can use <strong>prezidig</strong> again!</p>
]]></summary>
</entry>
<entry>
    <title>Bari with Visual Studio Code</title>
    <link href="http://vigoo.github.io/posts/2016-01-21-bari-vscode.html" />
    <id>http://vigoo.github.io/posts/2016-01-21-bari-vscode.html</id>
    <published>2016-01-21T00:00:00Z</published>
    <updated>2016-01-21T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on January 21, 2016
    
</div>

<h2 id="intro">Intro</h2>
<p>A few weeks ago I discovered <a href="https://code.visualstudio.com/">Visual Studio Code</a> and started using it for some of my work. <em>(Note: I’m using multiple editors/IDEs all the time, based on the task; Emacs, Sublime, Atom, IntelliJ, VS, etc.)</em> So far <em>Code</em> is my favourite among the set of similar editors, such as Atom. I was pleasently surprised how well it works with its integrated <a href="http://www.omnisharp.net/">OmniSharp</a> plugin on <a href="http://vigoo.github.io/bari/">bari’s</a> codebase, so I decided to try to write a <em>bari plugin</em> for it.</p>
<p>Writing an extension for <em>Code</em> was a nice experience. The outcome is the <a href="https://marketplace.visualstudio.com/items/vigoo.bari">bari build management extension</a>, which I’ll demonstrate in the next section.</p>
<h2 id="developing-net-applications-with-visual-studio-code-and-bari">Developing .NET applications with Visual Studio Code and bari</h2>
<p>As <em>Code</em> is multiplatform, and <em>bari</em> also works with <a href="http://www.mono-project.com/">Mono</a>, I’ll demonstrate how you can use these tools to develop a .NET application (actually <em>bari</em> itself) on a Mac. The steps here (except installing Mono) would be the same on Windows or Linux as well.</p>
<h3 id="installing-the-tools">Installing the tools</h3>
<p>First, if you are not on Windows, you’ll have to install the latest <a href="http://www.mono-project.com/">Mono</a> framework. On OSX I recommed to use <a href="http://brew.sh/"><code>brew</code></a> to do that:</p>
<pre><code>brew install mono
mono --version</code></pre>
<p>Then get the latest <a href="https://code.visualstudio.com/">Visual Studio Code</a> version, either by downloading it from its homepage or with <a href="https://github.com/caskroom/homebrew-cask"><code>brew cask</code></a>:</p>
<pre><code>brew cask install visual-studio-code</code></pre>
<p>Get the latest <em>bari</em>. On Windows I recommend downloading and extracting the <a href="https://github.com/vigoo/bari/releases/latest">latest official release</a> and adding it to the <code>PATH</code>.
On OSX, with <code>mono</code> we already have <code>nuget</code>, so let’s use that:</p>
<pre><code>cd /opt
nuget install bari-mono
ln -s bari-mono.1.0.2.2 bari</code></pre>
<p>and create a script to execute it somewhere in your <code>PATH</code>:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="co">#!/bin/sh</span></span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a><span class="ex">mono</span> /opt/bari/tools/bari.exe <span class="va">$@</span></span></code></pre></div>
<p>That’s it. Future versions of the <em>bari extension</em> will probably be able to install <em>bari</em> itself.</p>
<p>Let’s start <em>Code</em> now!</p>
<h3 id="installing-the-extension">Installing the extension</h3>
<p>Open the <em>command palette</em> (F1, or ⇧⌘P) and type <code>ext install bari</code>
<a href="/images/baricode1.png" class="zimg"><img width="600" src="/images/baricode1.png" alt="bari-code-1"></a></p>
<h3 id="loading-the-project">Loading the project</h3>
<p>After that restart the editor. Have your bari-built project available somewhere. As we are going to develop bari itself, let’s clone its repository:</p>
<pre><code>git clone https://github.com/vigoo/bari.git</code></pre>
<p>Then open the result <code>bari</code> directory with <em>Code</em>. This should look like the following:</p>
<p><a href="/images/baricode2.png" class="zimg"><img width="800" src="/images/baricode2.png" alt="bari-code-2"></a></p>
<p>The <em>bari plugin</em> automatically detected that the opened folder has a <code>suite.yaml</code> in its root, and loaded it. That’s why we can see the two sections on the statusbar’s right side: <code>full</code> and <code>debug</code>. The first one is the <a href="https://github.com/vigoo/bari/wiki/Product">selected target product</a> and the second one is the <a href="https://github.com/vigoo/bari/wiki/Goal">selected goal</a>. All the <em>bari commands</em> provided by the extension will be executed with these settings.</p>
<h3 id="changing-the-target">Changing the target</h3>
<p>To change the active product or goal, you can click on the statusbar or use the <em>command palette</em> (F1, or ⇧⌘P) and choose <code>bari: Change goal</code> or <code>bari: Change target product</code>.</p>
<p>Let’s change the <em>goal</em> to <code>debug-mono</code>, as we are working on a non-Windows environment:</p>
<p><a href="/images/baricode3.png" class="zimg"><img width="800" src="/images/baricode3.png" alt="bari-code-3"></a></p>
<h3 id="generating-the-solution">Generating the solution</h3>
<p>The next step before starting coding is to actually <strong>generate</strong> the solution and projects files (and fetch the dependencies, etc.) so <em>OmniSharp</em> can load it and provide code completion, analysis, etc. features.</p>
<p>To do so, just use the <em>command palette</em> and choose <code>bari: Regenerate solution</code>, which <a href="https://github.com/vigoo/bari/wiki/VsCommand">runs the <code>bari vs</code> command</a> with the correct parameters. The command’s output is displayed in an <em>output panel</em> called <code>bari</code>. This looks like the following:</p>
<p><a href="/images/baricode4.png" class="zimg"><img width="800" src="/images/baricode4.png" alt="bari-code-4"></a></p>
<p>There’s nothing else left than pointing <em>OmniSharp</em> to the generated solution, with the following command:</p>
<p><a href="/images/baricode5.png" class="zimg"><img width="800" src="/images/baricode5.png" alt="bari-code-5"></a></p>
<p>It will automatically find the generated <code>.sln</code> file, just select the correct one:</p>
<p><a href="/images/baricode6.png" class="zimg"><img width="800" src="/images/baricode6.png" alt="bari-code-6"></a></p>
<p>In a few seconds (and with a few warnings for this project), <em>OmniSharp</em> works. To see what it can do, <a href="https://code.visualstudio.com/Docs/languages/csharp">check this page</a>. A simple example is to jump to a given class or interface with ⌘P:</p>
<p><a href="/images/baricode7.png" class="zimg"><img width="600" src="/images/baricode7.png" alt="bari-code-7"></a></p>
<h3 id="working-on-the-project">Working on the project</h3>
<p>You can work on the project and build it from <em>Code</em> or run its tests using the <code>bari: Build</code> and <code>bari: Test</code> commands. The build output will be shown just like in the <em>solution generation step</em>.</p>
<p><a href="/images/baricode8.png" class="zimg"><img width="600" src="/images/baricode8.png" alt="bari-code-8"></a></p>
<p>Whenever the suite definition itself must be modified, you can jump there with the <code>bari: Open suite.yaml</code> command and then just regenerate the solution as it was shown above.</p>
<h2 id="implementation">Implementation</h2>
<p>The implementation was really straightforward. The source code <a href="https://github.com/vigoo/bari-code">can be found here</a>. It’s basically a <em>JSON</em> defining how the plugin is integrated and some implementation code in <em>TypeScript</em>. It’s easy to run and debug the plugin from <em>Code</em> itself.</p>
<p>For example the following section from the extension definition describes what events triggers the extension:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode json"><code class="sourceCode json"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="er">&quot;activationEvents&quot;:</span> <span class="ot">[</span></span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a>    <span class="st">&quot;onCommand:bari.build&quot;</span><span class="ot">,</span></span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a>    <span class="st">&quot;onCommand:bari.test&quot;</span><span class="ot">,</span></span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a>    <span class="st">&quot;onCommand:bari.vs&quot;</span><span class="ot">,</span></span>
<span id="cb6-5"><a href="#cb6-5" aria-hidden="true" tabindex="-1"></a>    <span class="st">&quot;onCommand:bari.openSuiteYaml&quot;</span><span class="ot">,</span></span>
<span id="cb6-6"><a href="#cb6-6" aria-hidden="true" tabindex="-1"></a>    <span class="st">&quot;onCommand:bari.selfUpdate&quot;</span><span class="ot">,</span></span>
<span id="cb6-7"><a href="#cb6-7" aria-hidden="true" tabindex="-1"></a>    <span class="st">&quot;onCommand:bari.goal.changeCurrentGoal&quot;</span><span class="ot">,</span></span>
<span id="cb6-8"><a href="#cb6-8" aria-hidden="true" tabindex="-1"></a>    <span class="st">&quot;onCommand:bari.goal.changeCurrentProduct&quot;</span><span class="ot">,</span></span>
<span id="cb6-9"><a href="#cb6-9" aria-hidden="true" tabindex="-1"></a>    <span class="st">&quot;workspaceContains:suite.yaml&quot;</span></span>
<span id="cb6-10"><a href="#cb6-10" aria-hidden="true" tabindex="-1"></a><span class="ot">]</span><span class="er">,</span></span></code></pre></div>
<p>It’s either done by invoking one of the defined commands from the <em>command palette</em>, or if the opened workspace contains a <code>suite.yaml</code>. The latter enables the extension to parse the suite definition and initialize the statusbar immediately one the suite has been opened.</p>
<p>The package definition also specifies the provided configuration values, such as:</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode json"><code class="sourceCode json"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="er">&quot;bari.commandLine&quot;:</span> <span class="fu">{</span></span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a>	<span class="dt">&quot;type&quot;</span><span class="fu">:</span> <span class="st">&quot;string&quot;</span><span class="fu">,</span></span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a>	<span class="dt">&quot;default&quot;</span><span class="fu">:</span> <span class="st">&quot;bari&quot;</span><span class="fu">,</span></span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true" tabindex="-1"></a>	<span class="dt">&quot;description&quot;</span><span class="fu">:</span> <span class="st">&quot;Command line to execute bari&quot;</span></span>
<span id="cb7-5"><a href="#cb7-5" aria-hidden="true" tabindex="-1"></a><span class="fu">}</span><span class="er">,</span></span>
<span id="cb7-6"><a href="#cb7-6" aria-hidden="true" tabindex="-1"></a><span class="er">&quot;bari.verboseOutput&quot;:</span> <span class="fu">{</span></span>
<span id="cb7-7"><a href="#cb7-7" aria-hidden="true" tabindex="-1"></a>	<span class="dt">&quot;type&quot;</span><span class="fu">:</span> <span class="st">&quot;boolean&quot;</span><span class="fu">,</span></span>
<span id="cb7-8"><a href="#cb7-8" aria-hidden="true" tabindex="-1"></a>	<span class="dt">&quot;default&quot;</span><span class="fu">:</span> <span class="kw">false</span><span class="fu">,</span></span>
<span id="cb7-9"><a href="#cb7-9" aria-hidden="true" tabindex="-1"></a>	<span class="dt">&quot;description&quot;</span><span class="fu">:</span> <span class="st">&quot;Turns on verbose output for all the executed bari commands&quot;</span></span>
<span id="cb7-10"><a href="#cb7-10" aria-hidden="true" tabindex="-1"></a><span class="fu">}</span></span></code></pre></div>
<p>The implementation itself is really simple, all the user interface elements involved such as the console output window, the command palette, the statusbar panels can be easily managed.</p>
<p>For example the panel showing <code>bari</code>’s output is created by the following code snippet:</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode javascript"><code class="sourceCode javascript"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a><span class="kw">var</span> channel <span class="op">=</span> vscode<span class="op">.</span><span class="at">window</span><span class="op">.</span><span class="fu">createOutputChannel</span>(<span class="st">&#39;bari&#39;</span>)<span class="op">;</span></span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a>channel<span class="op">.</span><span class="fu">show</span>()<span class="op">;</span></span></code></pre></div>
<p>Or to display the result of an operation:</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode javascript"><code class="sourceCode javascript"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true" tabindex="-1"></a>vscode<span class="op">.</span><span class="at">window</span><span class="op">.</span><span class="fu">showErrorMessage</span>(<span class="st">&quot;No suite.yaml in the current workspace!&quot;</span>)</span></code></pre></div>
<p>or to create the statusbar panel:</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode javascript"><code class="sourceCode javascript"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true" tabindex="-1"></a><span class="kw">this</span><span class="op">.</span><span class="at">goals</span> <span class="op">=</span> vscode<span class="op">.</span><span class="at">window</span><span class="op">.</span><span class="fu">createStatusBarItem</span>(vscode<span class="op">.</span><span class="at">StatusBarAlignment</span><span class="op">.</span><span class="at">Right</span>)<span class="op">;</span></span>
<span id="cb10-2"><a href="#cb10-2" aria-hidden="true" tabindex="-1"></a><span class="kw">this</span><span class="op">.</span><span class="at">goals</span><span class="op">.</span><span class="at">command</span> <span class="op">=</span> <span class="st">&#39;bari.goal.changeCurrentGoal&#39;</span><span class="op">;</span></span>
<span id="cb10-3"><a href="#cb10-3" aria-hidden="true" tabindex="-1"></a><span class="kw">this</span><span class="op">.</span><span class="at">goals</span><span class="op">.</span><span class="fu">show</span>()<span class="op">;</span></span></code></pre></div>
<p>This API is simple and well documented enough so basic integrations like this can be done in an hour.</p>
]]></summary>
</entry>
<entry>
    <title>Gradle-Haskell-plugin with experimental Stack support</title>
    <link href="http://vigoo.github.io/posts/2015-12-22-gradle-haskell-plugin-stack.html" />
    <id>http://vigoo.github.io/posts/2015-12-22-gradle-haskell-plugin-stack.html</id>
    <published>2015-12-22T00:00:00Z</published>
    <updated>2015-12-22T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on December 22, 2015
    
</div>

<p>I’ve released a <strong>new version (0.4)</strong> of <a href="https://github.com/prezi/gradle-haskell-plugin">gradle-haskell-plugin</a> today, with <strong>experimental stack support</strong>.
It is not enabled by default, but I used it exclusively for months and it seems to get quite stable. To use it you need <a href="https://haskellstack.com">stack</a>,
have it enabled with <code>-Puse-stack</code> and have to keep some rules in your <code>.cabal</code> file, as explained <a href="https://github.com/prezi/gradle-haskell-plugin#explanation-stack-mode">in the README</a>.</p>
<h2 id="how-does-it-work">How does it work?</h2>
<p>The core idea did not change <a href="http://vigoo.github.io/posts/2015-04-22-gradle-haskell-plugin.html">compared to the original, cabal based solution</a>.</p>
<p>To support chaining the binary artifacts, I had to add a new option to <em>stack</em> called <a href="https://github.com/commercialhaskell/stack/pull/990">extra package databases</a>. The databases listed in this section are passed <em>after the global</em> but <strong>before</strong> the snapshot and the local databases, which means that the snapshot database cannot be used (the packages in the binary artifacts are not “seeing” them). This sounds bad, but <em>gradle-haskell-plugin</em> does a workaround; it <strong>generates</strong> the <code>stack.yaml</code> automatically, and in a way that:</p>
<ul>
<li>it disables snapshots on stack level (uses a resolver like <code>ghc-7.10.2</code>)</li>
<li>lists all the dependencies explicitly in <code>extra-deps</code></li>
<li>but it still figures out the <em>versions</em> of the dependencies (to be listed in <code>extra-deps</code>) based on a given <em>stackage snapshot</em>!</li>
</ul>
<p>With this approach we get the same behavior that was already proven in cabal mode, but with the advantage that the generated <code>stack.yaml</code> completely defines the project for any tool that knows stack. So after gradle extracted the dependencies and generated the <code>stack.yaml</code>, it is no longer needed to succesfully compile/run/test the project, which means that tools like IDE integration will work much better than with the more hacky cabal mode of the plugin.</p>
]]></summary>
</entry>
<entry>
    <title>Case Study - Haskell at Prezi</title>
    <link href="http://vigoo.github.io/posts/2015-09-21-haskell-case-study.html" />
    <id>http://vigoo.github.io/posts/2015-09-21-haskell-case-study.html</id>
    <published>2015-09-21T00:00:00Z</published>
    <updated>2015-09-21T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on September 21, 2015
    
</div>

<p>I wrote a <em>case study</em> for <a href="http://www.fpcomplete.com">FPComplete</a> on how we use Haskell at <a href="https://prezi.com">Prezi</a>. It is published <a href="https://www.fpcomplete.com/page/case-study-prezi">here</a>, but I’m just posting it here as well:</p>
<p><a href="https://prezi.com">Prezi</a> is a cloud-based presentation and storytelling tool, based on a zoomable canvas. The company was founded in 2009, and today we have more than 50 million users, with more than 160 million prezis created.</p>
<p>The company is using several different platforms and technologies; one of these is <em>Haskell</em>, which we are using server side, for code generation and for testing.</p>
<h2 id="pdom">PDOM</h2>
<p>Prezi’s document format is continuously evolving as we add features to the application. It is very important for us that this format is handled correctly on all our supported platforms, and both on client and server side. To achieve this, we created an eDSL in Haskell that defines the schema of a Prezi. From this schema we are able to generate several artifacts.</p>
<p>Most importantly we are generating a <em>Prezi Document Object Model (PDOM)</em> library for multiple platforms - Haxe (compiled to JS) code for the web, C++ code for the native platforms, and Haskell code for our tests, tools and the server side. These libraries are responsible for loading, updating, maintaining consistency and saving Prezis.</p>
<p>This API also implements <em>collaborative editing</em> functionality by transparently synchronising document changes between multiple clients. This technique is called <a href="https://en.wikipedia.org/wiki/Operational_transformation">operational transformation (OT)</a>. We implemented the server side of this in Haskell; it supports clients from any of the supported platforms and it is connected to several other backend services.</p>
<h2 id="benefits">Benefits</h2>
<p>Using <em>Haskell</em> for this project turned out to have huge benefits.</p>
<p>We are taking advantage of Haskell’s capabilities to create embedded domain specific languages, using it to define the document’s schema in our own eDSL which is used not only by Haskell developers but many others too.</p>
<p>Haskell’s clean and terse code allows us to describe document invariants and rules in a very readable way and the type system guarantees that we handle all the necessary cases, providing a stable base Haskell implementation which we can compare the other language backends to.</p>
<p>It was also possible to define a set of merge laws for OT, which are verified whenever we introduce a new element to the document schema, guaranteeing that the collaboration functionality works correctly.</p>
<p>We use the <em>QuickCheck</em> testing library on all levels. We can generate arbitrary Prezi documents and test serialization on all the backends. We are even generating arbitrary JavaScript code which uses our generated API to test random collaborative network sessions. These tests turned out to be critical for our success as they caught many interesting problems before we deployed anything to production</p>
]]></summary>
</entry>
<entry>
    <title>Haskell plugin for Gradle</title>
    <link href="http://vigoo.github.io/posts/2015-04-22-gradle-haskell-plugin.html" />
    <id>http://vigoo.github.io/posts/2015-04-22-gradle-haskell-plugin.html</id>
    <published>2015-04-22T00:00:00Z</published>
    <updated>2015-04-22T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on April 22, 2015
    
</div>

<p>My team at <a href="https://prezi.com">Prezi</a> uses <strong>Haskell</strong> for several projects, which usually depend on each other, often with build steps using other languages such as Scala, C++ or Haxe. As <a href="https://gradle.org/">Gradle</a> is used heavily in the company, we decided to try to integrate our Haskell projects within Gradle.</p>
<p>The result is <a href="https://github.com/prezi/gradle-haskell-plugin">Gradle Haskell Plugin</a>, which we were using succesfully in the last 2 months in our daily work, and we have <em>open-sourced</em> recently.</p>
<p>What makes this solution interesting is that it not just simply wraps <em>cabal</em> within Gradle tasks, but implements a way to define <strong>dependencies</strong> between Haskell projects and to upload the binary Haskell artifacts to a <em>repository</em> such as <a href="http://www.jfrog.com/open-source/">artifactory</a>.</p>
<p>This makes it easy to modularize our projects, publish them, and also works perfectly with <a href="https://github.com/prezi/pride">pride</a>, an other <em>open-source</em> Prezi project. This means that we can work on a subset of our Haskell projects while the other dependencies are built on Jenkins, and it also integrates well with our non-Haskell projects.</p>
<h2 id="how-does-it-work">How does it work?</h2>
<p>The main idea is that we let <em>cabal</em> manage the Haskell packages, and handle whole Haskell <em>sandboxes</em> on Gradle level. So if you have a single Haskell project, it will be built using <em>cabal</em> and the result sandbox (the built project together with all the dependent cabal packages which are not installed in the <em>global package database</em>) will be packed/published as a Gradle <em>artifact</em>.</p>
<p>This is not very interesting so far, but when you introduce dependencies on Gradle level, the plugin does something which (as far as I know) is not really done by anyone else, which I call <em>sandbox chaining</em>. This basically means that to compile the haskell project, the plugin will pass all the dependent sandboxes’ package database to cabal and GHC, so for the actual sandbox only the packages which are <strong>not</strong> in any of the dependent sandboxes will be installed.</p>
<h2 id="example">Example</h2>
<p>Let’s see an example scenario with <em>4 gradle-haskell projects</em>.</p>
<p><a href="https://raw.githubusercontent.com/prezi/gradle-haskell-plugin/master/doc/gradle-haskell-plugin-drawing1.png" class="zimg"><img width="600" src="https://raw.githubusercontent.com/prezi/gradle-haskell-plugin/master/doc/gradle-haskell-plugin-drawing1.png" alt="gradle-haskell-plugin"></a></p>
<p>The project called <em>Haskell project</em> depends on two other projects, which taking into accound the transitive dependencies means it depends on <em>three other haskell projects</em>. Each project has its own haskell source and <em>cabal file</em>. Building this suite consists of the following steps:</p>
<ul>
<li><strong>dependency 1</strong> is built using only the <em>global package database</em>, everything <strong>not</strong> in that database, together with the compiled project goes into its <code>build/sandbox</code> directory, which is a combination of a <em>GHC package database</em> and the project’s build output. This is packed as <strong>dependency 1</strong>’s build artifact.</li>
<li>For <strong>dependency 2</strong>, Gradle first downloads the build artifact of <em>dependency 1</em> and extracts it to <code>build/deps/dependency1</code>.</li>
<li>Then it runs <a href="https://github.com/exFalso/sandfix">SandFix</a> on it</li>
<li>And compiles the second project, now passing <strong>both</strong> the <em>global package database</em> and <strong>dependency 1</strong>’s sandbox to cabal/ghc. The result is that only the packages which are <strong>not</strong> in any of these two package databases will be installed in the project’s own sandbox, which becomes the build artifact of <strong>dependency 2</strong>.</li>
<li>For <strong>dependency 3</strong>, Gradle extracts both the direct dependency and the transitive dependency’s sandbox, to <code>build/deps/dependency2</code> and <code>build/deps/dependency3</code>.</li>
<li>Then it runs <a href="https://github.com/exFalso/sandfix">SandFix</a> on both the dependencies</li>
<li>And finally passes three package databases to cabal/ghc to compile the project. Only those cabal dependencies will be installed into this sandbox which are not in global, neither in any of the dependent sandboxes.</li>
<li>Finally, for <strong>Haskell project</strong> it goes the same way, but here we have three sandboxes, all chained together to make sure only the built sandbox only contains what is not in the dependent sandboxes yet.</li>
</ul>
<p>For more information, check out <a href="https://github.com/prezi/gradle-haskell-plugin">the documentation</a>.</p>
]]></summary>
</entry>
<entry>
    <title>bari 1.0 released</title>
    <link href="http://vigoo.github.io/posts/2014-12-08-bari-1-0.html" />
    <id>http://vigoo.github.io/posts/2014-12-08-bari-1-0.html</id>
    <published>2014-12-08T00:00:00Z</published>
    <updated>2014-12-08T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on December  8, 2014
    
</div>

<p>I already wrote about <a href="http://vigoo.github.io/bari">bari</a> in <a href="http://vigoo.github.io/2014/05/16/introducing-bari.html">May</a>.</p>
<p>As a reminder, <a href="http://vigoo.github.io/bari">bari</a> is a <em>build management system</em> primarily for .NET, trying to fix Visual Studio’s bad parts while keeping the good ones.</p>
<p>After more than two years of development, and being in production at <a href="http://www.kotem.com/">KOTEM</a> for almost half a year, bari reached a state when it can be considered as a <em>stable</em> and <em>usable</em> first version.</p>
<p>To indicate this today I released <strong>bari 1.0</strong>.</p>
<p>Try it out and feel free to give any kind of feedback or ask any questions!</p>
<p><img src="http://vigoo.github.io/bari/img/barilogo-small.png" /></p>
]]></summary>
</entry>
<entry>
    <title>ScalaFXML 0.2.2 available</title>
    <link href="http://vigoo.github.io/posts/2014-10-22-scalafxml-0-2-2.html" />
    <id>http://vigoo.github.io/posts/2014-10-22-scalafxml-0-2-2.html</id>
    <published>2014-10-22T00:00:00Z</published>
    <updated>2014-10-22T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on October 22, 2014
    
</div>

<p>I’ve released a new version of <a href="https://github.com/vigoo/scalafxml">ScalaFXML</a>, which now supports <em>both</em> <a href="https://github.com/scalafx/scalafx">ScalaFX 8</a> with <em>JavaFX 8</em> on Java 8, and <a href="https://github.com/scalafx/scalafx">ScalaFX 2.2</a> with <em>JavaFX 2.x</em> on Java 7.</p>
<p>The two branches are separated by the <code>sfx2</code> and <code>sfx8</code> postfixes, and both are available for <em>Scala</em> <code>2.10.x</code> and <code>2.11.x</code>.</p>
<p>To use it with <a href="http://www.scala-sbt.org/">sbt</a> on Java 7:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="fu">addCompilerPlugin</span><span class="op">(</span><span class="st">&quot;org.scalamacros&quot;</span> <span class="op">%</span> <span class="st">&quot;paradise&quot;</span> <span class="op">%</span> <span class="st">&quot;2.0.1&quot;</span> cross CrossVersion<span class="op">.</span>full<span class="op">)</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>libraryDependencies <span class="op">+=</span> <span class="st">&quot;org.scalafx&quot;</span> <span class="op">%%</span> <span class="st">&quot;scalafx&quot;</span> <span class="op">%</span> <span class="st">&quot;2.2.67-R10&quot;</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>libraryDependencies <span class="op">+=</span> <span class="st">&quot;org.scalafx&quot;</span> <span class="op">%%</span> <span class="st">&quot;scalafxml-core-sfx2&quot;</span> <span class="op">%</span> <span class="st">&quot;0.2.2&quot;</span></span></code></pre></div>
<p>And on Java 8:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="fu">addCompilerPlugin</span><span class="op">(</span><span class="st">&quot;org.scalamacros&quot;</span> <span class="op">%</span> <span class="st">&quot;paradise&quot;</span> <span class="op">%</span> <span class="st">&quot;2.0.1&quot;</span> cross CrossVersion<span class="op">.</span>full<span class="op">)</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>libraryDependencies <span class="op">+=</span> <span class="st">&quot;org.scalafx&quot;</span> <span class="op">%%</span> <span class="st">&quot;scalafx&quot;</span> <span class="op">%</span> <span class="st">&quot;8.0.20-R6&quot;</span></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a>libraryDependencies <span class="op">+=</span> <span class="st">&quot;org.scalafx&quot;</span> <span class="op">%%</span> <span class="st">&quot;scalafxml-core-sfx8&quot;</span> <span class="op">%</span> <span class="st">&quot;0.2.2&quot;</span></span></code></pre></div>
]]></summary>
</entry>
<entry>
    <title>A python/thrift profiling story</title>
    <link href="http://vigoo.github.io/posts/2014-09-15-thrift-profiling.html" />
    <id>http://vigoo.github.io/posts/2014-09-15-thrift-profiling.html</id>
    <published>2014-09-15T00:00:00Z</published>
    <updated>2014-09-15T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on September 15, 2014
    
</div>

<p>A few weeks ago I met a problem where a script, running once every night sending out some emails did not run correctly because a remote thrift call timed out in it. As I started investigating it, turned out that it’s a <em>search</em> call:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a>staff_users <span class="op">=</span> RemoteUserFactory().search(is_staff<span class="op">=</span><span class="va">True</span>)</span></code></pre></div>
<p>The details here are not really important, what this call does is that it asks a service to return a <em>set of users</em>, and the communication is going on <a href="https://thrift.apache.org/">thrift</a>.</p>
<p>Executing it manually on the server revealed that it should return <em>5649</em> users. Checking out the logs I could see that the call took extremely long time, between 8 to 12 seconds. Even when the cron job was moved from 3:00 AM to a less busy time (several other jobs were executing at the same time), it took more than 6 seconds!</p>
<p>This was suspicious so I also checked the log of a <em>proxy</em> which runs on the same host as the script itself and provides client side load balancing, circuit breaking, retry logic etc. for thrift connections. This log showed that the service replied in <em>2.5 seconds</em>, but it took almost 4 seconds to get this response from the proxy to the client on localhost! This seemed to be completely unacceptable, and also the 2.5 second response time from the service seemed to be too big (I ran the query on one of the server nodes and it returned the users from the database almost instantly). I also had similar experience (but without measurements) before.</p>
<p>So I decided to find out what’s going on. And I found the process interesting enough to write this post about it :)</p>
<h2 id="test-environment">Test environment</h2>
<p>I started by adding a test method to the service’s thrift API called <code>test_get_users(count, sleep)</code> which returns <code>count</code> fake users after waiting <code>sleep</code> seconds. Then in the following experiments I called it with <code>(5499, 1)</code>. The 1 second sleep was intended to simulate the network latency and database query; there was no advantage from having it at the end, but as it is visible everywhere in the results, I had to mention.</p>
<p>For finding out what’s going on I used <a href="https://docs.python.org/2/library/profile.html">cProfile</a> with <a href="https://code.google.com/p/jrfonseca/">gprof2dot</a>, calling the remote test method from a django shell, while everything is running on localhost.</p>
<h3 id="first-measurement">First measurement</h3>
<p>Without touching anything, returning 5499 dummy users on localhost took <strong>5.272 seconds</strong>!</p>
<p>The client side of the call looked like this:</p>
<p><a href="/images/profile1.png" class="zimg"><img width="600" src="/images/profile1.png" alt="profile1"></a></p>
<p>Here we can see that the call has two major phases:</p>
<ul>
<li>The thrift call itself (65%)</li>
<li>Converting the raw results to model objects with <code>_row_to_model</code> (35%)</li>
</ul>
<p>Let’s see first the thrift call (the green branch on the picture). Once again it has two, nearly equivalent branches:</p>
<ul>
<li><code>send_test_get_users</code> which sends the request and waits for the response. This includes the 1 second sleep as well.</li>
<li><code>recv_test_get_users</code> processes the response</li>
</ul>
<p>What’s interesting here is that <code>recv_test_get_users</code> took ~32% of the overall time which is around ~1.6 seconds for simple data deserialization.</p>
<h3 id="optimizing-thrift-deserialization">Optimizing thrift deserialization</h3>
<p>I did not want to believe that the python thrift deserialization is that slow, so I did a search and found that the <code>TBinaryProtocol</code> which we are using is really that slow.</p>
<p>But the thrift library contains a class called <code>TBinaryProtocolAccelerated</code> which is about 10x faster (according to a stackoverflow post).</p>
<p>First I simply changed the used protocol to this, but nothing happened. Digging deeper I found that this is not a real protocol implementation, but a lower level hack.</p>
<p>The documentation of the protocol class says:</p>
<pre><code>  C-Accelerated version of TBinaryProtocol.

  This class does not override any of TBinaryProtocol&#39;s methods,
  but the generated code recognizes it directly and will call into
  our C module to do the encoding, bypassing this object entirely.
  We inherit from TBinaryProtocol so that the normal TBinaryProtocol
  encoding can happen if the fastbinary module doesn&#39;t work for some
  reason.  (TODO(dreiss): Make this happen sanely in more cases.)

  In order to take advantage of the C module, just use
  TBinaryProtocolAccelerated instead of TBinaryProtocol.</code></pre>
<p>So why didn’t it work? The answer is in <a href="https://github.com/apache/thrift/blob/master/lib/py/src/protocol/TBase.py#L52-L58">TBase.py</a>.</p>
<p>The following conditions have to met in order to use the fast deserializer:</p>
<ul>
<li>Protocol must be <code>TBinaryProtocolAccelerated</code> (I changed that)</li>
<li>Protocol’s transport implementation must implement the <code>TTransport.CReadableTransport</code> interface</li>
<li><code>thrift_spec</code> must be available (this was true in this case)</li>
<li><code>fastbinary</code> must be available (also true)</li>
</ul>
<p>The problem was that we were replacing the <code>TTransport</code> implementation with a custom class called <code>ThriftifyTransport</code> in order to do thrift logging, HMAC authentication, etc.</p>
<p>Fortunately all the default transport implementations implement the <code>CReadableTransport</code> interface, and one of them, <code>TBufferedTransport</code> can be used to wrap another transport to add buffering around it. That’s what I did, and it immediately started using the fast deserialization code.</p>
<p>The test call now ran in <strong>3.624 seconds</strong>.</p>
<p>And the new profiling results with this change:</p>
<p><a href="/images/profile2.png" class="zimg"><img width="600" src="/images/profile2.png" alt="profile2"></a></p>
<p>The left-hand side of the call graph remained the same, but <code>recv_test_get_users</code> is now only 2.35% of the overall time which is ~0.08 seconds (to be compared with the 1.6 seconds with the original deserializer!)</p>
<h3 id="optimizing-thrift-serialization">Optimizing thrift serialization</h3>
<p>The obvious next step was to apply this change on the server side as well, so our service can use the fast binary protocol for serialization too. For this I simply copied the change and remeasured everything.</p>
<p>The test call now ran in <strong>3.328 seconds</strong>!</p>
<p>Let’s see the call graph of this stage:</p>
<p><a href="/images/profile3.png" class="zimg"><img width="600" src="/images/profile3.png" alt="profile3"></a></p>
<h3 id="optimizing-result-processing">Optimizing result processing</h3>
<p>The client side of the test method was written similar to how the original API method is written:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> test_get_users_thrift(<span class="va">self</span>, count, sleep):</span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a>    rpc <span class="op">=</span> ThriftRPC(UserDataService, <span class="va">self</span>.name, service_name<span class="op">=</span><span class="va">self</span>.service_name, client_config<span class="op">=</span>client_config)</span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a>    result <span class="op">=</span> []</span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span> row <span class="kw">in</span> rpc.test_get_users(count, sleep).iteritems():</span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a>        user <span class="op">=</span> <span class="va">self</span>._row_to_model(<span class="va">self</span>.user_factory, row)</span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a>        result.append(user)</span>
<span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-9"><a href="#cb3-9" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> result</span></code></pre></div>
<p>It is clearly visible on the call graph that the 5499 call to <code>_row_to_model</code> takes 53% of the total time, which is ~1.7 seconds. There are two main branches of this call. The left hand side (<code>row_to_model</code>) seemed to be simple data conversion, and its slowest part is date-time deserialization.</p>
<p>The other branch however looked like a real problem; why should we resolve HMAC host, or parse configuration for each row?</p>
<p>It turned out to be a bug, <code>_row_to_model</code> created a new <em>model factory</em> in each call, which involves a lot of initialization, config parsing, and similar things.</p>
<p>So the simple fix was to create a <code>_rows_to_model</code> helper function which does the same for multiple rows with a single factory.</p>
<p>Running my test code once again showed that the optimization makes sense. Now it ran in <strong>2.448 seconds</strong>, with the following call graph:</p>
<p><a href="/images/profile4.png" class="zimg"><img width="600" src="/images/profile4.png" alt="profile4"></a></p>
<h3 id="further-optimizations">Further optimizations</h3>
<p>I saw two possible ways to further optimize this case:</p>
<ol type="1">
<li><p>Lazy conversion of raw thrift data to model data (per field). This would make sense because many times only a few fields (the id for example) are used, but it seemed to be a too complex change</p></li>
<li><p>Checking the server side as well</p></li>
</ol>
<p>To profile the server side and only measure the thrift request processing I had to add profiling code to the django view class in the following way:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> cProfile</span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a>cProfile.runctx(<span class="st">&#39;self._call_processor(op_data)&#39;</span>, <span class="bu">globals</span>(), <span class="bu">locals</span>(), <span class="st">&#39;callstats&#39;</span>)</span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a><span class="co"># self._call_processor(op_data)</span></span></code></pre></div>
<p>The server-side call took <strong>1.691 seconds</strong> and looked like this:</p>
<p><a href="/images/profile5.png" class="zimg"><img width="600" src="/images/profile5.png" alt="profile5"></a></p>
<p>As expected, 60% of this was the 1 second sleep. The rest of the calls are data conversion with no obvious point to improve.</p>
<h2 id="summary">Summary</h2>
<p>These optimizations are decreasing the response time significantly, especially for calls returning multiple rows.</p>
<p>The interesting was that the extremely slow performance was caused by both the slow perfomance of the python thrift serializer and a bug in our code.</p>
]]></summary>
</entry>
<entry>
    <title>Conditional blocks in Distributed Documentor</title>
    <link href="http://vigoo.github.io/posts/2014-07-13-conditional-blocks-in-ddoc.html" />
    <id>http://vigoo.github.io/posts/2014-07-13-conditional-blocks-in-ddoc.html</id>
    <published>2014-07-13T00:00:00Z</published>
    <updated>2014-07-13T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on July 13, 2014
    
</div>

<p>I’ve added a new feature to <a href="https://github.com/vigoo/distributed-documentor">Distributed Documentor</a> today, <em>conditional blocks</em>.</p>
<p>The idea is that parts of the documents can be enabled when a given <em>condition</em> is present. This is very similar to <a href="http://gcc.gnu.org/onlinedocs/cpp/Ifdef.html">C’s ifdef blocks</a>. To use it with the <em>MediaWiki syntax</em>, put <code>[When:X]</code> and <code>[End]</code> commands in separate lines:</p>
<pre><code>Unconditional

[When:FIRST]
First conditional

[When:SECOND]
First and second conditional
[End]
[End]

[When:SECOND]
Second conditional
[End]</code></pre>
<p><em>Snippets</em> can also have conditional blocks.</p>
<p>There are two possibilities to set which conditionals are enabled:</p>
<ol type="1">
<li><p>Specifying it with command line arguments, such as</p>
<pre><code> java -jar DistributedDocumentor.jar -D FIRST -D SECOND</code></pre>
<p>This is useful when exporting a documentation from command line, or to launch the documentation editor with a predefined set of enabled conditions.</p></li>
<li><p>On the user interface, using <em>View</em> menu’s <em>Enabled conditions…</em> menu item:</p></li>
</ol>
<p><img src="/images/enabled-conditions-dialog.png" /></p>
]]></summary>
</entry>
<entry>
    <title>Introducing bari</title>
    <link href="http://vigoo.github.io/posts/2014-05-16-introducing-bari.html" />
    <id>http://vigoo.github.io/posts/2014-05-16-introducing-bari.html</id>
    <published>2014-05-16T00:00:00Z</published>
    <updated>2014-05-16T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on May 16, 2014
    
</div>

<p>In the past two years I worked on a project called <a href="https://github.com/vigoo/bari">bari</a> which now reached an usable state. <strong>bari</strong> is a <em>build management system</em>, trying to fix Visual Studio’s bad parts while keeping the good ones.</p>
<p>Basically it tries to make .NET development more convenient, when</p>
<ul>
<li>The application may consist of a <em>large number of projects</em></li>
<li>There may be several different <em>subsets</em> of these projects defining
valuable target <em>products</em></li>
<li><em>Custom build steps</em> may be required</li>
<li>It is important to be able to <em>reproduce</em> the build environment as
easily as possible</li>
<li>The developers want to use the full power of their <em>IDE</em></li>
</ul>
<p>The main idea is to generate Visual Studio solutions and projects <em>on the fly</em> as needed, from a concise <em>declarative</em> build description. I tried to optimize this build description for human readability. Let’s see an example, a short section from <strong>bari</strong>’s own build definition:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode yaml"><code class="sourceCode yaml"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="kw">-</span><span class="at"> </span><span class="fu">name</span><span class="kw">:</span><span class="at"> bari</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a><span class="at">  </span><span class="fu">type</span><span class="kw">:</span><span class="at"> executable</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a><span class="at">  </span><span class="fu">references</span><span class="kw">:</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a><span class="at">    </span><span class="kw">-</span><span class="at"> gac://System</span></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a><span class="at">    </span><span class="kw">-</span><span class="at"> nuget://log4net</span></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a><span class="at">    </span><span class="kw">-</span><span class="at"> nuget://Ninject/3.0.1.10</span></span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a><span class="at">    </span><span class="kw">-</span><span class="at"> nuget://QuickGraph</span></span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a><span class="at">    </span><span class="kw">-</span><span class="at"> module://Bari.Core</span></span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a><span class="at">  </span><span class="fu">csharp</span><span class="kw">:</span></span>
<span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a><span class="at">    </span><span class="fu">root-namespace</span><span class="kw">:</span><span class="at"> Bari.Console</span></span></code></pre></div>
<p>The main advantage of generating solutions and projects on the fly is that each developer can work on the subset he needs for his current task keeping the IDE fast, but can also open everything in one solution if it is useful for performing a refactoring.</p>
<p>To keep build definitions short and readable, <strong>bari</strong> prefers <em>convention</em> over <em>configuration</em>. For example the directory stucture in which the source code lays defines not only the name of the modules to build, but also the way it is built. For example, in a simple <em>hello world</em> example the C# source code would be put in the <code>src/TestModule/HelloWorld/cs</code> directory, and <strong>bari</strong> would build <code>target/TestModule/HelloWorld.exe</code>.</p>
<p><strong>bari</strong> unifies the handling of <em>project references</em> in a way that referencing projects within a suite, from the GAC, using <a href="http://www.nuget.org">Nuget</a> or from a custom repository works exactly the same. It is also possible to write <em>custom builders</em> in Python.</p>
<p>For more information check out <a href="https://github.com/vigoo/bari/wiki/GettingStarted">the getting started page</a>.</p>
]]></summary>
</entry>
<entry>
    <title>ScalaFX with FXML</title>
    <link href="http://vigoo.github.io/posts/2014-01-12-scalafx-with-fxml.html" />
    <id>http://vigoo.github.io/posts/2014-01-12-scalafx-with-fxml.html</id>
    <published>2014-01-12T00:00:00Z</published>
    <updated>2014-01-12T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on January 12, 2014
    
</div>

<p><a href="https://code.google.com/p/scalafx/">ScalaFX</a> is a nice wrapper around JavaFX for Scala, but currently it lacks support for using <a href="http://docs.oracle.com/javafx/2/api/javafx/fxml/doc-files/introduction_to_fxml.html">FXML</a> instead of Scala code for defining the user interfaces. This can be understood as <em>ScalaFX</em> is in fact a DSL for defining the UI in Scala instead of an XML file. Still I believe that using FXML instead may have its advantages; first of all it has a visual designer (<a href="http://www.oracle.com/technetwork/java/javafx/tools/index.html">JavaFX Scene Builder</a>). For me, designing an UI without immediate visual feedback is hard, and involves a lot of iterations of tweaking the code, running it and checking the results. I also expect that in the future there will be more tools available which work on FXML data.</p>
<p>It is not impossible to use FXML user interfaces from Scala, but the ScalaFX wrappers does not help and the code for the controller classes is not clean enough. See <a href="https://github.com/jpsacha/ProScalaFX/blob/master/src/proscalafx/ch10/fxml/AdoptionFormController.scala">the following example</a> to get a feeling how it looks like.</p>
<p>To make it better I wrote a small library called <a href="https://github.com/vigoo/scalafxml">ScalaFXML</a>. In this post I’ll go through a small example to explain how it works.</p>
<p>The following image shows how our sample application will look like:</p>
<p><img src="/images/unit-conversion-shot.png" /></p>
<p>The <em>From</em> fiels is editable, and the result in the <em>To</em> field is filled as you type using <em>data binding</em>. The <em>Close</em> button’s only purpose is to demonstrate event handlers.</p>
<p>The conversion logic itself is implemented by <a href="https://github.com/vigoo/scalafxml/blob/master/demo/src/main/scala/scalafxml/demo/unitconverter/UnitConverter.scala">small classes</a> sharing the same trait:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="kw">trait</span> UnitConverter <span class="op">{</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>  <span class="kw">val</span> description<span class="op">:</span> <span class="ex">String</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>  <span class="kw">def</span> <span class="fu">run</span><span class="op">(</span>input<span class="op">:</span> <span class="ex">String</span><span class="op">):</span> <span class="ex">String</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>  <span class="kw">override</span> <span class="kw">def</span> toString <span class="op">=</span> description</span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a><span class="kw">object</span> MMtoInches <span class="kw">extends</span> UnitConverter <span class="op">{</span></span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a>  <span class="kw">val</span> description<span class="op">:</span> <span class="ex">String</span> <span class="op">=</span> <span class="st">&quot;Millimeters to inches&quot;</span></span>
<span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a>  <span class="kw">def</span> <span class="fu">run</span><span class="op">(</span>input<span class="op">:</span> <span class="ex">String</span><span class="op">):</span> <span class="ex">String</span> <span class="op">=</span> </span>
<span id="cb1-11"><a href="#cb1-11" aria-hidden="true" tabindex="-1"></a>      <span class="cf">try</span> <span class="op">{</span> </span>
<span id="cb1-12"><a href="#cb1-12" aria-hidden="true" tabindex="-1"></a>          <span class="op">(</span>input<span class="op">.</span>toDouble <span class="op">/</span> <span class="fl">25.4</span><span class="op">).</span>toString </span>
<span id="cb1-13"><a href="#cb1-13" aria-hidden="true" tabindex="-1"></a>      <span class="op">}</span> <span class="cf">catch</span> <span class="op">{</span> </span>
<span id="cb1-14"><a href="#cb1-14" aria-hidden="true" tabindex="-1"></a>          <span class="cf">case</span> ex<span class="op">:</span> <span class="ex">Throwable</span> <span class="op">=&gt;</span> ex<span class="op">.</span>toString </span>
<span id="cb1-15"><a href="#cb1-15" aria-hidden="true" tabindex="-1"></a>      <span class="op">}</span></span>
<span id="cb1-16"><a href="#cb1-16" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb1-17"><a href="#cb1-17" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-18"><a href="#cb1-18" aria-hidden="true" tabindex="-1"></a><span class="kw">object</span> InchesToMM <span class="kw">extends</span> UnitConverter <span class="op">{</span></span>
<span id="cb1-19"><a href="#cb1-19" aria-hidden="true" tabindex="-1"></a>  <span class="kw">val</span> description<span class="op">:</span> <span class="ex">String</span> <span class="op">=</span> <span class="st">&quot;Inches to millimeters&quot;</span></span>
<span id="cb1-20"><a href="#cb1-20" aria-hidden="true" tabindex="-1"></a>  <span class="kw">def</span> <span class="fu">run</span><span class="op">(</span>input<span class="op">:</span> <span class="ex">String</span><span class="op">):</span> <span class="ex">String</span> <span class="op">=</span> </span>
<span id="cb1-21"><a href="#cb1-21" aria-hidden="true" tabindex="-1"></a>      <span class="cf">try</span> <span class="op">{</span> </span>
<span id="cb1-22"><a href="#cb1-22" aria-hidden="true" tabindex="-1"></a>          <span class="op">(</span>input<span class="op">.</span>toDouble <span class="op">*</span> <span class="fl">25.4</span><span class="op">).</span>toString </span>
<span id="cb1-23"><a href="#cb1-23" aria-hidden="true" tabindex="-1"></a>      <span class="op">}</span> <span class="cf">catch</span> <span class="op">{</span> </span>
<span id="cb1-24"><a href="#cb1-24" aria-hidden="true" tabindex="-1"></a>          <span class="cf">case</span> ex<span class="op">:</span> <span class="ex">Throwable</span> <span class="op">=&gt;</span> ex<span class="op">.</span>toString </span>
<span id="cb1-25"><a href="#cb1-25" aria-hidden="true" tabindex="-1"></a>      <span class="op">}</span></span>
<span id="cb1-26"><a href="#cb1-26" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>To describe the set of available <em>unit converters</em>, we define one more helper class:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="kw">class</span> <span class="fu">UnitConverters</span><span class="op">(</span>converters<span class="op">:</span> UnitConverter<span class="op">*)</span> <span class="op">{</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>  <span class="kw">val</span> available <span class="op">=</span> <span class="ex">List</span><span class="op">(</span>converters <span class="op">:</span> _<span class="op">*)</span></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>Now let’s start with a <a href="https://github.com/vigoo/scalafxml/blob/master/demo/src/main/scala/scalafxml/demo/unitconverter/PureScalaFX.scala">pure ScalaFX solution</a>, where the user interface is defined in Scala. I’ve implemented the view itself in a class called <code>PureScalaFXView</code>, which gets the set of available <em>unit converters</em> as a dependency through its constructor. This makes the main application object very simple:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="kw">object</span> PureScalaFX <span class="kw">extends</span> JFXApp <span class="op">{</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a>  stage <span class="op">=</span> <span class="kw">new</span> <span class="fu">PureScalaFXView</span><span class="op">(</span></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a>      <span class="kw">new</span> <span class="fu">UnitConverters</span><span class="op">(</span>InchesToMM<span class="op">,</span> MMtoInches<span class="op">))</span></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>The <code>PureScalaFXView</code> class consists of two distinct parts. First we define the user interface using the <em>ScalaFX UI DSL</em>:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="kw">class</span> <span class="fu">PureScalaFXView</span><span class="op">(</span>converters<span class="op">:</span> UnitConverters<span class="op">)</span> <span class="kw">extends</span> JFXApp<span class="op">.</span>PrimaryStage <span class="op">{</span></span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a>  <span class="co">// UI Definition</span></span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a>  title <span class="op">=</span> <span class="st">&quot;Unit conversion&quot;</span></span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a>  <span class="kw">private</span> <span class="kw">val</span> types <span class="op">=</span> <span class="kw">new</span> ComboBox<span class="op">[</span>UnitConverter<span class="op">]()</span> <span class="op">{</span></span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a>    maxWidth <span class="op">=</span> <span class="ex">Double</span><span class="op">.</span>MaxValue</span>
<span id="cb4-8"><a href="#cb4-8" aria-hidden="true" tabindex="-1"></a>    margin <span class="op">=</span> <span class="ex">Insets</span><span class="op">(</span><span class="dv">3</span><span class="op">)</span></span>
<span id="cb4-9"><a href="#cb4-9" aria-hidden="true" tabindex="-1"></a>  <span class="op">}</span></span>
<span id="cb4-10"><a href="#cb4-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-11"><a href="#cb4-11" aria-hidden="true" tabindex="-1"></a>  <span class="kw">private</span> <span class="kw">val</span> from <span class="op">=</span> <span class="kw">new</span> <span class="ex">TextField</span> <span class="op">{</span></span>
<span id="cb4-12"><a href="#cb4-12" aria-hidden="true" tabindex="-1"></a>    margin <span class="op">=</span> <span class="ex">Insets</span><span class="op">(</span><span class="dv">3</span><span class="op">)</span></span>
<span id="cb4-13"><a href="#cb4-13" aria-hidden="true" tabindex="-1"></a>    prefWidth <span class="op">=</span> <span class="fl">200.0</span></span>
<span id="cb4-14"><a href="#cb4-14" aria-hidden="true" tabindex="-1"></a>  <span class="op">}</span></span>
<span id="cb4-15"><a href="#cb4-15" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-16"><a href="#cb4-16" aria-hidden="true" tabindex="-1"></a>  <span class="kw">private</span> <span class="kw">val</span> to <span class="op">=</span> <span class="kw">new</span> <span class="ex">TextField</span> <span class="op">{</span></span>
<span id="cb4-17"><a href="#cb4-17" aria-hidden="true" tabindex="-1"></a>    prefWidth <span class="op">=</span> <span class="fl">200.0</span></span>
<span id="cb4-18"><a href="#cb4-18" aria-hidden="true" tabindex="-1"></a>    margin <span class="op">=</span> <span class="ex">Insets</span><span class="op">(</span><span class="dv">3</span><span class="op">)</span></span>
<span id="cb4-19"><a href="#cb4-19" aria-hidden="true" tabindex="-1"></a>    editable <span class="op">=</span> <span class="kw">false</span></span>
<span id="cb4-20"><a href="#cb4-20" aria-hidden="true" tabindex="-1"></a>  <span class="op">}</span></span>
<span id="cb4-21"><a href="#cb4-21" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-22"><a href="#cb4-22" aria-hidden="true" tabindex="-1"></a>  scene <span class="op">=</span> <span class="kw">new</span> Scene <span class="op">{</span></span>
<span id="cb4-23"><a href="#cb4-23" aria-hidden="true" tabindex="-1"></a>    content <span class="op">=</span> <span class="kw">new</span> GridPane <span class="op">{</span></span>
<span id="cb4-24"><a href="#cb4-24" aria-hidden="true" tabindex="-1"></a>      padding <span class="op">=</span> <span class="ex">Insets</span><span class="op">(</span><span class="dv">5</span><span class="op">)</span></span>
<span id="cb4-25"><a href="#cb4-25" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-26"><a href="#cb4-26" aria-hidden="true" tabindex="-1"></a>      <span class="fu">add</span><span class="op">(</span><span class="kw">new</span> <span class="ex">Label</span><span class="op">(</span><span class="st">&quot;Conversion type:&quot;</span><span class="op">),</span> <span class="dv">0</span><span class="op">,</span> <span class="dv">0</span><span class="op">)</span></span>
<span id="cb4-27"><a href="#cb4-27" aria-hidden="true" tabindex="-1"></a>      <span class="fu">add</span><span class="op">(</span><span class="kw">new</span> <span class="ex">Label</span><span class="op">(</span><span class="st">&quot;From:&quot;</span><span class="op">),</span> <span class="dv">0</span><span class="op">,</span> <span class="dv">1</span><span class="op">)</span></span>
<span id="cb4-28"><a href="#cb4-28" aria-hidden="true" tabindex="-1"></a>      <span class="fu">add</span><span class="op">(</span><span class="kw">new</span> <span class="ex">Label</span><span class="op">(</span><span class="st">&quot;To:&quot;</span><span class="op">),</span> <span class="dv">0</span><span class="op">,</span> <span class="dv">2</span><span class="op">)</span></span>
<span id="cb4-29"><a href="#cb4-29" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-30"><a href="#cb4-30" aria-hidden="true" tabindex="-1"></a>      <span class="fu">add</span><span class="op">(</span>types<span class="op">,</span> <span class="dv">1</span><span class="op">,</span> <span class="dv">0</span><span class="op">)</span></span>
<span id="cb4-31"><a href="#cb4-31" aria-hidden="true" tabindex="-1"></a>      <span class="fu">add</span><span class="op">(</span>from<span class="op">,</span> <span class="dv">1</span><span class="op">,</span> <span class="dv">1</span><span class="op">)</span></span>
<span id="cb4-32"><a href="#cb4-32" aria-hidden="true" tabindex="-1"></a>      <span class="fu">add</span><span class="op">(</span>to<span class="op">,</span> <span class="dv">1</span><span class="op">,</span> <span class="dv">2</span><span class="op">)</span></span>
<span id="cb4-33"><a href="#cb4-33" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-34"><a href="#cb4-34" aria-hidden="true" tabindex="-1"></a>      <span class="fu">add</span><span class="op">(</span><span class="kw">new</span> <span class="ex">Button</span><span class="op">(</span><span class="st">&quot;Close&quot;</span><span class="op">)</span> <span class="op">{</span></span>
<span id="cb4-35"><a href="#cb4-35" aria-hidden="true" tabindex="-1"></a>        <span class="co">// inline event handler binding</span></span>
<span id="cb4-36"><a href="#cb4-36" aria-hidden="true" tabindex="-1"></a>        onAction <span class="op">=</span> <span class="op">(</span>e<span class="op">:</span> <span class="ex">ActionEvent</span><span class="op">)</span> <span class="op">=&gt;</span> Platform<span class="op">.</span><span class="fu">exit</span><span class="op">()</span></span>
<span id="cb4-37"><a href="#cb4-37" aria-hidden="true" tabindex="-1"></a>      <span class="op">},</span> <span class="dv">1</span><span class="op">,</span> <span class="dv">3</span><span class="op">)</span></span>
<span id="cb4-38"><a href="#cb4-38" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-39"><a href="#cb4-39" aria-hidden="true" tabindex="-1"></a>      columnConstraints <span class="op">=</span> <span class="ex">List</span><span class="op">(</span></span>
<span id="cb4-40"><a href="#cb4-40" aria-hidden="true" tabindex="-1"></a>        <span class="kw">new</span> ColumnConstraints <span class="op">{</span></span>
<span id="cb4-41"><a href="#cb4-41" aria-hidden="true" tabindex="-1"></a>          halignment <span class="op">=</span> HPos<span class="op">.</span>LEFT</span>
<span id="cb4-42"><a href="#cb4-42" aria-hidden="true" tabindex="-1"></a>          hgrow <span class="op">=</span> Priority<span class="op">.</span>SOMETIMES</span>
<span id="cb4-43"><a href="#cb4-43" aria-hidden="true" tabindex="-1"></a>          margin <span class="op">=</span> <span class="ex">Insets</span><span class="op">(</span><span class="dv">5</span><span class="op">)</span></span>
<span id="cb4-44"><a href="#cb4-44" aria-hidden="true" tabindex="-1"></a>        <span class="op">},</span></span>
<span id="cb4-45"><a href="#cb4-45" aria-hidden="true" tabindex="-1"></a>        <span class="kw">new</span> ColumnConstraints <span class="op">{</span></span>
<span id="cb4-46"><a href="#cb4-46" aria-hidden="true" tabindex="-1"></a>          halignment <span class="op">=</span> HPos<span class="op">.</span>RIGHT</span>
<span id="cb4-47"><a href="#cb4-47" aria-hidden="true" tabindex="-1"></a>          hgrow <span class="op">=</span> Priority<span class="op">.</span>ALWAYS</span>
<span id="cb4-48"><a href="#cb4-48" aria-hidden="true" tabindex="-1"></a>          margin <span class="op">=</span> <span class="ex">Insets</span><span class="op">(</span><span class="dv">5</span><span class="op">)</span></span>
<span id="cb4-49"><a href="#cb4-49" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span>
<span id="cb4-50"><a href="#cb4-50" aria-hidden="true" tabindex="-1"></a>      <span class="op">)</span></span>
<span id="cb4-51"><a href="#cb4-51" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb4-52"><a href="#cb4-52" aria-hidden="true" tabindex="-1"></a>  <span class="op">}</span></span></code></pre></div>
<p>This is not 100% pure UI definition, because it also contains an inline event handler definition for the <em>Close</em> button.</p>
<p>The next part fills the <em>combo box</em> and defines the data binding. Filling the combo box is a simple procedural loop:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a>  <span class="cf">for</span> <span class="op">(</span>converter <span class="op">&lt;-</span> converters<span class="op">.</span>available<span class="op">)</span> <span class="op">{</span></span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a>    types <span class="op">+=</span> converter</span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a>  <span class="op">}</span></span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a>  types<span class="op">.</span>getSelectionModel<span class="op">.</span><span class="fu">selectFirst</span><span class="op">()</span></span></code></pre></div>
<p>For the data binding we define a <a href="http://docs.oracle.com/javafx/2/binding/jfxpub-binding.htm">low level data binding</a> which depends on the combo box’s selected value and the <em>From</em> field’s text, and produces the output for the <em>To</em> field:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a>  to<span class="op">.</span>text <span class="op">&lt;==</span> <span class="kw">new</span> StringBinding <span class="op">{</span></span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a>    <span class="fu">bind</span><span class="op">(</span>from<span class="op">.</span>text<span class="op">.</span>delegate<span class="op">,</span> types<span class="op">.</span>getSelectionModel<span class="op">.</span>selectedItemProperty<span class="op">)</span></span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a>    <span class="kw">def</span> <span class="fu">computeValue</span><span class="op">()</span> <span class="op">=</span> types<span class="op">.</span>getSelectionModel<span class="op">.</span>getSelectedItem<span class="op">.</span><span class="fu">run</span><span class="op">(</span>from<span class="op">.</span>text<span class="op">.</span>value<span class="op">)</span></span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a>  <span class="op">}</span></span></code></pre></div>
<p>That’s all, the application is fully functional. The next thing is to split this class so the UI definition and the UI logic got separated. This <a href="https://github.com/vigoo/scalafxml/blob/master/demo/src/main/scala/scalafxml/demo/unitconverter/RefactoredPureScalaFX.scala">refactored ScalaFX solution</a> is very similar to the previous one, but the initialization of the combo box, the data binding and the event handler are all encapsulated by a new, separate class:</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="kw">class</span> <span class="fu">RawUnitConverterPresenter</span><span class="op">(</span></span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a>                              <span class="kw">private</span> <span class="kw">val</span> from<span class="op">:</span> <span class="ex">TextField</span><span class="op">,</span></span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a>                              <span class="kw">private</span> <span class="kw">val</span> to<span class="op">:</span> <span class="ex">TextField</span><span class="op">,</span></span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true" tabindex="-1"></a>                              <span class="kw">private</span> <span class="kw">val</span> types<span class="op">:</span> ComboBox<span class="op">[</span>UnitConverter<span class="op">],</span></span>
<span id="cb7-5"><a href="#cb7-5" aria-hidden="true" tabindex="-1"></a>                              <span class="kw">private</span> <span class="kw">val</span> converters<span class="op">:</span> UnitConverters<span class="op">)</span> <span class="op">{</span></span>
<span id="cb7-6"><a href="#cb7-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb7-7"><a href="#cb7-7" aria-hidden="true" tabindex="-1"></a>  <span class="co">// Filling the combo box</span></span>
<span id="cb7-8"><a href="#cb7-8" aria-hidden="true" tabindex="-1"></a>  <span class="cf">for</span> <span class="op">(</span>converter <span class="op">&lt;-</span> converters<span class="op">.</span>available<span class="op">)</span> <span class="op">{</span></span>
<span id="cb7-9"><a href="#cb7-9" aria-hidden="true" tabindex="-1"></a>    types <span class="op">+=</span> converter</span>
<span id="cb7-10"><a href="#cb7-10" aria-hidden="true" tabindex="-1"></a>  <span class="op">}</span></span>
<span id="cb7-11"><a href="#cb7-11" aria-hidden="true" tabindex="-1"></a>  types<span class="op">.</span>getSelectionModel<span class="op">.</span><span class="fu">selectFirst</span><span class="op">()</span></span>
<span id="cb7-12"><a href="#cb7-12" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb7-13"><a href="#cb7-13" aria-hidden="true" tabindex="-1"></a>  <span class="co">// Data binding</span></span>
<span id="cb7-14"><a href="#cb7-14" aria-hidden="true" tabindex="-1"></a>  to<span class="op">.</span>text <span class="op">&lt;==</span> <span class="kw">new</span> StringBinding <span class="op">{</span></span>
<span id="cb7-15"><a href="#cb7-15" aria-hidden="true" tabindex="-1"></a>    <span class="fu">bind</span><span class="op">(</span>from<span class="op">.</span>text<span class="op">.</span>delegate<span class="op">,</span> types<span class="op">.</span>getSelectionModel<span class="op">.</span>selectedItemProperty<span class="op">)</span></span>
<span id="cb7-16"><a href="#cb7-16" aria-hidden="true" tabindex="-1"></a>    <span class="kw">def</span> <span class="fu">computeValue</span><span class="op">()</span> <span class="op">=</span> types<span class="op">.</span>getSelectionModel<span class="op">.</span>getSelectedItem<span class="op">.</span><span class="fu">run</span><span class="op">(</span>from<span class="op">.</span>text<span class="op">.</span>value<span class="op">)</span></span>
<span id="cb7-17"><a href="#cb7-17" aria-hidden="true" tabindex="-1"></a>  <span class="op">}</span></span>
<span id="cb7-18"><a href="#cb7-18" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb7-19"><a href="#cb7-19" aria-hidden="true" tabindex="-1"></a>  <span class="co">// Close button event handler</span></span>
<span id="cb7-20"><a href="#cb7-20" aria-hidden="true" tabindex="-1"></a>  <span class="kw">def</span> <span class="fu">onClose</span><span class="op">(</span>event<span class="op">:</span> <span class="ex">ActionEvent</span><span class="op">)</span> <span class="op">{</span></span>
<span id="cb7-21"><a href="#cb7-21" aria-hidden="true" tabindex="-1"></a>    Platform<span class="op">.</span><span class="fu">exit</span><span class="op">()</span></span>
<span id="cb7-22"><a href="#cb7-22" aria-hidden="true" tabindex="-1"></a>  <span class="op">}</span></span>
<span id="cb7-23"><a href="#cb7-23" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>What I wanted is to be able to define the controller class exactly like this while building the user interface from FXML. Without <a href="https://github.com/vigoo/scalafxml">ScalaFXML</a> the controller class have some serious limitations:</p>
<ul>
<li>It must implement the <a href="http://docs.oracle.com/javafx/2/api/javafx/fxml/Initializable.html">Initializable</a> interface</li>
<li>It cannot have any constructor arguments</li>
<li>The user interface objects must be variable fields of the class</li>
<li>And they have to have the type of the JavaFX controls, so to be able to use the ScalaFX wrappers, they have to be explicitly wrapped in the <code>initialize</code> method.</li>
</ul>
<p>With <a href="https://github.com/vigoo/scalafxml">ScalaFXML</a> the process is really simple. First we create the FXML, for example with the <a href="http://www.oracle.com/technetwork/java/javafx/tools/index.html">JavaFX Scene Builder</a>:</p>
<p><img src="/images/unit-conversion-scenebuilder.png" /></p>
<p>In the FXML we give the <code>from</code>, <code>to</code>, and <code>types</code> identifiers to our controls using the <code>fx:id</code> attribute, for example:</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode xml"><code class="sourceCode xml"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a>    &lt;<span class="kw">TextField</span><span class="ot"> fx:id=</span><span class="st">&quot;from&quot;</span><span class="ot"> prefWidth=</span><span class="st">&quot;200.0&quot;</span> </span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a><span class="ot">               GridPane.columnIndex=</span><span class="st">&quot;1&quot;</span> </span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true" tabindex="-1"></a><span class="ot">               GridPane.margin=</span><span class="st">&quot;$x1&quot;</span> </span>
<span id="cb8-4"><a href="#cb8-4" aria-hidden="true" tabindex="-1"></a><span class="ot">               GridPane.rowIndex=</span><span class="st">&quot;1&quot;</span> /&gt;</span></code></pre></div>
<p>The event handlers can be specified simply by their name:</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode xml"><code class="sourceCode xml"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true" tabindex="-1"></a>&lt;<span class="kw">Button</span><span class="ot"> onAction=</span><span class="st">&quot;#onClose&quot;</span><span class="ot"> text=</span><span class="st">&quot;Close&quot;</span> </span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true" tabindex="-1"></a><span class="ot">        mnemonicParsing=</span><span class="st">&quot;false&quot;</span></span>
<span id="cb9-3"><a href="#cb9-3" aria-hidden="true" tabindex="-1"></a><span class="ot">        GridPane.columnIndex=</span><span class="st">&quot;1&quot;</span> </span>
<span id="cb9-4"><a href="#cb9-4" aria-hidden="true" tabindex="-1"></a><span class="ot">        GridPane.halignment=</span><span class="st">&quot;RIGHT&quot;</span> </span>
<span id="cb9-5"><a href="#cb9-5" aria-hidden="true" tabindex="-1"></a><span class="ot">        GridPane.rowIndex=</span><span class="st">&quot;3&quot;</span> /&gt;</span></code></pre></div>
<p>and the controller class must be referenced on the root node</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode xml"><code class="sourceCode xml"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true" tabindex="-1"></a>fx:controller=&quot;scalafxml.demo.unitconverter.UnitConverterPresenter&quot;</span></code></pre></div>
<p>The controller class <a href="https://github.com/vigoo/scalafxml/blob/master/demo/src/main/scala/scalafxml/demo/unitconverter/ScalaFXML.scala">can be exactly the same as the <code>RawUnitConverterPresenter</code></a>, adding an additional <code>@sfxml</code> annotation for it. Everything else is handled by the library, as we will see.</p>
<p>The application object itself looks like this:</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true" tabindex="-1"></a><span class="kw">object</span> ScalaFXML <span class="kw">extends</span> JFXApp <span class="op">{</span></span>
<span id="cb11-2"><a href="#cb11-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb11-3"><a href="#cb11-3" aria-hidden="true" tabindex="-1"></a>  <span class="kw">val</span> root <span class="op">=</span> <span class="fu">FXMLView</span><span class="op">(</span>getClass<span class="op">.</span><span class="fu">getResource</span><span class="op">(</span><span class="st">&quot;unitconverter.fxml&quot;</span><span class="op">),</span></span>
<span id="cb11-4"><a href="#cb11-4" aria-hidden="true" tabindex="-1"></a>    <span class="kw">new</span> <span class="fu">DependenciesByType</span><span class="op">(</span><span class="ex">Map</span><span class="op">(</span></span>
<span id="cb11-5"><a href="#cb11-5" aria-hidden="true" tabindex="-1"></a>      typeOf<span class="op">[</span>UnitConverters<span class="op">]</span> <span class="op">-&gt;</span> <span class="kw">new</span> <span class="fu">UnitConverters</span><span class="op">(</span>InchesToMM<span class="op">,</span> MMtoInches<span class="op">))))</span></span>
<span id="cb11-6"><a href="#cb11-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb11-7"><a href="#cb11-7" aria-hidden="true" tabindex="-1"></a>  stage <span class="op">=</span> <span class="kw">new</span> JFXApp<span class="op">.</span><span class="fu">PrimaryStage</span><span class="op">()</span> <span class="op">{</span></span>
<span id="cb11-8"><a href="#cb11-8" aria-hidden="true" tabindex="-1"></a>    title <span class="op">=</span> <span class="st">&quot;Unit conversion&quot;</span></span>
<span id="cb11-9"><a href="#cb11-9" aria-hidden="true" tabindex="-1"></a>    scene <span class="op">=</span> <span class="kw">new</span> <span class="fu">Scene</span><span class="op">(</span>root<span class="op">)</span></span>
<span id="cb11-10"><a href="#cb11-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb11-11"><a href="#cb11-11" aria-hidden="true" tabindex="-1"></a>  <span class="op">}</span></span>
<span id="cb11-12"><a href="#cb11-12" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>Beside giving the URI for the FXML file we also has to provide the <em>additional dependencies</em> of the controller class. This is an easily extensible part of the library, and it already has support for <a href="https://github.com/dickwall/subcut">SubCut</a> and <a href="https://code.google.com/p/google-guice/">Guice</a> as well. Here we are using a simple <em>type-&gt;value</em> mapping instead.</p>
<p>How does this work? What happens behind the scenes?</p>
<p>The <code>@sfxml</code> is a <a href="http://docs.scala-lang.org/overviews/macros/annotations.html">macro annotation</a>. In <em>compile-time</em>, the class definition itself is transformed by the <a href="https://github.com/vigoo/scalafxml/blob/master/core-macros/src/main/scala/scalafxml/core/macros/sfxmlMacro.scala"><code>sfxmlMacro.impl</code> function</a>.</p>
<p>The transformation’s result is a class definition with the source class’ name, but with a completely different content. The original class is added as an inner class, always called <code>Controller</code>. In our example, the generated class definition would look like something similar:</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb12-1"><a href="#cb12-1" aria-hidden="true" tabindex="-1"></a><span class="kw">class</span> <span class="fu">UnitConverterPresenter</span><span class="op">(</span><span class="kw">private</span> <span class="kw">val</span> dependencyResolver<span class="op">:</span> ControllerDependencyResolver<span class="op">)</span></span>
<span id="cb12-2"><a href="#cb12-2" aria-hidden="true" tabindex="-1"></a>    <span class="kw">extends</span> javafx<span class="op">.</span>fxml<span class="op">.</span>Initializable </span>
<span id="cb12-3"><a href="#cb12-3" aria-hidden="true" tabindex="-1"></a>    <span class="kw">with</span> FxmlProxyGenerator<span class="op">.</span>ProxyDependencyInjection <span class="op">{</span></span>
<span id="cb12-4"><a href="#cb12-4" aria-hidden="true" tabindex="-1"></a>    </span>
<span id="cb12-5"><a href="#cb12-5" aria-hidden="true" tabindex="-1"></a>    <span class="kw">class</span> <span class="fu">Controller</span><span class="op">(</span></span>
<span id="cb12-6"><a href="#cb12-6" aria-hidden="true" tabindex="-1"></a>        <span class="kw">private</span> <span class="kw">val</span> from<span class="op">:</span> <span class="ex">TextField</span><span class="op">,</span></span>
<span id="cb12-7"><a href="#cb12-7" aria-hidden="true" tabindex="-1"></a>        <span class="kw">private</span> <span class="kw">val</span> to<span class="op">:</span> <span class="ex">TextField</span><span class="op">,</span></span>
<span id="cb12-8"><a href="#cb12-8" aria-hidden="true" tabindex="-1"></a>        <span class="kw">private</span> <span class="kw">val</span> types<span class="op">:</span> ComboBox<span class="op">[</span>UnitConverter<span class="op">],</span></span>
<span id="cb12-9"><a href="#cb12-9" aria-hidden="true" tabindex="-1"></a>        <span class="kw">private</span> <span class="kw">val</span> converters<span class="op">:</span> UnitConverters<span class="op">)</span> <span class="op">{</span></span>
<span id="cb12-10"><a href="#cb12-10" aria-hidden="true" tabindex="-1"></a>        <span class="co">// …</span></span>
<span id="cb12-11"><a href="#cb12-11" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb12-12"><a href="#cb12-12" aria-hidden="true" tabindex="-1"></a>    </span>
<span id="cb12-13"><a href="#cb12-13" aria-hidden="true" tabindex="-1"></a>    <span class="kw">private</span> <span class="kw">var</span> impl<span class="op">:</span> Controller <span class="op">=</span> <span class="kw">null</span></span>
<span id="cb12-14"><a href="#cb12-14" aria-hidden="true" tabindex="-1"></a>    </span>
<span id="cb12-15"><a href="#cb12-15" aria-hidden="true" tabindex="-1"></a>    <span class="co">// …</span></span>
<span id="cb12-16"><a href="#cb12-16" aria-hidden="true" tabindex="-1"></a><span class="op">}</span>   </span></code></pre></div>
<p>The class have four distinct parts:</p>
<ol type="1">
<li>Getting the additional dependencies from the <em>dependency resolver</em></li>
<li>Variable fields for binding the JavaFX controls defined in the FXML</li>
<li>Event handler methods</li>
<li>The <code>initializable</code> method’s implementation</li>
</ol>
<p>The first one is simple - for each constructor argument of the controller class which is <em>not</em> a ScalaFX control, we query the <em>dependency resolver</em> to get a value for it. These are performed when the outer, generated class is instantiated and stored through the <code>ProxyDependencyInjection</code> trait.</p>
<p>The variable fields are simple fields for all the ScalaFX constructor arguments of the controller class, but converted to their JavaFX counterpart. For example the generated field for the controller’s <code>from</code> argument will look like this:</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb13-1"><a href="#cb13-1" aria-hidden="true" tabindex="-1"></a>@javafx<span class="op">.</span>fxml<span class="op">.</span>FXML</span>
<span id="cb13-2"><a href="#cb13-2" aria-hidden="true" tabindex="-1"></a><span class="kw">private</span> <span class="kw">var</span> from<span class="op">:</span> javafx<span class="op">.</span>scene<span class="op">.</span>control<span class="op">.</span><span class="ex">TextField</span> <span class="op">=</span> <span class="kw">null</span></span></code></pre></div>
<p>The <em>event handler</em>’s are proxies for all the public methods of the controller, but the ScalaFX event argument types are replaced with JavaFX event argument types and they are wrapped automatically when forwarding the call to the real implementation. For the <code>onClose</code> event handler it would look like the following:</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb14-1"><a href="#cb14-1" aria-hidden="true" tabindex="-1"></a>@javafx<span class="op">.</span>fxml<span class="op">.</span>FXML <span class="kw">def</span> <span class="fu">onClose</span><span class="op">(</span>e<span class="op">:</span> javafx<span class="op">.</span>event<span class="op">.</span><span class="ex">ActionEvent</span><span class="op">)</span> <span class="op">{</span></span>
<span id="cb14-2"><a href="#cb14-2" aria-hidden="true" tabindex="-1"></a>    impl<span class="op">.</span><span class="fu">onClose</span><span class="op">(</span><span class="kw">new</span> scalafx<span class="op">.</span>event<span class="op">.</span><span class="ex">ActionEvent</span><span class="op">(</span>e<span class="op">))</span></span>
<span id="cb14-3"><a href="#cb14-3" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>When JavaFX calls the generated controller’s <code>initialize</code> method, the control fields are already set up, and the additional dependencies were already gathered from the dependency resolver so we have all the values required to instantiate the real controller class. For ScalaFX arguments we wrap the JavaFX controls, for the additional dependencies we use the <code>ProxyDependencyInjection</code> trait’s <code>getDependency</code> method:</p>
<div class="sourceCode" id="cb15"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb15-1"><a href="#cb15-1" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> <span class="fu">initialize</span><span class="op">(</span>url<span class="op">:</span> java<span class="op">.</span>net<span class="op">.</span><span class="ex">URL</span><span class="op">,</span> rb<span class="op">:</span> java<span class="op">.</span>util<span class="op">.</span><span class="ex">ResourceBundle</span><span class="op">)</span> <span class="op">{</span></span>
<span id="cb15-2"><a href="#cb15-2" aria-hidden="true" tabindex="-1"></a>    impl <span class="op">=</span> <span class="kw">new</span> <span class="fu">Controller</span><span class="op">(</span></span>
<span id="cb15-3"><a href="#cb15-3" aria-hidden="true" tabindex="-1"></a>        <span class="kw">new</span> scalafx<span class="op">.</span>scene<span class="op">.</span>control<span class="op">.</span><span class="ex">TextField</span><span class="op">(</span>from<span class="op">),</span></span>
<span id="cb15-4"><a href="#cb15-4" aria-hidden="true" tabindex="-1"></a>        <span class="kw">new</span> scalafx<span class="op">.</span>scene<span class="op">.</span>control<span class="op">.</span><span class="ex">TextField</span><span class="op">(</span>to<span class="op">),</span>        </span>
<span id="cb15-5"><a href="#cb15-5" aria-hidden="true" tabindex="-1"></a>        <span class="kw">new</span> scalafx<span class="op">.</span>scene<span class="op">.</span>control<span class="op">.</span>ComboBox<span class="op">[</span>UnitConverter<span class="op">](</span>types<span class="op">),</span></span>
<span id="cb15-6"><a href="#cb15-6" aria-hidden="true" tabindex="-1"></a>        getDependencies<span class="op">[</span>UnitConverters<span class="op">](</span><span class="st">&quot;converters&quot;</span><span class="op">))</span></span>
<span id="cb15-7"><a href="#cb15-7" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>That’s all. The final interesting bit is the <code>FXMLView</code> object, which overrides JavaFX’s default controller factory. This is only necessary to be able to pass the given <code>ControllerDependencyResolver</code> to the generated controller’s constructor:</p>
<div class="sourceCode" id="cb16"><pre class="sourceCode scala"><code class="sourceCode scala"><span id="cb16-1"><a href="#cb16-1" aria-hidden="true" tabindex="-1"></a>  <span class="kw">def</span> <span class="fu">apply</span><span class="op">(</span>fxml<span class="op">:</span> <span class="ex">URL</span><span class="op">,</span> dependencies<span class="op">:</span> ControllerDependencyResolver<span class="op">):</span> jfxs<span class="op">.</span>Parent <span class="op">=</span></span>
<span id="cb16-2"><a href="#cb16-2" aria-hidden="true" tabindex="-1"></a>    jfxf<span class="op">.</span>FXMLLoader<span class="op">.</span><span class="fu">load</span><span class="op">(</span></span>
<span id="cb16-3"><a href="#cb16-3" aria-hidden="true" tabindex="-1"></a>      fxml<span class="op">,</span> </span>
<span id="cb16-4"><a href="#cb16-4" aria-hidden="true" tabindex="-1"></a>      <span class="kw">null</span><span class="op">,</span></span>
<span id="cb16-5"><a href="#cb16-5" aria-hidden="true" tabindex="-1"></a>      <span class="kw">new</span> jfxf<span class="op">.</span><span class="fu">JavaFXBuilderFactory</span><span class="op">(),</span></span>
<span id="cb16-6"><a href="#cb16-6" aria-hidden="true" tabindex="-1"></a>      <span class="kw">new</span> jfxu<span class="op">.</span><span class="ex">Callback</span><span class="op">[</span><span class="ex">Class</span><span class="op">[</span>_<span class="op">],</span> <span class="ex">Object</span><span class="op">]</span> <span class="op">{</span></span>
<span id="cb16-7"><a href="#cb16-7" aria-hidden="true" tabindex="-1"></a>        <span class="kw">override</span> <span class="kw">def</span> <span class="fu">call</span><span class="op">(</span>cls<span class="op">:</span> <span class="ex">Class</span><span class="op">[</span>_<span class="op">]):</span> <span class="ex">Object</span> <span class="op">=</span> </span>
<span id="cb16-8"><a href="#cb16-8" aria-hidden="true" tabindex="-1"></a>            <span class="fu">FxmlProxyGenerator</span><span class="op">(</span>cls<span class="op">,</span> dependencies<span class="op">)</span></span>
<span id="cb16-9"><a href="#cb16-9" aria-hidden="true" tabindex="-1"></a>      <span class="op">})</span></span></code></pre></div>
<p><code>FxmlProxyGenerator</code> uses reflection to create a new instance of the generated controller, and pass the dependency resolver as its only constructor argument.</p>
]]></summary>
</entry>
<entry>
    <title>Trying out Ceylon - Part 1</title>
    <link href="http://vigoo.github.io/posts/2013-11-17-trying-out-ceylon-part-1.html" />
    <id>http://vigoo.github.io/posts/2013-11-17-trying-out-ceylon-part-1.html</id>
    <published>2013-11-17T00:00:00Z</published>
    <updated>2013-11-17T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on November 17, 2013
    
</div>

<p>Ceylon’s first production release was announced on 12th of November. I decided to try it out after going through the quick introduction, as it looked quite promising. In a series of posts I’d like to share my first attempts to use this interesting language.</p>
<p>This first release came with an eclipse plugin as well - after installing it I was immediately able to start working on my test project. In this few hours the plugin seemed to be stable enough, I did not experience any problems.</p>
<p>I have a <code>JVLT</code> file which I created while attending a foreign language course about a year ago. I was using only a limited subset of this application, so basically what I have is a .jvlt file, which is in fact a ZIP archive, in which a <code>dict.xml</code> stores a set of words and for each word one or more translation and the lesson we have learnt it.</p>
<p>See the following example:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode xml"><code class="sourceCode xml"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a>&lt;<span class="kw">dictionary</span><span class="ot"> language=</span><span class="st">&quot;french&quot;</span><span class="ot"> version=</span><span class="st">&quot;1.4&quot;</span>&gt;</span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>  &lt;<span class="kw">entry</span><span class="ot"> id=</span><span class="st">&quot;e275&quot;</span>&gt;</span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>    &lt;<span class="kw">orth</span>&gt;à côté de&lt;/<span class="kw">orth</span>&gt;</span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>    &lt;<span class="kw">sense</span><span class="ot"> id=</span><span class="st">&quot;e275-s1&quot;</span>&gt;</span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>      &lt;<span class="kw">trans</span>&gt;mellett&lt;/<span class="kw">trans</span>&gt;</span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a>    &lt;/<span class="kw">sense</span>&gt;</span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a>    &lt;<span class="kw">sense</span><span class="ot"> id=</span><span class="st">&quot;e275-s2&quot;</span>&gt;</span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a>      &lt;<span class="kw">trans</span>&gt;mellé&lt;/<span class="kw">trans</span>&gt;</span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a>    &lt;/<span class="kw">sense</span>&gt;</span>
<span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a>    &lt;<span class="kw">lesson</span>&gt;8&lt;/<span class="kw">lesson</span>&gt;</span>
<span id="cb1-11"><a href="#cb1-11" aria-hidden="true" tabindex="-1"></a>  &lt;/<span class="kw">entry</span>&gt;</span>
<span id="cb1-12"><a href="#cb1-12" aria-hidden="true" tabindex="-1"></a>&lt;/<span class="kw">dictionary</span>&gt;</span></code></pre></div>
<p>My idea was to write an application that helps me learning and practicing these words.</p>
<p>In this first post I’m going to load the dictionary from the JVLT file.</p>
<p>To get started, I created a new Ceylon module with the help of the IDE called jvlt. This immediately created three program units: <code>module.ceylon</code>, <code>package.ceylon</code> and <code>run.ceylon</code>. The <code>module.ceylon</code> contains the module definition, which also describes the module’s dependencies. As I was trying to implement the dictionary reader, I ended up with the following module definition:</p>
<pre class="ceylon"><code>module jvlt &quot;1.0.0&quot; {
    shared import ceylon.file &quot;1.0.0&quot;;
	import ceylon.collection &quot;1.0.0&quot;;
    import ceylon.interop.java &quot;1.0.0&quot;;
 
    import javax.xml &quot;7&quot;; 
 
    import ceylon.test &quot;1.0.0&quot;;
}</code></pre>
<p>Let’s start with the data model we want to build up! The dictionary consists of words:</p>
<pre class="ceylon"><code>&quot;Represents a foreign word with one or more senses&quot;
shared class Word(shared String word, shared Set&lt;string&gt; senses, shared Integer lesson){ 
}</code></pre>
<p>The word, senses and lessons are all shared attributes of this class, accessible from the outside. To make it easy to access the word objects by their foreign word, I’m currently storing them in a map:</p>
<pre class="ceylon"><code>&quot;Represents a dictionary of words in a given language&quot;
shared class Dictionary(shared String language, shared Map&lt;string word=&quot;&quot;&gt; words) {
}</code></pre>
<p>Basically that’s the data model, but I wrapped the whole thing in an abstract JVLT class which looks like this:</p>
<pre class="ceylon"><code>&quot;Represents a JVLT file&quot;
abstract shared class JVLT() {
 
	&quot;The dictionary stored in this JVLT&quot;
 	formal shared Dictionary dictionary;
}</code></pre>
<p>The idea is that you get a JVLT instance from one of the helper functions and then use it as a root of the data model.</p>
<p>The next thing is to create this data model from the JVLT files. For this, I needed two things:</p>
<ul>
<li>Reading a ZIP archive</li>
<li>Parsing XML</li>
</ul>
<p>It turned out that Ceylon’s file module has ZIP support, with the <code>createZipFileSystem</code> function as an entry point. I made two module-level functions beside the JVLT class for creating instances deriving from the abstract JVLT class:</p>
<ul>
<li><code>loadJVLT</code> which loads a JVLT ZIP archive from the file system</li>
<li><code>loadJVLTFromDictionaryString</code> oads directly a dict.xml-like XML passed as a simple string. I’m using this for unit testing the XML parser.</li>
</ul>
<p>Let’s see the ZIP handling first:</p>
<pre class="ceylon"><code>&quot;Loads a JVLT file from a `.jvlt` ZIP archive, if possible.&quot;
shared JVLT? loadJVLT(File file) {
	value zip = createZipFileSystem(file);
 	value dictPath = zip.parsePath(&quot;/dict.xml&quot;);
 	if (is File dictFile = dictPath.resource) {  
  		try (reader = dictFile.Reader()) {
   
   			return loadJVLTFromDictionaryString(readAll(reader));
  		}
 	} else {
  		return null;
 	}
}</code></pre>
<p>Well, the error handling is not too sophisticated in this case, it either returns a JVLT or returns <code>null</code> if the given file did not have a <code>dict.xml</code> in it. Other error conditions such as a <code>dict.xml</code> with a wrong format, etc., are not handled currently. As you can see, I’m reusing my other load function here, once the <code>dict.xml</code> is read.</p>
<p>There are two interesting things here. First, the if statement where we check if the resource is an instance of <code>File</code> and immediately store it in the value called <code>dictFile</code>. The <code>dictPath.resource</code> attribute has the type <code>Resource</code> which is a Ceylon interface. It is either an <code>ExistingResource</code>: <code>Directory</code>, <code>File</code> or <code>Link</code>, or <code>Nil</code>. In any case if it is not a <code>File</code> instance, we just return <code>null</code>.</p>
<p>For simplicity, I’m reading the full <code>dict.xml</code> into a string before parsing it. For this purpose I wrote a small helper function <code>readAll</code>:</p>
<pre class="ceylon"><code>&quot;Reads all lines from a file reader and returns the concatenated string&quot;
String readAll(File.Reader reader) { 
	variable String result = &quot;&quot;;
 
 	while (exists line = reader.readLine()) {
  		result += line; 
 	}
 
 	return result;
}</code></pre>
<p>Probably it’s not an optimal solution, but works :)</p>
<p>Now that we have our data model and have a way to build it up from XML, we can write some unit tests to see how it works. The Ceylon SDK has a test module and the Ceylon IDE supports running the tests. There is a <a href="http://ceylon-lang.org/documentation/1.0/ide/test-plugin/">separate page in the documentation</a> describing how. It is really simple, I had to add the test module as a dependency, and I created a separate file to hold my test definitions. The class groups the tests together and optionally supports running extra code before/after each test case, as in other test frameworks:</p>
<pre class="ceylon"><code>class DictionaryParserTests() {

	shared test void emptyDictionary() {
	  	value dic = loadJVLTFromDictionaryString(&quot;&lt;dictionary&gt;&quot;);
	  
	  	assert (dic.dictionary.words.empty);
	  	assert (dic.dictionary.language == &quot;unknown&quot;);
	}

 	shared test void languageAttributeRead() {
  		value dic = loadJVLTFromDictionaryString(&quot;&lt;dictionary language=&quot;testlang&quot;&gt;&quot;);
  		assert (dic.dictionary.language == &quot;testlang&quot;);
 	}

	// ...
</code></pre>
<p>I won’t paste here all the test code, only a few samples to get the feeling how the Ceylon code looks like. To test whether a given word’s translations are loaded correctly, I wrote a helper function:</p>
<pre class="ceylon"><code>void assertSenses(JVLT jvlt, String w, [String+] expectedSenses) {
  
    Word? word = jvlt.dictionary.words[w];
    if (exists word) {
    	assert (word.senses.equals(HashSet(expectedSenses)));  
    } else {
     	fail(&quot;Word does not exists&quot;);
    }
}</code></pre>
<p>This helper function can be used to assert that a word has been loaded correctly:</p>
<pre class="ceylon"><code>shared test void wordWithMultipleSenses() {
	value dic = loadJVLTFromDictionaryString(
  		&quot;&lt;dictionary&gt;
   			&lt;entry id=&quot;e1&quot;&gt;
    			&lt;orth&gt;src1&lt;/orth&gt;
    			&lt;sense id=&quot;e1-s1&quot;&gt;
     				&lt;trans&gt;dst1&lt;/trans&gt;
    			&lt;/sense&gt;
    			&lt;sense id=&quot;e1-s2&quot;&gt;
     				&lt;trans&gt;dst2&lt;/trans&gt;
    			&lt;/sense&gt;    
   			&lt;/entry&gt;  
   		&lt;/dictionary&gt;&quot;);
 
 	assertSenses(dic, &quot;src1&quot;, [&quot;dst1&quot;, &quot;dst2&quot;]);
}</code></pre>
<p>Now the only problem is that there is no XML parsing support in the Ceylon SDK currently, so it has to be done using Java interop. As I wrote the code to build up the data model from the XML, I wrote several helper functions to make it easier to fit into the language. So let’s see first how the dictionary loading is defined, and then I’ll show the helper functions.</p>
<p>The XML parsing is done by two module level functions which are not shared - only used by the JVLT constructor functions I shown before. The first one creates a map entry for a single word:</p>
<pre class="ceylon"><code>&quot;Creates a word entry for the dictionary&quot;
String-&gt;Word loadEntry(Element elem) {
 
 	value w = Word {
  		word = selectNodeText(elem, &quot;orth&quot;) else &quot;???&quot;;
  		lesson = selectNodeInteger(elem, &quot;lesson&quot;) else 0;
  		senses = HashSet(selectNodes(elem, &quot;sense/trans&quot;)
  					.map((Node n) =&gt; n.textContent));
 	};
 	return w.word-&gt;w;
}</code></pre>
<p>and the second one loads all the words from the XML document:</p>
<pre class="ceylon"><code>&quot;Loads a dictionary from JVLT&#39;s `dict.xml` format.&quot;
Dictionary loadDictionaryFromXML(Document doc) { 

	doc.documentElement.normalize();

 	return Dictionary { 
  		language = getAttribute(doc.documentElement, &quot;language&quot;) else &quot;unknown&quot;;
  		words = HashMap({ 
     		for (node in selectNodes(doc, &quot;dictionary/entry&quot;))
       			if (is Element elem = node)
             		loadEntry(elem) });   
 	};
}</code></pre>
<p>The function which returns the JVLT instance uses this function and Java interop to read the dictionary:</p>
<pre class="ceylon"><code>&quot;Loads a JVLT file by the parsing the dictionary XML directly from a string&quot;
shared JVLT loadJVLTFromDictionaryString(String dictXML) {
	value docBuilderFactory = DocumentBuilderFactory.newInstance();
 	value builder = docBuilderFactory.newDocumentBuilder();
 	value doc = builder.parse(ByteArrayInputStream(javaString(dictXML).bytes));
 
 	object result extends JVLT() { 
  		dictionary = loadDictionaryFromXML(doc);
 	}
 	return result;
}</code></pre>
<p>There are two things to notice here: we had to convert from Ceylon’s string to Java string. This is not done automatically and we need the <code>ceylon.interop.java</code> module to do it. In the last lines we define an anonymous class extending from JVLT and overwriting it’s abstract dictionary attribute. Then this anonymous class instance is returned as the loaded JVLT.</p>
<p>To make the XML parsing less painful, I defined a few helper functions in a separate compilation unit (<code>XmlHelper.ceylon</code>). I won’t show here the full file but there are some interesting parts. First, from Ceylon you cannot call static methods, but you can import them. I’m using the following two import statements:</p>
<pre class="ceylon"><code>import org.w3c.dom { Node, NodeList, Element }
import javax.xml.xpath { XPathFactory { newXPathFactory = newInstance },
       XPathConstants { nodeSet = \iNODESET }}</code></pre>
<p>The first one is straightforward. It imports three DOM interfaces. The second one first imports the <code>XPathFactory.newInstance</code> static method and also renames it, as newInstance is a too generic name without its class name as a prefix. The third line imports a constant value and gives it a Ceylon-compatible name. Because in Ceylon only the types can start with an uppercase character, we have to use a special and ugly syntax which helps the interoperability - prefixing it with <code>\i</code>.</p>
<p>The <code>ceylon.interop.java</code> module has helper classes to make Java Iterable objects iterable in Ceylon, but unfortunately the <code>NodeList</code> interface is not iterable in Java either. So I wrote a simple wrapper that iterates through a node list:</p>
<pre class="ceylon"><code>class NodeListIterator(NodeList nodes) satisfies Iterable&lt;Node&gt; {
	shared actual default Iterator&lt;Node&gt; iterator() {
  		object it satisfies Iterator&lt;Node&gt; {   
   			variable Integer i = 0;
   
   			shared actual Node|Finished next() {
    			if (i &lt; nodes.length) {
     				return nodes.item(i++);
    			} else {
     				return finished;
    			}
   			}
  		}
  		return it;
 	}
}</code></pre>
<p>Using this iterator and the imports I wrote a <code>selectNodes</code> function to run XPath expressions and return the result as a Ceylon iterable:</p>
<pre class="ceylon"><code>{Node*} selectNodes(Node root, String xpath) { 
	value factory = newXPathFactory();
 	value xpathCompiler = factory.newXPath();
 	value expr = xpathCompiler.compile(xpath);
 	value nodeList = expr.evaluate(root, nodeSet); 
 	if (is NodeList nodeList) {  
  		return NodeListIterator(nodeList);
 	}
 	else {
  		return [];
 	}
}</code></pre>
<p>Using this function it is very easy to write a variant that selects a single node:</p>
<pre class="ceylon"><code>Node? selectNode(Node root, String xpath) { 
	return selectNodes(root, xpath).first;
}</code></pre>
<p>There are some other helper functions returning the node’s text, converting it to integer, etc. but I think they are not that interesting. Now that I have my data model which is built from my JVLT file, the next thing is to make a user interface somehow where the vocabulary can be shown an the user’s knowledge can be tested/improved. This will be the topic of some future posts, as soon as I have time to experiment more with this new language.</p>
]]></summary>
</entry>
<entry>
    <title>Cloning WPF flow document fragments</title>
    <link href="http://vigoo.github.io/posts/2013-10-25-cloning-wpf-flow-document-fragments.html" />
    <id>http://vigoo.github.io/posts/2013-10-25-cloning-wpf-flow-document-fragments.html</id>
    <published>2013-10-25T00:00:00Z</published>
    <updated>2013-10-25T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on October 25, 2013
    
</div>

<p>Today I had to write such an ugly hack to fix a bug that I decided to start writing a blog where I can show it to the world :)</p>
<p>The software I’m working on has some sort of context sensitive help panel, which is implemented using dynamically generated <a href="http://msdn.microsoft.com/en-us/library/aa970909.aspx">flow documents</a>. The software loads a large set of flow document sections from a XAML file runtime, and later builds documents from a subset of them.</p>
<p>For some reason (which belong to a separate post), it is not possible to reuse these flow document elements in multiple flow documents, not even if there is only one at a time. To work around this, I was cloning these sections before adding them to the document.</p>
<p>As WPF elements are not <em>cloneable</em>, I was using the method recommended many places, for example <a href="http://stackoverflow.com/questions/32541/how-can-you-clone-a-wpf-object">in this StackOverflow post</a>: saving the object tree to an in-memory XAML stream, and loading it back.</p>
<p>This worked quite well.. until we discovered a bug, which I still cannot explain. In some cases which were easily reproducible for any developer, but the code running in those cases being exactly the same as in other, working cases, the clone method simply stopped working.</p>
<p>Stopped working here means that the following code:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode cs"><code class="sourceCode cs"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="dt">var</span> xaml <span class="op">=</span> XamlWriter<span class="op">.</span><span class="fu">Save</span><span class="op">(</span>block<span class="op">);</span></span></code></pre></div>
<p>would write out the correct object hierarchy, but without any properties (no attributes, no content properties, nothing but the element names)! In the same time the objects in the memory were untouched and still had all the relevant properties set.</p>
<p>I also tried to write my own XAML serializer based on the code found <a href="http://go4answers.webhost4life.com/Example/xaml-serialization-replacement-75133.aspx">at this site</a>, but this was only good to find out that the problem lies deep within the <code>MarkupWriter</code> class, which is the same what the <code>XamlWriter</code> uses internally. When the <code>XamlWriter</code> failed, my own code could not find any properties using the returned <a href="http://msdn.microsoft.com/en-us/library/system.windows.markup.primitives.markupobject.aspx">MarkupObject</a>:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode cs"><code class="sourceCode cs"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a>MarkupObject markupObj <span class="op">=</span> MarkupWriter<span class="op">.</span><span class="fu">GetMarkupObjectFor</span><span class="op">(</span>obj<span class="op">);</span></span></code></pre></div>
<p>For the same object, in the working scenarios it returned a markup object with a working <code>Properties</code> collection.</p>
<p>So here is the final <em>“solution”</em> which I’m not really proud of, but solved the problem. Maybe with some modifications it is useful for someone struggling with the framework:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode cs"><code class="sourceCode cs"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="co">/// </span><span class="kw">&lt;summary&gt;</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a><span class="co">/// Horrible ugly clone hack to issues where XamlWriter/XamlReader based</span></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a><span class="co">/// clone method did not work.</span></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a><span class="co">/// </span><span class="kw">&lt;/summary&gt;</span></span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a><span class="kw">public</span> <span class="kw">static</span> <span class="kw">class</span> CloneHelper</span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a>    <span class="kw">public</span> <span class="kw">static</span> Block Clone<span class="op">&lt;</span>t<span class="op">&gt;(</span><span class="kw">this</span> T block<span class="op">)</span></span>
<span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a>        where T <span class="op">:</span> Block</span>
<span id="cb3-9"><a href="#cb3-9" aria-hidden="true" tabindex="-1"></a>    <span class="op">{</span></span>
<span id="cb3-10"><a href="#cb3-10" aria-hidden="true" tabindex="-1"></a>        <span class="dt">var</span> result <span class="op">=</span> <span class="op">(</span>T<span class="op">)</span><span class="fu">DeepClone</span><span class="op">(</span>block<span class="op">);</span></span>
<span id="cb3-11"><a href="#cb3-11" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-12"><a href="#cb3-12" aria-hidden="true" tabindex="-1"></a>        <span class="kw">return</span> result<span class="op">;</span></span>
<span id="cb3-13"><a href="#cb3-13" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb3-14"><a href="#cb3-14" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-15"><a href="#cb3-15" aria-hidden="true" tabindex="-1"></a>    <span class="kw">private</span> <span class="kw">static</span> <span class="dt">object</span> <span class="fu">DeepClone</span><span class="op">(</span><span class="dt">object</span> obj<span class="op">)</span></span>
<span id="cb3-16"><a href="#cb3-16" aria-hidden="true" tabindex="-1"></a>    <span class="op">{</span></span>
<span id="cb3-17"><a href="#cb3-17" aria-hidden="true" tabindex="-1"></a>        <span class="kw">if</span> <span class="op">(</span>obj <span class="op">!=</span> <span class="kw">null</span><span class="op">)</span></span>
<span id="cb3-18"><a href="#cb3-18" aria-hidden="true" tabindex="-1"></a>        <span class="op">{</span></span>
<span id="cb3-19"><a href="#cb3-19" aria-hidden="true" tabindex="-1"></a>            <span class="co">// Replacing ResourceDictionary and Style values with null. </span></span>
<span id="cb3-20"><a href="#cb3-20" aria-hidden="true" tabindex="-1"></a>            <span class="co">// In this particular use case it is correct to do</span></span>
<span id="cb3-21"><a href="#cb3-21" aria-hidden="true" tabindex="-1"></a>            <span class="kw">if</span> <span class="op">(</span>obj<span class="op">.</span><span class="fu">GetType</span><span class="op">()</span> <span class="op">==</span> <span class="kw">typeof</span><span class="op">(</span>ResourceDictionary<span class="op">)</span> <span class="op">||</span></span>
<span id="cb3-22"><a href="#cb3-22" aria-hidden="true" tabindex="-1"></a>                obj<span class="op">.</span><span class="fu">GetType</span><span class="op">()</span> <span class="op">==</span> <span class="kw">typeof</span><span class="op">(</span>Style<span class="op">))</span></span>
<span id="cb3-23"><a href="#cb3-23" aria-hidden="true" tabindex="-1"></a>            <span class="op">{</span></span>
<span id="cb3-24"><a href="#cb3-24" aria-hidden="true" tabindex="-1"></a>                <span class="kw">return</span> <span class="kw">null</span><span class="op">;</span></span>
<span id="cb3-25"><a href="#cb3-25" aria-hidden="true" tabindex="-1"></a>            <span class="op">}</span></span>
<span id="cb3-26"><a href="#cb3-26" aria-hidden="true" tabindex="-1"></a>            <span class="kw">else</span></span>
<span id="cb3-27"><a href="#cb3-27" aria-hidden="true" tabindex="-1"></a>            <span class="op">{</span></span>
<span id="cb3-28"><a href="#cb3-28" aria-hidden="true" tabindex="-1"></a>                <span class="co">// Value types and some special cases where we don&#39;t want to clone</span></span>
<span id="cb3-29"><a href="#cb3-29" aria-hidden="true" tabindex="-1"></a>                <span class="kw">if</span> <span class="op">(</span>obj<span class="op">.</span><span class="fu">GetType</span><span class="op">().</span><span class="fu">IsValueType</span> <span class="op">||</span></span>
<span id="cb3-30"><a href="#cb3-30" aria-hidden="true" tabindex="-1"></a>                    obj<span class="op">.</span><span class="fu">GetType</span><span class="op">()</span> <span class="op">==</span> <span class="kw">typeof</span> <span class="op">(</span>Cursor<span class="op">)</span> <span class="op">||</span></span>
<span id="cb3-31"><a href="#cb3-31" aria-hidden="true" tabindex="-1"></a>                    obj<span class="op">.</span><span class="fu">GetType</span><span class="op">()</span> <span class="op">==</span> <span class="kw">typeof</span> <span class="op">(</span>XmlLanguage<span class="op">))</span></span>
<span id="cb3-32"><a href="#cb3-32" aria-hidden="true" tabindex="-1"></a>                <span class="op">{</span></span>
<span id="cb3-33"><a href="#cb3-33" aria-hidden="true" tabindex="-1"></a>                    <span class="kw">return</span> obj<span class="op">;</span></span>
<span id="cb3-34"><a href="#cb3-34" aria-hidden="true" tabindex="-1"></a>                <span class="op">}</span></span>
<span id="cb3-35"><a href="#cb3-35" aria-hidden="true" tabindex="-1"></a>                <span class="kw">else</span></span>
<span id="cb3-36"><a href="#cb3-36" aria-hidden="true" tabindex="-1"></a>                <span class="op">{</span></span>
<span id="cb3-37"><a href="#cb3-37" aria-hidden="true" tabindex="-1"></a>                    <span class="co">// If it is cloneable, use it</span></span>
<span id="cb3-38"><a href="#cb3-38" aria-hidden="true" tabindex="-1"></a>                    <span class="dt">var</span> cloneable <span class="op">=</span> obj <span class="kw">as</span> ICloneable<span class="op">;</span></span>
<span id="cb3-39"><a href="#cb3-39" aria-hidden="true" tabindex="-1"></a>                    <span class="kw">if</span> <span class="op">(</span>cloneable <span class="op">!=</span> <span class="kw">null</span><span class="op">)</span></span>
<span id="cb3-40"><a href="#cb3-40" aria-hidden="true" tabindex="-1"></a>                    <span class="op">{</span></span>
<span id="cb3-41"><a href="#cb3-41" aria-hidden="true" tabindex="-1"></a>                        <span class="kw">return</span> cloneable<span class="op">.</span><span class="fu">Clone</span><span class="op">();</span></span>
<span id="cb3-42"><a href="#cb3-42" aria-hidden="true" tabindex="-1"></a>                    <span class="op">}</span></span>
<span id="cb3-43"><a href="#cb3-43" aria-hidden="true" tabindex="-1"></a>                    <span class="kw">else</span></span>
<span id="cb3-44"><a href="#cb3-44" aria-hidden="true" tabindex="-1"></a>                    <span class="op">{</span></span>
<span id="cb3-45"><a href="#cb3-45" aria-hidden="true" tabindex="-1"></a>                        <span class="co">// Creating the clone with reflection</span></span>
<span id="cb3-46"><a href="#cb3-46" aria-hidden="true" tabindex="-1"></a>                        <span class="dt">var</span> typ <span class="op">=</span> obj<span class="op">.</span><span class="fu">GetType</span><span class="op">();</span></span>
<span id="cb3-47"><a href="#cb3-47" aria-hidden="true" tabindex="-1"></a>                        <span class="dt">var</span> clone <span class="op">=</span> Activator<span class="op">.</span><span class="fu">CreateInstance</span><span class="op">(</span>typ<span class="op">);</span>                     </span>
<span id="cb3-48"><a href="#cb3-48" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-49"><a href="#cb3-49" aria-hidden="true" tabindex="-1"></a>                        <span class="co">// Property names which are known locally set </span></span>
<span id="cb3-50"><a href="#cb3-50" aria-hidden="true" tabindex="-1"></a>                        <span class="co">// dependency properties</span></span>
<span id="cb3-51"><a href="#cb3-51" aria-hidden="true" tabindex="-1"></a>                        <span class="dt">var</span> usedNames <span class="op">=</span> <span class="kw">new</span> HashSet<span class="op">&lt;</span><span class="dt">string</span><span class="op">&gt;();</span>                        </span>
<span id="cb3-52"><a href="#cb3-52" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-53"><a href="#cb3-53" aria-hidden="true" tabindex="-1"></a>                        <span class="co">// Copying locally set dependency properties from the </span></span>
<span id="cb3-54"><a href="#cb3-54" aria-hidden="true" tabindex="-1"></a>                        <span class="co">// source to the target</span></span>
<span id="cb3-55"><a href="#cb3-55" aria-hidden="true" tabindex="-1"></a>                        <span class="dt">var</span> dobjSource <span class="op">=</span> obj <span class="kw">as</span> DependencyObject<span class="op">;</span></span>
<span id="cb3-56"><a href="#cb3-56" aria-hidden="true" tabindex="-1"></a>                        <span class="dt">var</span> dobjTarget <span class="op">=</span> clone <span class="kw">as</span> DependencyObject<span class="op">;</span></span>
<span id="cb3-57"><a href="#cb3-57" aria-hidden="true" tabindex="-1"></a>                        <span class="kw">if</span> <span class="op">(</span>dobjSource <span class="op">!=</span> <span class="kw">null</span> <span class="op">&amp;&amp;</span> dobjTarget <span class="op">!=</span> <span class="kw">null</span><span class="op">)</span></span>
<span id="cb3-58"><a href="#cb3-58" aria-hidden="true" tabindex="-1"></a>                        <span class="op">{</span></span>
<span id="cb3-59"><a href="#cb3-59" aria-hidden="true" tabindex="-1"></a>                            <span class="dt">var</span> locallySetProperties <span class="op">=</span> </span>
<span id="cb3-60"><a href="#cb3-60" aria-hidden="true" tabindex="-1"></a>                                dobjSource<span class="op">.</span><span class="fu">GetLocalValueEnumerator</span><span class="op">();</span></span>
<span id="cb3-61"><a href="#cb3-61" aria-hidden="true" tabindex="-1"></a>                            <span class="kw">while</span> <span class="op">(</span>locallySetProperties<span class="op">.</span><span class="fu">MoveNext</span><span class="op">())</span></span>
<span id="cb3-62"><a href="#cb3-62" aria-hidden="true" tabindex="-1"></a>                            <span class="op">{</span></span>
<span id="cb3-63"><a href="#cb3-63" aria-hidden="true" tabindex="-1"></a>                                DependencyProperty dp <span class="op">=</span> </span>
<span id="cb3-64"><a href="#cb3-64" aria-hidden="true" tabindex="-1"></a>                                    locallySetProperties<span class="op">.</span><span class="fu">Current</span><span class="op">.</span><span class="fu">Property</span><span class="op">;</span></span>
<span id="cb3-65"><a href="#cb3-65" aria-hidden="true" tabindex="-1"></a>                                <span class="kw">if</span> <span class="op">(!</span>dp<span class="op">.</span><span class="fu">ReadOnly</span><span class="op">)</span></span>
<span id="cb3-66"><a href="#cb3-66" aria-hidden="true" tabindex="-1"></a>                                <span class="op">{</span></span>
<span id="cb3-67"><a href="#cb3-67" aria-hidden="true" tabindex="-1"></a>                                    dobjTarget<span class="op">.</span><span class="fu">SetValue</span><span class="op">(</span>dp<span class="op">,</span> dobjSource<span class="op">.</span><span class="fu">GetValue</span><span class="op">(</span>dp<span class="op">));</span></span>
<span id="cb3-68"><a href="#cb3-68" aria-hidden="true" tabindex="-1"></a>                                    usedNames<span class="op">.</span><span class="fu">Add</span><span class="op">(</span>dp<span class="op">.</span><span class="fu">Name</span><span class="op">);</span></span>
<span id="cb3-69"><a href="#cb3-69" aria-hidden="true" tabindex="-1"></a>                                <span class="op">}</span></span>
<span id="cb3-70"><a href="#cb3-70" aria-hidden="true" tabindex="-1"></a>                            <span class="op">}</span></span>
<span id="cb3-71"><a href="#cb3-71" aria-hidden="true" tabindex="-1"></a>                        <span class="op">}</span>                        </span>
<span id="cb3-72"><a href="#cb3-72" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-73"><a href="#cb3-73" aria-hidden="true" tabindex="-1"></a>                        <span class="co">// Getting all the public, non-static properties of the source</span></span>
<span id="cb3-74"><a href="#cb3-74" aria-hidden="true" tabindex="-1"></a>                        <span class="kw">foreach</span> <span class="op">(</span><span class="dt">var</span> pi <span class="kw">in</span> typ<span class="op">.</span><span class="fu">GetProperties</span><span class="op">(</span></span>
<span id="cb3-75"><a href="#cb3-75" aria-hidden="true" tabindex="-1"></a>                                            BindingFlags<span class="op">.</span><span class="fu">Instance</span> <span class="op">|</span> </span>
<span id="cb3-76"><a href="#cb3-76" aria-hidden="true" tabindex="-1"></a>                                            BindingFlags<span class="op">.</span><span class="fu">Public</span> <span class="op">|</span> </span>
<span id="cb3-77"><a href="#cb3-77" aria-hidden="true" tabindex="-1"></a>                                            BindingFlags<span class="op">.</span><span class="fu">FlattenHierarchy</span><span class="op">))</span></span>
<span id="cb3-78"><a href="#cb3-78" aria-hidden="true" tabindex="-1"></a>                        <span class="op">{</span></span>
<span id="cb3-79"><a href="#cb3-79" aria-hidden="true" tabindex="-1"></a>                            <span class="co">// If it is not a dependency property </span></span>
<span id="cb3-80"><a href="#cb3-80" aria-hidden="true" tabindex="-1"></a>                            <span class="co">// and not the default property...</span></span>
<span id="cb3-81"><a href="#cb3-81" aria-hidden="true" tabindex="-1"></a>                            <span class="kw">if</span> <span class="op">(</span>pi<span class="op">.</span><span class="fu">CanRead</span> <span class="op">&amp;&amp;</span></span>
<span id="cb3-82"><a href="#cb3-82" aria-hidden="true" tabindex="-1"></a>                                <span class="op">!</span>usedNames<span class="op">.</span><span class="fu">Contains</span><span class="op">(</span>pi<span class="op">.</span><span class="fu">Name</span><span class="op">)</span> <span class="op">&amp;&amp;</span></span>
<span id="cb3-83"><a href="#cb3-83" aria-hidden="true" tabindex="-1"></a>                                <span class="op">!</span><span class="fu">IsDependencyProperty</span><span class="op">(</span>dobjSource<span class="op">,</span> pi<span class="op">)</span> <span class="op">&amp;&amp;</span></span>
<span id="cb3-84"><a href="#cb3-84" aria-hidden="true" tabindex="-1"></a>                                pi<span class="op">.</span><span class="fu">Name</span> <span class="op">!=</span> <span class="st">&quot;Item&quot;</span><span class="op">)</span></span>
<span id="cb3-85"><a href="#cb3-85" aria-hidden="true" tabindex="-1"></a>                            <span class="op">{</span>                                    </span>
<span id="cb3-86"><a href="#cb3-86" aria-hidden="true" tabindex="-1"></a>                                <span class="dt">var</span> val <span class="op">=</span> pi<span class="op">.</span><span class="fu">GetValue</span><span class="op">(</span>obj<span class="op">,</span> <span class="kw">null</span><span class="op">);</span></span>
<span id="cb3-87"><a href="#cb3-87" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-88"><a href="#cb3-88" aria-hidden="true" tabindex="-1"></a>                                <span class="co">// ..and it is writeable, then we recursively clone </span></span>
<span id="cb3-89"><a href="#cb3-89" aria-hidden="true" tabindex="-1"></a>                                <span class="co">// the value and set the property:</span></span>
<span id="cb3-90"><a href="#cb3-90" aria-hidden="true" tabindex="-1"></a>                                <span class="kw">if</span> <span class="op">(</span>pi<span class="op">.</span><span class="fu">CanWrite</span><span class="op">)</span></span>
<span id="cb3-91"><a href="#cb3-91" aria-hidden="true" tabindex="-1"></a>                                <span class="op">{</span>                                        </span>
<span id="cb3-92"><a href="#cb3-92" aria-hidden="true" tabindex="-1"></a>                                    pi<span class="op">.</span><span class="fu">SetValue</span><span class="op">(</span>clone<span class="op">,</span> <span class="fu">DeepClone</span><span class="op">(</span>val<span class="op">),</span> <span class="kw">null</span><span class="op">);</span></span>
<span id="cb3-93"><a href="#cb3-93" aria-hidden="true" tabindex="-1"></a>                                <span class="op">}</span></span>
<span id="cb3-94"><a href="#cb3-94" aria-hidden="true" tabindex="-1"></a>                                <span class="kw">else</span></span>
<span id="cb3-95"><a href="#cb3-95" aria-hidden="true" tabindex="-1"></a>                                <span class="op">{</span></span>
<span id="cb3-96"><a href="#cb3-96" aria-hidden="true" tabindex="-1"></a>                                    <span class="co">// ..otherwise if it is a readonly list property, </span></span>
<span id="cb3-97"><a href="#cb3-97" aria-hidden="true" tabindex="-1"></a>                                    <span class="co">// go through each item,  clone it and add to </span></span>
<span id="cb3-98"><a href="#cb3-98" aria-hidden="true" tabindex="-1"></a>                                    <span class="co">// the clone&#39;s list property</span></span>
<span id="cb3-99"><a href="#cb3-99" aria-hidden="true" tabindex="-1"></a>                                    <span class="kw">if</span> <span class="op">(</span>pi<span class="op">.</span><span class="fu">PropertyType</span></span>
<span id="cb3-100"><a href="#cb3-100" aria-hidden="true" tabindex="-1"></a>                                          <span class="op">.</span><span class="fu">GetInterfaces</span><span class="op">()</span></span>
<span id="cb3-101"><a href="#cb3-101" aria-hidden="true" tabindex="-1"></a>                                          <span class="op">.</span><span class="fu">Contains</span><span class="op">(</span><span class="kw">typeof</span> <span class="op">(</span>IList<span class="op">)))</span></span>
<span id="cb3-102"><a href="#cb3-102" aria-hidden="true" tabindex="-1"></a>                                    <span class="op">{</span></span>
<span id="cb3-103"><a href="#cb3-103" aria-hidden="true" tabindex="-1"></a>                                        <span class="dt">var</span> source <span class="op">=</span> val <span class="kw">as</span> IList<span class="op">;</span></span>
<span id="cb3-104"><a href="#cb3-104" aria-hidden="true" tabindex="-1"></a>                                        <span class="dt">var</span> target <span class="op">=</span> pi<span class="op">.</span><span class="fu">GetValue</span><span class="op">(</span>clone<span class="op">,</span> <span class="kw">null</span><span class="op">)</span> <span class="kw">as</span> IList<span class="op">;</span></span>
<span id="cb3-105"><a href="#cb3-105" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-106"><a href="#cb3-106" aria-hidden="true" tabindex="-1"></a>                                        <span class="kw">if</span> <span class="op">(</span>source <span class="op">!=</span> <span class="kw">null</span> <span class="op">&amp;&amp;</span> target <span class="op">!=</span> <span class="kw">null</span><span class="op">)</span></span>
<span id="cb3-107"><a href="#cb3-107" aria-hidden="true" tabindex="-1"></a>                                        <span class="op">{</span></span>
<span id="cb3-108"><a href="#cb3-108" aria-hidden="true" tabindex="-1"></a>                                            <span class="kw">foreach</span> <span class="op">(</span><span class="dt">var</span> item <span class="kw">in</span> source<span class="op">)</span></span>
<span id="cb3-109"><a href="#cb3-109" aria-hidden="true" tabindex="-1"></a>                                                target<span class="op">.</span><span class="fu">Add</span><span class="op">(</span><span class="fu">DeepClone</span><span class="op">(</span>item<span class="op">));</span></span>
<span id="cb3-110"><a href="#cb3-110" aria-hidden="true" tabindex="-1"></a>                                        <span class="op">}</span></span>
<span id="cb3-111"><a href="#cb3-111" aria-hidden="true" tabindex="-1"></a>                                    <span class="op">}</span></span>
<span id="cb3-112"><a href="#cb3-112" aria-hidden="true" tabindex="-1"></a>                                <span class="op">}</span></span>
<span id="cb3-113"><a href="#cb3-113" aria-hidden="true" tabindex="-1"></a>                            <span class="op">}</span></span>
<span id="cb3-114"><a href="#cb3-114" aria-hidden="true" tabindex="-1"></a>                        <span class="op">}</span>                        </span>
<span id="cb3-115"><a href="#cb3-115" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-116"><a href="#cb3-116" aria-hidden="true" tabindex="-1"></a>                        <span class="kw">return</span> clone<span class="op">;</span></span>
<span id="cb3-117"><a href="#cb3-117" aria-hidden="true" tabindex="-1"></a>                    <span class="op">}</span></span>
<span id="cb3-118"><a href="#cb3-118" aria-hidden="true" tabindex="-1"></a>                <span class="op">}</span></span>
<span id="cb3-119"><a href="#cb3-119" aria-hidden="true" tabindex="-1"></a>            <span class="op">}</span></span>
<span id="cb3-120"><a href="#cb3-120" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span>
<span id="cb3-121"><a href="#cb3-121" aria-hidden="true" tabindex="-1"></a>        <span class="kw">else</span></span>
<span id="cb3-122"><a href="#cb3-122" aria-hidden="true" tabindex="-1"></a>        <span class="op">{</span></span>
<span id="cb3-123"><a href="#cb3-123" aria-hidden="true" tabindex="-1"></a>            <span class="kw">return</span> <span class="kw">null</span><span class="op">;</span></span>
<span id="cb3-124"><a href="#cb3-124" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span>
<span id="cb3-125"><a href="#cb3-125" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span>    </span>
<span id="cb3-126"><a href="#cb3-126" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-127"><a href="#cb3-127" aria-hidden="true" tabindex="-1"></a>    <span class="co">/// </span><span class="kw">&lt;summary&gt;</span></span>
<span id="cb3-128"><a href="#cb3-128" aria-hidden="true" tabindex="-1"></a>    <span class="co">/// Tries to determine if a property is a dependency property, by reflection and </span></span>
<span id="cb3-129"><a href="#cb3-129" aria-hidden="true" tabindex="-1"></a>    <span class="co">/// naming convention</span></span>
<span id="cb3-130"><a href="#cb3-130" aria-hidden="true" tabindex="-1"></a>    <span class="co">/// </span><span class="kw">&lt;/summary&gt;</span></span>
<span id="cb3-131"><a href="#cb3-131" aria-hidden="true" tabindex="-1"></a>    <span class="co">/// </span><span class="kw">&lt;param</span><span class="ot"> name=</span><span class="dt">&quot;dobj&quot;</span><span class="kw">&gt;</span><span class="co">Dependency object</span></span>
<span id="cb3-132"><a href="#cb3-132" aria-hidden="true" tabindex="-1"></a>    <span class="co">/// </span><span class="kw">&lt;param</span><span class="ot"> name=</span><span class="dt">&quot;pi&quot;</span><span class="kw">&gt;</span><span class="co">Property info</span></span>
<span id="cb3-133"><a href="#cb3-133" aria-hidden="true" tabindex="-1"></a>    <span class="co">/// </span><span class="kw">&lt;returns&gt;</span><span class="co">Returns </span><span class="kw">&lt;c&gt;</span><span class="co">true</span><span class="kw">&lt;/c&gt;</span><span class="co"> if the given property seems to be a </span></span>
<span id="cb3-134"><a href="#cb3-134" aria-hidden="true" tabindex="-1"></a>    <span class="co">///          CLR access property for a dependency property.</span><span class="kw">&lt;/returns&gt;</span></span>
<span id="cb3-135"><a href="#cb3-135" aria-hidden="true" tabindex="-1"></a>    <span class="kw">private</span> <span class="kw">static</span> <span class="dt">bool</span> <span class="fu">IsDependencyProperty</span><span class="op">(</span>DependencyObject dobj<span class="op">,</span> PropertyInfo pi<span class="op">)</span></span>
<span id="cb3-136"><a href="#cb3-136" aria-hidden="true" tabindex="-1"></a>    <span class="op">{</span></span>
<span id="cb3-137"><a href="#cb3-137" aria-hidden="true" tabindex="-1"></a>        <span class="kw">if</span> <span class="op">(</span>dobj <span class="op">!=</span> <span class="kw">null</span><span class="op">)</span></span>
<span id="cb3-138"><a href="#cb3-138" aria-hidden="true" tabindex="-1"></a>        <span class="op">{</span></span>
<span id="cb3-139"><a href="#cb3-139" aria-hidden="true" tabindex="-1"></a>            <span class="dt">var</span> dpProp <span class="op">=</span> dobj<span class="op">.</span><span class="fu">GetType</span><span class="op">().</span><span class="fu">GetProperty</span><span class="op">(</span>pi<span class="op">.</span><span class="fu">Name</span> <span class="op">+</span> <span class="st">&quot;Property&quot;</span><span class="op">,</span> </span>
<span id="cb3-140"><a href="#cb3-140" aria-hidden="true" tabindex="-1"></a>                                                    BindingFlags<span class="op">.</span><span class="fu">Static</span> <span class="op">|</span></span>
<span id="cb3-141"><a href="#cb3-141" aria-hidden="true" tabindex="-1"></a>                                                    BindingFlags<span class="op">.</span><span class="fu">Public</span> <span class="op">|</span></span>
<span id="cb3-142"><a href="#cb3-142" aria-hidden="true" tabindex="-1"></a>                                                    BindingFlags<span class="op">.</span><span class="fu">FlattenHierarchy</span><span class="op">);</span></span>
<span id="cb3-143"><a href="#cb3-143" aria-hidden="true" tabindex="-1"></a>            <span class="kw">if</span> <span class="op">(</span>dpProp <span class="op">!=</span> <span class="kw">null</span> <span class="op">&amp;&amp;</span> dpProp<span class="op">.</span><span class="fu">PropertyType</span> <span class="op">==</span> <span class="kw">typeof</span> <span class="op">(</span>DependencyProperty<span class="op">))</span></span>
<span id="cb3-144"><a href="#cb3-144" aria-hidden="true" tabindex="-1"></a>                <span class="kw">return</span> <span class="kw">true</span><span class="op">;</span></span>
<span id="cb3-145"><a href="#cb3-145" aria-hidden="true" tabindex="-1"></a>            <span class="kw">else</span></span>
<span id="cb3-146"><a href="#cb3-146" aria-hidden="true" tabindex="-1"></a>            <span class="op">{</span></span>
<span id="cb3-147"><a href="#cb3-147" aria-hidden="true" tabindex="-1"></a>                <span class="dt">var</span> dpField <span class="op">=</span> dobj<span class="op">.</span><span class="fu">GetType</span><span class="op">().</span><span class="fu">GetField</span><span class="op">(</span>pi<span class="op">.</span><span class="fu">Name</span> <span class="op">+</span> <span class="st">&quot;Property&quot;</span><span class="op">,</span> </span>
<span id="cb3-148"><a href="#cb3-148" aria-hidden="true" tabindex="-1"></a>                                                      BindingFlags<span class="op">.</span><span class="fu">Static</span> <span class="op">|</span> </span>
<span id="cb3-149"><a href="#cb3-149" aria-hidden="true" tabindex="-1"></a>                                                      BindingFlags<span class="op">.</span><span class="fu">Public</span> <span class="op">|</span> </span>
<span id="cb3-150"><a href="#cb3-150" aria-hidden="true" tabindex="-1"></a>                                                      BindingFlags<span class="op">.</span><span class="fu">FlattenHierarchy</span><span class="op">);</span></span>
<span id="cb3-151"><a href="#cb3-151" aria-hidden="true" tabindex="-1"></a>                <span class="kw">if</span> <span class="op">(</span>dpField <span class="op">!=</span> <span class="kw">null</span> <span class="op">&amp;&amp;</span> </span>
<span id="cb3-152"><a href="#cb3-152" aria-hidden="true" tabindex="-1"></a>                    dpField<span class="op">.</span><span class="fu">FieldType</span> <span class="op">==</span> <span class="kw">typeof</span> <span class="op">(</span>DependencyProperty<span class="op">)</span> <span class="op">&amp;&amp;</span> </span>
<span id="cb3-153"><a href="#cb3-153" aria-hidden="true" tabindex="-1"></a>                    dpField<span class="op">.</span><span class="fu">IsInitOnly</span> <span class="op">&amp;&amp;</span> dpField<span class="op">.</span><span class="fu">IsStatic</span><span class="op">)</span></span>
<span id="cb3-154"><a href="#cb3-154" aria-hidden="true" tabindex="-1"></a>                    <span class="kw">return</span> <span class="kw">true</span><span class="op">;</span></span>
<span id="cb3-155"><a href="#cb3-155" aria-hidden="true" tabindex="-1"></a>            <span class="op">}</span></span>
<span id="cb3-156"><a href="#cb3-156" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span>        </span>
<span id="cb3-157"><a href="#cb3-157" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-158"><a href="#cb3-158" aria-hidden="true" tabindex="-1"></a>        <span class="kw">return</span> <span class="kw">false</span><span class="op">;</span></span>
<span id="cb3-159"><a href="#cb3-159" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb3-160"><a href="#cb3-160" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
]]></summary>
</entry>

</feed>
