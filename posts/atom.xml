<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <title>vigoo&#x27;s software development blog - Posts</title>
    <link rel="self" type="application/atom+xml" href="https://blog.vigoo.dev/posts/atom.xml"/>
    <link rel="alternate" type="text/html" href="https://blog.vigoo.dev/posts/"/>
    <generator uri="https://www.getzola.org/">Zola</generator>
    <updated>2025-09-19T00:00:00+00:00</updated>
    <id>https://blog.vigoo.dev/posts/atom.xml</id>
    <entry xml:lang="en">
        <title>Golem 1.3&#x27;s new JavaScript engine</title>
        <published>2025-09-19T00:00:00+00:00</published>
        <updated>2025-09-19T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Daniel Vigovszky
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://blog.vigoo.dev/posts/golem-new-js-engine/"/>
        <id>https://blog.vigoo.dev/posts/golem-new-js-engine/</id>
        
        <content type="html" xml:base="https://blog.vigoo.dev/posts/golem-new-js-engine/">&lt;p&gt;As we are rapidly approaching the release data for Golem 1.3, a major update, I&#x27;m going to publish a series of small posts talking about some of the technical details of this new release. In this first one, let&#x27;s talk about the &lt;em&gt;new JavaScript engine&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;javascript-support-in-previous-versions&quot;&gt;JavaScript support in previous versions&lt;&#x2F;h2&gt;
&lt;p&gt;In previous Golem versions we tried to support JavaScript (and TypeScript) using the &quot;official&quot; way of using these languages in the WASM Component Model: using the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bytecodealliance&#x2F;ComponentizeJS&quot;&gt;ComponentizeJs project&lt;&#x2F;a&gt;. This embeds a special version of the &lt;a href=&quot;https:&#x2F;&#x2F;spidermonkey.dev&quot;&gt;SpiderMonkey JS engine&lt;&#x2F;a&gt;, called StarlingMonkey in a WASM component together with the user&#x27;s JS code, and generates import and export bindings based on the component model interface definition (WIT). In addition to this, ComponentizeJs also does a &lt;em&gt;preinitialization step&lt;&#x2F;em&gt; - basically pre-running and snapshotting parts of the resulting component compile time to make the component&#x27;s initialization time quicker.&lt;&#x2F;p&gt;
&lt;p&gt;Although this all sounds very good, this project is still considered &lt;em&gt;experimental&lt;&#x2F;em&gt; and we ran into serious issues with it, especially around it&#x27;s implementation of &lt;code&gt;fetch&lt;&#x2F;code&gt; and async boundaries. We reported these issues, and also tried to fix some of them ourselves, but working on this project is extremely difficult and we did not reach a point where our users would be guaranteed to be able to build on top of these core JS APIs.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-new-engine&quot;&gt;The new engine&lt;&#x2F;h2&gt;
&lt;p&gt;Instead trying to fix ComponentizeJs or waiting for others to do so, we decided to try to &lt;em&gt;replace it&lt;&#x2F;em&gt; for the next Golem release. This worked out so well that we were able to refocus our language support to be primarily TypeScript for the next release.&lt;&#x2F;p&gt;
&lt;p&gt;So what did I do?&lt;&#x2F;p&gt;
&lt;p&gt;The goal was to have a similar solution - take the user&#x27;s JS and an interface definition (&lt;a href=&quot;https:&#x2F;&#x2F;component-model.bytecodealliance.org&#x2F;design&#x2F;wit.html&quot;&gt;WIT&lt;&#x2F;a&gt;) and get a WebAssembly component implementing this interface by running the user&#x27;s JavaScript code. But we wanted something that is significantly easier to work with, and easier to extend with more and more &quot;build-in&quot; JS APIs. This is important for us as we want people to be able to use as many existing libraries in their Golem applications as possible. There must be a trade-off somewhere, of course - and there are two that I&#x27;m going to talk about in details. First, our new engine supposed to have worse performance than ComponentizeJs, although it has not been benchmarked yet; and the second one is the need of a Rust compiler toolchain to convert the JavaScript code to WASM. This, however, is not affecting Golem users due to some other changes we introduced; more about it later.&lt;&#x2F;p&gt;
&lt;p&gt;So with all these constraints, I ended up creating &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;golemcloud&#x2F;wasm-rquickjs&quot;&gt;wasm-rquickjs&lt;&#x2F;a&gt;, with the following properties:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;It&#x27;s built on the &lt;a href=&quot;https:&#x2F;&#x2F;quickjs-ng.github.io&#x2F;quickjs&#x2F;&quot;&gt;QuickJS-NG engine&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;But, to make it much easier to maintain and extend, it is using this engine through Rust, using the excellent &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;DelSkayn&#x2F;rquickjs&quot;&gt;rquickjs crate&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;It generates glue code to bridge the JS world with the Rust bindings generated by &lt;code&gt;wit-bindgen-rust&lt;&#x2F;code&gt; for the component model exports and imports&lt;&#x2F;li&gt;
&lt;li&gt;And also defines a growing set of built-in JS APIs, some implemented from scratch, others by taking various open-source polyfill libraries&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The result is a CLI tool (&lt;code&gt;wasm-rquickjs-cli&lt;&#x2F;code&gt;) and embeddable Rust library that can take a WIT world, a JS file, and ends up generating a standalone Rust crate that, when compiled using &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bytecodealliance&#x2F;cargo-component&quot;&gt;cargo-component&lt;&#x2F;a&gt;, emits the WASM that we need.&lt;&#x2F;p&gt;
&lt;p&gt;It also support emitting TypeScript module definitions for all the imports and exports of the component.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;details&quot;&gt;Details&lt;&#x2F;h2&gt;
&lt;p&gt;To understand why I chose to go with generating Rust crates and using the above mentioned &lt;code&gt;rquickjs&lt;&#x2F;code&gt; library, let&#x27;s take a closer look at how things are done within &lt;code&gt;wasm-rquickjs&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;defining-built-in-apis&quot;&gt;Defining built-in APIs&lt;&#x2F;h3&gt;
&lt;p&gt;We wanted to be able to easily increase the set of supported built-in APIs to have increased compatibility with the existing JS ecosystem. Some of these APIs can be introduced with pure JS polyfill libraries, but many of them requires to be somehow implemented on top of imported WebAssemby system interfaces (WASI). A good example can be implementing (a subset of) the &lt;code&gt;node:fs&lt;&#x2F;code&gt; API to work with files and filesystems.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;code&gt;rquickjs&lt;&#x2F;code&gt; crate really makes this very easy to do - it has a convenient way to bind native Rust functions into the JavaScript context, and it also solves the difficult problem of bridging the world of JS promises with &lt;em&gt;async Rust&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;This means we can write Rust functions in which we can use the Rust standard library or any other imported WIT bindings and then call these functions from JS. For example we can define a &lt;code&gt;read_file&lt;&#x2F;code&gt; function that exposes &lt;code&gt;std::fs::read&lt;&#x2F;code&gt; for JavaScript:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;rquickjs&lt;&#x2F;span&gt;&lt;span&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;function&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;read_file&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;path&lt;&#x2F;span&gt;&lt;span&gt;: String, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;ctx&lt;&#x2F;span&gt;&lt;span&gt;: Ctx&amp;lt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;) -&amp;gt;   List&amp;lt;(Option&amp;lt;TypedArray&amp;lt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;gt;, Option&amp;lt;String&amp;gt;)&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; path &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;Path::new(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;path);
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;match &lt;&#x2F;span&gt;&lt;span&gt;std::fs::read(path) {
&lt;&#x2F;span&gt;&lt;span&gt;    Ok(bytes) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; typed_array &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span&gt;        TypedArray::new_copy(ctx.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;clone&lt;&#x2F;span&gt;&lt;span&gt;(), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;bytes)
&lt;&#x2F;span&gt;&lt;span&gt;          .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;expect&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;Failed to create TypedArray&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;      List((Some(typed_array), None))
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    Err(err) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; error_message &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;format!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;Failed to read file &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;{path:?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;{err}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;      List((None, Some(error_message)))
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Then the actual JavaScript API can be implemented in JS itself, using these native functions:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;js&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-js &quot;&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;export function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;readFile&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;path&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;optionsOrCallback&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;callback&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;    } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;contents&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;read_file&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;path&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;error &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;undefined&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;buffer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Buffer&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;from&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;contents&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;callback&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;buffer&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;        } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;callback&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;undefined&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This makes it really convenient to add support for more and more APIs, and as mentioned earlier, these native functions can be &lt;code&gt;async&lt;&#x2F;code&gt; Rust functions too, which simply translates to async JS functions.&lt;&#x2F;p&gt;
&lt;p&gt;For example, part of the &lt;code&gt;fetch&lt;&#x2F;code&gt; implementation is sending the request body asynchronously:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;js&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-js &quot;&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;async function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;sendBody&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;bodyWriter&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;body&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;reader &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;body&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;getReader&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;while &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;done&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= await &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;reader&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;read&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;done&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;break&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;await &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;bodyWriter&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;writeRequestBodyChunk&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;bodyWriter&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;finishBody&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;code&gt;writeRequestBodyChunk&lt;&#x2F;code&gt; method is a native Rust method defined like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;rquickjs&lt;&#x2F;span&gt;&lt;span&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;methods&lt;&#x2F;span&gt;&lt;span&gt;(rename_all &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;camelCase&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;WrappedRequestBodyWriter {
&lt;&#x2F;span&gt;&lt;span&gt;    #[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;qjs&lt;&#x2F;span&gt;&lt;span&gt;(constructor)]
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;new&lt;&#x2F;span&gt;&lt;span&gt;() -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Self &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        WrappedRequestBodyWriter { writer: None }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;pub&lt;&#x2F;span&gt;&lt;span&gt; async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;write_request_body_chunk&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;amp;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;chunk&lt;&#x2F;span&gt;&lt;span&gt;: TypedArray&amp;lt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;implementing-imports&quot;&gt;Implementing imports&lt;&#x2F;h3&gt;
&lt;p&gt;With the above technique, we could have a precompiled WASM JS engine that is capable of running user code while providing them a fix set of supported APIs. This is what a similar project, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;second-state&#x2F;wasmedge-quickjs&quot;&gt;wasmedge-quickjs&lt;&#x2F;a&gt; does.&lt;&#x2F;p&gt;
&lt;p&gt;But &lt;code&gt;wasm-rquickjs&lt;&#x2F;code&gt; does not stop here - it uses the same method of defining JS modules with native Rust bindings to define a JS module for &lt;em&gt;each imported WIT interface&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;So a code generator takes the WIT imports, and emits Rust code in the style of the above examples that exposes these WIT imports to JavaScript by calling the Rust WIT bindings, generated by &lt;code&gt;wit-bindgen-rust&lt;&#x2F;code&gt; (this happens automatically under the hood when using the already mentioned &lt;code&gt;cargo-component&lt;&#x2F;code&gt; build tool).&lt;&#x2F;p&gt;
&lt;p&gt;Every data type WIT supports is mapped to a specific JS construct, and &lt;em&gt;resources&lt;&#x2F;em&gt; are mapped to JS classes. The following example shows the generated function for one of the exported functions of &lt;code&gt;golem:llm&lt;&#x2F;code&gt; &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;golemcloud&#x2F;golem-ai&quot;&gt;from the Golem AI libraries&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;rquickjs&lt;&#x2F;span&gt;&lt;span&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;function&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;send&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;messages&lt;&#x2F;span&gt;&lt;span&gt;: Vec&amp;lt;crate::bindings::golem::llm::llm::Message&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;config&lt;&#x2F;span&gt;&lt;span&gt;: crate::bindings::golem::llm::llm::Config,
&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; crate::bindings::golem::llm::llm::ChatEvent {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; result: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;crate&lt;&#x2F;span&gt;&lt;span&gt;::bindings::golem::llm::llm::ChatEvent &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= crate&lt;&#x2F;span&gt;&lt;span&gt;::bindings::golem::llm::llm::send(
&lt;&#x2F;span&gt;&lt;span&gt;        messages.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;into_iter&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;v&lt;&#x2F;span&gt;&lt;span&gt;| v).collect::&amp;lt;Vec&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;as_slice&lt;&#x2F;span&gt;&lt;span&gt;(),
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;config,
&lt;&#x2F;span&gt;&lt;span&gt;    );
&lt;&#x2F;span&gt;&lt;span&gt;    result
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This simply uses &lt;code&gt;rquickjs&lt;&#x2F;code&gt;&#x27;s native binding macro to do the hard work, and calls the generated Rust bindings under the hood.&lt;&#x2F;p&gt;
&lt;p&gt;Of course to make this work, &lt;code&gt;rquickjs&lt;&#x2F;code&gt; also needs to know how to encode these data types, such as the LLM &lt;code&gt;Message&lt;&#x2F;code&gt;, as JS. So the code generator also emits instances of the &lt;code&gt;ToJs&lt;&#x2F;code&gt; and &lt;code&gt;FromJs&lt;&#x2F;code&gt; type classes, such as:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;impl&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;#39;js&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; rquickjs::IntoJs&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;#39;js&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;crate::bindings::golem::llm::llm::Message {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;into_js&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;ctx&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;rquickjs::Ctx&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;#39;js&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;  ) -&amp;gt; rquickjs::Result&amp;lt;rquickjs::Value&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;#39;js&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; obj &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;rquickjs::Object::new(ctx.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;clone&lt;&#x2F;span&gt;&lt;span&gt;())&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; role: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;crate&lt;&#x2F;span&gt;&lt;span&gt;::bindings::golem::llm::llm::Role &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.role;
&lt;&#x2F;span&gt;&lt;span&gt;    obj.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;set&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;role&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, role)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;    Ok(obj.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;into_value&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;impl&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;#39;js&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; rquickjs::FromJs&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;#39;js&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;crate::bindings::golem::llm::llm::Message {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;from_js&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_ctx&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;rquickjs::Ctx&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;#39;js&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;: rquickjs::Value&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;#39;js&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;  ) -&amp;gt; rquickjs::Result&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Self&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; obj &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;rquickjs::Object::from_value(value)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; role: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;crate&lt;&#x2F;span&gt;&lt;span&gt;::bindings::golem::llm::llm::Role &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; obj.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;role&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The main difficulty was not generating these JS mappings - it was matching the expected signatures of &lt;code&gt;wit-bindgen-rust&lt;&#x2F;code&gt;, as it has some complex rules for deciding when to pass things by value or by reference.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;implementing-exports&quot;&gt;Implementing exports&lt;&#x2F;h3&gt;
&lt;p&gt;For all the exported interfaces in a component&#x27;s WIT definition, &lt;code&gt;wit-bindgen-rust&lt;&#x2F;code&gt; generates a &lt;em&gt;trait&lt;&#x2F;em&gt; to be implemented. We expect the JS developers to implement all these imports with some well defined rules (interfaces becoming exported objects, kebab-case names becoming camel cased, etc.). With the assumption that the user&#x27;s JS code implements all the exports, &lt;code&gt;wasm-rquickjs&lt;&#x2F;code&gt; can generate implementations for these rust traits that are calling into the QuickJS engine, running these functions.&lt;&#x2F;p&gt;
&lt;p&gt;Part of the problem is very similar to what we have with imports - converting from the Rust types (coming from the WIT types) to JS types. This is done using the same conversion type classes we already talked about.&lt;&#x2F;p&gt;
&lt;p&gt;When setting up the JS context, we always store a reference to the user&#x27;s module in a global variable, so the generated export code can easily access it:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; module: Object &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; ctx.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;globals&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;userModule&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;expect&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;Failed to get userModule&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;There are similar global helper tables for tracking the class instances for WIT resource instances.&lt;&#x2F;p&gt;
&lt;p&gt;Once we have the module object, we can apply the naming rules and find the function value and call it with &lt;code&gt;rquickjs&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;call_with_this&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;#39;js&lt;&#x2F;span&gt;&lt;span&gt;, A, R&amp;gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;ctx&lt;&#x2F;span&gt;&lt;span&gt;: Ctx&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;#39;js&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;function&lt;&#x2F;span&gt;&lt;span&gt;: Function&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;#39;js&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;: Object&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;#39;js&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;args&lt;&#x2F;span&gt;&lt;span&gt;: A,
&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; rquickjs::Result&amp;lt;R&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;where
&lt;&#x2F;span&gt;&lt;span&gt;    A: IntoArgs&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;#39;js&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    R: FromJs&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;#39;js&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; num &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; args.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;num_args&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; accum_args &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;Args::new(ctx.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;clone&lt;&#x2F;span&gt;&lt;span&gt;(), num &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    accum_args.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;(this)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    args.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;into_args&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;amp;mut&lt;&#x2F;span&gt;&lt;span&gt; accum_args)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    function.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;call_arg&lt;&#x2F;span&gt;&lt;span&gt;(accum_args)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;A nice property we can offer is that we don&#x27;t have to constrain the user to always implement the exported functions as async JavaScript functions. We can simply check the return value before trying to convert it to the Rust equivalent whether it is a &lt;code&gt;Promise&lt;&#x2F;code&gt; or not. And if it is, we can just &lt;code&gt;await&lt;&#x2F;code&gt; it in the Rust code!&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; value.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;is_promise&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; promise: Promise &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; value.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;into_promise&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; promise_future &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; promise.into_future::&amp;lt;R&amp;gt;();
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt; promise_future.await {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;async-all-the-way-down&quot;&gt;Async all the way down&lt;&#x2F;h3&gt;
&lt;p&gt;This seamless integration of the JS and Rust async world is a key component in making &lt;code&gt;wasm-rquickjs&lt;&#x2F;code&gt; easy to work with. But it&#x27;s not enough that &lt;code&gt;rquickjs&lt;&#x2F;code&gt; implements the boundary between JS and Rust. The end result is a WASM component, which is single threaded and only provides a very specific set of system APIs to build on; we cannot just use Tokio for example as our Rust runtime (at the time of writing). At the bottom of all the Rust and JS async stacks, there is single small WASI API supporting all this: &lt;code&gt;wasi:io&#x2F;poll&lt;&#x2F;code&gt;. &lt;a href=&quot;https:&#x2F;&#x2F;blog.yoshuawuyts.com&#x2F;building-an-async-runtime-for-wasi&#x2F;&quot;&gt;Yoshua Wuyts has an excellent blog post&lt;&#x2F;a&gt; about the topic. &lt;code&gt;wasm-rquickjs&lt;&#x2F;code&gt; builds on his &lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;wasi-async-runtime&#x2F;latest&#x2F;wasi_async_runtime&#x2F;&quot;&gt;&lt;code&gt;wasi_async_runtime&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; crate (and soon will be migrated to the newer &lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;wstd&#x2F;latest&#x2F;wstd&#x2F;&quot;&gt;&lt;code&gt;wstd&lt;&#x2F;code&gt; crate&lt;&#x2F;a&gt;).&lt;&#x2F;p&gt;
&lt;h2 id=&quot;trade-offs&quot;&gt;Trade-offs&lt;&#x2F;h2&gt;
&lt;p&gt;As I mentioned in the introduction, this approach naturally comes with some trade-offs when comparing to ComponentizeJs.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;performance&quot;&gt;Performance&lt;&#x2F;h3&gt;
&lt;p&gt;We are not doing any precompilation at the moment, so component initialization time for bigger projects is definitely supposed to be slower. On the other hand the engine itself is much smaller than the modified SpiderMonkey in ComponentizeJs, so this may balance out the difference in some cases. I also expect SpiderMonkey to be faster in general than QuickJS, although this is not as clear &lt;a href=&quot;https:&#x2F;&#x2F;cfallin.org&#x2F;blog&#x2F;2023&#x2F;10&#x2F;11&#x2F;spidermonkey-pbl&#x2F;&quot;&gt;because SpiderMonkey also has to run in interpreter mode&lt;&#x2F;a&gt; on WASM.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;rust-compilation&quot;&gt;Rust compilation&lt;&#x2F;h3&gt;
&lt;p&gt;A more serious trade-off is that by generating a Rust crate, we force the JS&#x2F;TS users to have a Rust tool-chain available and compile these generated crates to WASM.&lt;&#x2F;p&gt;
&lt;p&gt;We&#x27;ve spent a lot of effort in the past year hiding the complexity of having these build tools, and especially having the &lt;em&gt;correct version&lt;&#x2F;em&gt; of WASM &#x2F; component model related tools automatically set up and invoked by hiding the component creating process in Golem&#x27;s own CLI interface.&lt;&#x2F;p&gt;
&lt;p&gt;Still, having to set up Rust to just run a simple JavaScript snippet on Golem is too much to ask. We worked around this issue by not allowing users to work directly on the component model level anymore - no WIT, no composition for them. This way we can embed a precompiled WASM binary in our tooling that can be combined with the user&#x27;s JavaScript code to form a final WASM component. I am going to write a separate post about this decision and its technical details.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;golemcloud&#x2F;wasm-rquickjs&#x2F;&quot;&gt;wasm-rquickjs&lt;&#x2F;a&gt; turned out to be a very capable alternative for ComponentizeJs, that is much easier to iterate on. It is a standalone project, completely usable outside of Golem; if the above two trade-offs are acceptable, it provides a nice experience of writing JavaScript or TypeScript code for the WASM Component Model.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>[Video] Missing Testing Features in Rust @ LambdaConf 2025</title>
        <published>2025-06-23T00:00:00+00:00</published>
        <updated>2025-06-23T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Daniel Vigovszky
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://blog.vigoo.dev/posts/missing-testing-features-in-rust/"/>
        <id>https://blog.vigoo.dev/posts/missing-testing-features-in-rust/</id>
        
        <content type="html" xml:base="https://blog.vigoo.dev/posts/missing-testing-features-in-rust/">&lt;p&gt;My talk at &lt;a href=&quot;https:&#x2F;&#x2F;www.lambdaconf.us&quot;&gt;LambdaConf 2025&lt;&#x2F;a&gt; about my Rust test framework &lt;a href=&quot;https:&#x2F;&#x2F;test-r.vigoo.dev&quot;&gt;test-r&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;iframe width=&quot;800&quot; height=&quot;450&quot; src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;Yf5oIj816mw?list=PL7DZ7q3nEWhwo2OmeaMzNggy7sof9qg5p&quot; title=&quot;Daniel Vigovszky - Missing Testing Features in Rust&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&quot; referrerpolicy=&quot;strict-origin-when-cross-origin&quot; allowfullscreen&gt;&lt;&#x2F;iframe&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>LambdaConf 2024-2025 - one year of Golem</title>
        <published>2025-05-13T00:00:00+00:00</published>
        <updated>2025-05-13T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Daniel Vigovszky
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://blog.vigoo.dev/posts/one-year-of-golem/"/>
        <id>https://blog.vigoo.dev/posts/one-year-of-golem/</id>
        
        <content type="html" xml:base="https://blog.vigoo.dev/posts/one-year-of-golem/">&lt;p&gt;I&#x27;m on the last LambdaConf at the moment, and exactly a year ago I gave a &lt;a href=&quot;&#x2F;posts&#x2F;golem-and-the-wasm-component-model&quot;&gt;talk about Golem on LambdaConf 2024&lt;&#x2F;a&gt;. Someone asked me what happened with Golem since then? So many things I could not properly answer. So here is a short summary of one year amount of Golem development, from LambdaConf 2024 to LambdaConf 2025.&lt;&#x2F;p&gt;
&lt;p&gt;We had a Golem Hackathon on last LambdaConf, and had a fresh release of Golem for it which we called &lt;strong&gt;Golem 0.0.100&lt;&#x2F;strong&gt;. We&#x27;ve spent the summer after that to prepare the first production ready release of Golem OSS, &lt;strong&gt;Golem 1.0&lt;&#x2F;strong&gt;, which we released 23th of August, 2024. In the few months between the hackathon and Golem 1.0, we made Golem&#x27;s oplog store more scalable, introduced &lt;em&gt;environment inheritance&lt;&#x2F;em&gt; between workers when they are spawned through RPC, added a worker scheduler that tracks worker memory usage and suspends workers when necessary to keep the system responsible. The stability of the executor itself has been improved significantly. We tried to make the CLI for 1.0 more user friendly, created precompiled binaries of it so users don&#x27;t have to compile it themselves, and created the first usable version of &lt;strong&gt;Rib&lt;&#x2F;strong&gt;, our scripting language used in Golem&#x27;s API gateway.&lt;&#x2F;p&gt;
&lt;p&gt;Rib itself did not stop there - we continued working on it in the rest of the year and it got much better type inference, error messages, new language features such as first-class worker support, list comprehensions and aggregations and so on.&lt;&#x2F;p&gt;
&lt;p&gt;Our next milestone was &lt;strong&gt;Golem 1.1&lt;&#x2F;strong&gt;, which has been released on the 9th of December, 2024. With this release we were no longer just targeting durable execution but realized that most applications also need components that are ephemeral - so we added support for &lt;strong&gt;ephemeral components&lt;&#x2F;strong&gt;, which are stateless programs getting a fresh instance for each incoming call. We added the concept of &lt;strong&gt;plugins&lt;&#x2F;strong&gt; in this release, although not fully complete yet, but with a vision of a future plugin ecosystem where these plugins can transform user&#x27;s components and observe the living workers realtime. The API gateway got support for things like &lt;strong&gt;authentication&lt;&#x2F;strong&gt; and &lt;strong&gt;CORS&lt;&#x2F;strong&gt;, and we created tools to better observe the Golem worker&#x27;s history by &lt;strong&gt;querying their oplog&lt;&#x2F;strong&gt; itself. This was the first release with the ability to add an &lt;strong&gt;initial file system&lt;&#x2F;strong&gt; for components.&lt;&#x2F;p&gt;
&lt;p&gt;We were trying to make it easier for users, especially if they are not Rust developers, to use Golem. So we created precompiled, downloadable &lt;strong&gt;single executable Golem versions&lt;&#x2F;strong&gt; for local development.&lt;&#x2F;p&gt;
&lt;p&gt;Golem 1.1 was also the first version introducing the &lt;strong&gt;Golem application manifest&lt;&#x2F;strong&gt;. This brings the concept of an &lt;em&gt;application&lt;&#x2F;em&gt;, consist of one or more components, with the ability to describe (RPC) &lt;strong&gt;dependencies&lt;&#x2F;strong&gt; between these components in a declarative way. This significantly simplified the way how these multi-component Golem applications are built, especially the iterative development process.&lt;&#x2F;p&gt;
&lt;p&gt;For &lt;strong&gt;Golem 1.2&lt;&#x2F;strong&gt; we decided to make this application manifest feature a core element of Golem development. We have redesigned the CLI to be based on the application concept, with single commands to build and deploy whole, multi-component Golem applications with support for dependencies between these components and allowing them to be written in different programming languages, even within a single application.&lt;&#x2F;p&gt;
&lt;p&gt;We also improved our RPC solution so it no longer requires a working Rust toolchain. Instead we are &lt;strong&gt;linking&lt;&#x2F;strong&gt; the RPC clients dynamically in the executor.&lt;&#x2F;p&gt;
&lt;p&gt;Other improvements added in the 3-4 months of development of Golem 1.2 consisted of the first version of Golem&#x27;s &lt;strong&gt;debugging&lt;&#x2F;strong&gt; service, which will allow interactive debug and observation of running workers once it is done. Other features helping with the debugging of Golem code are the support for &lt;strong&gt;reverting&lt;&#x2F;strong&gt; workers and cancel pending invocations. We have added support for special kind of workers implementing a HTTP &lt;strong&gt;request handler&lt;&#x2F;strong&gt; (using the wasi-http interface) that can be directly mapped in the API gateway to various endpoints, and get the whole incoming HTTP request to be processed in the worker itself. We also support now &lt;strong&gt;scheduling&lt;&#x2F;strong&gt; invocations (even through RPC) to be done at an arbitrary point in time instead of being executed immediately.&lt;&#x2F;p&gt;
&lt;p&gt;Golem 1.2 has been released on 27th of March, 2025.&lt;&#x2F;p&gt;
&lt;p&gt;In the roughly 1.5 months since then we were focusing on further improving the developer experience by updating our &lt;strong&gt;language support&lt;&#x2F;strong&gt; to the latest version of everything (especially the JavaScript and TypeScript, Python and Go tooling). We can now define &lt;em&gt;plugin installations&lt;&#x2F;em&gt; and &lt;em&gt;APIs&lt;&#x2F;em&gt; in the &lt;strong&gt;application manifest&lt;&#x2F;strong&gt; itself. We continued making the application manifest the primary way to work with Golem by further simplifying the CLI interface and enforcing that every Golem component is named the same as the WIT package it defines. We&#x27;ve introduced a &lt;strong&gt;new dependency type&lt;&#x2F;strong&gt; in the application manifest for directly depending on another WASM component, composing them build-time. This dependency type even supports downloading these WASM components from remote URLs, which is an nice way to use WASM components as language-independent libraries. The first such library we provide is &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;golemcloud&#x2F;golem-llm&quot;&gt;&lt;strong&gt;golem-llm&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;. The dependencies can now also added using a CLI command for those who prefer this method. In addition to that, we improved the CLI&#x27;s &lt;strong&gt;error messages&lt;&#x2F;strong&gt; significantly. Another small detail is that in Golem Cloud accounts can be now referenced by their &lt;strong&gt;e-mail address&lt;&#x2F;strong&gt;, which allows us to for example share a project with other accounts by using their e-mail. Another small improvement is the ability to define &lt;strong&gt;environment variables&lt;&#x2F;strong&gt; on a per-component level now (not just per worker). A nice new feature available for Golem programs is the ability to &lt;strong&gt;fork&lt;&#x2F;strong&gt; workers.&lt;&#x2F;p&gt;
&lt;p&gt;Rib continued to evolve, being more and more stable and having better error reporting. It is no longer just a scripting language to be used as glue code in the API gateway, but it is also integrated into the CLI as a &lt;strong&gt;REPL&lt;&#x2F;strong&gt;, a convenient way to interact with Golem workers.&lt;&#x2F;p&gt;
&lt;p&gt;All these DX improvements are going to be released today as &lt;strong&gt;Golem 1.2.2&lt;&#x2F;strong&gt;, the version to be used on the LambdaConf 2025 hackathon.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>[Video] Golem powered by WebAssembly @ Wasm I&#x2F;O 2025</title>
        <published>2025-04-04T00:00:00+00:00</published>
        <updated>2025-04-04T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Daniel Vigovszky
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://blog.vigoo.dev/posts/golem-powered-by-wasm/"/>
        <id>https://blog.vigoo.dev/posts/golem-powered-by-wasm/</id>
        
        <content type="html" xml:base="https://blog.vigoo.dev/posts/golem-powered-by-wasm/">&lt;p&gt;My talk at &lt;a href=&quot;https:&#x2F;&#x2F;www.wasm.io&quot;&gt;Wasm I&#x2F;O 2025&lt;&#x2F;a&gt; explaining how &lt;a href=&quot;https:&#x2F;&#x2F;golem.cloud&quot;&gt;Golem&lt;&#x2F;a&gt; is built on WebAssembly and the Component Model.&lt;&#x2F;p&gt;
&lt;iframe width=&quot;800&quot; height=&quot;450&quot; src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;_oEhuFjTyeQ?si=zYPcpJLasEBV-vGE&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&quot; referrerpolicy=&quot;strict-origin-when-cross-origin&quot; allowfullscreen&gt;&lt;&#x2F;iframe&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Durable Execution is not just for failures</title>
        <published>2025-03-28T00:00:00+00:00</published>
        <updated>2025-03-28T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Daniel Vigovszky
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://blog.vigoo.dev/posts/durable-execution-is-not-just-for-failures/"/>
        <id>https://blog.vigoo.dev/posts/durable-execution-is-not-just-for-failures/</id>
        
        <content type="html" xml:base="https://blog.vigoo.dev/posts/durable-execution-is-not-just-for-failures/">&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;&#x2F;h2&gt;
&lt;p&gt;When talking about &lt;a href=&quot;https:&#x2F;&#x2F;golem.cloud&quot;&gt;Golem&lt;&#x2F;a&gt; or other &lt;strong&gt;durable execution engines&lt;&#x2F;strong&gt; the most important property we are always pointing out is that by making the application &lt;em&gt;durable&lt;&#x2F;em&gt;, it can automatically survive various failure scenarios. In case of a transient error, or some other external event such as updating or restarting the underlying servers durable programs can survive by seamlessly continuing their execution from the point where they were interrupted, without any visible (except for some latency, of course) effect for the application&#x27;s users.&lt;&#x2F;p&gt;
&lt;p&gt;But having this core capability has many other interesting consequences.&lt;&#x2F;p&gt;
&lt;p&gt;A durable program can be dropped out of memory any time without having to explicitly save its state or shut it down in any way - and whenever it is needed it can be automatically recovered and it continues from where it left. The application developers can rely on very simple code storing everything in memory - as it is guaranteed that the in-memory state never gets lost.&lt;&#x2F;p&gt;
&lt;p&gt;If a &lt;strong&gt;Golem worker&lt;&#x2F;strong&gt; (a running durable program) is not performing any active job at the moment - for example it is waiting to be invoked, or waiting for some scheduled event - they automatically get dropped out of the executor&#x27;s memory to make space for other workers. This means we can have an (almost arbitrary) large number of &quot;running&quot; workers, if they are not performing CPU intensive tasks. Sure, having to continuously recover dropped out workers is affecting latency, but still, it means we can run these large number of simultaneous, stateful programs even on a locally started Golem on a developer machine.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;demo&quot;&gt;Demo&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;setting-it-up&quot;&gt;Setting it up&lt;&#x2F;h3&gt;
&lt;p&gt;In this short blog post we are going to demonstrate this. We are going to start the latest version of Golem (1.2) locally, then use the CLI (and some &lt;a href=&quot;https:&#x2F;&#x2F;www.nushell.sh&quot;&gt;Nushell&lt;&#x2F;a&gt; snippets) to build, deploy and run a large number of workers.&lt;&#x2F;p&gt;
&lt;p&gt;First we download the latest &lt;code&gt;golem&lt;&#x2F;code&gt; command line application &lt;a href=&quot;https:&#x2F;&#x2F;learn.golem.cloud&#x2F;quickstart&quot;&gt;according to Golem&#x27;s Quick Start pages&lt;&#x2F;a&gt;. With that we can start our local Golem cluster - all the core Golem services are integrated in this single &lt;code&gt;golem&lt;&#x2F;code&gt; binary:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;nu&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-nu &quot;&gt;&lt;code class=&quot;language-nu&quot; data-lang=&quot;nu&quot;&gt;&lt;span&gt;golem server run
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We are going to use the same &lt;code&gt;golem&lt;&#x2F;code&gt; CLI application to create, deploy and invoke Golem components.&lt;&#x2F;p&gt;
&lt;p&gt;Next we create a new &lt;em&gt;golem application&lt;&#x2F;em&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;nu&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-nu &quot;&gt;&lt;code class=&quot;language-nu&quot; data-lang=&quot;nu&quot;&gt;&lt;span&gt;golem app new manyworkers rust
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;2025-03-28&#x2F;1.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Golem comes with a set of &lt;strong&gt;components templates&lt;&#x2F;strong&gt; for all supported languages. One of these templates is a simple &lt;em&gt;shopping cart&lt;&#x2F;em&gt; implementation in Rust, where each Golem worker (running instance of this component) represents a single shopping cart, keeping its contents in memory.&lt;&#x2F;p&gt;
&lt;p&gt;We are going to create &lt;strong&gt;10&lt;&#x2F;strong&gt; (identical) versions of this template, simulating that we have more than one applications running in a cluster. Even though they are going to be exactly the same to keep the post simple, from Golem&#x27;s point of view it is going to be 10 different applications, compiled and deployed separately.&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s call the &lt;code&gt;golem component new&lt;&#x2F;code&gt; command 10 times in the newly generated application to set this up!&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;nu&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-nu &quot;&gt;&lt;code class=&quot;language-nu&quot; data-lang=&quot;nu&quot;&gt;&lt;span&gt;0..9 | each { |x| golem component new rust&#x2F;example-shopping-cart $&amp;quot;demo:cart(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;)&amp;quot; }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This command created 10 components in our application, with names &lt;code&gt;demo:cart0&lt;&#x2F;code&gt; to &lt;code&gt;demo:cart9&lt;&#x2F;code&gt;. First let&#x27;s build and deploy these components:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;nu&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-nu &quot;&gt;&lt;code class=&quot;language-nu&quot; data-lang=&quot;nu&quot;&gt;&lt;span&gt;golem app build
&lt;&#x2F;span&gt;&lt;span&gt;golem app deploy
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;2025-03-28&#x2F;2.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;To see the interface of this example, let&#x27;s query one using &lt;code&gt;component get&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;nu&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-nu &quot;&gt;&lt;code class=&quot;language-nu&quot; data-lang=&quot;nu&quot;&gt;&lt;span&gt;golem component get demo:cart0
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;2025-03-28&#x2F;3.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Before spawning our thousands of workers, we try out this exported interface by creating a single worker of &lt;code&gt;demo:cart0&lt;&#x2F;code&gt; called &lt;code&gt;test&lt;&#x2F;code&gt; and calling a few methods in it:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;nu&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-nu &quot;&gt;&lt;code class=&quot;language-nu&quot; data-lang=&quot;nu&quot;&gt;&lt;span&gt; golem worker invoke demo:cart0&#x2F;test initialize-cart &amp;#39;&amp;quot;user1&amp;quot;&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;2025-03-28&#x2F;4.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;nu&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-nu &quot;&gt;&lt;code class=&quot;language-nu&quot; data-lang=&quot;nu&quot;&gt;&lt;span&gt;golem worker invoke demo:cart0&#x2F;test add-item &amp;#39;{ product-id: &amp;quot;p1&amp;quot;, name: &amp;quot;Example product&amp;quot;, price: 1000.0, quantity: 2 }&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;2025-03-28&#x2F;5.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;nu&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-nu &quot;&gt;&lt;code class=&quot;language-nu&quot; data-lang=&quot;nu&quot;&gt;&lt;span&gt;golem worker invoke demo:cart0&#x2F;test get-cart-contents
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;2025-03-28&#x2F;6.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;For some more context, we can also check the size of the compiled WASM files (we were doing a debug build so they are relatively large) for these components:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;2025-03-28&#x2F;7.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;We can also query metadata of the created worker to get the same size information, and it also going to tell us the amount of &lt;strong&gt;memory&lt;&#x2F;strong&gt; the instance allocates on startup:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;nu&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-nu &quot;&gt;&lt;code class=&quot;language-nu&quot; data-lang=&quot;nu&quot;&gt;&lt;span&gt;golem worker get demo:cart0&#x2F;test
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;2025-03-28&#x2F;9.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;And we can query the test worker&#x27;s &lt;em&gt;oplog&lt;&#x2F;em&gt; to get an idea of how much additional memory it allocated dynamically runtime:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;nu&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-nu &quot;&gt;&lt;code class=&quot;language-nu&quot; data-lang=&quot;nu&quot;&gt;&lt;span&gt;golem worker oplog demo:cart0&#x2F;test --query memory
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;2025-03-28&#x2F;8.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;spawning-many-workers&quot;&gt;Spawning many workers&lt;&#x2F;h3&gt;
&lt;p&gt;Now that we have seen how a single worker looks like, let&#x27;s spawn 1000 workers of each test component. This is going to take some time as it actually &lt;strong&gt;instantiates&lt;&#x2F;strong&gt; the WASM program for each to make the initial two invocations.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;nu&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-nu &quot;&gt;&lt;code class=&quot;language-nu&quot; data-lang=&quot;nu&quot;&gt;&lt;span&gt;mut j = 0;
&lt;&#x2F;span&gt;&lt;span&gt;loop {
&lt;&#x2F;span&gt;&lt;span&gt;    mut i = 0;
&lt;&#x2F;span&gt;&lt;span&gt;    loop {
&lt;&#x2F;span&gt;&lt;span&gt;           golem worker new $&amp;quot;demo:cart(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span&gt;)&#x2F;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;j&lt;&#x2F;span&gt;&lt;span&gt;)&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;           golem worker invoke $&amp;quot;demo:cart(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span&gt;)&#x2F;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;j&lt;&#x2F;span&gt;&lt;span&gt;)&amp;quot; initialize-cart &amp;#39;&amp;quot;user1&amp;quot;&amp;#39;;
&lt;&#x2F;span&gt;&lt;span&gt;           golem worker invoke $&amp;quot;demo:cart(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span&gt;)&#x2F;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;j&lt;&#x2F;span&gt;&lt;span&gt;)&amp;quot; add-item $&amp;quot;{ product-id: \&amp;quot;p1\&amp;quot;, name: \&amp;quot;Example product (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;j&lt;&#x2F;span&gt;&lt;span&gt;)&#x2F;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span&gt;)\&amp;quot;, price: 1000.0, quantity: 2 }&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;           
&lt;&#x2F;span&gt;&lt;span&gt;           &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;if $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span&gt; &amp;gt;= 9 { break; };
&lt;&#x2F;span&gt;&lt;span&gt;           &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span&gt; = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span&gt; + 1;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;if $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;j&lt;&#x2F;span&gt;&lt;span&gt; &amp;gt;= 999 { break; };
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;j&lt;&#x2F;span&gt;&lt;span&gt; = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;j&lt;&#x2F;span&gt;&lt;span&gt; + 1;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;After that, we have 10000 &quot;running&quot; workers (all idle, waiting for a next invocation). We can check by listing for example one of the component&#x27;s workers:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;nu&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-nu &quot;&gt;&lt;code class=&quot;language-nu&quot; data-lang=&quot;nu&quot;&gt;&lt;span&gt;golem worker list demo:cart5
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;2025-03-28&#x2F;10.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Of course only some of these workers (the last accessed ones) are really in the locally running executor&#x27;s memory. Whenever a worker that&#x27;s not in memory is going to be accessed, it is loaded and its state is transparently restored before it gets the request. Golem is tracking the resource usage of its running components and if there is not enough memory to load the new component, an old one is going to be dropped out.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;trying-it-out&quot;&gt;Trying it out&lt;&#x2F;h3&gt;
&lt;p&gt;To demonstrate this, we can just invoke workers randomly from the 10000 we&#x27;ve created:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;2025-03-28&#x2F;11.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Thanks to the durable execution model, every one of the 10000 workers react just as if it was running.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Using MoonBit with Golem Cloud</title>
        <published>2025-01-03T00:00:00+00:00</published>
        <updated>2025-01-03T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Daniel Vigovszky
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://blog.vigoo.dev/posts/moonbit-with-golem/"/>
        <id>https://blog.vigoo.dev/posts/moonbit-with-golem/</id>
        
        <content type="html" xml:base="https://blog.vigoo.dev/posts/moonbit-with-golem/">&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.moonbitlang.com&quot;&gt;MoonBit&lt;&#x2F;a&gt;, a new programming language has been open sourced a few weeks ago - see &lt;a href=&quot;https:&#x2F;&#x2F;www.moonbitlang.com&#x2F;blog&#x2F;compiler-opensource&quot;&gt;this blog post&lt;&#x2F;a&gt;. MoonBit is an exciting modern programming language that natively supports WebAssembly, including the component model - this makes it a perfect fit for writing applications for &lt;a href=&quot;https:&#x2F;&#x2F;golem.cloud&quot;&gt;Golem Cloud&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;In this post I&#x27;m exploring the current state of MoonBit and whether it is ready for writing Golem components, by implementing an example application more complex than a simple &quot;hello world&quot; example.&lt;&#x2F;p&gt;
&lt;p&gt;The application to be implemented is a simple collaborative list editor - on the &lt;a href=&quot;https:&#x2F;&#x2F;youtu.be&#x2F;11Cig1iH6S0&quot;&gt;launch event of Golem 1.0&lt;&#x2F;a&gt; I have live-coded the same example using three different programming languages (TypeScript, Rust and Go) for the three main modules it requires. In this post I am implementing all three using &lt;strong&gt;MoonBit&lt;&#x2F;strong&gt;, including the e-mail sending feature that was omitted from the live demo due to time constraints.&lt;&#x2F;p&gt;
&lt;p&gt;The application can handle an arbitrary number of simultaneously open &lt;strong&gt;lists&lt;&#x2F;strong&gt;. Each list consists of a list of string items. These items can be appended, inserted and deleted simultaneously by multiple users; the current list state can be queried any time, as well as the active connections (users who can perform editing operations on the list). Modification is only allowed for connected editors, and there is a &lt;code&gt;poll&lt;&#x2F;code&gt; function exposed for them which returns the new changes since the last poll call. Lists can be archived, in which case they are no longer editable and their contents are saved in a separate &lt;strong&gt;list archive&lt;&#x2F;strong&gt;. Then the list itself can be deleted, its last state remains stored forever in the archive. An additional feature is that if a list is &lt;em&gt;not archived&lt;&#x2F;em&gt; and there were no changes for a certain period of time, all the connected editors are notified by sending an &lt;strong&gt;email&lt;&#x2F;strong&gt; to them.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;golem-architecture&quot;&gt;Golem Architecture&lt;&#x2F;h2&gt;
&lt;p&gt;In Golem a good architecture to run this is to have three different &lt;strong&gt;golem components&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;the list&lt;&#x2F;li&gt;
&lt;li&gt;the archive&lt;&#x2F;li&gt;
&lt;li&gt;the email notifier&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;These are compiled WebAssembly components, each exporting a distinct set of functions. Golem provides APIs to invoke these functions from the external world (for example mapping them to a HTTP API) and also allows &lt;strong&gt;workers&lt;&#x2F;strong&gt; (instances of these components) to invoke each other. A component can have an arbitrary number of instances, each such worker being identified by a unique name.&lt;&#x2F;p&gt;
&lt;p&gt;We can use this feature to have a very simple and straightforward implementation of the list editor - each document (editable list) will be mapped to its own worker, identified by the list&#x27;s identifier. This way our list component only has to deal with a single list; scaling it up to handle multiple (possibly even millions) of lists is done automatically by Golem.&lt;&#x2F;p&gt;
&lt;p&gt;For archiving lists, we want to store each archived list in a single place - so we are going to have only a single instance of our archive component, where each archived list information is sent to. This singleton worker can store the archived lists in some database if needed - but because Golem&#x27;s durable execution guarantees, it is enough to just store them in memory (one important exception is if we want to store a really large amount of archived lists not fitting in a single worker&#x27;s memory). Golem guarantees that the worker&#x27;s state is restored in any case of failure or rescaling event so the archive component can really remain very simple.&lt;&#x2F;p&gt;
&lt;p&gt;Finally, because Golem workers are single threaded and does not support async calls overlapping with its invocations at the moment, we need a third component to implement the delayed email sending functionality. There will be an &lt;strong&gt;email sending worker&lt;&#x2F;strong&gt; corresponding to each &lt;strong&gt;list worker&lt;&#x2F;strong&gt; and this worker will be suspended for an extended period of time (the amount we want to wait before sending out the email). Again, because of Golem&#x27;s durable execution feature we can just &quot;sleep&quot; for an arbitrary long time in this component and we don&#x27;t need to care about what can happen to our execution environment during that long period.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;initial-moonbit-implementation&quot;&gt;Initial MoonBit implementation&lt;&#x2F;h2&gt;
&lt;p&gt;Before going into details of how to develop Golem components with MoonBit, let&#x27;s try to implement the above described components in this new language, without any Golem or WebAssembly specifics.&lt;&#x2F;p&gt;
&lt;p&gt;First we create a new &lt;code&gt;lib&lt;&#x2F;code&gt; project using &lt;code&gt;moon new&lt;&#x2F;code&gt;. This creates a new &lt;strong&gt;project&lt;&#x2F;strong&gt; with a single &lt;strong&gt;package&lt;&#x2F;strong&gt;. To match our architecture let&#x27;s start by creating multiple packages, one for each component to develop (&lt;code&gt;list&lt;&#x2F;code&gt;, &lt;code&gt;archive&lt;&#x2F;code&gt;, &lt;code&gt;email&lt;&#x2F;code&gt;)&lt;&#x2F;p&gt;
&lt;p&gt;We create a folder for each package, with a &lt;code&gt;moon.pkg.json&lt;&#x2F;code&gt; in each:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;json&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-json &quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;import&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: [
&lt;&#x2F;span&gt;&lt;span&gt;    ]
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;list-model&quot;&gt;List model&lt;&#x2F;h3&gt;
&lt;p&gt;Let&#x27;s start by modelling our &lt;strong&gt;list&lt;&#x2F;strong&gt;. The edited &quot;document&quot; itself is just an array of strings:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;moonbit&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-moonbit &quot;&gt;&lt;code class=&quot;language-moonbit&quot; data-lang=&quot;moonbit&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;Document {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;items&lt;&#x2F;span&gt;&lt;span&gt;: Array[String]
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We can implement &lt;strong&gt;methods&lt;&#x2F;strong&gt; on &lt;code&gt;Document&lt;&#x2F;code&gt; corresponding to the document editing operations we want to support. On this level we don&#x27;t care about collaborative editing or connected users, just model our document as a pure data structure:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;moonbit&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-moonbit &quot;&gt;&lt;code class=&quot;language-moonbit&quot; data-lang=&quot;moonbit&quot;&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F;&#x2F;| Creates an empty document
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;pub&lt;&#x2F;span&gt;&lt;span&gt; fn Document::new() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;Document {
&lt;&#x2F;span&gt;&lt;span&gt;  { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;items&lt;&#x2F;span&gt;&lt;span&gt;: [] }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F;&#x2F;| Adds a new item to the document
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;pub&lt;&#x2F;span&gt;&lt;span&gt; fn add(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt; : Document, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;item&lt;&#x2F;span&gt;&lt;span&gt; : String) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;Unit {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.items.search(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;item&lt;&#x2F;span&gt;&lt;span&gt;).is_empty() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.items.push(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;item&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F;&#x2F;| Deletes an item from the document
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;pub&lt;&#x2F;span&gt;&lt;span&gt; fn delete(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt; : Document, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;item&lt;&#x2F;span&gt;&lt;span&gt; : String) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;Unit {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.items &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.items.filter(fn(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span&gt;) { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;item &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span&gt; })
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F;&#x2F;| Inserts an item to the document after an existing item. If `after` is not in the document, the new item is inserted at the end.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;pub&lt;&#x2F;span&gt;&lt;span&gt; fn insert(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt; : Document, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;after&lt;&#x2F;span&gt;&lt;span&gt;~ : String, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;~ : String) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;Unit {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;index &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.items.search(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;after&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;match &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;index&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    Some(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;index&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.items.insert(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;index &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    None &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.add(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F;&#x2F;| Gets a view of the document&amp;#39;s items
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;pub&lt;&#x2F;span&gt;&lt;span&gt; fn get(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt; : Document) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;ArrayView[String] {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.items[:]
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F;&#x2F;| Iterates the items in the document
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;pub&lt;&#x2F;span&gt;&lt;span&gt; fn iter(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt; : Document) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;Iter[String] {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.items.iter()
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We can also use MoonBit&#x27;s built-in test feature to write unit tests for this. The following test contains an assertion that the initial document is empty:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;moonbit&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-moonbit &quot;&gt;&lt;code class=&quot;language-moonbit&quot; data-lang=&quot;moonbit&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;test &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;new document is empty&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;empty &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;Document::new()
&lt;&#x2F;span&gt;&lt;span&gt;  assert_eq!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;empty&lt;&#x2F;span&gt;&lt;span&gt;.items, [])
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;With the &lt;code&gt;inspect&lt;&#x2F;code&gt; function tests can use &lt;strong&gt;snapshot values&lt;&#x2F;strong&gt; to compare values with. The &lt;code&gt;moon&lt;&#x2F;code&gt; CLI tool and the IDE integration provides a way to automatically update the snapshot values (the &lt;code&gt;content=&lt;&#x2F;code&gt; part) in these test functions when needed:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;moonbit&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-moonbit &quot;&gt;&lt;code class=&quot;language-moonbit&quot; data-lang=&quot;moonbit&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;test &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;basic document operations&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;doc &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;Document::new()
&lt;&#x2F;span&gt;&lt;span&gt;    ..add(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    ..add(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;y&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    ..add(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;z&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    ..insert(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;after&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;y&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;w&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    ..insert(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;after&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    ..delete(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;z&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    ..delete(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  inspect!(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;doc&lt;&#x2F;span&gt;&lt;span&gt;.get(),
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;content&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;#|[&amp;quot;x&amp;quot;, &amp;quot;y&amp;quot;, &amp;quot;w&amp;quot;, &amp;quot;b&amp;quot;]
&lt;&#x2F;span&gt;&lt;span&gt;    ,
&lt;&#x2F;span&gt;&lt;span&gt;  )
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;list-editor-state&quot;&gt;List editor state&lt;&#x2F;h3&gt;
&lt;p&gt;The next step is to implement the editor state management on top of this &lt;code&gt;Document&lt;&#x2F;code&gt; type. As a reminder, we decided that every instance (Golem worker) of the list component will be only responsible for editing a single list. So we don&#x27;t need to care about storing and indexing the lists, or routing connections to the corresponding node where the list state is - this is all going to be managed by Golem.&lt;&#x2F;p&gt;
&lt;p&gt;What we need to do, however, is write stateful code to handle connecting and disconnecting users (&quot;editors&quot;), adding some validation on top of the document editing API so only connected editors can make changes, and collect change events for the polling API.&lt;&#x2F;p&gt;
&lt;p&gt;We can start by defining a new datatype holding our document editing state:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;moonbit&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-moonbit &quot;&gt;&lt;code class=&quot;language-moonbit&quot; data-lang=&quot;moonbit&quot;&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F;&#x2F;| Document state
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;State {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;document&lt;&#x2F;span&gt;&lt;span&gt; : Document
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;connected&lt;&#x2F;span&gt;&lt;span&gt; : Map[ConnectionId, EditorState]
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;last_connection_id&lt;&#x2F;span&gt;&lt;span&gt; : ConnectionId
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;archived&lt;&#x2F;span&gt;&lt;span&gt; : Bool
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;email_deadline&lt;&#x2F;span&gt;&lt;span&gt; : @datetime.DateTime
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;email_recipients&lt;&#x2F;span&gt;&lt;span&gt; : Array[EmailAddress]
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Beside the actual document we are going to store:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;A map of connected editors, with some per-editor state associated with them&lt;&#x2F;li&gt;
&lt;li&gt;The last used connection ID so we can always generate a new unique one&lt;&#x2F;li&gt;
&lt;li&gt;Whether the document has been archived or not&lt;&#x2F;li&gt;
&lt;li&gt;When should we send out the email notification, and to what recipients&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;So far we have only defined the &lt;code&gt;Document&lt;&#x2F;code&gt; type so let&#x27;s continue by specifying all these other types used in &lt;code&gt;State&lt;&#x2F;code&gt;s fields.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;ConnectionId&lt;&#x2F;code&gt; is going to be a &lt;strong&gt;newtype&lt;&#x2F;strong&gt; wrapping an integer:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;moonbit&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-moonbit &quot;&gt;&lt;code class=&quot;language-moonbit&quot; data-lang=&quot;moonbit&quot;&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F;&#x2F;| Identifier of a connected editor
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;ConnectionId Int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Eq&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Hash&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F;&#x2F;| Generates a next unique connection ID
&lt;&#x2F;span&gt;&lt;span&gt;fn next(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt; : ConnectionId) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;ConnectionId {
&lt;&#x2F;span&gt;&lt;span&gt;  ConnectionId(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;._ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We want to use this type as a &lt;strong&gt;key&lt;&#x2F;strong&gt; of a &lt;code&gt;Map&lt;&#x2F;code&gt; so we need instances of the &lt;code&gt;Eq&lt;&#x2F;code&gt; and &lt;code&gt;Hash&lt;&#x2F;code&gt; type classes. MoonBit can derive it for us automatically for newtypes. In addition to that, we also define a method called &lt;code&gt;next&lt;&#x2F;code&gt; that generates a new connection ID with an incremented value.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;code&gt;EditorState&lt;&#x2F;code&gt; structure holds information for each connected editor. To keep things simple, we only store the editor&#x27;s &lt;strong&gt;email address&lt;&#x2F;strong&gt; and a buffer of change events since the last call to &lt;code&gt;poll&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;An email address is a newtype of a &lt;code&gt;String&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;moonbit&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-moonbit &quot;&gt;&lt;code class=&quot;language-moonbit&quot; data-lang=&quot;moonbit&quot;&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F;&#x2F;| Email address of a connected editor
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;EmailAddress String
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;code&gt;Change&lt;&#x2F;code&gt; enum describes the possible changes made to the document:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;moonbit&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-moonbit &quot;&gt;&lt;code class=&quot;language-moonbit&quot; data-lang=&quot;moonbit&quot;&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F;&#x2F;| An observable change of the edited document
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;enum &lt;&#x2F;span&gt;&lt;span&gt;Change {
&lt;&#x2F;span&gt;&lt;span&gt;  Added(String)
&lt;&#x2F;span&gt;&lt;span&gt;  Deleted(String)
&lt;&#x2F;span&gt;&lt;span&gt;  Inserted(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;after&lt;&#x2F;span&gt;&lt;span&gt;~ : String, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;~ : String)
&lt;&#x2F;span&gt;&lt;span&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Show&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Deriving &lt;code&gt;Show&lt;&#x2F;code&gt; (or implementing it by hand) makes it possible to use the &lt;code&gt;inspect&lt;&#x2F;code&gt; test function to compare string snapshots of array of changes with the results of our &lt;code&gt;poll&lt;&#x2F;code&gt; function.&lt;&#x2F;p&gt;
&lt;p&gt;Finally, let&#x27;s define &lt;code&gt;EditorState&lt;&#x2F;code&gt; using these two new types:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;moonbit&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-moonbit &quot;&gt;&lt;code class=&quot;language-moonbit&quot; data-lang=&quot;moonbit&quot;&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F;&#x2F;| State per connected editor
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;EditorState {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;email&lt;&#x2F;span&gt;&lt;span&gt; : EmailAddress
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;events&lt;&#x2F;span&gt;&lt;span&gt; : Array[Change]
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;code&gt;email&lt;&#x2F;code&gt; field never changes of a connected editor - but the &lt;code&gt;events&lt;&#x2F;code&gt; array is, as every call to &lt;code&gt;poll&lt;&#x2F;code&gt; will reset this so the next poll returns only the new changes. To be able to do this, we have to mark it as &lt;code&gt;mut&lt;&#x2F;code&gt;-able.&lt;&#x2F;p&gt;
&lt;p&gt;The last new type we need to introduce for &lt;code&gt;State&lt;&#x2F;code&gt; is something representing a point in time. MoonBit&#x27;s &lt;code&gt;core&lt;&#x2F;code&gt; standard library does not have currently anything for this, but there is already a package database, &lt;a href=&quot;https:&#x2F;&#x2F;mooncakes.io&quot;&gt;mooncakes&lt;&#x2F;a&gt;, with published MoonBit packages. Here we can find a &lt;a href=&quot;https:&#x2F;&#x2F;mooncakes.io&#x2F;docs&#x2F;#&#x2F;suiyunonghen&#x2F;datetime&#x2F;&quot;&gt;package called &lt;code&gt;datetime&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;. Adding it to our project can be done with the &lt;code&gt;moon&lt;&#x2F;code&gt; CLI:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;moon&lt;&#x2F;span&gt;&lt;span&gt; add suiyunonghen&#x2F;datetime
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;and then importing it into the &lt;code&gt;list&lt;&#x2F;code&gt; package by modifying its &lt;code&gt;moon.pkg.json&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;json&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-json &quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;import&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: [
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;suiyunonghen&#x2F;datetime&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    ]
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;With this we can refer to the &lt;code&gt;DateTime&lt;&#x2F;code&gt; type in this package using &lt;code&gt;@datetime.DateTime&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Before starting to implement methods for &lt;code&gt;State&lt;&#x2F;code&gt;, we have to think about error handling too - some of the operations on &lt;code&gt;State&lt;&#x2F;code&gt; may fail, for example if a wrong connection ID is used, or a document editing operation comes in for an already archived list. MoonBit has built-in support for error handling, and it starts by defining our own error type in the following way:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;moonbit&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-moonbit &quot;&gt;&lt;code class=&quot;language-moonbit&quot; data-lang=&quot;moonbit&quot;&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F;&#x2F;| Error type for editor state operations
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;type! &lt;&#x2F;span&gt;&lt;span&gt;EditorError {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F;&#x2F;| Error returned when an invalid connection ID is used
&lt;&#x2F;span&gt;&lt;span&gt;  InvalidConnection(ConnectionId)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F;&#x2F;| Error when trying to modify an already archived document
&lt;&#x2F;span&gt;&lt;span&gt;  AlreadyArchived
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;With this we are ready to implement the collaborative list editor! I&#x27;m not going to list &lt;em&gt;all&lt;&#x2F;em&gt; the methods of &lt;code&gt;State&lt;&#x2F;code&gt; in this post, but the full source code is available &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;vigoo&#x2F;golem-moonbit-example&quot;&gt;on GitHub&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;code&gt;connect&lt;&#x2F;code&gt; method associates a new connection ID with the connected user, and also returns the current document state. This is important to be able to use the results of &lt;code&gt;poll&lt;&#x2F;code&gt; - the returned list of changes have to be applied to exactly this document state on the client side.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;moonbit&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-moonbit &quot;&gt;&lt;code class=&quot;language-moonbit&quot; data-lang=&quot;moonbit&quot;&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F;&#x2F;| Connects a new editor
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;pub&lt;&#x2F;span&gt;&lt;span&gt; fn connect(
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt; : State,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;email&lt;&#x2F;span&gt;&lt;span&gt; : EmailAddress
&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; (ConnectionId, ArrayView[String]) {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;connection_id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.last_connection_id.next()
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.last_connection_id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;connection_id
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.connected.set(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;connection_id&lt;&#x2F;span&gt;&lt;span&gt;, EditorState::new(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;email&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;  (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;connection_id&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.document.get())
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;em&gt;editing operations&lt;&#x2F;em&gt; are more interesting. They build on top of the editing operations we already defined for &lt;code&gt;Document&lt;&#x2F;code&gt;, but in addition to that, they all perform the following tasks:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Validating the connection ID&lt;&#x2F;li&gt;
&lt;li&gt;Validating that the document is not archived yet&lt;&#x2F;li&gt;
&lt;li&gt;Adding a &lt;code&gt;Change&lt;&#x2F;code&gt; event to each connected editor&#x27;s state&lt;&#x2F;li&gt;
&lt;li&gt;Updating the &lt;code&gt;email_deadline&lt;&#x2F;code&gt; and &lt;code&gt;email_recipients&lt;&#x2F;code&gt; fields, as each editing operation &lt;em&gt;resets&lt;&#x2F;em&gt; the timeout for sending out the emails&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Let&#x27;s go through these steps one by one. For validations, we define two helper methods as we want to reuse them in all editing methods:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;moonbit&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-moonbit &quot;&gt;&lt;code class=&quot;language-moonbit&quot; data-lang=&quot;moonbit&quot;&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F;&#x2F;| Fails if the document is archived
&lt;&#x2F;span&gt;&lt;span&gt;fn ensure_not_archived(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt; : State) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;Unit!EditorError {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;guard not&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.archived) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;else&lt;&#x2F;span&gt;&lt;span&gt; { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;raise &lt;&#x2F;span&gt;&lt;span&gt;AlreadyArchived }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F;&#x2F;| Fails if the given `connection_id` is not in the connection map
&lt;&#x2F;span&gt;&lt;span&gt;fn ensure_is_connected(
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt; : State,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;connection_id&lt;&#x2F;span&gt;&lt;span&gt; : ConnectionId
&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;Unit!EditorError {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;guard &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.connected.contains(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;connection_id&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;else&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;raise &lt;&#x2F;span&gt;&lt;span&gt;InvalidConnection(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;connection_id&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;code&gt;Unit!EditorError&lt;&#x2F;code&gt; result type indicates that these methods can fail with &lt;code&gt;EditorError&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;We can also define a helper method for adding a change event to each connected editor&#x27;s state:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;moonbit&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-moonbit &quot;&gt;&lt;code class=&quot;language-moonbit&quot; data-lang=&quot;moonbit&quot;&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F;&#x2F;| Adds a change event to each connected editor&amp;#39;s state
&lt;&#x2F;span&gt;&lt;span&gt;fn add_event(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt; : State, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;change&lt;&#x2F;span&gt;&lt;span&gt; : Change) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;Unit {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;editor_state &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.connected.values() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;editor_state&lt;&#x2F;span&gt;&lt;span&gt;.events.push(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;change&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And finally one for resetting the email-sending deadline and list of recipients:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;moonbit&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-moonbit &quot;&gt;&lt;code class=&quot;language-moonbit&quot; data-lang=&quot;moonbit&quot;&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F;&#x2F;| Updates the `email_deadline` and `email_recipients` fields after an update.
&lt;&#x2F;span&gt;&lt;span&gt;fn update_email_properties(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt; : State) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;Unit {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;now &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;@datetime.DateTime::from_unix_mseconds(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; TODO
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;send_at &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;now&lt;&#x2F;span&gt;&lt;span&gt;.inc_hour(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;12&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;email_list &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.connected_editors()
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.email_deadline &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;send_at
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.email_recipients &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;email_list
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Note that the &lt;code&gt;datetime&lt;&#x2F;code&gt; library we imported has no concept of getting the &lt;em&gt;current&lt;&#x2F;em&gt; date and time which we need for this function to work properly. We are going to address this problem once we start targeting WebAssembly (and Golem) as getting the current system time is something depending on the target platform.&lt;&#x2F;p&gt;
&lt;p&gt;With these helper functions, implementing the editor functions, for example &lt;code&gt;add&lt;&#x2F;code&gt;, is straightforward:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;moonbit&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-moonbit &quot;&gt;&lt;code class=&quot;language-moonbit&quot; data-lang=&quot;moonbit&quot;&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F;&#x2F;| Adds a new element to the document as a connected editor
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;pub&lt;&#x2F;span&gt;&lt;span&gt; fn add(
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt; : State,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;connection_id&lt;&#x2F;span&gt;&lt;span&gt; : ConnectionId,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt; : String
&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;Unit!EditorError {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.ensure_not_archived!()
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.ensure_is_connected!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;connection_id&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.document.add(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.add_event(Change::Added(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.update_email_properties()
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Implementing &lt;code&gt;poll&lt;&#x2F;code&gt; is also easy, as we already maintain the list of changes per connection, we just need to reset it after each call:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;moonbit&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-moonbit &quot;&gt;&lt;code class=&quot;language-moonbit&quot; data-lang=&quot;moonbit&quot;&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F;&#x2F;| Returns the list of changes occurred since the last call to poll
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;pub&lt;&#x2F;span&gt;&lt;span&gt; fn poll(
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt; : State,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;connection_id&lt;&#x2F;span&gt;&lt;span&gt; : ConnectionId
&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;Array[Change]!EditorError {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;match &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.connected.get(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;connection_id&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    Some(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;editor_state&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;events &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;editor_state&lt;&#x2F;span&gt;&lt;span&gt;.events
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;editor_state&lt;&#x2F;span&gt;&lt;span&gt;.events &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; []
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;events
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    None &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; raise &lt;&#x2F;span&gt;&lt;span&gt;InvalidConnection(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;connection_id&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;list-archiving&quot;&gt;List archiving&lt;&#x2F;h3&gt;
&lt;p&gt;As mentioned in the introduction, we are going to have a singleton Golem worker to store &lt;strong&gt;archived lists&lt;&#x2F;strong&gt;. At this point we are still not having anything Golem or WebAssembly specific, like RPC calls, so let&#x27;s just implement the list archive store in the simplest possible way. As I wrote earlier, we can simply store the archived lists in memory, and Golem will take care of persisting it.&lt;&#x2F;p&gt;
&lt;p&gt;We don&#x27;t want to reuse the same &lt;code&gt;Document&lt;&#x2F;code&gt; type as it represents a live, editable document. Instead we define a few new types in the &lt;code&gt;archive&lt;&#x2F;code&gt; package:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;moonbit&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-moonbit &quot;&gt;&lt;code class=&quot;language-moonbit&quot; data-lang=&quot;moonbit&quot;&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F;&#x2F;| Unique name of a document
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;DocumentName String &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Eq&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Hash&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F;&#x2F;| Show instance for DocumentName
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Show &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;DocumentName &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;with &lt;&#x2F;span&gt;&lt;span&gt;output(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;logger&lt;&#x2F;span&gt;&lt;span&gt;) { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;._.output(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;logger&lt;&#x2F;span&gt;&lt;span&gt;) }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F;&#x2F;| A single archived immutable document, encapsulating the document&amp;#39;s name and its items
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;ArchivedDocument {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt; : DocumentName
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;items&lt;&#x2F;span&gt;&lt;span&gt; : Array[String]
&lt;&#x2F;span&gt;&lt;span&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Show&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F;&#x2F;| Archive is a list of archived documents
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;Archive {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;documents&lt;&#x2F;span&gt;&lt;span&gt; : Map[DocumentName, ArchivedDocument]
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;All we need is an &lt;code&gt;insert&lt;&#x2F;code&gt; method and a way to iterate all the archived documents:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;moonbit&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-moonbit &quot;&gt;&lt;code class=&quot;language-moonbit&quot; data-lang=&quot;moonbit&quot;&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F;&#x2F;| Archives a named document
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;pub&lt;&#x2F;span&gt;&lt;span&gt; fn insert(
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt; : Archive,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt; : DocumentName,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;items&lt;&#x2F;span&gt;&lt;span&gt; : Array[String]
&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;Unit {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.documents.set(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;, { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;items&lt;&#x2F;span&gt;&lt;span&gt; })
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F;&#x2F;| Iterates all the archived documents
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;pub&lt;&#x2F;span&gt;&lt;span&gt; fn iter(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt; : Archive) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;Iter[ArchivedDocument] {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.documents.values()
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;With this done, we first implement the list archiving in the &lt;code&gt;list&lt;&#x2F;code&gt; package using simple method calls. Later we are going to replace it with Golem&#x27;s own &lt;em&gt;Worker to Worker communication&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;As there will be a singleton archive worker, we can simulate this for now by having a top-level &lt;code&gt;Archive&lt;&#x2F;code&gt; instance in the &lt;code&gt;archive&lt;&#x2F;code&gt; package:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#383a42;&quot;&gt;&lt;code&gt;&lt;span&gt;pub let archive: Archive = Archive::new()
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And calling this in our &lt;code&gt;State::archive&lt;&#x2F;code&gt; method:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;moonbit&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-moonbit &quot;&gt;&lt;code class=&quot;language-moonbit&quot; data-lang=&quot;moonbit&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;pub&lt;&#x2F;span&gt;&lt;span&gt; fn archive(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt; : State) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;Unit {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.archived &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;true
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;@archive.DocumentName(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;TODO&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  @archive.archive.insert(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.document.iter().to_array())
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Note that so far we have no way to know the document&#x27;s name in &lt;code&gt;State&lt;&#x2F;code&gt; - we did not store it anywhere. This is intentional, as we discussed earlier the &lt;strong&gt;worker name&lt;&#x2F;strong&gt; will be used as the document&#x27;s unique identifier. Getting the worker&#x27;s name will be done in a Golem specific way once we get there.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;sending-an-email&quot;&gt;Sending an email&lt;&#x2F;h3&gt;
&lt;p&gt;We already prepared some part of the email sending logic in the &lt;code&gt;State&lt;&#x2F;code&gt; type: it has a &lt;em&gt;deadline&lt;&#x2F;em&gt; and a list of &lt;em&gt;recipients&lt;&#x2F;em&gt;. The idea is that we start an &lt;strong&gt;email sending worker&lt;&#x2F;strong&gt; when a new list is created, and this runs in parallel to our editing session, in a loop. In this loop it first queries the deadline and list of recipients from our list editing state, and then just sleeps until that given deadline. When it wakes up (after 12 hours), it queries the list again, and if it is &lt;em&gt;past&lt;&#x2F;em&gt; the deadline, it means there were no further editing operations in the meantime. Then it sends the notification emails to the list of recipients.&lt;&#x2F;p&gt;
&lt;p&gt;There is no library on &lt;a href=&quot;https:&#x2F;&#x2F;mooncakes.io&quot;&gt;mooncakes&lt;&#x2F;a&gt; yet for sending emails or even for making HTTP requests, so this is something we will have to do ourselves. Also, spawning the worker to run it in parallel is something Golem specific, so at this point we are not going to implement anything for the &lt;code&gt;email&lt;&#x2F;code&gt; package. We will get back to it once the rest of the application is already compiled as Golem components.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;compiling-as-golem-components&quot;&gt;Compiling as Golem Components&lt;&#x2F;h2&gt;
&lt;p&gt;It is time to try to compile our code as &lt;strong&gt;Golem components&lt;&#x2F;strong&gt; - these are WebAssembly components (using the &lt;a href=&quot;https:&#x2F;&#x2F;component-model.bytecodealliance.org&quot;&gt;component model&lt;&#x2F;a&gt;) exporting an API described with the Wasm Interface Type (WIT) language.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;bindings&quot;&gt;Bindings&lt;&#x2F;h3&gt;
&lt;p&gt;In the current world of the WASM component model, components are defined in a spec-first way - first we write the WIT files describing types and exported interfaces, and then use a &lt;em&gt;binding generator&lt;&#x2F;em&gt; to generate language-specific glue code from them. Fortunately the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bytecodealliance&#x2F;wit-bindgen&quot;&gt; &lt;code&gt;wit-bindgen&lt;&#x2F;code&gt; tool&lt;&#x2F;a&gt; already has MoonBit support, so we can start by installing the latest version:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#383a42;&quot;&gt;&lt;code&gt;&lt;span&gt;cargo install wit-bindgen-cli
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Note that Golem&#x27;s documentation recommends an older, specific version of &lt;code&gt;wit-bindgen&lt;&#x2F;code&gt; - but that version did not support MoonBit yet. The new version should work well but the example codes for Golem were not tested with it.&lt;&#x2F;p&gt;
&lt;p&gt;We will reuse the WIT definitions that were created for the Golem 1.0 launch demo.&lt;&#x2F;p&gt;
&lt;p&gt;For the &lt;code&gt;list&lt;&#x2F;code&gt; component, it is the following:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;wit&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-wit &quot;&gt;&lt;code class=&quot;language-wit&quot; data-lang=&quot;wit&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;package &lt;&#x2F;span&gt;&lt;span&gt;demo:lst;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;interface &lt;&#x2F;span&gt;&lt;span&gt;api {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;record &lt;&#x2F;span&gt;&lt;span&gt;connection {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;u64
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;record &lt;&#x2F;span&gt;&lt;span&gt;insert-params {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;after&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;string
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;variant &lt;&#x2F;span&gt;&lt;span&gt;change {
&lt;&#x2F;span&gt;&lt;span&gt;    added(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;    deleted(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;    inserted(insert-params)
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;func&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;c&lt;&#x2F;span&gt;&lt;span&gt;: connection, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;-&amp;gt; result&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;delete&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;func&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;c&lt;&#x2F;span&gt;&lt;span&gt;: connection, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;-&amp;gt; result&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;insert&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;func&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;c&lt;&#x2F;span&gt;&lt;span&gt;: connection, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;after&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;-&amp;gt; result&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;func&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;-&amp;gt; list&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;poll&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;func&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;c&lt;&#x2F;span&gt;&lt;span&gt;: connection) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;-&amp;gt; result&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;list&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;change&amp;gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;connect&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;func&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;email&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;-&amp;gt; tuple&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;connection, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;list&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;disconnect&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;func&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;c&lt;&#x2F;span&gt;&lt;span&gt;: connection) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;-&amp;gt; result&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;connected-editors&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;func&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;-&amp;gt; list&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;archive&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;func&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;is-archived&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;func&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;-&amp;gt; bool&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;interface &lt;&#x2F;span&gt;&lt;span&gt;email-query {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;deadline&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;func&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;-&amp;gt; option&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;u64&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;recipients&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;func&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;-&amp;gt; list&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;world &lt;&#x2F;span&gt;&lt;span&gt;lst  {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; .. imports to be explained later ..
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;export &lt;&#x2F;span&gt;&lt;span&gt;api;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;export &lt;&#x2F;span&gt;&lt;span&gt;email-query;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This interface definition exports two APIs - one is the public API of our list editors, very similar to the methods we already implemented for the &lt;code&gt;State&lt;&#x2F;code&gt; type. The other is an internal API for the &lt;code&gt;email&lt;&#x2F;code&gt; component to query the deadline and recipients as it was explained earlier.&lt;&#x2F;p&gt;
&lt;p&gt;For simplicity, we are using &lt;code&gt;string&lt;&#x2F;code&gt; as an error type on the public API.&lt;&#x2F;p&gt;
&lt;p&gt;For the &lt;code&gt;archive&lt;&#x2F;code&gt; component, we define a much simpler interface:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;wit&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-wit &quot;&gt;&lt;code class=&quot;language-wit&quot; data-lang=&quot;wit&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;package &lt;&#x2F;span&gt;&lt;span&gt;demo:archive;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;interface &lt;&#x2F;span&gt;&lt;span&gt;api {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;record &lt;&#x2F;span&gt;&lt;span&gt;archived-list {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;items&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;list&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;store&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;func&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;items&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;list&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;);
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;get-all&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;func&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;-&amp;gt; list&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;archived-list&amp;gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;world &lt;&#x2F;span&gt;&lt;span&gt;archive {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; .. imports to be explained later ..
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;export &lt;&#x2F;span&gt;&lt;span&gt;api;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And finally, for the &lt;code&gt;email&lt;&#x2F;code&gt; component:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;wit&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-wit &quot;&gt;&lt;code class=&quot;language-wit&quot; data-lang=&quot;wit&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;package &lt;&#x2F;span&gt;&lt;span&gt;demo:email;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;interface &lt;&#x2F;span&gt;&lt;span&gt;api {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;golem:rpc&#x2F;types@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;0.1.0&lt;&#x2F;span&gt;&lt;span&gt;.{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;uri&lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;send-email&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;func&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;list-uri&lt;&#x2F;span&gt;&lt;span&gt;: uri);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;world &lt;&#x2F;span&gt;&lt;span&gt;email {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; .. imports to be explained later ..
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;export &lt;&#x2F;span&gt;&lt;span&gt;api;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Here we are using a Golem specific type: &lt;code&gt;uri&lt;&#x2F;code&gt;. This is needed because the &lt;code&gt;email&lt;&#x2F;code&gt; workers need to call the specific &lt;code&gt;list&lt;&#x2F;code&gt; worker it was spawned from. The details of this will be explained later.&lt;&#x2F;p&gt;
&lt;p&gt;These WIT definitions need to be put in &lt;code&gt;wit&lt;&#x2F;code&gt; directories of each package, and dependencies in subdirectories of &lt;code&gt;wit&#x2F;deps&lt;&#x2F;code&gt;. Check the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;vigoo&#x2F;golem-moonbit-example&quot;&gt;repository&lt;&#x2F;a&gt; for reference.&lt;&#x2F;p&gt;
&lt;p&gt;We started with defining a single MoonBit &lt;strong&gt;module&lt;&#x2F;strong&gt; (identified by &lt;code&gt;moon.mod.json&lt;&#x2F;code&gt; in the root) and just created &lt;code&gt;list&lt;&#x2F;code&gt;, &lt;code&gt;email&lt;&#x2F;code&gt; and &lt;code&gt;archive&lt;&#x2F;code&gt; as internal packages. At this point we have to change this because we need to have a separate module for each chunk of code we want to compile to a separate Golem component. By running &lt;code&gt;wit-bindgen&lt;&#x2F;code&gt; in each of the three subdirectories (shown below), it actually generates module definitions for us.&lt;&#x2F;p&gt;
&lt;p&gt;We reorganize the directory structure a bit, moving &lt;code&gt;src&#x2F;archive&lt;&#x2F;code&gt; to &lt;code&gt;archive&lt;&#x2F;code&gt; etc, and moving the previously written source code to &lt;code&gt;archive&#x2F;src&lt;&#x2F;code&gt;. This way the generated bindings and our hand-written implementation will be put next to each other. We can also delete the top-level module definition JSON.&lt;&#x2F;p&gt;
&lt;p&gt;Now in all the three directories we can generate the bindings:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;wit-bindgen&lt;&#x2F;span&gt;&lt;span&gt; moonbit wit
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Note that once we start modifying the generated &lt;code&gt;stub.wit&lt;&#x2F;code&gt; files, running this command again will overwrite our changes. To avoid that, it can be run in the following way:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;wit-bindgen&lt;&#x2F;span&gt;&lt;span&gt; moonbit wit&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt; --ignore-stub
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;With this done,&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;moon&lt;&#x2F;span&gt;&lt;span&gt; build&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt; --target&lt;&#x2F;span&gt;&lt;span&gt; wasm
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;will compile a WASM module for us in &lt;code&gt;.&#x2F;target&#x2F;wasm&#x2F;release&#x2F;build&#x2F;gen&#x2F;gen.wasm&lt;&#x2F;code&gt;. This is not yet a WASM &lt;strong&gt;component&lt;&#x2F;strong&gt; - so it&#x27;s not ready to be used directly in Golem. To do so, we will have to use another command line tool, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bytecodealliance&#x2F;wasm-tools&quot;&gt;&lt;code&gt;wasm-tools&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; to convert this module into a component that self-describes its higher level exported interface.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;wit-dependencies&quot;&gt;WIT dependencies&lt;&#x2F;h3&gt;
&lt;p&gt;We are going to need to depend on some WIT packages, some from WASI (WebAssembly System Interface) to access things like environment variables and the current date&#x2F;time, and some Golem specific ones to implement worker-to-worker communication.&lt;&#x2F;p&gt;
&lt;p&gt;The simplest way to get the appropriate version of all the dependencies Golem provides is to use Golem&#x27;s &quot;all&quot; packaged interfaces with the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bytecodealliance&#x2F;wit-deps&quot;&gt;&lt;code&gt;wit-deps&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; tool.&lt;&#x2F;p&gt;
&lt;p&gt;So first we install &lt;code&gt;wit-deps&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;cargo&lt;&#x2F;span&gt;&lt;span&gt; install wit-deps-cli
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And create a &lt;code&gt;deps.toml&lt;&#x2F;code&gt; file in each &lt;code&gt;wit&lt;&#x2F;code&gt; directory we have created with the following contents:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;toml&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-toml &quot;&gt;&lt;code class=&quot;language-toml&quot; data-lang=&quot;toml&quot;&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;all &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;https:&#x2F;&#x2F;github.com&#x2F;golemcloud&#x2F;golem-wit&#x2F;archive&#x2F;main.tar.gz&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And finally we run the following command to fill the &lt;code&gt;wit&#x2F;deps&lt;&#x2F;code&gt; directory:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;wit-deps&lt;&#x2F;span&gt;&lt;span&gt; update
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;implementing-the-exports&quot;&gt;Implementing the exports&lt;&#x2F;h3&gt;
&lt;p&gt;Before setting up this compilation chain let&#x27;s see how we can connect the generated bindings with our existing code. Let&#x27;s start with the &lt;code&gt;archive&lt;&#x2F;code&gt; component, as it is the simplest one.&lt;&#x2F;p&gt;
&lt;p&gt;The binding generator creates a &lt;code&gt;stub.mbt&lt;&#x2F;code&gt; file at &lt;code&gt;archive&#x2F;gen&#x2F;interface&#x2F;demo&#x2F;archive&#x2F;api&#x2F;stub.mbt&lt;&#x2F;code&gt; with the two exported functions to be implemented. Here we face the usual question when working with code generators: we have a definition of &lt;code&gt;archived-list&lt;&#x2F;code&gt; in WIT and the binding generator generated the following MoonBit definition from it:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;moonbit&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-moonbit &quot;&gt;&lt;code class=&quot;language-moonbit&quot; data-lang=&quot;moonbit&quot;&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; Generated by `wit-bindgen` 0.36.0. DO NOT EDIT!
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;pub struct &lt;&#x2F;span&gt;&lt;span&gt;ArchivedList {
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt; : String; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;items&lt;&#x2F;span&gt;&lt;span&gt; : Array[String]
&lt;&#x2F;span&gt;&lt;span&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;But we already defined a very similar structure called &lt;code&gt;ArchivedDocument&lt;&#x2F;code&gt;! The only differences are the use of the &lt;code&gt;DocumentName&lt;&#x2F;code&gt; newtype and that our version was deriving a &lt;code&gt;Show&lt;&#x2F;code&gt; instance. We could decide to give up using the newtype, and use the generated type in our business logic, or we could keep the generated types separated from our actual code. (This is not really specific to MoonBit or the WASM tooling, we face the same issue with any code generator based approach).&lt;&#x2F;p&gt;
&lt;p&gt;In this post I will keep the generated code separate from our already written business logic, and just show how to implement the necessary conversions to implement the &lt;code&gt;stub.mbt&lt;&#x2F;code&gt; file(s).&lt;&#x2F;p&gt;
&lt;p&gt;The first exported function to implement is called &lt;code&gt;store&lt;&#x2F;code&gt;. We can implement it by just calling &lt;code&gt;insert&lt;&#x2F;code&gt; on our singleton top level &lt;code&gt;Archive&lt;&#x2F;code&gt; as we did before when we directly wired the &lt;code&gt;archive&lt;&#x2F;code&gt; package to the &lt;code&gt;list&lt;&#x2F;code&gt; package:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;moonbit&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-moonbit &quot;&gt;&lt;code class=&quot;language-moonbit&quot; data-lang=&quot;moonbit&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;pub&lt;&#x2F;span&gt;&lt;span&gt; fn store(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt; : String, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;items&lt;&#x2F;span&gt;&lt;span&gt; : Array[String]) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;Unit {
&lt;&#x2F;span&gt;&lt;span&gt;      @src.archive.insert(@src.DocumentName(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;items&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Note that we need to import our main &lt;code&gt;archive&lt;&#x2F;code&gt; source in the stub&#x27;s package JSON:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;json&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-json &quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;import&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: [
&lt;&#x2F;span&gt;&lt;span&gt;        { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;path&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;demo&#x2F;archive&#x2F;ffi&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;alias&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;ffi&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;},
&lt;&#x2F;span&gt;&lt;span&gt;        { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;path&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;demo&#x2F;archive&#x2F;src&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;alias&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;src&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;    ]
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The second function to be implemented needs to convert between the two representations of an archived document:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;moonbit&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-moonbit &quot;&gt;&lt;code class=&quot;language-moonbit&quot; data-lang=&quot;moonbit&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;pub&lt;&#x2F;span&gt;&lt;span&gt; fn get_all() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;Array[ArchivedList] {
&lt;&#x2F;span&gt;&lt;span&gt;  @src.archive
&lt;&#x2F;span&gt;&lt;span&gt;  .iter()
&lt;&#x2F;span&gt;&lt;span&gt;  .map(fn(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;archived&lt;&#x2F;span&gt;&lt;span&gt;) { { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;archived&lt;&#x2F;span&gt;&lt;span&gt;.name._, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;items&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;archived&lt;&#x2F;span&gt;&lt;span&gt;.items } })
&lt;&#x2F;span&gt;&lt;span&gt;  .to_array()
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Note that for this to work, we also have to make the previously defined &lt;code&gt;struct ArchivedDocument&lt;&#x2F;code&gt; a &lt;code&gt;pub struct&lt;&#x2F;code&gt; otherwise we cannot access it&#x27;s &lt;code&gt;name&lt;&#x2F;code&gt; and &lt;code&gt;items&lt;&#x2F;code&gt; fields from the stub package.&lt;&#x2F;p&gt;
&lt;p&gt;(Note: at the time of writing https:&#x2F;&#x2F;github.com&#x2F;bytecodealliance&#x2F;wit-bindgen&#x2F;pull&#x2F;1100 was not merged yet, and it is needed for the binding generator to produce working code with Golem wasm-rpc; Until it is merged, it is possible to compile the fork and use it directly)&lt;&#x2F;p&gt;
&lt;p&gt;The same way we can implement the two generated stubs in the &lt;code&gt;list&lt;&#x2F;code&gt; module (in &lt;code&gt;list&#x2F;gen&#x2F;interface&#x2F;demo&#x2F;lst&#x2F;api&#x2F;stub.mbt&lt;&#x2F;code&gt; and &lt;code&gt;list&#x2F;gen&#x2F;interface&#x2F;demo&#x2F;lst&#x2F;emailQuery&#x2F;stub.mbt&lt;&#x2F;code&gt;) using our existing implementation of &lt;code&gt;State&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;One interesting details is how we can map the &lt;code&gt;EditorError&lt;&#x2F;code&gt; failures into the string errors used in the WIT definition. First we define a &lt;code&gt;to_string&lt;&#x2F;code&gt; method for &lt;code&gt;EditorError&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;moonbit&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-moonbit &quot;&gt;&lt;code class=&quot;language-moonbit&quot; data-lang=&quot;moonbit&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;pub&lt;&#x2F;span&gt;&lt;span&gt; fn to_string(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt; : EditorError) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;String {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;match &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    InvalidConnection(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;Invalid connection ID: \{id._}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    AlreadyArchived &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;Document is already archived&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Then use &lt;code&gt;?&lt;&#x2F;code&gt; and &lt;code&gt;map_err&lt;&#x2F;code&gt; in the stubs:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;moonbit&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-moonbit &quot;&gt;&lt;code class=&quot;language-moonbit&quot; data-lang=&quot;moonbit&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;pub&lt;&#x2F;span&gt;&lt;span&gt; fn add(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;c&lt;&#x2F;span&gt;&lt;span&gt; : Connection, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt; : String) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;Result[Unit, String] {
&lt;&#x2F;span&gt;&lt;span&gt;  @src.state
&lt;&#x2F;span&gt;&lt;span&gt;  .add?(to_connection_id(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;c&lt;&#x2F;span&gt;&lt;span&gt;), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  .map_err(fn(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;err&lt;&#x2F;span&gt;&lt;span&gt;) { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;err&lt;&#x2F;span&gt;&lt;span&gt;.to_string() })
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;using-host-functions&quot;&gt;Using host functions&lt;&#x2F;h3&gt;
&lt;p&gt;When we implemented the &lt;code&gt;update_email_properties&lt;&#x2F;code&gt; function earlier, we could not properly query the current time to calculate the proper deadline. Now that we are targeting Golem, we can use the WebAssembly system interface (WASI) to access things like the system time. One way would be to use the published &lt;a href=&quot;https:&#x2F;&#x2F;mooncakes.io&#x2F;docs&#x2F;#&#x2F;yamajik&#x2F;wasi-bindings&#x2F;&quot;&gt;&lt;code&gt;wasi-bindings&lt;&#x2F;code&gt; package&lt;&#x2F;a&gt; but as we are already generating bindings from WIT anyway, we can just use our own generated bindings to imported host functions.&lt;&#x2F;p&gt;
&lt;p&gt;First, we need to import the WASI wall-clock interface into our WIT world:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;wit&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-wit &quot;&gt;&lt;code class=&quot;language-wit&quot; data-lang=&quot;wit&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;world &lt;&#x2F;span&gt;&lt;span&gt;lst  {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;export &lt;&#x2F;span&gt;&lt;span&gt;api;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;export &lt;&#x2F;span&gt;&lt;span&gt;email-query;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;wasi:clocks&#x2F;wall-clock@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;0.2.0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Then we regenerate the bindings (make sure to use &lt;code&gt;--ignore-stub&lt;&#x2F;code&gt; to avoid rewriting our stub implementation!) and import it into our main (&lt;code&gt;src&lt;&#x2F;code&gt;) package:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;json&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-json &quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;import&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: [
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;suiyunonghen&#x2F;datetime&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;path&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;demo&#x2F;lst&#x2F;interface&#x2F;wasi&#x2F;clocks&#x2F;wallClock&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;alias&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;wallClock&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;    ]
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;With that we can call the WASI &lt;code&gt;now&lt;&#x2F;code&gt; function to query the current system time, and convert it to the &lt;code&gt;datetime&lt;&#x2F;code&gt; module&#x27;s &lt;code&gt;DateTime&lt;&#x2F;code&gt; type which we were using before:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;moonbit&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-moonbit &quot;&gt;&lt;code class=&quot;language-moonbit&quot; data-lang=&quot;moonbit&quot;&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F;&#x2F;| Queries the WASI wall clock and returns it as a @datetime.DateTime
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F;&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F;&#x2F; Note that DateTime has only millisecond precision
&lt;&#x2F;span&gt;&lt;span&gt;fn now() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;@datetime.DateTime {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;wasi_now &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;@wallClock.now()
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;base_ms &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;wasi_now&lt;&#x2F;span&gt;&lt;span&gt;.seconds.reinterpret_as_int64() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;1000&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;nano_ms &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;wasi_now&lt;&#x2F;span&gt;&lt;span&gt;.nanoseconds.reinterpret_as_int() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&#x2F; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;1000000&lt;&#x2F;span&gt;&lt;span&gt;).to_int64();
&lt;&#x2F;span&gt;&lt;span&gt;  @datetime.DateTime::from_unix_mseconds(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;base_ms &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;nano_ms&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;golem-app-manifest&quot;&gt;Golem app manifest&lt;&#x2F;h2&gt;
&lt;p&gt;In the next step of our implementation we will have to connect our two existing components: &lt;code&gt;list&lt;&#x2F;code&gt; and &lt;code&gt;archive&lt;&#x2F;code&gt; in a way that &lt;code&gt;list&lt;&#x2F;code&gt; can do remote procedure calls to &lt;code&gt;archive&lt;&#x2F;code&gt;. With the same technique we will be able to implement the third component, &lt;code&gt;email&lt;&#x2F;code&gt; which needs to be both called &lt;em&gt;from&lt;&#x2F;em&gt;&lt;code&gt; list&lt;&#x2F;code&gt; (when started) and called back (when getting the deadline and recipients).&lt;&#x2F;p&gt;
&lt;p&gt;Golem has tooling supporting this - but before trying to use it, let&#x27;s convert our project into a &lt;strong&gt;golem application&lt;&#x2F;strong&gt; described by &lt;strong&gt;app manifests&lt;&#x2F;strong&gt;. This will enable us to use &lt;code&gt;golem-cli&lt;&#x2F;code&gt; to generate the necessary files for worker-to-worker communication, and will also make it easier to deploy the compiled components into Golem.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;the-build-steps&quot;&gt;The build steps&lt;&#x2F;h3&gt;
&lt;p&gt;To build a single MoonBit module into a Golem component, without any worker-to-worker communication involved, we have to perform the following steps:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;(Optionally) regenerate the WIT bindings with &lt;code&gt;wit-bindgen ... --ignore-stub&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Compile the MoonBit source code into a WASM module with &lt;code&gt;moon build --target wasm&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Embed the WIT specification into a custom WASM section using &lt;code&gt;wasm-tools component embed&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Convert the WASM module into a WASM &lt;em&gt;component&lt;&#x2F;em&gt; using &lt;code&gt;wasm-tools component new&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;When we will start to use worker-to-worker communication it will require even more steps, as we are going to generate stub WIT interfaces, and compile and link multiple WASM components. An earlier version of this was &lt;a href=&quot;https:&#x2F;&#x2F;blog.vigoo.dev&#x2F;posts&#x2F;w2w-communication-golem&#x2F;&quot;&gt;described in the Worker to Worker communication in Golem&lt;&#x2F;a&gt; blog post last year.&lt;&#x2F;p&gt;
&lt;p&gt;The Golem app manifest and the corresponding CLI tool, introduced with &lt;strong&gt;Golem 1.1&lt;&#x2F;strong&gt;, automates all these steps for us.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;manifest-template&quot;&gt;Manifest template&lt;&#x2F;h3&gt;
&lt;p&gt;We start by creating a root app manifest, &lt;code&gt;golem.yaml&lt;&#x2F;code&gt;, in the root of our project. We start by setting up a temporary directory and a shared directory for the WIT dependencies we previously fetched with &lt;code&gt;wit-deps&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;# Schema for IDEA:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;# $schema: https:&#x2F;&#x2F;schema.golem.cloud&#x2F;app&#x2F;golem&#x2F;1.1.0&#x2F;golem.schema.json
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;# Schema for vscode-yaml
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;# yaml-language-server: $schema=https:&#x2F;&#x2F;schema.golem.cloud&#x2F;app&#x2F;golem&#x2F;1.1.0&#x2F;golem.schema.json
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;tempDir&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;target&#x2F;golem-temp
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;witDeps&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt; - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;common-wit&#x2F;deps
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;By moving our previous &lt;code&gt;deps.toml&lt;&#x2F;code&gt; into &lt;code&gt;common-wit&lt;&#x2F;code&gt; and doing a &lt;code&gt;wit-deps update&lt;&#x2F;code&gt; in the root, we can fill up this &lt;code&gt;deps&lt;&#x2F;code&gt; directory with all the WASI and Golem APIs we need.&lt;&#x2F;p&gt;
&lt;p&gt;Then we define a &lt;strong&gt;template&lt;&#x2F;strong&gt; for building MoonBit components with Golem CLI. In the template, we are going to define two &lt;strong&gt;profiles&lt;&#x2F;strong&gt; - one for doing a &lt;strong&gt;release&lt;&#x2F;strong&gt; build and one for &lt;strong&gt;debug&lt;&#x2F;strong&gt;. In the post I&#x27;m only going to show the release build.&lt;&#x2F;p&gt;
&lt;p&gt;It starts by specifying some directory names and where the final WASM files will be placed:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;templates&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;moonbit&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;profiles&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;release&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;sourceWit&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;wit
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;generatedWit&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;wit-generated
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;componentWasm&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;..&#x2F;target&#x2F;release&#x2F;{{ componentName }}.wasm
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;linkedWasm&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;..&#x2F;target&#x2F;release&#x2F;{{ componentName }}-linked.wasm
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;These directories are relative to the components subdirectories (for example &lt;code&gt;archive&lt;&#x2F;code&gt;) so what we say here is that once all the components are built, they al will be put in the root &lt;code&gt;target&#x2F;release&lt;&#x2F;code&gt; directory.&lt;&#x2F;p&gt;
&lt;p&gt;Then we specify the &lt;strong&gt;build steps&lt;&#x2F;strong&gt;, described in the previous section:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;build&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;command&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;wit-bindgen moonbit wit-generated --ignore-stub --derive-error --derive-show
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;sources&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;            - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;wit-generated
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;targets&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;            - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;ffi
&lt;&#x2F;span&gt;&lt;span&gt;            - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;interface
&lt;&#x2F;span&gt;&lt;span&gt;            - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;world
&lt;&#x2F;span&gt;&lt;span&gt;        - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;command&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;moon build --target wasm
&lt;&#x2F;span&gt;&lt;span&gt;        - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;command&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;wasm-tools component embed wit-generated target&#x2F;wasm&#x2F;release&#x2F;build&#x2F;gen&#x2F;gen.wasm -o ..&#x2F;target&#x2F;release&#x2F;{{ componentName }}.module.wasm --encoding utf16
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;mkdirs&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;            - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;..&#x2F;target&#x2F;release
&lt;&#x2F;span&gt;&lt;span&gt;        - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;command&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;wasm-tools component new ..&#x2F;target&#x2F;release&#x2F;{{ componentName }}.module.wasm -o ..&#x2F;target&#x2F;release&#x2F;{{ componentName }}.wasm
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Finally, we can define additional directories to be cleaned by the &lt;code&gt;golem app clean&lt;&#x2F;code&gt; command, and we can even define custom commands to be executed with &lt;code&gt;golem app xxx&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;clean&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;target
&lt;&#x2F;span&gt;&lt;span&gt;        - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;wit-generated
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;customCommands&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;update-deps&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;          - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;command&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;wit-deps update
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;dir&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;..
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;regenerate-stubs&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;          - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;command&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;wit-bindgen moonbit wit-generated
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;With this set, we can add a new &lt;em&gt;MoonBit module&lt;&#x2F;em&gt;* to this &lt;strong&gt;Golem project&lt;&#x2F;strong&gt; by creating a &lt;code&gt;golem.yaml&lt;&#x2F;code&gt; in its directory - so &lt;code&gt;archive&#x2F;golem.yaml&lt;&#x2F;code&gt; and &lt;code&gt;list&#x2F;golem.yaml&lt;&#x2F;code&gt; for now.&lt;&#x2F;p&gt;
&lt;p&gt;In these sub-manifests we can use the above defined template to tell Golem that this is a MoonBit module. It is possible to mix Golem components written in different languages in a single application.&lt;&#x2F;p&gt;
&lt;p&gt;For example the &lt;code&gt;archive&lt;&#x2F;code&gt; component&#x27;s manifest will look like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;# Schema for IDEA:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;# $schema: https:&#x2F;&#x2F;schema.golem.cloud&#x2F;app&#x2F;golem&#x2F;1.1.0&#x2F;golem.schema.json
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;# Schema for vscode-yaml
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;# yaml-language-server: $schema=https:&#x2F;&#x2F;schema.golem.cloud&#x2F;app&#x2F;golem&#x2F;1.1.0&#x2F;golem.schema.json
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;components&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;archive&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;template&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;moonbit
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;building-the-components&quot;&gt;Building the components&lt;&#x2F;h3&gt;
&lt;p&gt;With this set, the whole application (with its two already written components) can be compiled by simply saying&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#383a42;&quot;&gt;&lt;code&gt;&lt;span&gt;golem app build
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;There are a few organizational things to do first, as &lt;code&gt;golem app build&lt;&#x2F;code&gt; does some transformations on the WIT definitions. This means that our previously written &lt;strong&gt;stubs&lt;&#x2F;strong&gt; are a wrong place. The easiest way to fix this is to delete all the wit-bindgen generated directories (but first backup the hand-written stubs!) and then copy back the stubs into the new directories created. We are not going to discuss this in more details here. The blog post incrementally discovers how to build Golem applications with MoonBit and introduces the app manifest in a late stage, but the recommended way is to start immediately with an app manifest and then there is no need to do these fixes.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;first-try&quot;&gt;First try&lt;&#x2F;h3&gt;
&lt;p&gt;Running the build command results in two WASM files that are ready to be used with Golem! Although they are not able to communicate with each other yet (so the archiving functionality does not work), it is already possible to try them out with Golem.&lt;&#x2F;p&gt;
&lt;p&gt;To do so, we can start Golem locally by downloading the latest release of &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;golemcloud&#x2F;golem&#x2F;releases&#x2F;tag&#x2F;v1.1.0&quot;&gt;single-executable Golem&lt;&#x2F;a&gt; or using our hosted Golem Cloud. With the &lt;code&gt;golem&lt;&#x2F;code&gt; binary, we just use the following command to start up the services locally:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; golem start&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt; -vv
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Then, from the root of our project, we can upload the two compiled components using the same command:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; golem component add&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt; --component-name&lt;&#x2F;span&gt;&lt;span&gt; archive
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;Added&lt;&#x2F;span&gt;&lt;span&gt; new component archive
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;Component&lt;&#x2F;span&gt;&lt;span&gt; URN:     urn:component:bde2da89-75a8-4adf-953f-33b360c978d0
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;Component&lt;&#x2F;span&gt;&lt;span&gt; name:    archive
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;Component&lt;&#x2F;span&gt;&lt;span&gt; version: 0
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;Component&lt;&#x2F;span&gt;&lt;span&gt; size:    9.35 KiB
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;Created&lt;&#x2F;span&gt;&lt;span&gt; at:        2025-01-03 15:09:05.166785 UTC
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;Exports:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;demo:archive-interface&#x2F;api.&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;get-all}&lt;&#x2F;span&gt;&lt;span&gt;() -&amp;gt; list&amp;lt;record { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;name:&lt;&#x2F;span&gt;&lt;span&gt; string, items: list&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;string&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; }&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;demo:archive-interface&#x2F;api.{store&lt;&#x2F;span&gt;&lt;span&gt;}(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;name:&lt;&#x2F;span&gt;&lt;span&gt; string, items: list&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;string&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;and&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; golem component add&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt; --component-name&lt;&#x2F;span&gt;&lt;span&gt; list
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;Added&lt;&#x2F;span&gt;&lt;span&gt; new component list
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;Component&lt;&#x2F;span&gt;&lt;span&gt; URN:     urn:component:b6420554-62b5-4902-8994-89c692a937f7
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;Component&lt;&#x2F;span&gt;&lt;span&gt; name:    list
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;Component&lt;&#x2F;span&gt;&lt;span&gt; version: 0
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;Component&lt;&#x2F;span&gt;&lt;span&gt; size:    28.46 KiB
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;Created&lt;&#x2F;span&gt;&lt;span&gt; at:        2025-01-03 15:09:09.743733 UTC
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;Exports:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;demo:lst-interface&#x2F;api.{add&lt;&#x2F;span&gt;&lt;span&gt;}(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;c:&lt;&#x2F;span&gt;&lt;span&gt; record { id: u64 }, value: string) -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; result&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;_, string&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;demo:lst-interface&#x2F;api.&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;archive}&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;  demo:lst-interface&#x2F;api.{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;connect&lt;&#x2F;span&gt;&lt;span&gt;}(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;email:&lt;&#x2F;span&gt;&lt;span&gt; string) -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; tuple&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;record { id: u64 }, list&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;string&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;demo:lst-interface&#x2F;api.&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;connected-editors}&lt;&#x2F;span&gt;&lt;span&gt;() -&amp;gt; list&amp;lt;string&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  demo:lst-interface&#x2F;api.{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;delete&lt;&#x2F;span&gt;&lt;span&gt;}(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;c:&lt;&#x2F;span&gt;&lt;span&gt; record { id: u64 }, value: string) -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; result&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;_, string&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;demo:lst-interface&#x2F;api.{disconnect&lt;&#x2F;span&gt;&lt;span&gt;}(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;c:&lt;&#x2F;span&gt;&lt;span&gt; record { id: u64 }) -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; result&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;_, string&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;demo:lst-interface&#x2F;api.&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;get}&lt;&#x2F;span&gt;&lt;span&gt;() -&amp;gt; list&amp;lt;string&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  demo:lst-interface&#x2F;api.{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;insert&lt;&#x2F;span&gt;&lt;span&gt;}(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;c:&lt;&#x2F;span&gt;&lt;span&gt; record { id: u64 }, after: string, value: string) -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; result&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;_, string&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;demo:lst-interface&#x2F;api.&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;is-archived}&lt;&#x2F;span&gt;&lt;span&gt;() -&amp;gt; bool
&lt;&#x2F;span&gt;&lt;span&gt;  demo:lst-interface&#x2F;api.{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;poll&lt;&#x2F;span&gt;&lt;span&gt;}(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;c:&lt;&#x2F;span&gt;&lt;span&gt; record { id: u64 }) -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; result&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;list&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;variant { added(string), deleted(string), inserted(record { after: string, value: string }) }&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;, string&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;demo:lst-interface&#x2F;email-query.&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;deadline}&lt;&#x2F;span&gt;&lt;span&gt;() -&amp;gt; option&amp;lt;u64&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  demo:lst-interface&#x2F;email-query.{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;recipients}&lt;&#x2F;span&gt;&lt;span&gt;() -&amp;gt; list&amp;lt;string&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We can try out the &lt;code&gt;archive&lt;&#x2F;code&gt; component by first invoking the &lt;code&gt;store&lt;&#x2F;code&gt; function, and then the &lt;code&gt;get-all&lt;&#x2F;code&gt; function, using the CLI&#x27;s &lt;code&gt;worker invoke-and-await&lt;&#x2F;code&gt; command:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; golem worker invoke-and-await&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt; --worker&lt;&#x2F;span&gt;&lt;span&gt; urn:worker:bde2da89-75a8-4adf-953f-33b360c978d0&#x2F;archive&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt; --function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;#39;demo:archive-interface&#x2F;api.{store}&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt; --arg &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;#39;&amp;quot;list1&amp;quot;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt; --arg &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;#39;[&amp;quot;x&amp;quot;, &amp;quot;y&amp;quot;, &amp;quot;z&amp;quot;]&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;Empty&lt;&#x2F;span&gt;&lt;span&gt; result.
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; golem worker invoke-and-await&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt; --worker&lt;&#x2F;span&gt;&lt;span&gt; urn:worker:bde2da89-75a8-4adf-953f-33b360c978d0&#x2F;archive&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt; --function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;#39;demo:archive-interface&#x2F;api.{get-all}&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;Invocation&lt;&#x2F;span&gt;&lt;span&gt; results in WAVE format:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;#39;[{name: &amp;quot;list1&amp;quot;, items: [&amp;quot;x&amp;quot;, &amp;quot;y&amp;quot;, &amp;quot;z&amp;quot;]}]&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Similarly we can try out the &lt;code&gt;list&lt;&#x2F;code&gt; component, keeping in mind that the &lt;strong&gt;worker name&lt;&#x2F;strong&gt; is the list name:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;When we try out list, we get an error (and if we used the &lt;code&gt;debug&lt;&#x2F;code&gt; profile - using &lt;code&gt;--build-profile debug&lt;&#x2F;code&gt; then we also get a nice call stack):&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#383a42;&quot;&gt;&lt;code&gt;&lt;span&gt;Failed to create worker b6420554-62b5-4902-8994-89c692a937f7&#x2F;list6: Failed to instantiate worker -1&#x2F;b6420554-62b5-4902-8994-89c692a937f7&#x2F;list6: error while executing at wasm backtrace:
&lt;&#x2F;span&gt;&lt;span&gt;    0: 0x19526 - wit-component:shim!indirect-wasi:clocks&#x2F;wall-clock@0.2.0-now
&lt;&#x2F;span&gt;&lt;span&gt;    1: 0x414b - &amp;lt;unknown&amp;gt;!demo&#x2F;lst&#x2F;interface&#x2F;wasi&#x2F;clocks&#x2F;wallClock.wasmImportNow
&lt;&#x2F;span&gt;&lt;span&gt;    2: 0x4165 - &amp;lt;unknown&amp;gt;!demo&#x2F;lst&#x2F;interface&#x2F;wasi&#x2F;clocks&#x2F;wallClock.now
&lt;&#x2F;span&gt;&lt;span&gt;    3: 0x42c1 - &amp;lt;unknown&amp;gt;!demo&#x2F;lst&#x2F;src.now
&lt;&#x2F;span&gt;&lt;span&gt;    4: 0x433d - &amp;lt;unknown&amp;gt;!@demo&#x2F;lst&#x2F;src.State::update_email_properties
&lt;&#x2F;span&gt;&lt;span&gt;    5: 0x440e - &amp;lt;unknown&amp;gt;!@demo&#x2F;lst&#x2F;src.State::new
&lt;&#x2F;span&gt;&lt;span&gt;    6: 0x5d81 - &amp;lt;unknown&amp;gt;!*init*&#x2F;38
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The reason is we are creating a global variable of &lt;code&gt;State&lt;&#x2F;code&gt; and in its constructor we are tryting to call a WASI function (to get the current date-time). This is too early for that; so let&#x27;s modify the &lt;code&gt;State::new&lt;&#x2F;code&gt; method to not call any host functions:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;moonbit&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-moonbit &quot;&gt;&lt;code class=&quot;language-moonbit&quot; data-lang=&quot;moonbit&quot;&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F;&#x2F;| Creates a new empty document editing state
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;pub&lt;&#x2F;span&gt;&lt;span&gt; fn State::new() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;State {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;state &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;document&lt;&#x2F;span&gt;&lt;span&gt;: Document::new(),
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;connected&lt;&#x2F;span&gt;&lt;span&gt;: Map::new(),
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;last_connection_id&lt;&#x2F;span&gt;&lt;span&gt;: ConnectionId(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;archived&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;email_deadline&lt;&#x2F;span&gt;&lt;span&gt;: @datetime.DateTime::from_unix_mseconds(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; Note: can&amp;#39;t use now() here because it will run in initialization-time (due to the global `state` variable)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;email_recipients&lt;&#x2F;span&gt;&lt;span&gt;: [],
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;state
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This fixes the issue! Now we can create and play with our collaboratively editable lists:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; golem worker start&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt; --component&lt;&#x2F;span&gt;&lt;span&gt; urn:component:b6420554-62b5-4902-8994-89c692a937f7&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt; --worker-name&lt;&#x2F;span&gt;&lt;span&gt; list7
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;Added&lt;&#x2F;span&gt;&lt;span&gt; worker list7
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;Worker&lt;&#x2F;span&gt;&lt;span&gt; URN:    urn:worker:b6420554-62b5-4902-8994-89c692a937f7&#x2F;list7
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;Component&lt;&#x2F;span&gt;&lt;span&gt; URN: urn:component:b6420554-62b5-4902-8994-89c692a937f7
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;Worker&lt;&#x2F;span&gt;&lt;span&gt; name:   list7
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; golem worker invoke-and-await&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt; --component&lt;&#x2F;span&gt;&lt;span&gt; urn:component:b6420554-62b5-4902-8994-89c692a937f7&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt; --worker-name&lt;&#x2F;span&gt;&lt;span&gt; list7&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt; --function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;#39;demo:lst-interface&#x2F;api.{connect}&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt; --arg &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;#39;&amp;quot;demo@vigoo.dev&amp;quot;&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;Invocation&lt;&#x2F;span&gt;&lt;span&gt; results in WAVE format:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;#39;({id: 1}, [])&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; golem worker invoke-and-await&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt; --component&lt;&#x2F;span&gt;&lt;span&gt; urn:component:b6420554-62b5-4902-8994-89c692a937f7&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt; --worker-name&lt;&#x2F;span&gt;&lt;span&gt; list7&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt; --function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;#39;demo:lst-interface&#x2F;api.{add}&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt; --arg &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;#39;{ id: 1}&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt; --arg &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;#39;&amp;quot;a&amp;quot;&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;Invocation&lt;&#x2F;span&gt;&lt;span&gt; results in WAVE format:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt; ok
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; golem worker invoke-and-await&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt; --component&lt;&#x2F;span&gt;&lt;span&gt; urn:component:b6420554-62b5-4902-8994-89c692a937f7&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt; --worker-name&lt;&#x2F;span&gt;&lt;span&gt; list7&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt; --function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;#39;demo:lst-interface&#x2F;api.{add}&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt; --arg &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;#39;{ id: 1}&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt; --arg &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;#39;&amp;quot;b&amp;quot;&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;Invocation&lt;&#x2F;span&gt;&lt;span&gt; results in WAVE format:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt; ok
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; golem worker invoke-and-await&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt; --component&lt;&#x2F;span&gt;&lt;span&gt; urn:component:b6420554-62b5-4902-8994-89c692a937f7&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt; --worker-name&lt;&#x2F;span&gt;&lt;span&gt; list7&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt; --function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;#39;demo:lst-interface&#x2F;api.{connect}&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt; --arg &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;#39;&amp;quot;demo2@vigoo.dev&amp;quot;&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;Invocation&lt;&#x2F;span&gt;&lt;span&gt; results in WAVE format:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;#39;({id: 2}, [&amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;])&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;worker-to-worker-communication&quot;&gt;Worker to Worker communication&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;list-calling-archive&quot;&gt;List calling archive&lt;&#x2F;h3&gt;
&lt;p&gt;The first worker-to-worker communication we want to set up is the &lt;code&gt;list&lt;&#x2F;code&gt; component calling the &lt;code&gt;archive&lt;&#x2F;code&gt; component - basically, when we call &lt;code&gt;archive()&lt;&#x2F;code&gt; on the list, it needs to call &lt;code&gt;store&lt;&#x2F;code&gt; in a singleton archive worker, sending its data to it.&lt;&#x2F;p&gt;
&lt;p&gt;The first step is to simply state this dependency in the app manifest of &lt;code&gt;list&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;components&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;list&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;template&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;moonbit
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;dependencies&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;list&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;wasm-rpc
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;target&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;archive
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Running &lt;code&gt;golem app build&lt;&#x2F;code&gt; after this will run a lot of new build steps - including generating and compiling some Rust source code, which is something that will no longer be needed in the next release of Golem.&lt;&#x2F;p&gt;
&lt;p&gt;We are not going into details of what is generated for worker to worker communication in this post - what is important is that after this change, and running build once, we can &lt;strong&gt;import&lt;&#x2F;strong&gt; a generated &lt;strong&gt;stub&lt;&#x2F;strong&gt; of our &lt;code&gt;archive&lt;&#x2F;code&gt; component in our &lt;code&gt;list&lt;&#x2F;code&gt; component&#x27;s moonbit package:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;json&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-json &quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;import&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: [
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;suiyunonghen&#x2F;datetime&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;path&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;demo&#x2F;lst&#x2F;interface&#x2F;wasi&#x2F;clocks&#x2F;wallClock&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;alias&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;wallClock&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;},
&lt;&#x2F;span&gt;&lt;span&gt;        { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;path&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;demo&#x2F;lst&#x2F;interface&#x2F;demo&#x2F;archive_stub&#x2F;stubArchive&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;alias&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;stubArchive&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;},
&lt;&#x2F;span&gt;&lt;span&gt;        { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;path&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;demo&#x2F;lst&#x2F;interface&#x2F;golem&#x2F;rpc&#x2F;types&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;alias&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;rpcTypes&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;    ]
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Then we can add the following code into our &lt;code&gt;archive&lt;&#x2F;code&gt; function to call the remote worker:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;moonbit&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-moonbit &quot;&gt;&lt;code class=&quot;language-moonbit&quot; data-lang=&quot;moonbit&quot;&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;archive_component_id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;bde2da89-75a8-4adf-953f-33b360c978d0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; TODO
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;archive &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;@stubArchive.Api::api({ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;urn:worker:\{archive_component_id}&#x2F;archive&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;});
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;TODO&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; TODO
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;archive&lt;&#x2F;span&gt;&lt;span&gt;.blocking_store(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.document.iter().to_array())
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In line 2 we construct the remote interface by pointing to a specific &lt;strong&gt;worker&lt;&#x2F;strong&gt;, by using the component ID and the worker&#x27;s name. (In the next Golem release this is going to be simplified by being able to use the component&#x27;s name instead). In line 5 we call the remote &lt;code&gt;store&lt;&#x2F;code&gt; function.&lt;&#x2F;p&gt;
&lt;p&gt;What is missing are two things:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;We should not hard-code the archive component&#x27;s ID as it is automatically generated when the component is first uploaded to Golem&lt;&#x2F;li&gt;
&lt;li&gt;We need to know our own &lt;strong&gt;worker name&lt;&#x2F;strong&gt; to be used as the list&#x27;s name&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The solution to both is to use &lt;strong&gt;environment variables&lt;&#x2F;strong&gt; - Golem automatically sets the &lt;code&gt;GOLEM_WORKER_NAME&lt;&#x2F;code&gt; environment variable to the worker&#x27;s name, and we can manually provide values to workers through custom environment variables. This allows us to inject the component ID from the outside (until a more sophisticated configuration feature is added in Golem 1.2).&lt;&#x2F;p&gt;
&lt;p&gt;We have already seen how we can use WASI to query the current date&#x2F;time; we can use another WASI interface to get environment variables. So once again, we add an import to our WIT file:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;wit&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-wit &quot;&gt;&lt;code class=&quot;language-wit&quot; data-lang=&quot;wit&quot;&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;wasi:cli&#x2F;environment@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;0.2.0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Then run &lt;code&gt;golem app build&lt;&#x2F;code&gt; to regenerate the bindings, and import it in the &lt;code&gt;list&#x2F;src&lt;&#x2F;code&gt; MoonBit package:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;json&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-json &quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span&gt;        { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;path&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;demo&#x2F;lst&#x2F;interface&#x2F;wasi&#x2F;cli&#x2F;environment&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;alias&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;environment&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;and implement a helper function to get a specific key from the environment variables:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;moonbit&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-moonbit &quot;&gt;&lt;code class=&quot;language-moonbit&quot; data-lang=&quot;moonbit&quot;&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F;&#x2F;| Gets an environment variable using WASI
&lt;&#x2F;span&gt;&lt;span&gt;fn get_env(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;key&lt;&#x2F;span&gt;&lt;span&gt; : String) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;String? {
&lt;&#x2F;span&gt;&lt;span&gt;  @environment.get_environment()
&lt;&#x2F;span&gt;&lt;span&gt;  .iter()
&lt;&#x2F;span&gt;&lt;span&gt;  .find_first(fn(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;pair&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;pair&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;key
&lt;&#x2F;span&gt;&lt;span&gt;  })
&lt;&#x2F;span&gt;&lt;span&gt;  .map(fn(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;pair&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;pair&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span&gt;  })
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We can use this to get the worker&#x27;s name and the archive component ID:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;moonbit&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-moonbit &quot;&gt;&lt;code class=&quot;language-moonbit&quot; data-lang=&quot;moonbit&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;archive_component_id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;get_env(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;ARCHIVE_COMPONENT_ID&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;).or(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;unknown&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;get_env(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;GOLEM_WORKER_NAME&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;).or(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;unknown&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;When starting the list workers, we have to explicitly specify &lt;code&gt;ARCHIVE_COMPONENT_ID&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; golem worker start&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt; --component&lt;&#x2F;span&gt;&lt;span&gt; urn:component:b6420554-62b5-4902-8994-89c692a937f7&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt; --worker-name&lt;&#x2F;span&gt;&lt;span&gt; list10&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt; --env &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;ARCHIVE_COMPONENT_ID=bde2da89-75a8-4adf-953f-33b360c978d0&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;With that we can try connecting to the list, adding some items and then calling &lt;code&gt;archive&lt;&#x2F;code&gt; on it, and finally calling &lt;code&gt;get-all&lt;&#x2F;code&gt; on the archive worker - we can see that the remote procedure call works!&lt;&#x2F;p&gt;
&lt;h3 id=&quot;list-and-email&quot;&gt;List and email&lt;&#x2F;h3&gt;
&lt;p&gt;We haven&#x27;t implemented the third component of the application yet - the one responsible for sending an email after some deadline. Setting up the component and the worker-to-worker communication works exactly the same as it was demonstrated above. The app manifest supports circular dependencies, so we can add say that &lt;code&gt;list&lt;&#x2F;code&gt; depends on &lt;code&gt;email&lt;&#x2F;code&gt; via &lt;code&gt;wasm-rpc&lt;&#x2F;code&gt;, and also &lt;code&gt;email&lt;&#x2F;code&gt; depends on &lt;code&gt;list&lt;&#x2F;code&gt; via &lt;code&gt;wasm-rpc&lt;&#x2F;code&gt;. We need to communicate in both directions.&lt;&#x2F;p&gt;
&lt;p&gt;We will have to use the WASI &lt;code&gt;monotonic-clock&lt;&#x2F;code&gt; interface&#x27;s &lt;code&gt;subscribe-instant&lt;&#x2F;code&gt; function to &lt;strong&gt;sleep&lt;&#x2F;strong&gt; until the given deadline.&lt;&#x2F;p&gt;
&lt;p&gt;Without showing all the details, here is the MoonBit code implementing the single &lt;code&gt;send-email&lt;&#x2F;code&gt; function we defined in the &lt;code&gt;email.wit&lt;&#x2F;code&gt; file:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;moonbit&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-moonbit &quot;&gt;&lt;code class=&quot;language-moonbit&quot; data-lang=&quot;moonbit&quot;&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F;&#x2F;| Structure holding an email sender&amp;#39;s configuration
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;pub&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;all&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;Email {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;list_worker_urn&lt;&#x2F;span&gt;&lt;span&gt; : String
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F;&#x2F;| Run the email sending loop
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;pub&lt;&#x2F;span&gt;&lt;span&gt; fn run(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt; : Email) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;Unit {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;while &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;match &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.get_deadline() {
&lt;&#x2F;span&gt;&lt;span&gt;      Some(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;epoch_ms&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;now &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;@wallClock.now()
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;now_ms &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;now&lt;&#x2F;span&gt;&lt;span&gt;.seconds &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;1000 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;+
&lt;&#x2F;span&gt;&lt;span&gt;          (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;now&lt;&#x2F;span&gt;&lt;span&gt;.nanoseconds.reinterpret_as_int() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&#x2F; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;1000000&lt;&#x2F;span&gt;&lt;span&gt;).to_uint64()
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;duration_ms &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;epoch_ms&lt;&#x2F;span&gt;&lt;span&gt;.reinterpret_as_int64() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;-
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;now_ms&lt;&#x2F;span&gt;&lt;span&gt;.reinterpret_as_int64()
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;duration_ms &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;          sleep(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;duration_ms&lt;&#x2F;span&gt;&lt;span&gt;.reinterpret_as_uint64())
&lt;&#x2F;span&gt;&lt;span&gt;        } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;else&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;          send_emails(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.get_recipients())
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;continue
&lt;&#x2F;span&gt;&lt;span&gt;      }
&lt;&#x2F;span&gt;&lt;span&gt;      None &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; break
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We use the &lt;code&gt;wall-clock&lt;&#x2F;code&gt; interface again to query the current time and calculate the duration to sleep for based on the deadline got from the corresponding list worker. The &lt;code&gt;get_deadline&lt;&#x2F;code&gt; and &lt;code&gt;get_recipients&lt;&#x2F;code&gt; methods are just using Golem&#x27;s Worker to Worker communication as shown before:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;moonbit&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-moonbit &quot;&gt;&lt;code class=&quot;language-moonbit&quot; data-lang=&quot;moonbit&quot;&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F;&#x2F;| Get the current deadline from the associated list worker
&lt;&#x2F;span&gt;&lt;span&gt;fn get_deadline(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt; : Email) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;UInt64? {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;api &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;@stubLst.EmailQuery::email_query({ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.list_worker_urn })
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;api&lt;&#x2F;span&gt;&lt;span&gt;.blocking_deadline()
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F;&#x2F;| Get the current list of recipients from the associated list worker
&lt;&#x2F;span&gt;&lt;span&gt;fn get_recipients(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt; : Email) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;Array[String] {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;api &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;@stubLst.EmailQuery::email_query({ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.list_worker_urn })
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;api&lt;&#x2F;span&gt;&lt;span&gt;.blocking_recipients()
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The two remaining interesting part are sleeping and sending emails.&lt;&#x2F;p&gt;
&lt;p&gt;We can &lt;strong&gt;sleep&lt;&#x2F;strong&gt; by calling the &lt;code&gt;subscribe-duration&lt;&#x2F;code&gt; function in the WASI &lt;code&gt;monotonic-clock&lt;&#x2F;code&gt; package to get a pollable, and then poll for it. As we only pass a single pollable to the list, it won&#x27;t return until the deadline we want to wait for expires:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;moonbit&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-moonbit &quot;&gt;&lt;code class=&quot;language-moonbit&quot; data-lang=&quot;moonbit&quot;&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F;&#x2F;| Sleep for the given amount of milliseconds
&lt;&#x2F;span&gt;&lt;span&gt;fn sleep(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;ms&lt;&#x2F;span&gt;&lt;span&gt; : UInt64) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;Unit {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;ns &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;ms &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;1000000
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;pollable &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;@monotonicClock.subscribe_duration(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;ns&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;@poll.poll([&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;pollable&lt;&#x2F;span&gt;&lt;span&gt;])
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;On the &lt;code&gt;list&lt;&#x2F;code&gt; side, we don&#x27;t want to block until this email sending loop runs - as it would block our list from receiving new requests. The generated RPC stubs support this, we simply use the non-blocking version on the generated &lt;code&gt;Api&lt;&#x2F;code&gt; type:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;moonbit&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-moonbit &quot;&gt;&lt;code class=&quot;language-moonbit&quot; data-lang=&quot;moonbit&quot;&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;if not&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.email_worker_started) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;email_component_id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;get_env(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;EMAIL_COMPONENT_ID&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;).or(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;unknown&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;get_env(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;GOLEM_WORKER_NAME&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;).or(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;unknown&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;self_component_id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;get_env(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;GOLEM_COMPONENT_ID&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;).or(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;unknown&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;api &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;@stubEmail.Api::api({ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;urn:worker:\{email_component_id}:\{name}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;})
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;api&lt;&#x2F;span&gt;&lt;span&gt;.send_email({ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;urn:worker:\{self_component_id}:\{name}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;})
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.email_worker_started  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;sending-emails&quot;&gt;Sending emails&lt;&#x2F;h2&gt;
&lt;p&gt;Sending actual emails is a bit more difficult, as there are no HTTP client libraries in the MoonBit ecosystem at the moment. But Golem implements the WASI HTTP interface, so we can use the already demonstrated techniques to import WASI HTTP through WIT, generate bindings for it, and then use it from MoonBit code to send emails through a third party provider.&lt;&#x2F;p&gt;
&lt;p&gt;In the example we are going to use &lt;a href=&quot;https:&#x2F;&#x2F;sendgrid.com&#x2F;en-us&quot;&gt;Sendgrid&lt;&#x2F;a&gt; as a provider. This means we have to send a HTTP &lt;strong&gt;POST&lt;&#x2F;strong&gt; request to &lt;code&gt;https:&#x2F;&#x2F;api.sendgrid.com&#x2F;v3&#x2F;mail&#x2F;send&lt;&#x2F;code&gt; with a pre-configured authorization header, and a JSON body describing our email sending request.&lt;&#x2F;p&gt;
&lt;p&gt;First we are going to define a few helper constants and functions to assemble the parts of the requests:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;moonbit&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-moonbit &quot;&gt;&lt;code class=&quot;language-moonbit&quot; data-lang=&quot;moonbit&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span&gt;AUTHORITY : String &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;api.sendgrid.com&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span&gt;PATH : String &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;v3&#x2F;mail&#x2F;send&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;type! &lt;&#x2F;span&gt;&lt;span&gt;HttpClientError String
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The payload is a JSON, which can be constructed using MoonBit&#x27;s built-in JSON literal feature. However in the WASI HTTP interface we have to write it out as a byte array. MoonBit strings are UTF-16 but SendGrid requires the payload to be in UTF-8. Unfortunately there isn&#x27;t any string encoding library available for MoonBit yet, so we write a simple function that fails if any of the characters is not ASCII:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;moonbit&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-moonbit &quot;&gt;&lt;code class=&quot;language-moonbit&quot; data-lang=&quot;moonbit&quot;&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F;&#x2F;| Converts a string to ASCII byte array if all characters are ASCII characters, otherwise fails
&lt;&#x2F;span&gt;&lt;span&gt;fn string_to_ascii(
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;what&lt;&#x2F;span&gt;&lt;span&gt; : String,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt; : String
&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;FixedArray[Byte]!HttpClientError {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;result &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;FixedArray::makei(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;.length(), fn(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;) { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;#39; &amp;#39;&lt;&#x2F;span&gt;&lt;span&gt; })
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;ch &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;ch&lt;&#x2F;span&gt;&lt;span&gt;.to_int() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;256&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;result&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;ch&lt;&#x2F;span&gt;&lt;span&gt;.to_int().to_byte()
&lt;&#x2F;span&gt;&lt;span&gt;    } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;else&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;raise &lt;&#x2F;span&gt;&lt;span&gt;HttpClientError(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;The \{what} contains non-ASCII characters&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;result
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;With this we can construct the payload and we can also read the sendgrid API key from an environment variable:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;moonbit&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-moonbit &quot;&gt;&lt;code class=&quot;language-moonbit&quot; data-lang=&quot;moonbit&quot;&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F;&#x2F;| Constructs a SendGrid send message payload as an ASCII byte array
&lt;&#x2F;span&gt;&lt;span&gt;fn payload(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;recipients&lt;&#x2F;span&gt;&lt;span&gt; : Array[String]) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;FixedArray[Byte]!HttpClientError {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;email_addresses &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;recipients
&lt;&#x2F;span&gt;&lt;span&gt;    .iter()
&lt;&#x2F;span&gt;&lt;span&gt;    .map(fn(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;email&lt;&#x2F;span&gt;&lt;span&gt;) { { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;email&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;email&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;email&lt;&#x2F;span&gt;&lt;span&gt; } })
&lt;&#x2F;span&gt;&lt;span&gt;    .to_array()
&lt;&#x2F;span&gt;&lt;span&gt;    .to_json()
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;from&lt;&#x2F;span&gt;&lt;span&gt; : Json &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;email&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;demo@vigoo.dev&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;Daniel Vigovszky&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt; }
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;json&lt;&#x2F;span&gt;&lt;span&gt; : Json &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;personalizations&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: [{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;to&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;email_addresses&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;cc&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: [], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;bcc&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: [] }],
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;from&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;from&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;subject&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;Collaborative list editor warning&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;content&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: [
&lt;&#x2F;span&gt;&lt;span&gt;      {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;type&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;text&#x2F;html&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;p&amp;gt;The list opened for editing has not been changed in the last 12 hours&amp;lt;&#x2F;p&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;      },
&lt;&#x2F;span&gt;&lt;span&gt;    ],
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;json_str &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;json&lt;&#x2F;span&gt;&lt;span&gt;.to_string()
&lt;&#x2F;span&gt;&lt;span&gt;  string_to_ascii!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;constructed JSON body&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;json_str&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F;&#x2F;| Gets the SENDGRID_API_KEY environment variable as an  ASCII byte array
&lt;&#x2F;span&gt;&lt;span&gt;fn authorization_header() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;FixedArray[Byte]!HttpClientError {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;key_str &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;@environment.get_environment()
&lt;&#x2F;span&gt;&lt;span&gt;    .iter()
&lt;&#x2F;span&gt;&lt;span&gt;    .find_first(fn(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;pair&lt;&#x2F;span&gt;&lt;span&gt;) { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;pair&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;SENDGRID_API_KEY&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt; })
&lt;&#x2F;span&gt;&lt;span&gt;    .map(fn(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;pair&lt;&#x2F;span&gt;&lt;span&gt;) { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;pair&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt; })
&lt;&#x2F;span&gt;&lt;span&gt;    .unwrap()
&lt;&#x2F;span&gt;&lt;span&gt;  string_to_ascii!(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;provided authorization header via SENDGRID_API_KEY&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;key_str&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;  )
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The next step is to create the data structures for sending out the HTTP request. In WASI HTTP, outgoing requests are modeled as WIT &lt;strong&gt;resources&lt;&#x2F;strong&gt;, which means we have to construct them with a constructor and call various methods to set properties of the request. All these methods have a &lt;code&gt;Result&lt;&#x2F;code&gt; result type so our code is going to be quite verbose:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;moonbit&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-moonbit &quot;&gt;&lt;code class=&quot;language-moonbit&quot; data-lang=&quot;moonbit&quot;&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;headers &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;@httpTypes.Fields::fields()
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;headers
&lt;&#x2F;span&gt;&lt;span&gt;  .append(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;Authorization&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, authorization_header!())
&lt;&#x2F;span&gt;&lt;span&gt;  .map_err(fn(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    HttpClientError(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;Failed to set Authorization header: \{error}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  })
&lt;&#x2F;span&gt;&lt;span&gt;  .unwrap_or_error!()
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;request &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;@httpTypes.OutgoingRequest::outgoing_request(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;headers&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;request
&lt;&#x2F;span&gt;&lt;span&gt;  .set_authority(Some(AUTHORITY))
&lt;&#x2F;span&gt;&lt;span&gt;  .map_err(fn(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;) { HttpClientError(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;Failed to set request authority&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;) })
&lt;&#x2F;span&gt;&lt;span&gt;  .unwrap_or_error!()
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;request
&lt;&#x2F;span&gt;&lt;span&gt;  .set_method(@httpTypes.Method::Post)
&lt;&#x2F;span&gt;&lt;span&gt;  .map_err(fn(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;) { HttpClientError(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;Failed to set request method&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;) })
&lt;&#x2F;span&gt;&lt;span&gt;  .unwrap_or_error!()
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;request
&lt;&#x2F;span&gt;&lt;span&gt;  .set_path_with_query(Some(PATH))
&lt;&#x2F;span&gt;&lt;span&gt;  .map_err(fn(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;) { HttpClientError(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;Failed to set request path&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;) })
&lt;&#x2F;span&gt;&lt;span&gt;  .unwrap_or_error!()
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;request
&lt;&#x2F;span&gt;&lt;span&gt;  .set_scheme(Some(@httpTypes.Scheme::Https))
&lt;&#x2F;span&gt;&lt;span&gt;  .map_err(fn(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;) { HttpClientError(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;Failed to set request scheme&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;) })
&lt;&#x2F;span&gt;&lt;span&gt;  .unwrap_or_error!()
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;outgoing_body &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;request
&lt;&#x2F;span&gt;&lt;span&gt;    .body()
&lt;&#x2F;span&gt;&lt;span&gt;    .map_err(fn(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;) { HttpClientError(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;Failed to get the outgoing body&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;) })
&lt;&#x2F;span&gt;&lt;span&gt;    .unwrap_or_error!()
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;stream &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;outgoing_body
&lt;&#x2F;span&gt;&lt;span&gt;    .write()
&lt;&#x2F;span&gt;&lt;span&gt;    .map_err(fn(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;      HttpClientError(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;Failed to open the outgoing body stream&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    })
&lt;&#x2F;span&gt;&lt;span&gt;    .unwrap_or_error!()
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;stream
&lt;&#x2F;span&gt;&lt;span&gt;    .blocking_write_and_flush(payload!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;recipients&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;    .map_err(fn(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;      HttpClientError(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;Failed to write request body: \{error}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    })
&lt;&#x2F;span&gt;&lt;span&gt;    .unwrap_or_error!()
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;outgoing_body
&lt;&#x2F;span&gt;&lt;span&gt;    .finish(None)
&lt;&#x2F;span&gt;&lt;span&gt;    .map_err(fn(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;) { HttpClientError(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;Failed to close the outgoing body&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;) })
&lt;&#x2F;span&gt;&lt;span&gt;    .unwrap_or_error!()
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;At this point we have our &lt;code&gt;request&lt;&#x2F;code&gt; variable initialized with everything we need, so we can call the &lt;code&gt;handle&lt;&#x2F;code&gt; function to initiate the HTTP request:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;moonbit&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-moonbit &quot;&gt;&lt;code class=&quot;language-moonbit&quot; data-lang=&quot;moonbit&quot;&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;future_incoming_response &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;@outgoingHandler.handle(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;request&lt;&#x2F;span&gt;&lt;span&gt;, None)
&lt;&#x2F;span&gt;&lt;span&gt;    .map_err(fn(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span&gt;) { HttpClientError(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;Failed to send request: \{error}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;) })
&lt;&#x2F;span&gt;&lt;span&gt;    .unwrap_or_error!()
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Sending a request is an async operation and what we have a result here is just a handle for a future value we have to await somehow. As we don&#x27;t want to do anything else in parallel in this example, we just write a loop that awaits for the result and checks for errors:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;moonbit&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-moonbit &quot;&gt;&lt;code class=&quot;language-moonbit&quot; data-lang=&quot;moonbit&quot;&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;while &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;match &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;future_incoming_response&lt;&#x2F;span&gt;&lt;span&gt;.get() {
&lt;&#x2F;span&gt;&lt;span&gt;      Some(Ok(Ok(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;response&lt;&#x2F;span&gt;&lt;span&gt;))) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;status &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;response&lt;&#x2F;span&gt;&lt;span&gt;.status()
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;status &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;200 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;amp;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;status &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;300&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;break
&lt;&#x2F;span&gt;&lt;span&gt;        } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;else&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;raise &lt;&#x2F;span&gt;&lt;span&gt;HttpClientError(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;Http request returned with status \{status}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;      }
&lt;&#x2F;span&gt;&lt;span&gt;      Some(Ok(Err(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;code&lt;&#x2F;span&gt;&lt;span&gt;))) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;raise &lt;&#x2F;span&gt;&lt;span&gt;HttpClientError(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;Http request failed with \{code}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;      Some(Err(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;)) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; raise &lt;&#x2F;span&gt;&lt;span&gt;HttpClientError(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;Http request failed&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;      None &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;pollable &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;future_incoming_response&lt;&#x2F;span&gt;&lt;span&gt;.subscribe()
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;@poll.poll([&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;pollable&lt;&#x2F;span&gt;&lt;span&gt;])
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;      }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We are ignoring the response body in this example - but in other applications, &lt;code&gt;response&lt;&#x2F;code&gt; could be used to open an incoming body stream and read chunks from it.&lt;&#x2F;p&gt;
&lt;p&gt;With this we implemented the simplest possible way to call the SendGrid API for sending an e-mail using WASI HTTP provided by Golem.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;debugging&quot;&gt;Debugging&lt;&#x2F;h2&gt;
&lt;p&gt;When compiled to debug (using &lt;code&gt;golem app build --build-profile debug&lt;&#x2F;code&gt;), Golem shows a nice stack trace when something goes wrong in a MoonBit component. Another useful way to observe a worker is to write a &lt;strong&gt;log&lt;&#x2F;strong&gt; in it, which can be realtime watched (or queried later) using tools like &lt;code&gt;golem worker connect&lt;&#x2F;code&gt; or the Golem Console.&lt;&#x2F;p&gt;
&lt;p&gt;The best way to write logs from MoonBit is to use the WASI Logging interface. We can import it as usual in our WITs:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;wit&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-wit &quot;&gt;&lt;code class=&quot;language-wit&quot; data-lang=&quot;wit&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;wasi:logging&#x2F;logging;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;and then to our MoonBit packages:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;json&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-json &quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;demo&#x2F;archive&#x2F;interface&#x2F;wasi&#x2F;logging&#x2F;logging&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;and then write out log messages of various levels from our application logic:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;moonbit&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-moonbit &quot;&gt;&lt;code class=&quot;language-moonbit&quot; data-lang=&quot;moonbit&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;recipients &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.get_recipients();
&lt;&#x2F;span&gt;&lt;span&gt;@logging.log(@logging.Level::INFO, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;Sending emails to recipients: \{recipients}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;match &lt;&#x2F;span&gt;&lt;span&gt;send_emails?(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;recipients&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;  Ok(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;@logging.log(@logging.Level::INFO, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;Sending emails succeeded&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  Err(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;@logging.log(@logging.Level::ERROR, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;Failed to send emails: \{error}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;MoonBit is a nice new language that is quite powerful and expressive, and seems to be a very good fit for developing applications for Golem. The resulting WASM binaries are very small - a few tens of kilobytes for this application (only increased by the generated Rust stubs - but those are going away soon). A few things in the language felt a little bit inconvenient - but maybe it is just a matter of personal taste - mostly the JSON files describing MoonBit packages, the anonymous function syntax and the way the built-in formatter organizes things. I&#x27;m sure some of these, especially the tooling, will greatly improve in the future.&lt;&#x2F;p&gt;
&lt;p&gt;The support for WASM and the Component Model are still in an early stage - but working. It requires many manual steps, but fortunately Golem&#x27;s app manifest feature can automate most of this for us. Still the generated directory structure of &lt;code&gt;wit-bindgen moonbit&lt;&#x2F;code&gt; felt a little overwhelming first.&lt;&#x2F;p&gt;
&lt;p&gt;I hope the MoonBit ecosystem will get some useful libraries in the near future, convenient wappers for WASI and WASI HTTP, (and Golem specific ones!), string encoding utilities, etc. As there are not many libraries yet, it is very easy to find something useful to work on.&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;m looking forward to have official support for MoonBit in Golem, such as templates for the &lt;code&gt;golem new ...&lt;&#x2F;code&gt; command and extensive documentation on our website.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>[Video] Golem and the WASM Component Model @ LambdaConf 2024</title>
        <published>2024-06-16T00:00:00+00:00</published>
        <updated>2024-06-16T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Daniel Vigovszky
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://blog.vigoo.dev/posts/golem-and-the-wasm-component-model/"/>
        <id>https://blog.vigoo.dev/posts/golem-and-the-wasm-component-model/</id>
        
        <content type="html" xml:base="https://blog.vigoo.dev/posts/golem-and-the-wasm-component-model/">&lt;p&gt;My talk at &lt;a href=&quot;https:&#x2F;&#x2F;www.lambdaconf.us&quot;&gt;LambdaConf 2024&lt;&#x2F;a&gt; explaining how &lt;a href=&quot;https:&#x2F;&#x2F;golem.cloud&quot;&gt;Golem&lt;&#x2F;a&gt; takes advantage of the WebAssembly Component Model.&lt;&#x2F;p&gt;
&lt;iframe width=&quot;800&quot; height=&quot;450&quot; src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;g5uUQSByvI4?si=lxlQgFztHp94WjrU&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&quot; referrerpolicy=&quot;strict-origin-when-cross-origin&quot; allowfullscreen&gt;&lt;&#x2F;iframe&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Zig and the WASM Component Model</title>
        <published>2024-05-09T00:00:00+00:00</published>
        <updated>2024-05-09T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Daniel Vigovszky
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://blog.vigoo.dev/posts/zig-wasm-component-model/"/>
        <id>https://blog.vigoo.dev/posts/zig-wasm-component-model/</id>
        
        <content type="html" xml:base="https://blog.vigoo.dev/posts/zig-wasm-component-model/">&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;golem.cloud&quot;&gt;Golem&lt;&#x2F;a&gt; always considered &lt;a href=&quot;https:&#x2F;&#x2F;ziglang.org&quot;&gt;Zig&lt;&#x2F;a&gt; a supported language, but until now the only documented way to use it was to compile a program with a single &lt;code&gt;main&lt;&#x2F;code&gt; function into a &lt;em&gt;core WebAssembly module&lt;&#x2F;em&gt; and then wrap that as a component that can be uploaded to Golem for execution. This is very limiting, as in order to take full advantage of Golem (and any other part of the evolving &lt;em&gt;WASM Component Model ecosystem&lt;&#x2F;em&gt;) a Zig program must have definitions for both &lt;em&gt;importing&lt;&#x2F;em&gt; and &lt;em&gt;exporting&lt;&#x2F;em&gt; functions and data types in order to be a usable component.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;binding-generators&quot;&gt;Binding generators&lt;&#x2F;h2&gt;
&lt;p&gt;For many supported languages the workflow is to write a &lt;strong&gt;WIT&lt;&#x2F;strong&gt; file, which is the Component Model&#x27;s &lt;a href=&quot;https:&#x2F;&#x2F;component-model.bytecodealliance.org&#x2F;design&#x2F;wit.html&quot;&gt;interface definition language&lt;&#x2F;a&gt; and then use a &lt;em&gt;binding generator&lt;&#x2F;em&gt;, such as &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bytecodealliance&#x2F;wit-bindgen&#x2F;&quot;&gt;wit-bindgen&lt;&#x2F;a&gt; to create statically typed representation of the component&#x27;s imports and exports in the targeted language.&lt;&#x2F;p&gt;
&lt;p&gt;The binding generator does not support Zig, but it does support C. So the best we can do with existing tooling is to use the C binding generator and Zig&#x27;s excellent C interoperability together to be able to create WASM components with Zig.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-steps&quot;&gt;The steps&lt;&#x2F;h2&gt;
&lt;p&gt;The primary steps are the following:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Define&lt;&#x2F;strong&gt; the component&#x27;s interface using WIT&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Generate&lt;&#x2F;strong&gt; C bindings from this definition&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Implement&lt;&#x2F;strong&gt; the exported functions in Zig, potentially using other imported interfaces and data types available through the generated binding&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Compile&lt;&#x2F;strong&gt; the whole project into WASM&lt;&#x2F;li&gt;
&lt;li&gt;As Zig&#x27;s standard library still uses &lt;em&gt;WASI Preview 1&lt;&#x2F;em&gt;, and outputs a single WASM module, we also have to &lt;strong&gt;compose&lt;&#x2F;strong&gt; our resulting module with an &lt;em&gt;adapter component&lt;&#x2F;em&gt; in order to get a WASM component depending on &lt;em&gt;WASI Preview 2&lt;&#x2F;em&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The first step is manual work - although we may eventually get code-first approaches in some languages where the WIT interface is generated as part as the build flow, it is not the case for Zig at the moment.&lt;&#x2F;p&gt;
&lt;p&gt;For generating the bindings we use &lt;code&gt;wit-bindgen&lt;&#x2F;code&gt;, and once the implementation is done we compile the Zig source code, together with the generated C bindings into a WASM module using zig&#x27;s build system (&lt;code&gt;zig build&lt;&#x2F;code&gt;).&lt;&#x2F;p&gt;
&lt;p&gt;Finally we can use &lt;code&gt;wasm-tools compose&lt;&#x2F;code&gt; to take this WASM module and an appropriate version of a Preview1 adapter such as &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;golemcloud&#x2F;golem-wit&#x2F;blob&#x2F;main&#x2F;adapters&#x2F;tier1&#x2F;wasi_snapshot_preview1.wasm&quot;&gt;the one we provide for Golem&lt;&#x2F;a&gt; to get the final component that&#x27;s ready to be used with Golem.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;zig-s-build-system&quot;&gt;Zig&#x27;s build system&lt;&#x2F;h2&gt;
&lt;p&gt;Executing all these steps manually is not convenient but fortunately we can integrate all the steps within Zig&#x27;s &lt;em&gt;build system&lt;&#x2F;em&gt;. Let&#x27;s see how!&lt;&#x2F;p&gt;
&lt;p&gt;We need to write a custom &lt;code&gt;build.zig&lt;&#x2F;code&gt; in the following way. First, let&#x27;s do some imports and start defining our build flow:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;zig&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-zig &quot;&gt;&lt;code class=&quot;language-zig&quot; data-lang=&quot;zig&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; std &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= @import&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;std&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; Builder &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; std.build.Builder;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; CrossTarget &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; std.zig.CrossTarget;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;build&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;*Builder&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;!void &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The first non-manual thing on our list of steps is &lt;strong&gt;generating&lt;&#x2F;strong&gt; the C bindings. Let&#x27;s define a build step that just runs &lt;code&gt;wit-bindgen&lt;&#x2F;code&gt; for us:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;zig&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-zig &quot;&gt;&lt;code class=&quot;language-zig&quot; data-lang=&quot;zig&quot;&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; bindgen &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; b.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;addSystemCommand&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;.{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;wit-bindgen&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;c&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;--autodrop-borrows&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;yes&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, 
&lt;&#x2F;span&gt;&lt;span&gt;    	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;.&#x2F;wit&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;--out-dir&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;src&#x2F;bindings&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;});
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This is just a description of running the binding generator, not integrated within the build flow yet. The next step is &lt;strong&gt;compiling&lt;&#x2F;strong&gt; our Zig and C files into WASM.&lt;&#x2F;p&gt;
&lt;p&gt;First we define it as an &lt;em&gt;executable target&lt;&#x2F;em&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;zig&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-zig &quot;&gt;&lt;code class=&quot;language-zig&quot; data-lang=&quot;zig&quot;&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; optimize &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; b.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;standardOptimizeOption&lt;&#x2F;span&gt;&lt;span&gt;(.{
&lt;&#x2F;span&gt;&lt;span&gt;        .preferred_optimize_mode &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; .ReleaseSmall&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    });
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; wasm &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; b.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;addExecutable&lt;&#x2F;span&gt;&lt;span&gt;(.{ 
&lt;&#x2F;span&gt;&lt;span&gt;    	.name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;main&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;      .root_source_file &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; .{ .path &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;src&#x2F;main.zig&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;}, 
&lt;&#x2F;span&gt;&lt;span&gt;      .target &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; .{
&lt;&#x2F;span&gt;&lt;span&gt;        .cpu_arch &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; .wasm32&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        .os_tag &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; .wasi&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    	}, 
&lt;&#x2F;span&gt;&lt;span&gt;    	.optimize &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; optimize 
&lt;&#x2F;span&gt;&lt;span&gt;    });
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This already defines we want to use WASM and target WASI and points to our root source file. We are not done yet though, as if we run the binding generator step defined above, we will end up having a couple of files generated in our &lt;code&gt;src&#x2F;bindings&lt;&#x2F;code&gt; directory:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#383a42;&quot;&gt;&lt;code&gt;&lt;span&gt;λ l src&#x2F;bindings
&lt;&#x2F;span&gt;&lt;span&gt;.rw-r--r-- 909 vigoo  9 May 09:34 zig3.c
&lt;&#x2F;span&gt;&lt;span&gt;.rw-r--r-- 371 vigoo  9 May 09:34 zig3.h
&lt;&#x2F;span&gt;&lt;span&gt;.rw-r--r-- 299 vigoo  9 May 09:34 zig3_component_type.o
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;code&gt;.c&lt;&#x2F;code&gt;&#x2F;&lt;code&gt;.h&lt;&#x2F;code&gt; pair contains the generated binding, while the object file holds the binary representation of the WIT interface it was generated from.&lt;&#x2F;p&gt;
&lt;p&gt;We need to add the C source and the object file into our build, and the header file to the include file paths. As the name of the generated files depend on the WIT file&#x27;s contents, we need to list all files in this &lt;code&gt;bindings&lt;&#x2F;code&gt; directory and mutate our &lt;code&gt;wasm&lt;&#x2F;code&gt; build target according to what we find:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;zig&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-zig &quot;&gt;&lt;code class=&quot;language-zig&quot; data-lang=&quot;zig&quot;&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; binding_root &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; b.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;pathFromRoot&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;src&#x2F;bindings&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;var&lt;&#x2F;span&gt;&lt;span&gt; binding_root_dir &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= try&lt;&#x2F;span&gt;&lt;span&gt; std.fs.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;cwd&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;openIterableDir&lt;&#x2F;span&gt;&lt;span&gt;(binding_root, .{});
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;defer&lt;&#x2F;span&gt;&lt;span&gt; binding_root_dir.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;close&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;var&lt;&#x2F;span&gt;&lt;span&gt; it &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= try&lt;&#x2F;span&gt;&lt;span&gt; binding_root_dir.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;walk&lt;&#x2F;span&gt;&lt;span&gt;(b.allocator);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;while &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;try&lt;&#x2F;span&gt;&lt;span&gt; it.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;next&lt;&#x2F;span&gt;&lt;span&gt;()) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt;entry&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;switch &lt;&#x2F;span&gt;&lt;span&gt;(entry.kind) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;            .file &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; path &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; b.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;pathJoin&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;.{ binding_root, entry.path });
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(std.mem.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;endsWith&lt;&#x2F;span&gt;&lt;span&gt;(u8, entry.basename, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;.c&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)) {
&lt;&#x2F;span&gt;&lt;span&gt;                    wasm.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;addCSourceFile&lt;&#x2F;span&gt;&lt;span&gt;(.{ .file &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; .{ .path &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; path }, .flags &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; &amp;amp;.{} });
&lt;&#x2F;span&gt;&lt;span&gt;                } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;else if &lt;&#x2F;span&gt;&lt;span&gt;(std.mem.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;endsWith&lt;&#x2F;span&gt;&lt;span&gt;(u8, entry.basename, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;.o&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)) {
&lt;&#x2F;span&gt;&lt;span&gt;                    wasm.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;addObjectFile&lt;&#x2F;span&gt;&lt;span&gt;(.{ .path &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; path });
&lt;&#x2F;span&gt;&lt;span&gt;                }
&lt;&#x2F;span&gt;&lt;span&gt;            },
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;else =&amp;gt; continue&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This registers all the &lt;code&gt;.c&lt;&#x2F;code&gt; and &lt;code&gt;.o&lt;&#x2F;code&gt; files from the generated bindings, but we still need to add the whole directory as an include path:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;zig&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-zig &quot;&gt;&lt;code class=&quot;language-zig&quot; data-lang=&quot;zig&quot;&gt;&lt;span&gt;    wasm.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;addIncludePath&lt;&#x2F;span&gt;&lt;span&gt;(.{ .path &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; binding_root });
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;and enable linking with &lt;code&gt;libc&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;zig&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-zig &quot;&gt;&lt;code class=&quot;language-zig&quot; data-lang=&quot;zig&quot;&gt;&lt;span&gt;    wasm.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;linkLibC&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now that we defined two build steps - the generating the bindings and compiling to a WASM module - we define the third step which is &lt;strong&gt;composing&lt;&#x2F;strong&gt; the generated module and the preview1 adapter into a WASM component:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;zig&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-zig &quot;&gt;&lt;code class=&quot;language-zig&quot; data-lang=&quot;zig&quot;&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; adapter &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; b.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;option&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    	[]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; u8, 
&lt;&#x2F;span&gt;&lt;span&gt;    	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;adapter&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, 
&lt;&#x2F;span&gt;&lt;span&gt;    	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;Path to the Golem Tier1 WASI adapter&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;orelse &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;adapters&#x2F;tier1&#x2F;wasi_snapshot_preview1.wasm&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; out &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= try&lt;&#x2F;span&gt;&lt;span&gt; std.fmt.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;allocPrint&lt;&#x2F;span&gt;&lt;span&gt;(b.allocator, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;zig-out&#x2F;bin&#x2F;{s}&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, .{wasm.out_filename});
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; component &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; b.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;addSystemCommand&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;.{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;wasm-tools&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;component&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;new&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, out, 
&lt;&#x2F;span&gt;&lt;span&gt;    	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;-o&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;zig-out&#x2F;bin&#x2F;component.wasm&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;--adapt&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, adapter });
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Here we provide a way to override the path to the adapter WASM using &lt;code&gt;zig build -Dadapter=xxx&lt;&#x2F;code&gt; but default to &lt;code&gt;adapters&#x2F;tier1&#x2F;wasi_snapshot_preview1.wasm&lt;&#x2F;code&gt; in case it is not specified.&lt;&#x2F;p&gt;
&lt;p&gt;The final step is to set up dependencies between these build steps and wire them to the main build flow:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;zig&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-zig &quot;&gt;&lt;code class=&quot;language-zig&quot; data-lang=&quot;zig&quot;&gt;&lt;span&gt;    wasm.step.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;dependOn&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;bindgen.step);
&lt;&#x2F;span&gt;&lt;span&gt;    component.step.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;dependOn&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;wasm.step);
&lt;&#x2F;span&gt;&lt;span&gt;    b.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;installArtifact&lt;&#x2F;span&gt;&lt;span&gt;(wasm);
&lt;&#x2F;span&gt;&lt;span&gt;    b.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;getInstallStep&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;dependOn&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;component.step);
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;trying-it-out&quot;&gt;Trying it out&lt;&#x2F;h2&gt;
&lt;p&gt;Let&#x27;s try this out by implementing a simple counter component. We start with the first step - defining our WIT file, putting it into &lt;code&gt;wit&#x2F;counter.wit&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;wit&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-wit &quot;&gt;&lt;code class=&quot;language-wit&quot; data-lang=&quot;wit&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;package &lt;&#x2F;span&gt;&lt;span&gt;golem:example;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;interface &lt;&#x2F;span&gt;&lt;span&gt;api {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;func&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;u64&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;func&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;-&amp;gt; u64&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;world &lt;&#x2F;span&gt;&lt;span&gt;counter {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;export &lt;&#x2F;span&gt;&lt;span&gt;api;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We also save the above defined build script as &lt;code&gt;build.zig&lt;&#x2F;code&gt; (full version &lt;a href=&quot;https:&#x2F;&#x2F;gist.github.com&#x2F;vigoo&#x2F;19ed4b5d3e47ca2f5f1258d1ae8b28a4&quot;&gt;available here&lt;&#x2F;a&gt;) and then write an initial  &lt;code&gt;src&#x2F;main.zig&lt;&#x2F;code&gt; file:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;zig&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-zig &quot;&gt;&lt;code class=&quot;language-zig&quot; data-lang=&quot;zig&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; std &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= @import&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;std&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;anyerror!void &lt;&#x2F;span&gt;&lt;span&gt;{}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Let&#x27;s place the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;golemcloud&#x2F;golem-wit&#x2F;raw&#x2F;main&#x2F;adapters&#x2F;tier1&#x2F;wasi_snapshot_preview1.wasm&quot;&gt;adapter WASM&lt;&#x2F;a&gt; as well in the &lt;code&gt;adapters&#x2F;tier1&lt;&#x2F;code&gt; directory, and then try to compile this:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#383a42;&quot;&gt;&lt;code&gt;&lt;span&gt;λ zig build --summary all                                                                                 ...
&lt;&#x2F;span&gt;&lt;span&gt;zig build-exe main Debug wasm32-wasi: error: the following command failed with 2 compilation errors:
&lt;&#x2F;span&gt;&lt;span&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;error: wasm-ld: &#x2F;Users&#x2F;vigoo&#x2F;projects&#x2F;demo&#x2F;counter&#x2F;zig-cache&#x2F;o&#x2F;a212123ad3dcf4839747c2bd77f7ef4e&#x2F;counter.o:
&lt;&#x2F;span&gt;&lt;span&gt;undefined symbol: exports_golem_example_api_add
&lt;&#x2F;span&gt;&lt;span&gt;error: wasm-ld: &#x2F;Users&#x2F;vigoo&#x2F;projects&#x2F;demo&#x2F;counter&#x2F;zig-cache&#x2F;o&#x2F;a212123ad3dcf4839747c2bd77f7ef4e&#x2F;counter.o:
&lt;&#x2F;span&gt;&lt;span&gt;undefined symbol: exports_golem_example_api_get
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;It fails because we defined two exported functions: &lt;code&gt;api&#x2F;add&lt;&#x2F;code&gt; and &lt;code&gt;api&#x2F;get&lt;&#x2F;code&gt; in our WIT file but haven&#x27;t implemented them yet. Let&#x27;s do that:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;zig&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-zig &quot;&gt;&lt;code class=&quot;language-zig&quot; data-lang=&quot;zig&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;state&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;u64 = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;export fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;exports_golem_example_api_add&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;u64&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; stdout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; std.io.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;getStdOut&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;writer&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    stdout.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;Adding {} to state&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0997b3;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, .{value}) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;catch unreachable&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    state &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;+=&lt;&#x2F;span&gt;&lt;span&gt; value;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;export fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;exports_golem_example_api_get&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;u64 &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; state;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Then compile it:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#383a42;&quot;&gt;&lt;code&gt;&lt;span&gt;λ zig build --summary all
&lt;&#x2F;span&gt;&lt;span&gt;Generating &amp;quot;src&#x2F;bindings&#x2F;counter.c&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;Generating &amp;quot;src&#x2F;bindings&#x2F;counter.h&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;Generating &amp;quot;src&#x2F;bindings&#x2F;counter_component_type.o&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;Build Summary: 5&#x2F;5 steps succeeded
&lt;&#x2F;span&gt;&lt;span&gt;install success
&lt;&#x2F;span&gt;&lt;span&gt;├─ install main cached
&lt;&#x2F;span&gt;&lt;span&gt;│  └─ zig build-exe main Debug wasm32-wasi cached 9ms MaxRSS:29M
&lt;&#x2F;span&gt;&lt;span&gt;│     └─ run wit-bindgen success 3ms MaxRSS:3M
&lt;&#x2F;span&gt;&lt;span&gt;└─ run wasm-tools success 11ms MaxRSS:8M
&lt;&#x2F;span&gt;&lt;span&gt;   └─ zig build-exe main Debug wasm32-wasi (+1 more reused dependencies)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;and we can verify our resulting &lt;code&gt;zig-out&#x2F;component.wasm&lt;&#x2F;code&gt; using &lt;code&gt;wasm-tools&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#383a42;&quot;&gt;&lt;code&gt;&lt;span&gt;λ wasm-tools print --skeleton zig-out&#x2F;bin&#x2F;component.wasm 
&lt;&#x2F;span&gt;&lt;span&gt;(component
&lt;&#x2F;span&gt;&lt;span&gt;  ...
&lt;&#x2F;span&gt;&lt;span&gt;  (instance (;11;) (instantiate 0
&lt;&#x2F;span&gt;&lt;span&gt;      (with &amp;quot;import-func-add&amp;quot; (func 16))
&lt;&#x2F;span&gt;&lt;span&gt;      (with &amp;quot;import-func-get&amp;quot; (func 17))
&lt;&#x2F;span&gt;&lt;span&gt;    )
&lt;&#x2F;span&gt;&lt;span&gt;  )
&lt;&#x2F;span&gt;&lt;span&gt;  (export (;12;) &amp;quot;golem:example&#x2F;api&amp;quot; (instance 11))
&lt;&#x2F;span&gt;&lt;span&gt;  (@producers
&lt;&#x2F;span&gt;&lt;span&gt;    (processed-by &amp;quot;wit-component&amp;quot; &amp;quot;0.20.1&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;  )
&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;using-imports&quot;&gt;Using imports&lt;&#x2F;h2&gt;
&lt;p&gt;After this simple example let&#x27;s try &lt;em&gt;importing&lt;&#x2F;em&gt; some interface and using that from our Zig code. What we are going to do is every time our counter changes, we are going to also save that value to an external key-value store. This is usually not something you need to do when writing a Golem application, because your program will be durable anyway - you can just keep the counter in memory. But it is a simple enough example to demonstrate how to use imported interfaces from Zig.&lt;&#x2F;p&gt;
&lt;p&gt;First let&#x27;s add some additional WIT files into &lt;code&gt;wit&#x2F;deps&lt;&#x2F;code&gt; from the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;golemcloud&#x2F;golem-wit&quot;&gt;golem-wit repository&lt;&#x2F;a&gt; (Note that the WASI Key-Value interface is defined &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;WebAssembly&#x2F;wasi-keyvalue&quot;&gt;here&lt;&#x2F;a&gt;, the &lt;code&gt;golem-wit&lt;&#x2F;code&gt; repo just stores the exact version of its definitions which is currently implemented by Golem ).&lt;&#x2F;p&gt;
&lt;p&gt;We need the following directory tree:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#383a42;&quot;&gt;&lt;code&gt;&lt;span&gt;λ tree wit
&lt;&#x2F;span&gt;&lt;span&gt;wit
&lt;&#x2F;span&gt;&lt;span&gt;├── counter.wit
&lt;&#x2F;span&gt;&lt;span&gt;└── deps
&lt;&#x2F;span&gt;&lt;span&gt;    ├── io
&lt;&#x2F;span&gt;&lt;span&gt;    │   ├── error.wit
&lt;&#x2F;span&gt;&lt;span&gt;    │   ├── poll.wit
&lt;&#x2F;span&gt;&lt;span&gt;    │   ├── streams.wit
&lt;&#x2F;span&gt;&lt;span&gt;    │   └── world.wit
&lt;&#x2F;span&gt;&lt;span&gt;    └── keyvalue
&lt;&#x2F;span&gt;&lt;span&gt;        ├── atomic.wit
&lt;&#x2F;span&gt;&lt;span&gt;        ├── caching.wit
&lt;&#x2F;span&gt;&lt;span&gt;        ├── error.wit
&lt;&#x2F;span&gt;&lt;span&gt;        ├── eventual-batch.wit
&lt;&#x2F;span&gt;&lt;span&gt;        ├── eventual.wit
&lt;&#x2F;span&gt;&lt;span&gt;        ├── handle-watch.wit
&lt;&#x2F;span&gt;&lt;span&gt;        ├── types.wit
&lt;&#x2F;span&gt;&lt;span&gt;        └── world.wit
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;4 directories, 13 files
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Then we can import the key-value interface to &lt;code&gt;counter.wit&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;wit&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-wit &quot;&gt;&lt;code class=&quot;language-wit&quot; data-lang=&quot;wit&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;package &lt;&#x2F;span&gt;&lt;span&gt;golem:example;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;interface &lt;&#x2F;span&gt;&lt;span&gt;api {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;func&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;u64&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;func&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;-&amp;gt; u64&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;world &lt;&#x2F;span&gt;&lt;span&gt;counter {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;wasi:keyvalue&#x2F;eventual@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;0.1.0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;export &lt;&#x2F;span&gt;&lt;span&gt;api;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;By recompiling the project we can verify everything still works, and we will also get our new bindings generated in the C source.&lt;&#x2F;p&gt;
&lt;p&gt;Before implementing writing to the key-value store in Zig, let&#x27;s just take a look at the WIT interface of &lt;code&gt;wasi:keyvalue&#x2F;eventual@0.1.0&lt;&#x2F;code&gt; to understand what we will have to do:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;wit&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-wit &quot;&gt;&lt;code class=&quot;language-wit&quot; data-lang=&quot;wit&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;interface &lt;&#x2F;span&gt;&lt;span&gt;eventual {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;set&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;func&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;bucket&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;borrow&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;bucket&amp;gt;, 
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;key&lt;&#x2F;span&gt;&lt;span&gt;: key, 
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;outgoing-value&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;borrow&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;outgoing-value&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  ) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;-&amp;gt; result&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;, error&amp;gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We will need to pass a &lt;code&gt;bucket&lt;&#x2F;code&gt; and an &lt;code&gt;outgoing-value&lt;&#x2F;code&gt;, both being &lt;em&gt;WIT resources&lt;&#x2F;em&gt; so we first need to create them, then borrow references of them for the &lt;code&gt;set&lt;&#x2F;code&gt; call, and finally drop them.&lt;&#x2F;p&gt;
&lt;p&gt;The bucket resource can be constructed with a static function called &lt;code&gt;open-bucket&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;wit&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-wit &quot;&gt;&lt;code class=&quot;language-wit&quot; data-lang=&quot;wit&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;resource &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;bucket &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;open-bucket&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;static func&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;-&amp;gt; result&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;bucket, error&amp;gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Searching for this in the generated C bindings reveals the following:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;extern bool &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;wasi_keyvalue_types_static_bucket_open_bucket&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;  counter_string_t &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;, 
&lt;&#x2F;span&gt;&lt;span&gt;  wasi_keyvalue_types_own_bucket_t &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;ret&lt;&#x2F;span&gt;&lt;span&gt;, 
&lt;&#x2F;span&gt;&lt;span&gt;  wasi_keyvalue_types_own_error_t &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;err
&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We will have to drop the created bucket with&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;extern void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;wasi_keyvalue_types_bucket_drop_own&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;  wasi_keyvalue_types_own_bucket_t handle
&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;With all this information let&#x27;s try to open a bucket in Zig by directly using the generated C bindings. First we need to import the C headers:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;zig&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-zig &quot;&gt;&lt;code class=&quot;language-zig&quot; data-lang=&quot;zig&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; c &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= @cImport&lt;&#x2F;span&gt;&lt;span&gt;({
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;@cDefine&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;_NO_CRT_STDIO_INLINE&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;1&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;@cInclude&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;counter.h&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;});
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We also define an initial error type for our function for using later:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;zig&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-zig &quot;&gt;&lt;code class=&quot;language-zig&quot; data-lang=&quot;zig&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span&gt;KVError &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= error &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    FailedToOpenBucket,
&lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Then start implementing the store function by first storing the bucket&#x27;s name in &lt;code&gt;counter_string_t&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;zig&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-zig &quot;&gt;&lt;code class=&quot;language-zig&quot; data-lang=&quot;zig&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;record_state&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;anyerror!void &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; stdout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; std.io.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;getStdOut&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;writer&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;bucket_name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;c.counter_string_t = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;undefined&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    c.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;counter_string_dup&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;bucket_name, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;state&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;defer&lt;&#x2F;span&gt;&lt;span&gt; c.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;counter_string_free&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;bucket_name);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;and then invoking the &lt;code&gt;wasi_keyvalue_types_static_bucket_open_bucket&lt;&#x2F;code&gt; function:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;zig&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-zig &quot;&gt;&lt;code class=&quot;language-zig&quot; data-lang=&quot;zig&quot;&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;bucket&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;c.wasi_keyvalue_types_own_bucket_t = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;undefined&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;bucket_err&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;c.wasi_keyvalue_wasi_keyvalue_error_own_error_t = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;undefined&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(c.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;wasi_keyvalue_types_static_bucket_open_bucket&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;bucket_name, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;bucket, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;bucket_err)) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;defer&lt;&#x2F;span&gt;&lt;span&gt; c.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;wasi_keyvalue_types_bucket_drop_own&lt;&#x2F;span&gt;&lt;span&gt;(bucket);
&lt;&#x2F;span&gt;&lt;span&gt;        
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; TODO
&lt;&#x2F;span&gt;&lt;span&gt;    } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;defer&lt;&#x2F;span&gt;&lt;span&gt; c.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;wasi_keyvalue_wasi_keyvalue_error_error_drop_own&lt;&#x2F;span&gt;&lt;span&gt;(bucket_err);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;try&lt;&#x2F;span&gt;&lt;span&gt; stdout.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;Failed to open bucket&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0997b3;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, .{});
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; KVError.FailedToOpenBucket;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now that we have an open bucket we want to call the &lt;code&gt;set&lt;&#x2F;code&gt; function to update a key&#x27;s value:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;extern bool &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;wasi_keyvalue_eventual_set&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;  wasi_keyvalue_eventual_borrow_bucket_t &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;bucket&lt;&#x2F;span&gt;&lt;span&gt;, 
&lt;&#x2F;span&gt;&lt;span&gt;  wasi_keyvalue_eventual_key_t &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;key&lt;&#x2F;span&gt;&lt;span&gt;, 
&lt;&#x2F;span&gt;&lt;span&gt;  wasi_keyvalue_eventual_borrow_outgoing_value_t &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;outgoing_value&lt;&#x2F;span&gt;&lt;span&gt;, 
&lt;&#x2F;span&gt;&lt;span&gt;  wasi_keyvalue_eventual_own_error_t &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;err
&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We already have our bucket, but we &lt;em&gt;own&lt;&#x2F;em&gt; it and we need to pass a &lt;em&gt;borrowed&lt;&#x2F;em&gt; bucket to this function. What&#x27;s the difference? There is no difference in the actual value - both just store a &lt;em&gt;handle&lt;&#x2F;em&gt; to a resource that exists in the runtime engine, but we still have to borrow the owned value using the &lt;code&gt;wasi_keyvalue_types_borrow_bucket&lt;&#x2F;code&gt; function. The &lt;code&gt;wasi_keyvalue_eventual_key_t&lt;&#x2F;code&gt; type is just an alias for &lt;code&gt;counter_string_t&lt;&#x2F;code&gt; and &lt;code&gt;wasi_keyvalue_eventual_borrow_outgoing_value_t&lt;&#x2F;code&gt; is another resource we need to construct first. Let&#x27;s put this together!&lt;&#x2F;p&gt;
&lt;p&gt;First we borrow the owned bucket:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;zig&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-zig &quot;&gt;&lt;code class=&quot;language-zig&quot; data-lang=&quot;zig&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;var&lt;&#x2F;span&gt;&lt;span&gt; borrowed_bucket &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; c.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;wasi_keyvalue_types_borrow_bucket&lt;&#x2F;span&gt;&lt;span&gt;(bucket);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;defer&lt;&#x2F;span&gt;&lt;span&gt; c.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;wasi_keyvalue_types_bucket_drop_borrow&lt;&#x2F;span&gt;&lt;span&gt;(borrowed_bucket);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Then we create an &lt;em&gt;outgoing value&lt;&#x2F;em&gt; that&#x27;s going to be stored in the key-value store:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;zig&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-zig &quot;&gt;&lt;code class=&quot;language-zig&quot; data-lang=&quot;zig&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;var&lt;&#x2F;span&gt;&lt;span&gt; outgoing_value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; c.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;wasi_keyvalue_types_static_outgoing_value_new_outgoing_value&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;defer&lt;&#x2F;span&gt;&lt;span&gt; c.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;wasi_keyvalue_types_outgoing_value_drop_own&lt;&#x2F;span&gt;&lt;span&gt;(outgoing_value);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;var&lt;&#x2F;span&gt;&lt;span&gt; borrowed_outgoing_value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; c.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;wasi_keyvalue_types_borrow_outgoing_value&lt;&#x2F;span&gt;&lt;span&gt;(outgoing_value);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;defer&lt;&#x2F;span&gt;&lt;span&gt; c.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;wasi_keyvalue_types_outgoing_value_drop_borrow&lt;&#x2F;span&gt;&lt;span&gt;(borrowed_outgoing_value);
&lt;&#x2F;span&gt;&lt;span&gt;        
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;body&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;c.counter_string_t = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;undefined&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;var&lt;&#x2F;span&gt;&lt;span&gt; value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= try&lt;&#x2F;span&gt;&lt;span&gt; std.fmt.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;allocPrint&lt;&#x2F;span&gt;&lt;span&gt;(gpa.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;allocator&lt;&#x2F;span&gt;&lt;span&gt;(), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;{d}&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, .{state});
&lt;&#x2F;span&gt;&lt;span&gt;c.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;counter_string_set&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;body, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;@ptrCast&lt;&#x2F;span&gt;&lt;span&gt;(value));
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;defer&lt;&#x2F;span&gt;&lt;span&gt; c.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;counter_string_free&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;body);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;write_err&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;c.wasi_keyvalue_types_own_error_t = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;undefined&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span&gt;c.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;wasi_keyvalue_types_method_outgoing_value_outgoing_value_write_body_sync&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    borrowed_outgoing_value, 
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;@ptrCast&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;body),
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;bucket_err)) {
&lt;&#x2F;span&gt;&lt;span&gt;        
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;defer&lt;&#x2F;span&gt;&lt;span&gt; c.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;wasi_keyvalue_wasi_keyvalue_error_error_drop_own&lt;&#x2F;span&gt;&lt;span&gt;(write_err);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;try&lt;&#x2F;span&gt;&lt;span&gt; stdout.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;Failed to set outgoing value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0997b3;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, .{});
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; KVError.FailedToSetKey;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Also we need to create a string for holding the &lt;em&gt;key&lt;&#x2F;em&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;zig&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-zig &quot;&gt;&lt;code class=&quot;language-zig&quot; data-lang=&quot;zig&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;key&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;c.counter_string_t = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;undefined&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;c.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;counter_string_dup&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;key, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;latest&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;defer&lt;&#x2F;span&gt;&lt;span&gt; c.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;counter_string_free&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;key);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And finally call the &lt;code&gt;set&lt;&#x2F;code&gt; function:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;zig&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-zig &quot;&gt;&lt;code class=&quot;language-zig&quot; data-lang=&quot;zig&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;set_err&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;c.wasi_keyvalue_eventual_own_error_t = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;undefined&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span&gt;c.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;wasi_keyvalue_eventual_set&lt;&#x2F;span&gt;&lt;span&gt;(borrowed_bucket, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;key, borrowed_outgoing_value, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;set_err)) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;try&lt;&#x2F;span&gt;&lt;span&gt; stdout.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;Failed to set key&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0997b3;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, .{});
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; KVError.FailedToSetKey;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;With this implementation we can compile our new version of our WASM component which now also depends on &lt;code&gt;wasi:keyvalue&lt;&#x2F;code&gt; and stores the latest value in a remote storage every time it gets updated.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-s-next&quot;&gt;What&#x27;s next?&lt;&#x2F;h2&gt;
&lt;p&gt;With the above technique we have a way to impelment WASM components in Zig, but working with the generated C bindings is a bit inconvenient. It would be nice to have a more idiomatic Zig interface to the component model, and maybe it can be achieved just by using Zig&#x27;s metaprogramming features without having to create a Zig specific binding generator in addition to the existing ones.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Golem&#x27;s Rust transaction API</title>
        <published>2024-04-13T00:00:00+00:00</published>
        <updated>2024-04-13T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Daniel Vigovszky
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://blog.vigoo.dev/posts/golem-rust-transaction-api/"/>
        <id>https://blog.vigoo.dev/posts/golem-rust-transaction-api/</id>
        
        <content type="html" xml:base="https://blog.vigoo.dev/posts/golem-rust-transaction-api/">&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;&#x2F;h2&gt;
&lt;p&gt;A few weeks ago we have added a new set of &lt;em&gt;host functions&lt;&#x2F;em&gt; to &lt;a href=&quot;https:&#x2F;&#x2F;golem.cloud&quot;&gt;Golem&lt;&#x2F;a&gt;, which allow programs running on this platform to control some of the persistency and transactional behavior of the executor. You can learn about these low-level functions on &lt;a href=&quot;https:&#x2F;&#x2F;learn.golem.cloud&#x2F;docs&#x2F;transaction-api&quot;&gt;the corresponding learn page&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;These exported functions allow a lot of control but they are very low level, and definitely not pleasant to use directly. To make them nicer we can write language-specific wrapper libraries on top of them, providing a first class experience for the supported programming languages.&lt;&#x2F;p&gt;
&lt;p&gt;The first such wrapper library is &lt;a href=&quot;http:&#x2F;&#x2F;github.com&#x2F;golemcloud&#x2F;golem-rust&quot;&gt;golem-rust&lt;&#x2F;a&gt;, and this post explains some of the Rust specific technical details of how this library works.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;regional-changes&quot;&gt;Regional changes&lt;&#x2F;h2&gt;
&lt;p&gt;The easy part is providing higher level support for temporarily changing the executor&#x27;s behavior. The common property of these host functions is that they come in pairs:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;mark-begin-operation&lt;&#x2F;code&gt;&#x2F;&lt;code&gt;mark-end-operation&lt;&#x2F;code&gt; pair defines a region that is treated as an atomic operation&lt;&#x2F;li&gt;
&lt;li&gt;We can get the current retry policy and change it to something else with the &lt;code&gt;get-retry-policy&lt;&#x2F;code&gt; and &lt;code&gt;set-retry-policy&lt;&#x2F;code&gt; functions&lt;&#x2F;li&gt;
&lt;li&gt;We can control persistency with &lt;code&gt;get-oplog-persistence-level&lt;&#x2F;code&gt; and &lt;code&gt;set-oplog-persistence-level&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;And we can change whether the executor assumes that external calls are idempotent using the &lt;code&gt;get-idempotence-mode&lt;&#x2F;code&gt; and &lt;code&gt;set-idempotence-mode&lt;&#x2F;code&gt; pair.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;For all these, a simple way to make them more safe and more idiomatic is to connect the lifetime of the temporarily changed behavior to the lifetime of a rust variable. For example in the following snippet, the whole function will be treated as an atomic region, but as soon the function returns, the region ends:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;some_atomic_operation&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; _atomic &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;golem_rust::mark_atomic_operation();
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Implement these wrappers is quite simple. First we need to define &lt;em&gt;data type&lt;&#x2F;em&gt; which the wrapper will return. Let&#x27;s call it &lt;code&gt;AtomicOperationGuard&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;pub struct &lt;&#x2F;span&gt;&lt;span&gt;AtomicOperationGuard {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;begin&lt;&#x2F;span&gt;&lt;span&gt;: OplogIndex,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We store the return value of Golem&#x27;s &lt;code&gt;mark-begin-operation&lt;&#x2F;code&gt; in it, as we have to pass this value to the &lt;code&gt;mark-end-operation&lt;&#x2F;code&gt; when we want to close the atomic region.&lt;&#x2F;p&gt;
&lt;p&gt;We want to close the atomic region when this value is dropped - so we can call Golem&#x27;s &lt;code&gt;mark-end-operation&lt;&#x2F;code&gt; in an explicitly implemented &lt;code&gt;drop&lt;&#x2F;code&gt; function:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;Drop &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;AtomicOperationGuard {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;drop&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;amp;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;mark_end_operation&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.begin);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Finally we define the wrapper function which returns this guard value:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;must_use&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;mark_atomic_operation&lt;&#x2F;span&gt;&lt;span&gt;() -&amp;gt; AtomicOperationGuard {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; begin &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;mark_begin_operation&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    AtomicOperationGuard { begin }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;By using the &lt;code&gt;#[must_use]&lt;&#x2F;code&gt; attribute we can make the compiler give a warning if the result value is not used - this is important, because that would mean that the atomic region gets closed as soon as it has been opened.&lt;&#x2F;p&gt;
&lt;p&gt;With this basic building block we can also support an alternative style where we pass a function to be executed with the temporary change in Golem&#x27;s behavior. These are higher order functions, taking a function as a parameter, and just using the already defined wrapper to apply the change:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;atomically&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;T&amp;gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;: impl FnOnce() -&amp;gt; T) -&amp;gt; T {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; _guard &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;mark_atomic_operation&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The same pattern can be used for all the mentioned host function pairs to get a pair of wrappers (one returning a guard, the other taking a function as a parameter):&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;use_retry_policy&lt;&#x2F;code&gt; and &lt;code&gt;with_retry_policy&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;use_idempotence_mode&lt;&#x2F;code&gt; and &lt;code&gt;with_idempotence_mode&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;use_persistence_level&lt;&#x2F;code&gt; and &lt;code&gt;with_persistence_level&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;transactions&quot;&gt;Transactions&lt;&#x2F;h2&gt;
&lt;p&gt;Golem provides &lt;strong&gt;durable execution&lt;&#x2F;strong&gt; and that comes with guarantees that your program will always run until it terminates, and (by default) all external operations are performed &lt;em&gt;at least once&lt;&#x2F;em&gt;. (Here &lt;em&gt;at least once&lt;&#x2F;em&gt; is the guarantee we can provide - naturally it does not mean that we just rerun all operations in case of a failure event. Golem tries to perform every operation exactly once but this cannot be guaranteed without special collaboration with the remote host. This behavior can be switched to &lt;em&gt;at most once&lt;&#x2F;em&gt; by changing the &lt;strong&gt;idempotence mode&lt;&#x2F;strong&gt; with the helper functions we defined above.)&lt;&#x2F;p&gt;
&lt;p&gt;Many times external operations (such as HTTP calls to remote hosts) need to be executed &lt;em&gt;transactionally&lt;&#x2F;em&gt;. If some of the operations failed the transaction need to be rolled back - &lt;strong&gt;compensation actions&lt;&#x2F;strong&gt; need to undo whatever the already successfully performed operations did.&lt;&#x2F;p&gt;
&lt;p&gt;We identified and implemented two different transaction types - both provide different guarantees and both can be useful.&lt;&#x2F;p&gt;
&lt;p&gt;A &lt;strong&gt;fallible transaction&lt;&#x2F;strong&gt; only deals with domain errors. Within the transaction every &lt;strong&gt;operation&lt;&#x2F;strong&gt; that succeeds gets recorded. If an operation fails, all the recorded operations get &lt;em&gt;compensated&lt;&#x2F;em&gt; in reverse order before the transaction block returns with a failure.&lt;&#x2F;p&gt;
&lt;p&gt;What if anything non-domain specific failure happens to the worker? It can be an unexpected fatal error, hardware failure, an executor restarted because of a deployment, etc. A fallible transaction is completely implemented as regular user code, so Golem&#x27;s durable execution guarantees apply to it. If for example the executor dies while 3 operation were completed out of the 5 in the transaction, the execution will continue from where it was - continuing with the 4th operation. If the 4th operation fails with a domain error, and the &lt;code&gt;golem-rust&lt;&#x2F;code&gt; library starts executing the compensation actions, and then a random failure causes a panic in the middle of this, the execution will continue from the middle of the compensation actions making sure that all the operations are properly rolled back.&lt;&#x2F;p&gt;
&lt;p&gt;Another possibility is what we call &lt;strong&gt;infallible transaction&lt;&#x2F;strong&gt;s. Here we say that the transaction must not fail - but still if a step fails in it, we want to run compensation actions before we retry.&lt;&#x2F;p&gt;
&lt;p&gt;To implement this we need some of the low-level transaction controls Golem provides. First of all, we need to mark the whole transaction as an &lt;em&gt;atomic region&lt;&#x2F;em&gt;. This way if a (non domain level) failure happens during the transaction, the previously performed external operations will be automatically retried as the atomic region was never committed.&lt;&#x2F;p&gt;
&lt;p&gt;We can capture the domain errors in user code and perform the compensation actions just like in the &lt;em&gt;fallible transaction&lt;&#x2F;em&gt; case. But what should we do when all operations have been rolled back? We can use the &lt;code&gt;set-oplog-index&lt;&#x2F;code&gt; host function to tell Golem to &quot;go back in time&quot; to the beginning of the transaction, forget everything that was performed after it, and start executing the transaction again.&lt;&#x2F;p&gt;
&lt;p&gt;There is a third, more complete version of &lt;strong&gt;infallible transactions&lt;&#x2F;strong&gt; which is not implemented yet - in this version we can guarantee that the compensation actions are performed even in case of a non-domain failure event. This can be implemented with the existing features of Golem but it is out of the scope of this post.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;operation-and-transaction&quot;&gt;Operation and Transaction&lt;&#x2F;h3&gt;
&lt;p&gt;Let&#x27;s see how we can implement this transaction feature.&lt;&#x2F;p&gt;
&lt;p&gt;The first thing we need to define is an &lt;em&gt;operation&lt;&#x2F;em&gt; - something that pairs an arbitrary action with a compensation action that undoes it. We can define it as a trait with two methods:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;pub trait &lt;&#x2F;span&gt;&lt;span&gt;Operation: Clone {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;In: Clone;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;Out: Clone;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;Err: Clone;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F;&#x2F; Executes the operation which may fail with a domain error
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;execute&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;input&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Self::&lt;&#x2F;span&gt;&lt;span&gt;In) -&amp;gt; Result&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Self::&lt;&#x2F;span&gt;&lt;span&gt;Out, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Self::&lt;&#x2F;span&gt;&lt;span&gt;Err&amp;gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F;&#x2F; Executes a compensation action for the operation.
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;compensate&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;input&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Self::&lt;&#x2F;span&gt;&lt;span&gt;In, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;result&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Self::&lt;&#x2F;span&gt;&lt;span&gt;Out) -&amp;gt; Result&amp;lt;(), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Self::&lt;&#x2F;span&gt;&lt;span&gt;Err&amp;gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;If the operation succeeds, its result of type &lt;code&gt;Out&lt;&#x2F;code&gt; will be stored - if it fails, &lt;code&gt;compensate&lt;&#x2F;code&gt; will be called for all the previous operations with these stored output values.&lt;&#x2F;p&gt;
&lt;p&gt;We also need something that defines the boundaries of a transaction, and allows executing these operations. Here we can create two slightly different interfaces for fallible and infallible transactions - to make it more user friendly.&lt;&#x2F;p&gt;
&lt;p&gt;For fallible transactions we can define a higher order function where the user&#x27;s logic itself can fail, and in the end we get back a transaction result:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;fallible_transaction&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;Out, Err: Clone &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;+ &amp;#39;static&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;: impl FnOnce(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;mut FallibleTransaction&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;Err&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;) -&amp;gt; Result&amp;lt;Out, Err&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; TransactionResult&amp;lt;Out, Err&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The result type here is just an alias to the standard Rust &lt;code&gt;Result&lt;&#x2F;code&gt; type, in which the error type will be &lt;code&gt;TransactionFailure&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;pub type &lt;&#x2F;span&gt;&lt;span&gt;TransactionResult&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;Out, Err&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;gt; = &lt;&#x2F;span&gt;&lt;span&gt;Result&amp;lt;Out, TransactionFailure&amp;lt;Err&amp;gt;&amp;gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;pub enum &lt;&#x2F;span&gt;&lt;span&gt;TransactionFailure&amp;lt;Err&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F;&#x2F; One of the operations failed with an error, and the transaction was fully rolled back.
&lt;&#x2F;span&gt;&lt;span&gt;    FailedAndRolledBackCompletely(Err),
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F;&#x2F; One of the operations failed with an error, and the transaction was partially rolled back
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F;&#x2F; because the compensation action of one of the operations also failed.
&lt;&#x2F;span&gt;&lt;span&gt;    FailedAndRolledBackPartially {
&lt;&#x2F;span&gt;&lt;span&gt;        failure: Err,
&lt;&#x2F;span&gt;&lt;span&gt;        compensation_failure: Err,
&lt;&#x2F;span&gt;&lt;span&gt;    },
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The function we pass to &lt;code&gt;fallible_transaction&lt;&#x2F;code&gt; gets a mutable reference to a transaction object - this is what we can use to execute operations:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;FallibleTransaction {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;impl&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;Err: Clone &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;+ &amp;#39;static&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; FallibleTransaction&amp;lt;Err&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;execute&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;OpIn: Clone &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;+ &amp;#39;static&lt;&#x2F;span&gt;&lt;span&gt;, OpOut: Clone &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;+ &amp;#39;static&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;(
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;amp;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;operation&lt;&#x2F;span&gt;&lt;span&gt;: impl Operation&amp;lt;In = OpIn, Out = OpOut, Err = Err&amp;gt; + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;#39;static&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;input&lt;&#x2F;span&gt;&lt;span&gt;: OpIn,
&lt;&#x2F;span&gt;&lt;span&gt;    ) -&amp;gt; Result&amp;lt;OpOut, Err&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This looks a bit verbose but all it says is you can pass an arbitrary &lt;code&gt;Operation&lt;&#x2F;code&gt; to this function, but all of them needs to have the same failure type, and you provide an _input_value for your operation. This separation of operation and input makes it possible to define reusable operations by implementing the &lt;code&gt;Operation&lt;&#x2F;code&gt; trait manually - we will see more ways to define operations later.&lt;&#x2F;p&gt;
&lt;p&gt;We also define a similar function and corresponding data type for &lt;em&gt;infallible transactions&lt;&#x2F;em&gt;. There are two main differences:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;infallible_transaction&lt;&#x2F;code&gt; function&#x27;s result type is simply &lt;code&gt;Out&lt;&#x2F;code&gt; - it can never fail&lt;&#x2F;li&gt;
&lt;li&gt;Similarly, &lt;code&gt;execute&lt;&#x2F;code&gt; it self cannot fail and this means that the transactional function itself cannot fail - and no need to use &lt;code&gt;?&lt;&#x2F;code&gt; or other ways to deal with result types.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Storing the compensation actions in these structs is easy - we can just create closures capturing the input and output values and calling the trait&#x27;s &lt;code&gt;compensate&lt;&#x2F;code&gt; function, and store these closures in a vec:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;CompensationAction&amp;lt;Err&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;action&lt;&#x2F;span&gt;&lt;span&gt;: Box&amp;lt;dyn Fn() -&amp;gt; Result&amp;lt;(), Err&amp;gt;&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;impl&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;Err&amp;gt; CompensationAction&amp;lt;Err&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;execute&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; Result&amp;lt;(), Err&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;        (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.action)()
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;pub struct &lt;&#x2F;span&gt;&lt;span&gt;FallibleTransaction&amp;lt;Err&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;compensations&lt;&#x2F;span&gt;&lt;span&gt;: Vec&amp;lt;CompensationAction&amp;lt;Err&amp;gt;&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;A last thing we can do in this level of the API is to think about cases where one would write generic code that works both with fallible and infallible transactions. Using a unified interface would not be as nice as using the dedicated one - as it deal with error types even if the transaction can never fail - but may provide better code reusability. We can hide the difference by defining a trait:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;pub trait &lt;&#x2F;span&gt;&lt;span&gt;Transaction&amp;lt;Err&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;execute&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;OpIn: Clone &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;+ &amp;#39;static&lt;&#x2F;span&gt;&lt;span&gt;, OpOut: Clone &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;+ &amp;#39;static&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;(
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;amp;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;operation&lt;&#x2F;span&gt;&lt;span&gt;: impl Operation&amp;lt;In = OpIn, Out = OpOut, Err = Err&amp;gt; + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;#39;static&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;input&lt;&#x2F;span&gt;&lt;span&gt;: OpIn,
&lt;&#x2F;span&gt;&lt;span&gt;    ) -&amp;gt; Result&amp;lt;OpOut, Err&amp;gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;fail&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;amp;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span&gt;: Err) -&amp;gt; Result&amp;lt;(), Err&amp;gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;run&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;Out&amp;gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;: impl FnOnce(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;mut Self&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; Result&amp;lt;Out, Err&amp;gt;) -&amp;gt; TransactionResult&amp;lt;Out, Err&amp;gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The trait provides a way to execute operations and explicitly fail the transaction, and it also generalizes the &lt;code&gt;fallible_transaction&lt;&#x2F;code&gt; and &lt;code&gt;infallible_transaction&lt;&#x2F;code&gt; function with a static function called &lt;code&gt;run&lt;&#x2F;code&gt;. Implementing this interface for our two transaction types is straightforward.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;defining-operations&quot;&gt;Defining operations&lt;&#x2F;h3&gt;
&lt;p&gt;We defined an &lt;code&gt;Operation&lt;&#x2F;code&gt; trait but haven&#x27;t talked yet about how we will declare new operations. One obvious way is to define a type and implement the trait for it:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;CreateAccount {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; configuration
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;Operation &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;CreateAccount {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;In  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; AccountDetails;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;Out &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; AccountId;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;Err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; DomainError;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;execute&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;input&lt;&#x2F;span&gt;&lt;span&gt;: AccountDetails) -&amp;gt; Result&amp;lt;AccountId, DomainError&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;      todo!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;Create the account&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;compensate&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;input&lt;&#x2F;span&gt;&lt;span&gt;: AccountDetails, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;result&lt;&#x2F;span&gt;&lt;span&gt;: AccountId) -&amp;gt; Result&amp;lt;(), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Self::&lt;&#x2F;span&gt;&lt;span&gt;Err&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;      todo!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;Delete the account&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The library provides a more concise way to define ad-hoc operations by just passing two functions:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;operation&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;In: Clone, Out: Clone, Err: Clone&amp;gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;execute_fn&lt;&#x2F;span&gt;&lt;span&gt;: impl Fn(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;In&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; Result&amp;lt;Out, Err&amp;gt; + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;#39;static&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;compensate_fn&lt;&#x2F;span&gt;&lt;span&gt;: impl Fn(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;In&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;Out&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; Result&amp;lt;(), Err&amp;gt; + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;#39;static&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; impl Operation&amp;lt;In = In, Out = Out, Err = Err&amp;gt; { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;... &lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; op &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;operation&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;move |&lt;&#x2F;span&gt;&lt;span&gt;account_details: AccountDetails&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    todo!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;Create the account&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;	},
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;move |&lt;&#x2F;span&gt;&lt;span&gt;account_details: AccountDetails, account_id: AccountId&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    todo!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;Delete the account&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  });
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Under the hood this creates a struct called &lt;code&gt;FnOperation&lt;&#x2F;code&gt; storing these two closures in it.&lt;&#x2F;p&gt;
&lt;p&gt;There is a third way though. Let&#x27;s see how it looks like, and then explore how it can be implemented with &lt;em&gt;Rust macros&lt;&#x2F;em&gt;!&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;golem_operation&lt;&#x2F;span&gt;&lt;span&gt;(compensation&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt;delete_account)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;create_account&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;username&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;amp;str&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;email&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;amp;str&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; Result&amp;lt;AccountId, DomainError&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;  todo!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;Create the account&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;delete_account&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;account_id&lt;&#x2F;span&gt;&lt;span&gt;: AccountId) -&amp;gt; Result&amp;lt;(), DomainError&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;  todo!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;Delete the account&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;infallible_transaction&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;tx&lt;&#x2F;span&gt;&lt;span&gt;| {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; account_id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; tx.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;create_account&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;vigoo&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;x@y&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;});
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;operation-macro&quot;&gt;Operation macro&lt;&#x2F;h3&gt;
&lt;p&gt;In the above example &lt;code&gt;golem_operation&lt;&#x2F;code&gt; is a macro. It is a function executed compile time that takes the annotated item - in this case the &lt;code&gt;create_account&lt;&#x2F;code&gt; function and &lt;strong&gt;transforms&lt;&#x2F;strong&gt; it to something else.&lt;&#x2F;p&gt;
&lt;p&gt;The first thing to figure out when writing a macro like that is what exactly we want to transform the function into. Let&#x27;s see what this macro generates, and then I explain how to get there.&lt;&#x2F;p&gt;
&lt;p&gt;If we expand the macro for the above example we get the following:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;create_account&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;username&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;amp;str&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;email&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;amp;str&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; Result&amp;lt;AccountId, DomainError&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    todo!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;Create the account&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;trait &lt;&#x2F;span&gt;&lt;span&gt;CreateAccount {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;create_account&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;username&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;amp;str&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;email&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;amp;str&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; Result&amp;lt;AccountId, DomainError&amp;gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;impl&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;T: Transaction&amp;lt;DomainError&amp;gt;&amp;gt; CreateAccount &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;for &amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;mut T {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;create_account&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;username&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;amp;str&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;email&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;amp;str&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; Result&amp;lt;AccountId, DomainError&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;execute&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;operation&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;            |(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;username&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;email&lt;&#x2F;span&gt;&lt;span&gt;): (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;amp;str&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;amp;str&lt;&#x2F;span&gt;&lt;span&gt;)| {
&lt;&#x2F;span&gt;&lt;span&gt;              &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;create_account&lt;&#x2F;span&gt;&lt;span&gt;(username, email)
&lt;&#x2F;span&gt;&lt;span&gt;            },
&lt;&#x2F;span&gt;&lt;span&gt;            |(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;username&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;email&lt;&#x2F;span&gt;&lt;span&gt;): (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;amp;str&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;amp;str&lt;&#x2F;span&gt;&lt;span&gt;), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;op_result&lt;&#x2F;span&gt;&lt;span&gt;: AccountId| {
&lt;&#x2F;span&gt;&lt;span&gt;    	        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;call_compensation_function&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;                delete_account,
&lt;&#x2F;span&gt;&lt;span&gt;                op_result,
&lt;&#x2F;span&gt;&lt;span&gt;                (username, email)
&lt;&#x2F;span&gt;&lt;span&gt;              ).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;map_err&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;err&lt;&#x2F;span&gt;&lt;span&gt;| err.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        }), (username, email))
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;So seems like the macro leaves the function in its original form, but generates some additional items: a &lt;em&gt;trait&lt;&#x2F;em&gt; which contains the same function signature as the annotated one, and then an &lt;em&gt;implementation&lt;&#x2F;em&gt; for this trait for any &lt;code&gt;&amp;amp;mut T&lt;&#x2F;code&gt; where &lt;code&gt;T&lt;&#x2F;code&gt; is a &lt;code&gt;Transaction&amp;lt;DomainError&amp;gt;&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;As I explained above, &lt;code&gt;Transaction&lt;&#x2F;code&gt; is a trait that provides a unified interface for both the fallible and infallible transactions. With this instance we define an &lt;strong&gt;extension method&lt;&#x2F;strong&gt; for the &lt;code&gt;tx&lt;&#x2F;code&gt; value we get in our transaction functions - this is what allows us to write &lt;code&gt;tx.create_account&lt;&#x2F;code&gt; in the above example.&lt;&#x2F;p&gt;
&lt;p&gt;Two more details to notice:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Our &lt;code&gt;Operation&lt;&#x2F;code&gt; type deals with a single input value but our annotated function can have arbitrary number of parameters. We can solve this by defining the operation&#x27;s input as a &lt;strong&gt;tuple&lt;&#x2F;strong&gt; containing all the function parameters.&lt;&#x2F;li&gt;
&lt;li&gt;The compensation function (&lt;code&gt;delete_action&lt;&#x2F;code&gt;) is not called directly, but through a helper called &lt;code&gt;call_compensation_function&lt;&#x2F;code&gt;. This allows us to support compensation functions of different shapes, and I will explain how it works in details.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;defining-the-macro-and-parsing-the-function&quot;&gt;Defining the macro and parsing the function&lt;&#x2F;h4&gt;
&lt;p&gt;This type of Rust macro which is invoked by annotating items in the code is called a &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;reference&#x2F;procedural-macros.html&quot;&gt;proc-macro&lt;&#x2F;a&gt;. We need to create a separate Rust &lt;em&gt;crate&lt;&#x2F;em&gt; for defining the macro, and set &lt;code&gt;proc-macro = true&lt;&#x2F;code&gt; in its &lt;code&gt;Cargo.toml&lt;&#x2F;code&gt; file and then create a top-level function annotated with &lt;code&gt;#[proc_macro_attribute]&lt;&#x2F;code&gt; to define our macro:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;proc_macro_attribute&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;golem_operation&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;attr&lt;&#x2F;span&gt;&lt;span&gt;: TokenStream, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;item&lt;&#x2F;span&gt;&lt;span&gt;: TokenStream) -&amp;gt; TokenStream {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Rust macros are transformations on &lt;strong&gt;token streams&lt;&#x2F;strong&gt;. The first parameter of our macro gets the &lt;em&gt;parameters&lt;&#x2F;em&gt; passed to the macro - so in our example it will contain a stream of tokens representing &lt;code&gt;compensation=delete_account&lt;&#x2F;code&gt;. The second parameter is the annotated item itself - in our case it&#x27;s a stream of tokens of the whole function definition including its body.&lt;&#x2F;p&gt;
&lt;p&gt;The result of the function is also a token stream and the easiest thing we can do is to just return &lt;code&gt;item&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;proc_macro_attribute&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;golem_operation&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;attr&lt;&#x2F;span&gt;&lt;span&gt;: TokenStream, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;item&lt;&#x2F;span&gt;&lt;span&gt;: TokenStream) -&amp;gt; TokenStream {
&lt;&#x2F;span&gt;&lt;span&gt;  item
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This is a valid macro that does not do anything.&lt;&#x2F;p&gt;
&lt;p&gt;We somehow have to generate a trait and a trait implementation with only having these two token streams. Before we can generate anything we need to understand the annotated function - we need its name, its parameters, its result type etc.&lt;&#x2F;p&gt;
&lt;p&gt;We can use the &lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;syn&#x2F;latest&#x2F;syn&#x2F;&quot;&gt;syn&lt;&#x2F;a&gt; create for this to parse the stream of tokens into a Rust AST.&lt;&#x2F;p&gt;
&lt;p&gt;To parse &lt;code&gt;item&lt;&#x2F;code&gt; as a function, we can write:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; ast: ItemFn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;syn::parse(item).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;expect&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;Expected a function&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This is something we can extract information from, for example &lt;code&gt;ItemFn&lt;&#x2F;code&gt; has the following contents:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;pub struct &lt;&#x2F;span&gt;&lt;span&gt;ItemFn {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;attrs&lt;&#x2F;span&gt;&lt;span&gt;: Vec&amp;lt;Attribute&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;vis&lt;&#x2F;span&gt;&lt;span&gt;: Visibility,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;sig&lt;&#x2F;span&gt;&lt;span&gt;: Signature,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;block&lt;&#x2F;span&gt;&lt;span&gt;: Box&amp;lt;Block&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And &lt;code&gt;sig&lt;&#x2F;code&gt; contains things like the function&#x27;s name, parameters and return type. It is important to keep in mind though that this is just a parsed AST from the tokens - the whole transformation runs before any type checking and we don&#x27;t have any way to identify actual Rust types. We only see what&#x27;s in the source code.&lt;&#x2F;p&gt;
&lt;p&gt;For example in our macro we expect that the annotated function returns with a &lt;code&gt;Result&lt;&#x2F;code&gt; type and we need to look into this type because we will use the success and error types in separate places in the generated code.&lt;&#x2F;p&gt;
&lt;p&gt;We cannot do this in a 100% reliable way. We can look for things like the result type &lt;em&gt;looks like&lt;&#x2F;em&gt; a &lt;code&gt;Result&amp;lt;Out, Err&amp;gt;&lt;&#x2F;code&gt;, and we may support some additional forms such as &lt;code&gt;std::result::Result&amp;lt;Out, Err&amp;gt;&lt;&#x2F;code&gt;, but if the user defined a type alias and uses that, a macro that looks at the AST cannot know that it is equal to a result type. In many cases these limitations can be solved by applying type level programming - we could have a trait that extracts the success and error types of a &lt;code&gt;Result&lt;&#x2F;code&gt; and is not implemented for any other type, and then generate code from the macro that uses these helper types.&lt;&#x2F;p&gt;
&lt;p&gt;The current implementation of the &lt;code&gt;golem_operation&lt;&#x2F;code&gt; macro does not do this for determining the result types, so it has this limitation that it only works if you use the &quot;standard&quot; way of writing &lt;code&gt;Result&amp;lt;Out, Err&amp;gt;&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;This looks like the following:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;result_type&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;ty&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;Type) -&amp;gt; Option&amp;lt;(Type, Type)&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt; ty {
&lt;&#x2F;span&gt;&lt;span&gt;        Type::Group(group) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;result_type&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;group.elem),
&lt;&#x2F;span&gt;&lt;span&gt;        Type::Paren(paren) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;result_type&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;paren.elem),
&lt;&#x2F;span&gt;&lt;span&gt;        Type::Path(type_path) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;					&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; idents &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; type_path.path.segments.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;iter&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;segment&lt;&#x2F;span&gt;&lt;span&gt;| segment.ident.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;to_string&lt;&#x2F;span&gt;&lt;span&gt;()).collect::&amp;lt;Vec&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#e06c75;color:#fafafa;&quot;&gt;;&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; idents &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span&gt;vec![&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;Result&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;] { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; ... some more cases
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; last_segment &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; type_path.path.segments.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;last&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span&gt;syn::PathArguments::AngleBracketed(generics) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;last_segment.arguments &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;None };
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; generics.args.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;              &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;None;
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span&gt;syn::GenericArgument::Type(success_type) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;generics.args[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;              &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;None;
&lt;&#x2F;span&gt;&lt;span&gt;            };
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span&gt;syn::GenericArgument::Type(err_type) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;generics.args[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;              &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;None;
&lt;&#x2F;span&gt;&lt;span&gt;						};
&lt;&#x2F;span&gt;&lt;span&gt;            Some((success_type.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;clone&lt;&#x2F;span&gt;&lt;span&gt;(), err_type.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;clone&lt;&#x2F;span&gt;&lt;span&gt;()))
&lt;&#x2F;span&gt;&lt;span&gt;          }
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; ... other cases returning None
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Once we have all the information we need - the function&#x27;s name, its parameters, the successful and failed result types, all in &lt;code&gt;syn&lt;&#x2F;code&gt; AST nodes, we can generate the additional code that we can return in the end as the new token stream.&lt;&#x2F;p&gt;
&lt;p&gt;To generate token stream we use the &lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;quote&#x2F;latest&#x2F;quote&#x2F;&quot;&gt;quote library&lt;&#x2F;a&gt;. This library provides the &lt;code&gt;quote!&lt;&#x2F;code&gt; macro, which itself generates a &lt;code&gt;TokenStream&lt;&#x2F;code&gt; . (Although it is not the same &lt;code&gt;TokenStream&lt;&#x2F;code&gt; as the one we need to return from the macro. The macro requires &lt;code&gt;proc_macro::TokenStream&lt;&#x2F;code&gt; and &lt;code&gt;quote!&lt;&#x2F;code&gt; returns &lt;code&gt;proc_macro2::TokenStream&lt;&#x2F;code&gt;. Fortunately it can be simply converted with &lt;code&gt;.into()&lt;&#x2F;code&gt;).&lt;&#x2F;p&gt;
&lt;p&gt;We write a single &lt;code&gt;quote!&lt;&#x2F;code&gt; for producing the result of the macro:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; result &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;quote! {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;#&lt;&#x2F;span&gt;&lt;span&gt;ast
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;trait #&lt;&#x2F;span&gt;&lt;span&gt;traitname {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;#&lt;&#x2F;span&gt;&lt;span&gt;fnsig;
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;impl&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;T: golem_rust::Transaction&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#e06c75;color:#fafafa;&quot;&gt;#&lt;&#x2F;span&gt;&lt;span&gt;err&amp;gt;&amp;gt; #traitname for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;mut T {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;#&lt;&#x2F;span&gt;&lt;span&gt;fnsig {
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;execute&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;        golem_rust::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;#&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;operation&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;          |#&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;input_pattern&lt;&#x2F;span&gt;&lt;span&gt;| {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;#&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;fnname&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;#&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;#&lt;&#x2F;span&gt;&lt;span&gt;input_args), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;          },
&lt;&#x2F;span&gt;&lt;span&gt;          |#&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;compensation_pattern&lt;&#x2F;span&gt;&lt;span&gt;| {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;#&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;compensate&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;              &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;#&lt;&#x2F;span&gt;&lt;span&gt;compensation,
&lt;&#x2F;span&gt;&lt;span&gt;              (op_result,),
&lt;&#x2F;span&gt;&lt;span&gt;              (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;#&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;#&lt;&#x2F;span&gt;&lt;span&gt;compensation_args), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;            ).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;map_err&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;err&lt;&#x2F;span&gt;&lt;span&gt;| err.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;          }
&lt;&#x2F;span&gt;&lt;span&gt;        ),
&lt;&#x2F;span&gt;&lt;span&gt;        (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;#&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;#&lt;&#x2F;span&gt;&lt;span&gt;input_args), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;      )
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;result.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;into&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; proc_macro2::TokenStream to proc_macro::TokenStream
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;All the parts prefixed with &lt;code&gt;#&lt;&#x2F;code&gt; are references to rust variables outside of the quote, and they can be (and usually are) various &lt;code&gt;syn&lt;&#x2F;code&gt; AST nodes or raw token streams.&lt;&#x2F;p&gt;
&lt;p&gt;There is a special syntax for interpolating sequences of values. The case used in the above example is when you write &lt;code&gt;#(#var), *&lt;&#x2F;code&gt;. This means that &lt;code&gt;var&lt;&#x2F;code&gt; is expected to be an iterable variable (in our case it will be &lt;code&gt;Vec&amp;lt;_&amp;gt;&lt;&#x2F;code&gt; usually) and it interpolates each elements by inserting extra tokens, defined between &lt;code&gt;)&lt;&#x2F;code&gt; and &lt;code&gt;*&lt;&#x2F;code&gt;, between these elements. So this example would insert a comma and a space between the elements.&lt;&#x2F;p&gt;
&lt;p&gt;The above defined &lt;code&gt;quote&lt;&#x2F;code&gt; is a template that matches what we wanted to generate. All that&#x27;s needed is to define all these variables holding dynamic parts of the generated code. The &lt;code&gt;#ast&lt;&#x2F;code&gt; variable itself is the parsed function - so the first line of the quote just makes sure the original definition is part of the result.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;code&gt;#succ&lt;&#x2F;code&gt; and &lt;code&gt;#err&lt;&#x2F;code&gt; types are extracted with the &lt;code&gt;result_type&lt;&#x2F;code&gt; helper function as described above. The others are just defined by either transforming and cloning AST nodes, or using &lt;code&gt;quote!&lt;&#x2F;code&gt; to generate sub token streams.&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s see a few examples!&lt;&#x2F;p&gt;
&lt;p&gt;The new trait&#x27;s name has to be an &lt;code&gt;Ident&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; fnname &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; fnsig.ident.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;clone&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; traitname &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;Ident::new(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;fnname.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;to_string&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;to_pascal_case&lt;&#x2F;span&gt;&lt;span&gt;(), fnsig.ident.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;span&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Here we use the &lt;code&gt;to_pascal_case&lt;&#x2F;code&gt; extension method provided by the &lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;heck&#x2F;latest&#x2F;heck&#x2F;&quot;&gt;heck crate&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Another example is the signature of the function that&#x27;s inside the trait. It is &lt;em&gt;almost&lt;&#x2F;em&gt; the same as the annotated feature, but it has to have a &lt;code&gt;self&lt;&#x2F;code&gt; parameter as the first parameter of it, that&#x27;s how it becomes an extension method on the transaction.&lt;&#x2F;p&gt;
&lt;p&gt;We can do this by cloning the annotated function&#x27;s signature and just adding a new parameter:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; fnsig &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; ast.sig.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;clone&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;fnsig.inputs.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;insert&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, parse_quote! { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span&gt;});
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Note that &lt;code&gt;parse_quote!&lt;&#x2F;code&gt; immediately parses the token stream generated by quote back to a &lt;code&gt;syn&lt;&#x2F;code&gt; AST node.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;compensation-function-shapes&quot;&gt;Compensation function shapes&lt;&#x2F;h4&gt;
&lt;p&gt;The last interesting bit is how the macro supports compensation functions of different shapes. What we support right now, is the following.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;The compensation function has no parameters at all&lt;&#x2F;li&gt;
&lt;li&gt;The compensation function takes the output of the action but not the inputs&lt;&#x2F;li&gt;
&lt;li&gt;The compensation function takes the output and all the inputs&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;With the account creation example this means all of these are valid:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;golem_operation&lt;&#x2F;span&gt;&lt;span&gt;(compensation&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt;delete_account)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;create_account&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;username&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;amp;str&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;email&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;amp;str&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; Result&amp;lt;AccountId, DomainError&amp;gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;delete_account&lt;&#x2F;span&gt;&lt;span&gt;() -&amp;gt; Result&amp;lt;(), DomainError&amp;gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;delete_account&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;account_id&lt;&#x2F;span&gt;&lt;span&gt;: AccountId) -&amp;gt; Result&amp;lt;(), DomainError&amp;gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;delete_account&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;account_id&lt;&#x2F;span&gt;&lt;span&gt;: AccountId, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;username&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;amp;str&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;email&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;amp;str&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; Result&amp;lt;(), DomainError&amp;gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;If we could have the AST of &lt;code&gt;delete_account&lt;&#x2F;code&gt; from the macro, it would be easy to decide which shape we have - we would not even need to worry about not having actual types because we could just compare the parameter list and result type tokens of the two functions to be able to decide which way to go.&lt;&#x2F;p&gt;
&lt;p&gt;Unfortunately our macro is on the &lt;code&gt;create_account&lt;&#x2F;code&gt; function and there is no way to access anything else about &lt;code&gt;delete_account&lt;&#x2F;code&gt; from it than the &lt;code&gt;compensation=delete_account&lt;&#x2F;code&gt; part which we passed as an attribute parameter.&lt;&#x2F;p&gt;
&lt;p&gt;Before solving this problem let&#x27;s see how we can get the &lt;em&gt;name&lt;&#x2F;em&gt; of the compensation function, at least:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; args &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;parse_macro_input!(args with Punctuated::&amp;lt;Meta, syn::Token&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#e06c75;color:#fafafa;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span&gt;[,]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;::parse_terminated);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; compensation &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;None;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; arg &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span&gt; args {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;if let &lt;&#x2F;span&gt;&lt;span&gt;Meta::NameValue(name_value) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; arg {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; name_value.path.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;get_ident&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;to_string&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; name_value.value;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;compensation&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;      compensation &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;Some(value);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We parse the macro&#x27;s input into a list of &lt;code&gt;Meta&lt;&#x2F;code&gt; nodes, and look for the &lt;code&gt;NameValue&lt;&#x2F;code&gt; cases representing the attribute arguments having the &lt;code&gt;x=y&lt;&#x2F;code&gt; form. If the key is &lt;code&gt;compensation&lt;&#x2F;code&gt; we store the value, which has the type &lt;code&gt;Expr&lt;&#x2F;code&gt; (expression AST node) and we can interpolate this expression node directly in the quoted code to get our function name.&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s go back to the primary problem - how can we generate code that invokes this function which can have three different shapes, if we cannot know which one it is?&lt;&#x2F;p&gt;
&lt;p&gt;First we define a &lt;strong&gt;trait&lt;&#x2F;strong&gt; that abstracts this problem for us:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;pub trait &lt;&#x2F;span&gt;&lt;span&gt;CompensationFunction&amp;lt;In, Out, Err&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;call&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;result&lt;&#x2F;span&gt;&lt;span&gt;: Out, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;input&lt;&#x2F;span&gt;&lt;span&gt;: In) -&amp;gt; Result&amp;lt;(), Err&amp;gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This always has the same shape - we just pass both the results and the inputs to it, and the trait&#x27;s implementation can decide to use any of these parameters to actually call the compensation function or not.&lt;&#x2F;p&gt;
&lt;p&gt;We can define a function that takes an arbitrary value &lt;code&gt;T&lt;&#x2F;code&gt; for which we have an implementation of this trait, and just call it:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;call_compensation_function&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;In, Out, Err&amp;gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;: impl CompensationFunction&amp;lt;In, Out, Err&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;result&lt;&#x2F;span&gt;&lt;span&gt;: Out,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;input&lt;&#x2F;span&gt;&lt;span&gt;: In,
&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; Result&amp;lt;(), Err&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    f.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;call&lt;&#x2F;span&gt;&lt;span&gt;(result, input)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;With this, we can simply generate code from the macro that passes &lt;strong&gt;the actual compensation function&lt;&#x2F;strong&gt; to the &lt;code&gt;f&lt;&#x2F;code&gt; parameter of &lt;code&gt;call_compensation_function&lt;&#x2F;code&gt;, and always pass both the result and the input!&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;call_compensation_function&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;  delete_account,
&lt;&#x2F;span&gt;&lt;span&gt;  op_result,
&lt;&#x2F;span&gt;&lt;span&gt;  (username, email)
&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;To make this work we need instances of &lt;code&gt;CompensationFunction&lt;&#x2F;code&gt; for arbitrary function types.&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s try to define it for the function with no parameters (the first supported shape):&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;impl&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;F, Err&amp;gt; CompensationFunction&amp;lt;(), (), Err&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;F
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;where
&lt;&#x2F;span&gt;&lt;span&gt;    F: FnOnce() -&amp;gt; Result&amp;lt;(), Err&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;call&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_result&lt;&#x2F;span&gt;&lt;span&gt;: (),
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_input&lt;&#x2F;span&gt;&lt;span&gt;: (),
&lt;&#x2F;span&gt;&lt;span&gt;    ) -&amp;gt; Result&amp;lt;(), (Err,)&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        Ok(())
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This is not the final implementation as we will see soon. If we try to write an implementation for the second shape - where we only use the result and not the input, we immediately run into a problem:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;impl&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;F, Out, Err&amp;gt; CompensationFunction&amp;lt;(), Out, Err&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;F
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;where
&lt;&#x2F;span&gt;&lt;span&gt;    F: FnOnce(Out) -&amp;gt; Result&amp;lt;(), Err&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The error is about &lt;strong&gt;conflicting implementations&lt;&#x2F;strong&gt; of our trait:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#383a42;&quot;&gt;&lt;code&gt;&lt;span&gt;error[E0119]: conflicting implementations of trait `CompensationFunction&amp;lt;(), (), _&amp;gt;`
&lt;&#x2F;span&gt;&lt;span&gt;  --&amp;gt; golem-rust&#x2F;src&#x2F;transaction&#x2F;compfn.rs:45:1
&lt;&#x2F;span&gt;&lt;span&gt;   |
&lt;&#x2F;span&gt;&lt;span&gt;31 | &#x2F; impl&amp;lt;F, Err&amp;gt; CompensationFunction&amp;lt;(), (), Err&amp;gt; for F
&lt;&#x2F;span&gt;&lt;span&gt;32 | | where
&lt;&#x2F;span&gt;&lt;span&gt;33 | |     F: FnOnce() -&amp;gt; Result&amp;lt;(), Err&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;   | |___________________________________- first implementation here
&lt;&#x2F;span&gt;&lt;span&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;45 | &#x2F; impl&amp;lt;F, Out, Err&amp;gt; CompensationFunction&amp;lt;(), Out, Err&amp;gt; for F
&lt;&#x2F;span&gt;&lt;span&gt;46 | | where
&lt;&#x2F;span&gt;&lt;span&gt;47 | |     F: FnOnce(Out) -&amp;gt; Result&amp;lt;(), Err&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;   | |______________________________________^ conflicting implementation
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;These. two trait implementations &lt;strong&gt;overlap&lt;&#x2F;strong&gt;. Although it is not obvious at first glance why the two are overlapping, what happens is all the types involved in the overlap check can be unified:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;The trait&#x27;s parameters -
&lt;ul&gt;
&lt;li&gt;the first is &lt;code&gt;()&lt;&#x2F;code&gt; in both cases&lt;&#x2F;li&gt;
&lt;li&gt;The second is &lt;code&gt;()&lt;&#x2F;code&gt; vs &lt;code&gt;Out&lt;&#x2F;code&gt;. Nothing prevents &lt;code&gt;Out&lt;&#x2F;code&gt; to be &lt;code&gt;()&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;The third can be anything in both cases&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;The type we implement the trait for
&lt;ul&gt;
&lt;li&gt;This is the confusing part - as we have two different function type signatures in the two cases! But these are only type bounds. We say we implement &lt;code&gt;CompensationFunction&lt;&#x2F;code&gt; for a type &lt;code&gt;F&lt;&#x2F;code&gt; which implements the trait &lt;code&gt;FnOnce() ...&lt;&#x2F;code&gt;. The problem is that in theory there can be a type that implements both these function traits, so this is not preventing the overlap either.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;This is something &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rfcs&#x2F;blob&#x2F;master&#x2F;text&#x2F;1210-impl-specialization.md&quot;&gt;specialization&lt;&#x2F;a&gt; would solve but that is currently an unstable compiler feature.&lt;&#x2F;p&gt;
&lt;p&gt;If at least one of the above types could not be unified, we would not have an overlap, so that&#x27;s what we have to do. The simplest way to do so is to stop having unconstrained types in the trait&#x27;s type parameters such as &lt;code&gt;In&lt;&#x2F;code&gt; and &lt;code&gt;Out&lt;&#x2F;code&gt; and &lt;code&gt;Err&lt;&#x2F;code&gt; (Actually &lt;code&gt;Err&lt;&#x2F;code&gt; should not be affected by this, but I applied the same technique to all parameters at once in the library. This is something that could be potentially simplified in the future.).&lt;&#x2F;p&gt;
&lt;p&gt;So we just have to have a type parameter that can contain an arbitrary input or output type, but does not unify with &lt;code&gt;()&lt;&#x2F;code&gt;. We can do that by wrapping the output type in a tuple:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;impl&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;F, Out, Err&amp;gt; CompensationFunction&amp;lt;(), (Out,), (Err,)&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;F
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;where
&lt;&#x2F;span&gt;&lt;span&gt;    F: FnOnce(Out) -&amp;gt; Result&amp;lt;(), Err&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Here instead of &lt;code&gt;Out&lt;&#x2F;code&gt; we use &lt;code&gt;(Out,)&lt;&#x2F;code&gt; which is a 1-tuple wrapping our output type. This no longer unifies with &lt;code&gt;()&lt;&#x2F;code&gt; so the compiler error is solved!&lt;&#x2F;p&gt;
&lt;p&gt;We can imagine additional trait implementations for one or more input parameters:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;impl&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;F, T1, Out, Err&amp;gt; CompensationFunction&amp;lt;(T1,), (Out,), (Err,)&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;F
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;where
&lt;&#x2F;span&gt;&lt;span&gt;    F: FnOnce(Out, T1) -&amp;gt; Result&amp;lt;(), Err&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;impl&amp;lt;F, T1, T2, Out, Err&amp;gt; CompensationFunction&amp;lt;(T1,T2), (Out,), (Err,)&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; F
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;where
&lt;&#x2F;span&gt;&lt;span&gt;    F: FnOnce(Out, T1, T2) -&amp;gt; Result&amp;lt;(), Err&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Two more problems to solve before we are done!&lt;&#x2F;p&gt;
&lt;p&gt;The first problem occurs when we try to use this mechanism for the first to compensation function shapes - when the result, or the result and the input are not used by the function.&lt;&#x2F;p&gt;
&lt;p&gt;The problem is that these trait implementations bind the &lt;code&gt;In&lt;&#x2F;code&gt; and&#x2F;or &lt;code&gt;Out&lt;&#x2F;code&gt; types to &lt;code&gt;()&lt;&#x2F;code&gt; in these cases, which means that our &lt;code&gt;call&lt;&#x2F;code&gt; function will use the unit type for these parameters. For example for &lt;code&gt;delete_account&lt;&#x2F;code&gt; which does not takes the input parameters, it would have the following types if we replace the generic parameters with the inferred ones:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;call_compensation_function&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;: impl FnOnce(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;AccountId&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; Result&amp;lt;(), DomainError&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;result&lt;&#x2F;span&gt;&lt;span&gt;: AccountId,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;input&lt;&#x2F;span&gt;&lt;span&gt;: (),
&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; Result&amp;lt;(), DomainError&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And our macro will call it like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;call_compensation_function&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;  delete_account,
&lt;&#x2F;span&gt;&lt;span&gt;  op_result,
&lt;&#x2F;span&gt;&lt;span&gt;  (username, email)
&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This of course will not compile, because we pass &lt;code&gt;(&amp;amp;str, &amp;amp;str)&lt;&#x2F;code&gt; in place of a &lt;code&gt;()&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s take a step back, and change our &lt;code&gt;CompensationFunction&lt;&#x2F;code&gt; trait:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;pub trait &lt;&#x2F;span&gt;&lt;span&gt;CompensationFunction&amp;lt;In, Out, Err&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;call&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;result&lt;&#x2F;span&gt;&lt;span&gt;: impl TupleOrUnit&amp;lt;Out&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;input&lt;&#x2F;span&gt;&lt;span&gt;: impl TupleOrUnit&amp;lt;In&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  ) -&amp;gt; Result&amp;lt;(), Err&amp;gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Instead of directly taking &lt;code&gt;Out&lt;&#x2F;code&gt; and &lt;code&gt;In&lt;&#x2F;code&gt; in the parameters we now accept &lt;strong&gt;anything that implements TupleOrUnit&lt;&#x2F;strong&gt; for the given type.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;TupleOrUnit&lt;&#x2F;code&gt; is just a special conversion trait:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;pub trait &lt;&#x2F;span&gt;&lt;span&gt;TupleOrUnit&amp;lt;T&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;into&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; T;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;What makes it special and what makes it solve our problem is what instances we have for it.&lt;&#x2F;p&gt;
&lt;p&gt;First of all we say that &lt;strong&gt;anything can be converted to unit&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;impl&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;T&amp;gt; TupleOrUnit&amp;lt;()&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;T {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;into&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;) {}
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Then we use the same trick to avoid overlapping instances, and we say that 1-tuple, 2-tuple, etc. can be converted to itself only:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;impl&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;T1&amp;gt; TupleOrUnit&amp;lt;(T1, )&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; (T1, ) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;into&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; (T1, ) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;self
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;impl&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;T1, T2&amp;gt; TupleOrUnit&amp;lt;(T1, T2, )&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; (T1, T2, ) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;into&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; (T1, T2, ) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;self
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;With this we achieved that the &lt;code&gt;call_compensation_function&lt;&#x2F;code&gt; function is still type safe - it requires us to pass the proper &lt;code&gt;Out&lt;&#x2F;code&gt; and &lt;code&gt;In&lt;&#x2F;code&gt; types - but in the special case when either of these types are unit, it allows us to pass an arbitrary value instead of an actual &lt;code&gt;()&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;This makes our macro complete.&lt;&#x2F;p&gt;
&lt;p&gt;The last thing to solve is to have enough instances of these two type classes - &lt;code&gt;CompensationFunction&lt;&#x2F;code&gt; and &lt;code&gt;TupleOrUnit&lt;&#x2F;code&gt; so our library works with more than 1 or 2 parameters. Writing them by hand is an option but we can easily generate them with another macro!&lt;&#x2F;p&gt;
&lt;p&gt;This time we don&#x27;t have to write a procedural macro - we can use a &lt;strong&gt;declarative macro&lt;&#x2F;strong&gt;s which are simpler, and they can be defined inline in the same module where we define these types.&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s start with &lt;code&gt;TupleOrUnit&lt;&#x2F;code&gt; as it is a bit simpler. We use the &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;reference&#x2F;macros-by-example.html&quot;&gt;macro_rules&lt;&#x2F;a&gt; macro which is basically a pattern match with a special syntax - you can match on what is passed to the macro, and generate code with interpolation similar to the &lt;code&gt;quote!&lt;&#x2F;code&gt; macro - but using &lt;code&gt;$&lt;&#x2F;code&gt; instead of &lt;code&gt;#&lt;&#x2F;code&gt; as the interpolation symbol. The following definition defines an instance of &lt;code&gt;TupleOrUnit&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;macro_rules! &lt;&#x2F;span&gt;&lt;span&gt;tuple_or_unit {
&lt;&#x2F;span&gt;&lt;span&gt;    (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;$ty&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;ident&lt;&#x2F;span&gt;&lt;span&gt;),&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;impl&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;$(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;$ty&lt;&#x2F;span&gt;&lt;span&gt;),*&amp;gt; TupleOrUnit&amp;lt;($(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;$ty&lt;&#x2F;span&gt;&lt;span&gt;,)*)&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; ($(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;$ty&lt;&#x2F;span&gt;&lt;span&gt;,)*) {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;into&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; ($(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;$ty&lt;&#x2F;span&gt;&lt;span&gt;,)*) {
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;self
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We have a single case of our pattern match, which matches a &lt;strong&gt;comma-separated list of identifiers&lt;&#x2F;strong&gt;. We can refer to this list of identifiers as &lt;code&gt;ty&lt;&#x2F;code&gt;. Then we use the same syntax for interpolating sequences into the code as we have seen already in our procedural macro and just generate the instance.&lt;&#x2F;p&gt;
&lt;p&gt;We can call this macro with a list of type parameters (which are all &lt;em&gt;identifiers&lt;&#x2F;em&gt;):&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;tuple_or_unit!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;T1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;T2&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;T3&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Let&#x27;s do the same for generating &lt;code&gt;CompensationFunction&lt;&#x2F;code&gt; instances:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;macro_rules! &lt;&#x2F;span&gt;&lt;span&gt;compensation_function {
&lt;&#x2F;span&gt;&lt;span&gt;    (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;$ty&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;ident&lt;&#x2F;span&gt;&lt;span&gt;),&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;impl&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;F, $(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;$ty&lt;&#x2F;span&gt;&lt;span&gt;),*, Out, Err&amp;gt; CompensationFunction&amp;lt;($(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;$ty&lt;&#x2F;span&gt;&lt;span&gt;),*,), (Out,), (Err,)&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;F
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;where
&lt;&#x2F;span&gt;&lt;span&gt;            F: FnOnce(Out, $(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;$ty&lt;&#x2F;span&gt;&lt;span&gt;),*) -&amp;gt; Result&amp;lt;(), Err&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;call&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;out&lt;&#x2F;span&gt;&lt;span&gt;: impl TupleOrUnit&amp;lt;(Out,)&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;input&lt;&#x2F;span&gt;&lt;span&gt;: impl TupleOrUnit&amp;lt;($(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;$ty&lt;&#x2F;span&gt;&lt;span&gt;),*,)&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;            ) -&amp;gt; Result&amp;lt;(), (Err,)&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;                #[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;allow&lt;&#x2F;span&gt;&lt;span&gt;(non_snake_case)]
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span&gt;( &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;$ty&lt;&#x2F;span&gt;&lt;span&gt;,)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; input.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;into&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span&gt;(out,) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;into&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;(out, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;$ty&lt;&#x2F;span&gt;&lt;span&gt;),&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;map_err&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;err&lt;&#x2F;span&gt;&lt;span&gt;| (err,))
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The only interesting part here is how we access the components of our tuple.&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s imagine we pass &lt;code&gt;T1, T2, T3&lt;&#x2F;code&gt; as arguments to this macro, so &lt;code&gt;ty&lt;&#x2F;code&gt; is a sequence of three identifiers. We can interpolate this comma separated list into the type parameter part (&lt;code&gt;impl&amp;lt;F, $($ty),*, Out, Err&amp;gt;&lt;&#x2F;code&gt;) without any problems but this is still just a list of identifiers - and when we call our compensation function (&lt;code&gt;self&lt;&#x2F;code&gt;), we have to access the individual elements of this tuple and pass them to the function as separate parameters.&lt;&#x2F;p&gt;
&lt;p&gt;We could write it by hand like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;call&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;out&lt;&#x2F;span&gt;&lt;span&gt;: impl TupleOrUnit&amp;lt;(Out,)), input: impl TupleOrUnit&amp;lt;(T1, T2, T3)&amp;gt;) -&amp;gt; Result&amp;lt;(), Err&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#e06c75;color:#fafafa;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;out&lt;&#x2F;span&gt;&lt;span&gt;: Out = out.into();
&lt;&#x2F;span&gt;&lt;span&gt;  let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;input&lt;&#x2F;span&gt;&lt;span&gt;: (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;T1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;T2&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;T3&lt;&#x2F;span&gt;&lt;span&gt;) = input.into();
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;out&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;input&lt;&#x2F;span&gt;&lt;span&gt;.0, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;input&lt;&#x2F;span&gt;&lt;span&gt;.1, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;input&lt;&#x2F;span&gt;&lt;span&gt;.2)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;It is possible to generate a list of accessors like this from a procedural macro, but not in a declarative one - we only have &lt;code&gt;ty&lt;&#x2F;code&gt; to work with. We can instead &lt;strong&gt;destructure&lt;&#x2F;strong&gt; the tuple and we can actually reuse the list of identifiers to do so!&lt;&#x2F;p&gt;
&lt;p&gt;In the above macro code, this can be seen as:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;allow&lt;&#x2F;span&gt;&lt;span&gt;(non_snake_case)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span&gt;( &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;$ty&lt;&#x2F;span&gt;&lt;span&gt;,)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; input.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;into&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;(out, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;$ty&lt;&#x2F;span&gt;&lt;span&gt;),&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This translates to&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;allow&lt;&#x2F;span&gt;&lt;span&gt;(non_snake_case)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;T1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;T2&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;T3&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; input.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;into&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;(out, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;T1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;T2&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;T3&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The error mapping is only necessary because currently the error typed is also wrapped into a tuple - this could enable additional function shapes where the compensation function never fails, for example, but it is not implemented yet.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;The library described here is open source and is available &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;golemcloud&#x2F;golem-rust&quot;&gt;on GitHub&lt;&#x2F;a&gt; and published &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;golem-rust&quot;&gt;to crates.io&lt;&#x2F;a&gt;. Documentation and examples will soon be added to &lt;a href=&quot;https:&#x2F;&#x2F;learn.golem.cloud&#x2F;docs&#x2F;intro&quot;&gt;Golem&#x27;s learn pages&lt;&#x2F;a&gt;. And of course this is just a first version I hope to see grow based on user feedback.&lt;&#x2F;p&gt;
&lt;p&gt;We also plan to have similar higher-level wrapper libraries for Golem&#x27;s features for the other supported languages - everything Golem provides is exposed through the WASM Component Model so any language supporting that have immediate access to the building blocks. All remains is writing idiomatic wrappers on top of them for each language.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Worker to Worker communication in Golem</title>
        <published>2024-03-08T00:00:00+00:00</published>
        <updated>2024-03-08T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Daniel Vigovszky
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://blog.vigoo.dev/posts/w2w-communication-golem/"/>
        <id>https://blog.vigoo.dev/posts/w2w-communication-golem/</id>
        
        <content type="html" xml:base="https://blog.vigoo.dev/posts/w2w-communication-golem/">&lt;p&gt;This article was originally posted at &lt;a href=&quot;https:&#x2F;&#x2F;www.golem.cloud&#x2F;post&#x2F;worker-to-worker-communication&quot;&gt;the Golem Cloud Blog&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Golem Cloud&#x27;s first developer preview &lt;a href=&quot;https:&#x2F;&#x2F;www.golem.cloud&#x2F;post&#x2F;unveiling-golem-cloud&quot;&gt;has been unveiled in August&lt;&#x2F;a&gt;, and just a month ago, we released &lt;a href=&quot;https:&#x2F;&#x2F;www.golem.cloud&#x2F;post&#x2F;golem-goes-open-source&quot;&gt;an open-source version of Golem&lt;&#x2F;a&gt;. Workers, the fundamental primitive in Golem, expose a typed interface that can be invoked through the REST API or the command line tools, but until today, calling a worker from &lt;em&gt;another worker&lt;&#x2F;em&gt; was neither easy nor type-safe.&lt;&#x2F;p&gt;
&lt;p&gt;With the latest release of Golem and the &lt;code&gt;golem-cli&lt;&#x2F;code&gt; tool, we finally have a first-class, typed way to invoke one worker from another, using any of the supported guest languages!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;golem-wasm-rpc&quot;&gt;Golem WASM RPC&lt;&#x2F;h2&gt;
&lt;p&gt;Golem&#x27;s new worker to worker communication feature consists of two major layers:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;A low-level, dynamic worker invocation API exposed as a Golem &lt;strong&gt;host function&lt;&#x2F;strong&gt; to all workers. This interface is not type safe. Rather, it matches the capabilities of the external REST API, allowing a worker to invoke any method on any other worker with any parameters. However, it avoids the overhead of setting up an HTTP connection and will be optimized in the future.&lt;&#x2F;li&gt;
&lt;li&gt;The ability to generate &lt;strong&gt;stubs&lt;&#x2F;strong&gt; for having a completely type-safe, language-independent remote worker invocation for any supported language having a WIT-based binding generator.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;With the new stub generator commands integrated into Golem&#x27;s command line tool (&lt;code&gt;golem-cli&lt;&#x2F;code&gt;) worker to worker communication is now a simple and fully type-safe experience.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;a-full-example&quot;&gt;A full example&lt;&#x2F;h2&gt;
&lt;p&gt;To demonstrate how this new feature works, we will take one of the first Golem example projects, the &lt;strong&gt;shopping cart&lt;&#x2F;strong&gt;, and extend it with worker-to-worker communication. The original shopping-cart project defines a worker for each shopping cart of an online web store, with exported functions to add items to the cart and eventually check out and finish the shopping process.&lt;&#x2F;p&gt;
&lt;p&gt;In this example, we introduce a second &lt;strong&gt;worker template&lt;&#x2F;strong&gt;, one that will be used to create a single &lt;strong&gt;worker&lt;&#x2F;strong&gt; for each online shopper. This worker will keep a log of all the purchases of the user it belongs to. We will extend the shopping cart&#x27;s &lt;code&gt;checkout&lt;&#x2F;code&gt; function with a remote worker invocation to add a new entry to the account&#x27;s purchase log.&lt;&#x2F;p&gt;
&lt;p&gt;First, let&#x27;s make sure we have the latest version of &lt;code&gt;golem-cli&lt;&#x2F;code&gt;, if using the open-source Golem version, or &lt;code&gt;golem-cloud-cli&lt;&#x2F;code&gt;, if using the hosted version. It must have the new &lt;code&gt;stubgen&lt;&#x2F;code&gt; subcommand, to check let&#x27;s run &lt;code&gt;golem-cli stubgen --help&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;WASM&lt;&#x2F;span&gt;&lt;span&gt; RPC stub generator
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;Usage:&lt;&#x2F;span&gt;&lt;span&gt; golem-cli stubgen &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;OPTIONS&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;] &amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;COMMAND&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;Commands:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;generate&lt;&#x2F;span&gt;&lt;span&gt;              Generate a Rust RPC stub crate for a WASM component
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;build&lt;&#x2F;span&gt;&lt;span&gt;                 Build an RPC stub for a WASM component
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;add-stub-dependency&lt;&#x2F;span&gt;&lt;span&gt;   Adds a generated stub as a dependency to another WASM component
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;compose&lt;&#x2F;span&gt;&lt;span&gt;               Compose a WASM component with a generated stub WASM
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;initialize-workspace&lt;&#x2F;span&gt;&lt;span&gt;  Initializes a Golem-specific cargo-make configuration in a Cargo workspace for automatically generating stubs and composing results
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;help&lt;&#x2F;span&gt;&lt;span&gt;                  Print this message or the help of the given subcommand(s)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;Options:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;-v, --verbose&lt;&#x2F;span&gt;&lt;span&gt;...  Increase logging verbosity
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;-q, --quiet&lt;&#x2F;span&gt;&lt;span&gt;...    Decrease logging verbosity
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;-h, --help&lt;&#x2F;span&gt;&lt;span&gt;        Print help
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;preparing-the-example&quot;&gt;Preparing the example&lt;&#x2F;h3&gt;
&lt;p&gt;We are going to create two different &lt;strong&gt;Golem templates&lt;&#x2F;strong&gt;, and have the source codes of both of them in a single &lt;strong&gt;Cargo workspace&lt;&#x2F;strong&gt;. This is not required—they could live in completely separate places—but it allows using our built-in cargo-make support, which currently gives us the best possible developer experience for worker-to-worker communication.&lt;&#x2F;p&gt;
&lt;p&gt;First, let&#x27;s use the &lt;code&gt;golem-cli new&lt;&#x2F;code&gt; command to take the &lt;strong&gt;shopping-cart example&lt;&#x2F;strong&gt; and generate a new template source from it:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; golem-cli new&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt; --example&lt;&#x2F;span&gt;&lt;span&gt; rust-shopping-cart&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt; --template-name&lt;&#x2F;span&gt;&lt;span&gt; shopping-cart-rpc
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;See&lt;&#x2F;span&gt;&lt;span&gt; the documentation about installing common tooling: https:&#x2F;&#x2F;golem.cloud&#x2F;learn&#x2F;rust
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;Compile&lt;&#x2F;span&gt;&lt;span&gt; the Rust component with cargo-component:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;cargo&lt;&#x2F;span&gt;&lt;span&gt; component build&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt; --release
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;The&lt;&#x2F;span&gt;&lt;span&gt; result in target&#x2F;wasm32-wasi&#x2F;release&#x2F;shopping_cart_rpc.wasm is ready to be used with Golem!
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;code&gt;shopping-cart-rpc&lt;&#x2F;code&gt; directory now contains a single Rust crate, which can be compiled to WASM using &lt;code&gt;cargo component build&lt;&#x2F;code&gt;. We need two different WASMs (two Golem templates) so as a first step, we convert the generated Cargo project to a &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;book&#x2F;ch14-03-cargo-workspaces.html&quot;&gt;&lt;strong&gt;cargo workspace&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;First, create two sub-directories for the two templates we will use:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; mkdir&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt; -pv&lt;&#x2F;span&gt;&lt;span&gt; shopping-cart
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;shopping-cart
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; mkdir&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt; -pv&lt;&#x2F;span&gt;&lt;span&gt; purchase-history
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;purchase-history
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Then, move the generated shopping cart source code into the &lt;code&gt;shopping-cart&lt;&#x2F;code&gt; subdirectory:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; mv&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt; -v&lt;&#x2F;span&gt;&lt;span&gt; src shopping-cart
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;src&lt;&#x2F;span&gt;&lt;span&gt; -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; shopping-cart&#x2F;src
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; mv&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt; -v&lt;&#x2F;span&gt;&lt;span&gt; wit shopping-cart
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;wit&lt;&#x2F;span&gt;&lt;span&gt; -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; shopping-cart&#x2F;wit
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; mv&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt; -v&lt;&#x2F;span&gt;&lt;span&gt; Cargo.toml shopping-cart
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;Cargo.toml&lt;&#x2F;span&gt;&lt;span&gt; -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; shopping-cart&#x2F;Cargo.toml
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We can copy the whole contents of the &lt;code&gt;shopping-cart&lt;&#x2F;code&gt; directory to the &lt;code&gt;purchase-history&lt;&#x2F;code&gt; directory too:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; cp&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt; -rv&lt;&#x2F;span&gt;&lt;span&gt; shopping-cart&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt; purchase-history
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;shopping-cart&#x2F;Cargo.toml&lt;&#x2F;span&gt;&lt;span&gt; -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; purchase-history&#x2F;Cargo.toml
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;shopping-cart&#x2F;src&lt;&#x2F;span&gt;&lt;span&gt; -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; purchase-history&#x2F;src
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;shopping-cart&#x2F;src&#x2F;lib.rs&lt;&#x2F;span&gt;&lt;span&gt; -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; purchase-history&#x2F;src&#x2F;lib.rs
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;shopping-cart&#x2F;wit&lt;&#x2F;span&gt;&lt;span&gt; -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; purchase-history&#x2F;wit
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;shopping-cart&#x2F;wit&#x2F;shopping-cart-rpc.wit&lt;&#x2F;span&gt;&lt;span&gt; -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; purchase-history&#x2F;wit&#x2F;shopping-cart-rpc.wit
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Then we create a new &lt;code&gt;Cargo.toml&lt;&#x2F;code&gt; file in the root, pointing to the two sub-projects:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;toml&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-toml &quot;&gt;&lt;code class=&quot;language-toml&quot; data-lang=&quot;toml&quot;&gt;&lt;span&gt;[workspace]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;resolver &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;2&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;members &lt;&#x2F;span&gt;&lt;span&gt;= [
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;shopping-cart&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;purchase-history&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Next, modify the &lt;code&gt;name&lt;&#x2F;code&gt; property in both sub-project&#x27;s &lt;code&gt;Cargo.toml&lt;&#x2F;code&gt;. In &lt;code&gt;shopping-cart&#x2F;Cargo.toml&lt;&#x2F;code&gt;, it should be:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;toml&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-toml &quot;&gt;&lt;code class=&quot;language-toml&quot; data-lang=&quot;toml&quot;&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;name &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;shopping-cart&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;while in the other&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;toml&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-toml &quot;&gt;&lt;code class=&quot;language-toml&quot; data-lang=&quot;toml&quot;&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;name &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;purchase-history&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;It&#x27;s also recommended that you rename the WIT file in both the &lt;code&gt;wit&lt;&#x2F;code&gt; directories to a file name that corresponds to the given sub-project&#x27;s name, but it does not have any effect on the compilation—it just makes working on the source code easier.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; mv shopping-cart&#x2F;wit&#x2F;shopping-cart-rpc.wit shopping-cart&#x2F;wit&#x2F;shopping-cart.wit
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; mv purchase-history&#x2F;wit&#x2F;shopping-cart-rpc.wit purchase-history&#x2F;wit&#x2F;purchase-history.wit
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;At this point running &lt;code&gt;cargo component build&lt;&#x2F;code&gt; in the root will compile both identical sub-projects, creating two different WASM files (but both containing the shopping cart implementation for now):&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; cargo component build
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;Creating&lt;&#x2F;span&gt;&lt;span&gt; component &#x2F;Users&#x2F;vigoo&#x2F;projects&#x2F;demo&#x2F;shopping-cart-rpc&#x2F;target&#x2F;wasm32-wasi&#x2F;debug&#x2F;purchase_history.wasm
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;Creating&lt;&#x2F;span&gt;&lt;span&gt; component &#x2F;Users&#x2F;vigoo&#x2F;projects&#x2F;demo&#x2F;shopping-cart-rpc&#x2F;target&#x2F;wasm32-wasi&#x2F;debug&#x2F;shopping_cart.wasm
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;implementing-the-purchase-history-template&quot;&gt;Implementing the purchase history template&lt;&#x2F;h3&gt;
&lt;p&gt;Before talking about &lt;em&gt;worker-to-worker communication&lt;&#x2F;em&gt;, let&#x27;s just implement a simple version of the &lt;strong&gt;purchase history template&lt;&#x2F;strong&gt;. Each worker of this template will correspond to a &lt;strong&gt;user&lt;&#x2F;strong&gt; of the system, the worker name being equal to the user&#x27;s identifier. We only need two exported functions, one for recording a purchase, and one for getting all the previous purchases.&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s completely replace &lt;code&gt;purchase-history&#x2F;wit&#x2F;purchase-history.wit&lt;&#x2F;code&gt; with the following interface definition:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;wit&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-wit &quot;&gt;&lt;code class=&quot;language-wit&quot; data-lang=&quot;wit&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;package &lt;&#x2F;span&gt;&lt;span&gt;shopping:purchase-history;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;interface &lt;&#x2F;span&gt;&lt;span&gt;api {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;record &lt;&#x2F;span&gt;&lt;span&gt;product-item {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;product-id&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;price&lt;&#x2F;span&gt;&lt;span&gt;: float32,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;quantity&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;record &lt;&#x2F;span&gt;&lt;span&gt;order {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;order-id&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;items&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;list&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;product-item&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;total&lt;&#x2F;span&gt;&lt;span&gt;: float32,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;timestamp&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;u64&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;add-order&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;func&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;order&lt;&#x2F;span&gt;&lt;span&gt;: order) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;get-orders&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;func&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;-&amp;gt; list&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;order&amp;gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;world &lt;&#x2F;span&gt;&lt;span&gt;purchase-history {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;export &lt;&#x2F;span&gt;&lt;span&gt;api;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Our &lt;code&gt;product-item&lt;&#x2F;code&gt; and &lt;code&gt;order&lt;&#x2F;code&gt; types are the same that we have in the shopping-cart WIT. In a next step, we will remove them from the shopping-cart WIT, and import them from this component&#x27;s interface definition!&lt;&#x2F;p&gt;
&lt;p&gt;Running &lt;code&gt;cargo component build&lt;&#x2F;code&gt; now will print a couple of errors, as we did not update the &lt;code&gt;purchase-history&lt;&#x2F;code&gt; module&#x27;s Rust source code yet:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; cargo component build
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;error[E0433]:&lt;&#x2F;span&gt;&lt;span&gt; failed to resolve: could not find `&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;golem&lt;&#x2F;span&gt;&lt;span&gt;` in `&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;exports&lt;&#x2F;span&gt;&lt;span&gt;`
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;--&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; purchase-history&#x2F;src&#x2F;lib.rs:3:31
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;|
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;3 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;use&lt;&#x2F;span&gt;&lt;span&gt; crate::bindings::exports::golem::template::api::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;*;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;|                               &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;^^^^^&lt;&#x2F;span&gt;&lt;span&gt; could not find `&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;golem&lt;&#x2F;span&gt;&lt;span&gt;` in `&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;exports&lt;&#x2F;span&gt;&lt;span&gt;`
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;A simple implementation of this can be the following code replacing the existing &lt;code&gt;lib.rs&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;mod &lt;&#x2F;span&gt;&lt;span&gt;bindings;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;use crate&lt;&#x2F;span&gt;&lt;span&gt;::bindings::exports::shopping::purchase_history::api::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;Component;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;State {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;orders&lt;&#x2F;span&gt;&lt;span&gt;: Vec&amp;lt;Order&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;static mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;STATE&lt;&#x2F;span&gt;&lt;span&gt;: State &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; State {
&lt;&#x2F;span&gt;&lt;span&gt;    orders: Vec::new()
&lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;with_state&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;T&amp;gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;: impl FnOnce(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;mut State&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; T) -&amp;gt; T {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; result &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= unsafe &lt;&#x2F;span&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;amp;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;STATE&lt;&#x2F;span&gt;&lt;span&gt;) };
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; result;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;Guest &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;Component {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;add_order&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;order&lt;&#x2F;span&gt;&lt;span&gt;: Order) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;with_state&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;state&lt;&#x2F;span&gt;&lt;span&gt;| {
&lt;&#x2F;span&gt;&lt;span&gt;            state.orders.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span&gt;(order);
&lt;&#x2F;span&gt;&lt;span&gt;        });
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;get_orders&lt;&#x2F;span&gt;&lt;span&gt;() -&amp;gt; Vec&amp;lt;Order&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;with_state&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;state&lt;&#x2F;span&gt;&lt;span&gt;| {
&lt;&#x2F;span&gt;&lt;span&gt;            state.orders.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;clone&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;        })
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;With this, &lt;code&gt;cargo component build&lt;&#x2F;code&gt; now compiles the new &lt;code&gt;purchase_history.wasm&lt;&#x2F;code&gt; for us.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;worker-to-worker-communication&quot;&gt;Worker to worker communication&lt;&#x2F;h3&gt;
&lt;p&gt;At this point, the only outstanding task in our example is to &lt;strong&gt;invoke the appropriate purchase history worker&lt;&#x2F;strong&gt; in the &lt;code&gt;checkout&lt;&#x2F;code&gt; implementation of the shopping cart.&lt;&#x2F;p&gt;
&lt;p&gt;To find all the available options for doing this, check the &lt;a href=&quot;https:&#x2F;&#x2F;learn.golem.cloud&#x2F;docs&#x2F;rpc&quot;&gt;Worker-to-Worker communication&#x27;s documentation&lt;&#x2F;a&gt;. In this example, we have both the target (the purchase history) and the caller (the shopping cart) in &lt;strong&gt;the same cargo workspace&lt;&#x2F;strong&gt;, so we can use Golem&#x27;s &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;sagiegurari&#x2F;cargo-make&quot;&gt;cargo-make&lt;&#x2F;a&gt; based solution for enabling communication between the different sub-projects of the workspace.&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s initialize this using &lt;code&gt;golem-cli&lt;&#x2F;code&gt; (or &lt;code&gt;golem-cloud-cli&lt;&#x2F;code&gt;):&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; golem-cli stubgen initialize-workspace&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt; --targets&lt;&#x2F;span&gt;&lt;span&gt; purchase-history&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt; --callers&lt;&#x2F;span&gt;&lt;span&gt; shopping-cart
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;Writing&lt;&#x2F;span&gt;&lt;span&gt; cargo-make Makefile to &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&#x2F;Users&#x2F;vigoo&#x2F;projects&#x2F;demo&#x2F;shopping-cart-rpc&#x2F;Makefile.toml&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;Generating&lt;&#x2F;span&gt;&lt;span&gt; initial stub for purchase-history
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;Generating&lt;&#x2F;span&gt;&lt;span&gt; stub WIT to &#x2F;Users&#x2F;vigoo&#x2F;projects&#x2F;demo&#x2F;shopping-cart-rpc&#x2F;purchase-history-stub&#x2F;wit&#x2F;_stub.wit
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;Copying&lt;&#x2F;span&gt;&lt;span&gt; root package shopping:purchasehistory
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;Users&#x2F;vigoo&#x2F;projects&#x2F;demo&#x2F;shopping-cart-rpc&#x2F;purchase-history&#x2F;wit&#x2F;purchase-history.wit to &#x2F;Users&#x2F;vigoo&#x2F;projects&#x2F;demo&#x2F;shopping-cart-rpc&#x2F;purchase-history-stub&#x2F;wit&#x2F;deps&#x2F;shopping_purchasehistory&#x2F;purchase-history.wit
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;Writing&lt;&#x2F;span&gt;&lt;span&gt; wasm-rpc.wit to &#x2F;Users&#x2F;vigoo&#x2F;projects&#x2F;demo&#x2F;shopping-cart-rpc&#x2F;purchase-history-stub&#x2F;wit&#x2F;deps&#x2F;wasm-rpc
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;Generating&lt;&#x2F;span&gt;&lt;span&gt; Cargo.toml to &#x2F;Users&#x2F;vigoo&#x2F;projects&#x2F;demo&#x2F;shopping-cart-rpc&#x2F;purchase-history-stub&#x2F;Cargo.toml
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;Generating&lt;&#x2F;span&gt;&lt;span&gt; stub source to &#x2F;Users&#x2F;vigoo&#x2F;projects&#x2F;demo&#x2F;shopping-cart-rpc&#x2F;purchase-history-stub&#x2F;src&#x2F;lib.rs
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;Writing&lt;&#x2F;span&gt;&lt;span&gt; updated Cargo.toml to &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&#x2F;Users&#x2F;vigoo&#x2F;projects&#x2F;demo&#x2F;shopping-cart-rpc&#x2F;Cargo.toml&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;As a next step, we check if the generated artifacts work, by running &lt;strong&gt;cargo make&lt;&#x2F;strong&gt; to execute the full build flow. It contains custom steps invoking &lt;code&gt;golem-cli&lt;&#x2F;code&gt; to implement the typed worker-to-worker communication.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; cargo make build-flow
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;Creating&lt;&#x2F;span&gt;&lt;span&gt; component &#x2F;Users&#x2F;vigoo&#x2F;projects&#x2F;demo&#x2F;shopping-cart-rpc&#x2F;target&#x2F;wasm32-wasi&#x2F;debug&#x2F;purchase_history.wasm
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;Creating&lt;&#x2F;span&gt;&lt;span&gt; component &#x2F;Users&#x2F;vigoo&#x2F;projects&#x2F;demo&#x2F;shopping-cart-rpc&#x2F;target&#x2F;wasm32-wasi&#x2F;debug&#x2F;shopping_cart.wasm
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;Creating&lt;&#x2F;span&gt;&lt;span&gt; component &#x2F;Users&#x2F;vigoo&#x2F;projects&#x2F;demo&#x2F;shopping-cart-rpc&#x2F;target&#x2F;wasm32-wasi&#x2F;debug&#x2F;purchase_history_stub.wasm
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;[cargo-make]&lt;&#x2F;span&gt;&lt;span&gt; INFO - Execute Command: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;wasm-rpc-stubgen&amp;quot; &amp;quot;compose&amp;quot; &amp;quot;--source-wasm&amp;quot; &amp;quot;target&#x2F;wasm32-wasi&#x2F;debug&#x2F;shopping_cart.wasm&amp;quot; &amp;quot;--stub-wasm&amp;quot; &amp;quot;target&#x2F;wasm32-wasi&#x2F;debug&#x2F;purchase_history_stub.wasm&amp;quot; &amp;quot;--dest-wasm&amp;quot; &amp;quot;target&#x2F;wasm32-wasi&#x2F;debug&#x2F;shopping_cart_composed.wasm&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;Error:&lt;&#x2F;span&gt;&lt;span&gt; no dependencies of component `&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;target&#x2F;wasm32-wasi&#x2F;debug&#x2F;shopping_cart.wasm&lt;&#x2F;span&gt;&lt;span&gt;` were found
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Don&#x27;t worry about the failure at the end - it will be fixed in the next step.&lt;&#x2F;p&gt;
&lt;p&gt;There are several changes in our workspace after running this command:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;We have a &lt;code&gt;Makefile.toml&lt;&#x2F;code&gt; file describing custom build tasks related to worker to worker communication&lt;&#x2F;li&gt;
&lt;li&gt;We have a completely new sub-project called &lt;code&gt;purchase-history-stub&lt;&#x2F;code&gt; which is added to the Cargo workspace&lt;&#x2F;li&gt;
&lt;li&gt;The &lt;code&gt;shopping-cart&#x2F;wit&#x2F;deps&lt;&#x2F;code&gt; directory now contains three dependencies: the original purchase history module, the generated stub interface, and the general purpose &lt;code&gt;wasm-rpc&lt;&#x2F;code&gt; package.&lt;&#x2F;li&gt;
&lt;li&gt;These dependencies are also registered in &lt;code&gt;shopping-cart&#x2F;Cargo.toml&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Before further explaining what these generated stubs are, let&#x27;s finish our example. We need to modify the &lt;strong&gt;shopping cart&lt;&#x2F;strong&gt; template&#x27;s interface definition (&lt;code&gt;shopping-cart&#x2F;wit&#x2F;shopping-cart.wit&lt;&#x2F;code&gt;) to import the generated stub, and to reuse the data types defined for the purchase history template instead of redefining them.&lt;&#x2F;p&gt;
&lt;p&gt;The updated WIT file would look like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;wit&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-wit &quot;&gt;&lt;code class=&quot;language-wit&quot; data-lang=&quot;wit&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;package &lt;&#x2F;span&gt;&lt;span&gt;shopping:cart;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;interface &lt;&#x2F;span&gt;&lt;span&gt;api {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;shopping:purchase-history&#x2F;api.{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;product-item&lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;shopping:purchase-history&#x2F;api.{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;order&lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;record &lt;&#x2F;span&gt;&lt;span&gt;order-confirmation {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;order-id&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;variant &lt;&#x2F;span&gt;&lt;span&gt;checkout-result {
&lt;&#x2F;span&gt;&lt;span&gt;    error(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;    success(order-confirmation),
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;initialize-cart&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;func&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;user-id&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;add-item&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;func&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;item&lt;&#x2F;span&gt;&lt;span&gt;: product-item) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;remove-item&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;func&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;product-id&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;update-item-quantity&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;func&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;product-id&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;quantity&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;checkout&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;func&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;checkout-result;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;get-cart-contents&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;func&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;-&amp;gt; list&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;product-item&amp;gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;world &lt;&#x2F;span&gt;&lt;span&gt;shopping-cart {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;shopping:purchase-history-stub&#x2F;stub-purchase-history;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;export &lt;&#x2F;span&gt;&lt;span&gt;api;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;There are three changes:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;We renamed the package from the default &lt;code&gt;golem:template&lt;&#x2F;code&gt; to &lt;code&gt;shopping:cart&lt;&#x2F;code&gt; to make it more consistent with the other packages&lt;&#x2F;li&gt;
&lt;li&gt;We deleted the definition of &lt;code&gt;product-item&lt;&#x2F;code&gt; and &lt;code&gt;order&lt;&#x2F;code&gt;, and instead importing them from the &lt;code&gt;shopping:purchase-history&lt;&#x2F;code&gt; package.&lt;&#x2F;li&gt;
&lt;li&gt;We added the &lt;code&gt;import&lt;&#x2F;code&gt; statement in the &lt;code&gt;world&lt;&#x2F;code&gt;, which loads the generated &lt;strong&gt;stub&lt;&#x2F;strong&gt; into the template&#x27;s world, so we can call it from the Rust code to initiate remote calls to the &lt;code&gt;purchase-history&lt;&#x2F;code&gt; workers.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Because of the change of the package name, we have to update the import in &lt;code&gt;lib.rs&lt;&#x2F;code&gt; :&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;use crate&lt;&#x2F;span&gt;&lt;span&gt;::bindings::exports::shopping::cart::api::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The only remaining step is to extend the &lt;code&gt;checkout&lt;&#x2F;code&gt; function with the remote worker invocation!&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;use crate&lt;&#x2F;span&gt;&lt;span&gt;::bindings::shopping::purchase_history::api::{Order};
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;use crate&lt;&#x2F;span&gt;&lt;span&gt;::bindings::shopping::purchase_history_stub::stub_purchase_history;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;use crate&lt;&#x2F;span&gt;&lt;span&gt;::bindings::golem::rpc::types::Uri;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;checkout&lt;&#x2F;span&gt;&lt;span&gt;() -&amp;gt; CheckoutResult {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;dispatch_order&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; Defining the order to be saved in history
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; order &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; Order {
&lt;&#x2F;span&gt;&lt;span&gt;        items: state.items.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;clone&lt;&#x2F;span&gt;&lt;span&gt;(),
&lt;&#x2F;span&gt;&lt;span&gt;        order_id: order_id.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;clone&lt;&#x2F;span&gt;&lt;span&gt;(),
&lt;&#x2F;span&gt;&lt;span&gt;        timestamp: std::time::SystemTime::now().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;duration_since&lt;&#x2F;span&gt;&lt;span&gt;(std::time::SystemTime::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;UNIX_EPOCH&lt;&#x2F;span&gt;&lt;span&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;as_secs&lt;&#x2F;span&gt;&lt;span&gt;(),
&lt;&#x2F;span&gt;&lt;span&gt;        total: state.items.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;iter&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;item&lt;&#x2F;span&gt;&lt;span&gt;| item.price &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt; item.quantity &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;as f32&lt;&#x2F;span&gt;&lt;span&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;sum&lt;&#x2F;span&gt;&lt;span&gt;(),
&lt;&#x2F;span&gt;&lt;span&gt;    };
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; Constructing the remote worker&amp;#39;s URI
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; template_id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span&gt;  		std::env::var(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;PURCHASE_HISTORY_TEMPLATE_ID&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  			.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;expect&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;PURCHASE_HISTORY_TEMPLATE_ID not set&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; uri &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; Uri {
&lt;&#x2F;span&gt;&lt;span&gt;        value: format!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;worker:&#x2F;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;{template_id}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, state.user_id),
&lt;&#x2F;span&gt;&lt;span&gt;    };
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; Connecdting to the remote worker and invoking it
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; history &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;stub_purchase_history::Api::new(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;uri);
&lt;&#x2F;span&gt;&lt;span&gt;    history.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;add_order&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;order);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;With all these changes, running &lt;code&gt;cargo make&lt;&#x2F;code&gt; again will succeed:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; cargo make build-flow
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;Writing&lt;&#x2F;span&gt;&lt;span&gt; composed component to &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;target&#x2F;wasm32-wasi&#x2F;debug&#x2F;shopping_cart_composed.wasm&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;[cargo-make]&lt;&#x2F;span&gt;&lt;span&gt; INFO - Build Done in 7.38 seconds.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We first created the &lt;code&gt;Order&lt;&#x2F;code&gt; value to be saved in the remote purchase history. Then we get an &lt;strong&gt;environment variable&lt;&#x2F;strong&gt; to figure out the Golem &lt;em&gt;template-id&lt;&#x2F;em&gt; of the purchase history template. This is something we need to record when uploading the template to Golem, and set it to all shopping cart worker&#x27;s when creating them. The remote URI consists of the template identifier and the &lt;em&gt;worker name&lt;&#x2F;em&gt;, and in our example the worker name is the same as the &lt;strong&gt;user id&lt;&#x2F;strong&gt; that the shopping cart belongs to. This guarantees that we will have a distinct purchase history worker for each user.&lt;&#x2F;p&gt;
&lt;p&gt;When we have the URI, we just instantiate the &lt;strong&gt;generated stub&lt;&#x2F;strong&gt; for by passing the remote worker&#x27;s URI—and we get an interface that corresponds to the remote worker&#x27;s exported interface! This way we can just call &lt;code&gt;add_order&lt;&#x2F;code&gt; on it, passing the constructed order value.&lt;&#x2F;p&gt;
&lt;p&gt;Everything else is handled by Golem. If this was the first order of the user, a new purchase history worker is created. Otherwise, the existing worker will be targeted, which is likely already in a suspended state, not actively in any worker executor&#x27;s memory. Golem restores the worker&#x27;s state and invokes the &lt;code&gt;add_order&lt;&#x2F;code&gt; function on them, which adds the new order to the list of orders for that user, in a fully durable way, without the need for a database.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;how-does-it-work&quot;&gt;How does it work?&lt;&#x2F;h3&gt;
&lt;p&gt;The generated cargo-make makefile just wraps a couple of &lt;code&gt;golem-cli stubgen&lt;&#x2F;code&gt; commands.&lt;&#x2F;p&gt;
&lt;p&gt;First, &lt;code&gt;stubgen generate&lt;&#x2F;code&gt; creates a new Rust crate for each &lt;strong&gt;target&lt;&#x2F;strong&gt; that has a similar interface as the original worker, but all the exported functions and interfaces are wrapped in a resource, which has to be instantiated with a &lt;strong&gt;worker URI&lt;&#x2F;strong&gt;. This generated crate can be compiled to a WASM file (or &lt;code&gt;stubgen build&lt;&#x2F;code&gt; can do that automatically) and it also contains a &lt;strong&gt;WIT&lt;&#x2F;strong&gt; file describing this interface.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;code&gt;stubgen add-stub-dependency&lt;&#x2F;code&gt; command takes this generated interface specification and &lt;strong&gt;adds it&lt;&#x2F;strong&gt; to an other worker&#x27;s &lt;code&gt;wit&lt;&#x2F;code&gt; folder—making it a &lt;em&gt;dependency&lt;&#x2F;em&gt; of that worker. So the caller worker is not depending directly on the target worker, it depends on the &lt;strong&gt;generated stub&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;If we compile this caller worker to WASM, it will not only require host functions provided by Golem (such as the WASI interfaces or Golem specific APIs) but it will also require an &lt;strong&gt;implementation&lt;&#x2F;strong&gt; of the stub interface. That&#x27;s where the generated Rust crate comes into the picture—its compiled WASM &lt;strong&gt;implements&lt;&#x2F;strong&gt; (exports) the stub interface while the caller WASM &lt;strong&gt;requires&lt;&#x2F;strong&gt; (imports) it. WASM components can be composed so by combining the two we can get a result WASM that no longer tries to import the stub interface—it is going to be wired within the component—only the other dependencies the original modules had.&lt;&#x2F;p&gt;
&lt;p&gt;One way to do this composition is to use &lt;code&gt;wasm-tools compose&lt;&#x2F;code&gt;, but it is more convenient to use &lt;code&gt;golem-cli&lt;&#x2F;code&gt; (or &lt;code&gt;golem-cloud-cli&lt;&#x2F;code&gt;)&#x27;s built-in command for it, called &lt;code&gt;stubgen compose&lt;&#x2F;code&gt;. This is the last step the generated cargo-make file performs when running the &lt;code&gt;build-flow&lt;&#x2F;code&gt; task.&lt;&#x2F;p&gt;
&lt;p&gt;The following diagram demonstrates how the component&#x27;s in the example are interacting with each other:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;w2w-comm.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;We have seen how the new Golem tools enable simple, fully-typed communication between &lt;strong&gt;workers&lt;&#x2F;strong&gt;. Although the above demonstrated &lt;code&gt;cargo-make&lt;&#x2F;code&gt;-based build is Rust specific, the other &lt;code&gt;stubgen&lt;&#x2F;code&gt; commands are not: they can be used with any language that has WIT binding generator support (see &lt;a href=&quot;https:&#x2F;&#x2F;learn.golem.cloud&#x2F;docs&#x2F;building-templates&#x2F;tier-2&quot;&gt;Golem&#x27;s Tier 2 languages&lt;&#x2F;a&gt;)—Rust, C, Go, JavaScript, Python and Scala.js.&lt;&#x2F;p&gt;
&lt;p&gt;The remote calls are not only simple to use, they are also efficient, and they get translated to direct function calls when the source and the target workers are running on the same &lt;strong&gt;worker executor&lt;&#x2F;strong&gt;. They are also fully durable, as all other external interaction running on Golem. This means we don&#x27;t have to worry about failures when calling remote workers. Additionally, Golem applies retry policies in case of transient failures, and it makes sure that a remote invocation only happens once.&lt;&#x2F;p&gt;
&lt;p&gt;This feature is ready to use both in the &lt;a href=&quot;http:&#x2F;&#x2F;github.com&#x2F;golemcloud&#x2F;golem&quot;&gt;open source&lt;&#x2F;a&gt; and the &lt;a href=&quot;https:&#x2F;&#x2F;www.golem.cloud&#x2F;&quot;&gt;cloud version&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>desert part 1 - features</title>
        <published>2024-02-19T00:00:00+00:00</published>
        <updated>2024-02-19T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Daniel Vigovszky
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://blog.vigoo.dev/posts/desert-1/"/>
        <id>https://blog.vigoo.dev/posts/desert-1/</id>
        
        <content type="html" xml:base="https://blog.vigoo.dev/posts/desert-1/">&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;&#x2F;h2&gt;
&lt;p&gt;This is the &lt;strong&gt;first part&lt;&#x2F;strong&gt; of a series of blog posts about my serialization library, &lt;a href=&quot;https:&#x2F;&#x2F;vigoo.github.io&#x2F;desert&quot;&gt;desert&lt;&#x2F;a&gt;. I also gave an overview of this library on Functional Scala 2022 - you can check the &lt;a href=&quot;https:&#x2F;&#x2F;blog.vigoo.dev&#x2F;posts&#x2F;desert-1&#x2F;@posts&#x2F;funscala2022-talk.md&quot;&gt;talk on YouTube if interested&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;In this post I&#x27;m going to give an overview of the features this serialization library provides, and then going to dive into the details of how it supports evolving data types.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;where-is-it-coming-from&quot;&gt;Where is it coming from?&lt;&#x2F;h2&gt;
&lt;p&gt;The idea of creating &lt;code&gt;desert&lt;&#x2F;code&gt; came after some serious disappointment in our previously chosen serialization library. It was used for serialization of both persistent Akka actors and for the distributed actor messages, and it turned out that just by updating the Scala version from 2.12 to 2.13 completely broke our serialization format.&lt;&#x2F;p&gt;
&lt;p&gt;None of the alternatives looked good enough to me - I wanted something that is code first and fits well to our functional Scala style. Support for multiple platforms or programming languages were not a requirement.&lt;&#x2F;p&gt;
&lt;p&gt;So I started thinking about what would a perfect serialization library look like, at least for our use cases? It was something that has first-class support for ADTs, for Scala&#x27;s collection libraries (I don&#x27;t want to see Scala lists serialized via Java reflection ever again!), with a focus of supporting evolution of the serialized data types. We &lt;em&gt;knew&lt;&#x2F;em&gt; that our persisted data and actor messages will change over time, and we had to be able to survive these changes without any downtime.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;features&quot;&gt;Features&lt;&#x2F;h2&gt;
&lt;p&gt;Let&#x27;s just go through all the features provided by the library before we talk about how exactly it supports these kind of changes in the serialized data structures.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;desert&lt;&#x2F;code&gt; is a Scala library. As probably expected, it captures the core concept of binary serialization though a simple &lt;code&gt;trait&lt;&#x2F;code&gt; called &lt;code&gt;BinaryCodec[T]&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;trait&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; BinarySerializer&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;serialize&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: T)(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;implicit &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;context&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: SerializationContext): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Unit
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;contramap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;[U](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: U &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;T): BinarySerializer[U] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;contramapOrFail&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;[U](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: U &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Either[DesertFailure, T]): BinarySerializer[U] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;trait&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; BinaryDeserializer&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;deserialize&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;()(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;implicit &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;ctx&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: DeserializationContext): T
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;[U](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: T &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;U): BinaryDeserializer[U] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;mapOrFail&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;[U](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: T &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Either[DesertFailure, U]): BinaryDeserializer[U] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;trait&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; BinaryCodec&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span&gt;BinarySerializer[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;with &lt;&#x2F;span&gt;&lt;span&gt;BinaryDeserializer[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;These &lt;code&gt;BinaryCodec&lt;&#x2F;code&gt; instances should be made implicitly available for each type we need to serialize. There are multiple ways to create an instance of a binary codec:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;There are many built-in codecs for primitive types, standard collections, date-time classes, etc.&lt;&#x2F;li&gt;
&lt;li&gt;The &lt;code&gt;map&lt;&#x2F;code&gt; and &lt;code&gt;contramap&lt;&#x2F;code&gt; operators can be used to construct new codecs from existing ones&lt;&#x2F;li&gt;
&lt;li&gt;There is a codec derivation macro for ADTs (case classes and sealed traits &#x2F; enums)&lt;&#x2F;li&gt;
&lt;li&gt;Custom implementation can directly read&#x2F;write the binary data and access some of the built-in features like the type registry, references, string deduplication and compression&lt;&#x2F;li&gt;
&lt;li&gt;It is also possible to define these custom implementations in a more functional way on top of &lt;code&gt;ZPure&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Under the hood there is a simple &lt;code&gt;BinaryInput&lt;&#x2F;code&gt; &#x2F; &lt;code&gt;BinaryOutput&lt;&#x2F;code&gt; abstraction which is extensible, by default implemented for Java &lt;code&gt;InputStream&lt;&#x2F;code&gt; and &lt;code&gt;OutputStream&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;On the lowest level, in addition to having an interface for serializing primitive types we also have support for &lt;strong&gt;variable length integer encoding&lt;&#x2F;strong&gt; and for gzip &lt;strong&gt;compression&lt;&#x2F;strong&gt;. Custom codecs can also use the built-in &lt;strong&gt;string deduplication&lt;&#x2F;strong&gt; feature, and encode cyclic graphs using support for storing &lt;strong&gt;references&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Sometimes you want to serialize only a part of your data structure - a real-world example we had was having a set of &lt;em&gt;typed actor messages&lt;&#x2F;em&gt; where only a subset of the cases were designed to be used between different nodes. Some cases were only used locally, and in those we would store things that are not serializable at all - for example open websocket connection handles. This is supported by &lt;code&gt;desert&lt;&#x2F;code&gt; by having the concept of both &lt;strong&gt;transient fields&lt;&#x2F;strong&gt; and &lt;strong&gt;transient constructors&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;What if a field is not an ADT but contains a reference to an arbitrary type with a given interface? Or if we don&#x27;t know the root type of a message, only a set of possible types which are otherwise unrelated? The library provides a &lt;strong&gt;type registry&lt;&#x2F;strong&gt; for this purpose. Every type registered into this will have an associated identifier, and in places where we don&#x27;t know the exact type, we can use these to get the codec by it&#x27;s unique ID from the type registry.&lt;&#x2F;p&gt;
&lt;p&gt;On the top level &lt;code&gt;desert&lt;&#x2F;code&gt; also comes with a set of &lt;strong&gt;integration modules&lt;&#x2F;strong&gt;. The following modules are available at the time of writing:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;desert-akka&lt;&#x2F;code&gt; provides helper functions to serialize from&#x2F;to &lt;code&gt;ByteString&lt;&#x2F;code&gt;, provides codecs for both typed and untyped &lt;code&gt;ActorRef&lt;&#x2F;code&gt;s, and provides an implementation of Akka&#x27;s &lt;code&gt;Serializer&lt;&#x2F;code&gt; interface.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;desert-cats&lt;&#x2F;code&gt; adds codecs for &lt;code&gt;Validation&lt;&#x2F;code&gt;, &lt;code&gt;NonEmptyList&lt;&#x2F;code&gt;, &lt;code&gt;NonEmptySet&lt;&#x2F;code&gt; and &lt;code&gt;NonEmptyMap&lt;&#x2F;code&gt; from the &lt;a href=&quot;https:&#x2F;&#x2F;typelevel.org&#x2F;cats&#x2F;&quot;&gt;cats library&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;desert-cats-effect&lt;&#x2F;code&gt; gives a &lt;a href=&quot;https:&#x2F;&#x2F;typelevel.org&#x2F;cats-effect&#x2F;&quot;&gt;cats-effect&lt;&#x2F;a&gt; &lt;code&gt;IO&lt;&#x2F;code&gt; version of the top level serialization and deserialization functions&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;desert-zio&lt;&#x2F;code&gt; provides &lt;code&gt;ZIO&lt;&#x2F;code&gt; version of the top level serialization and deserialization functions and adds codec and helper functions to work with &lt;code&gt;Chunk&lt;&#x2F;code&gt;s,&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;desert-zio-prelude&lt;&#x2F;code&gt; provides a more functional interface for defining custom codecs, as well as having built-in codecs for&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;desert-shardcake&lt;&#x2F;code&gt; provides easy integration within the &lt;a href=&quot;https:&#x2F;&#x2F;devsisters.github.io&#x2F;shardcake&#x2F;&quot;&gt;Shardcake&lt;&#x2F;a&gt; library&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;There are two more modules which implement the same core functionality, &lt;strong&gt;codec derivation&lt;&#x2F;strong&gt;, with different tradeoffs:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;desert-shapeless&lt;&#x2F;code&gt; is a &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;milessabin&#x2F;shapeless&quot;&gt;shapeless&lt;&#x2F;a&gt; based codec deriver, the original implementation of &lt;code&gt;desert&lt;&#x2F;code&gt;&#x27;s derivation logic. It only works for &lt;strong&gt;Scala 2&lt;&#x2F;strong&gt; but it has no additional requirements.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;desert-zio-scheme&lt;&#x2F;code&gt; is an alternative implementation of the same codec derivation, built on the &lt;code&gt;Deriver&lt;&#x2F;code&gt; feature of &lt;a href=&quot;https:&#x2F;&#x2F;zio.dev&#x2F;zio-schema&#x2F;&quot;&gt;zio-schema&lt;&#x2F;a&gt;. This works both with &lt;strong&gt;Scala 2&lt;&#x2F;strong&gt; and &lt;strong&gt;Scala 3&lt;&#x2F;strong&gt;, and supposed to provide better compile-time error messages, but requires to derive an implicit &lt;code&gt;Schema&lt;&#x2F;code&gt; for each serialized type beside the binary codec.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;I wrote a &lt;a href=&quot;https:&#x2F;&#x2F;blog.vigoo.dev&#x2F;posts&#x2F;desert-1&#x2F;@posts&#x2F;zio-schema-deriving.md&quot;&gt;detailed post about typeclass derivation&lt;&#x2F;a&gt; a few months ago.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;data-evolution&quot;&gt;Data evolution&lt;&#x2F;h2&gt;
&lt;p&gt;Let&#x27;s see in details what it means that &lt;code&gt;desert&lt;&#x2F;code&gt; supports &lt;em&gt;evolving&lt;&#x2F;em&gt; data structures.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;primitives-vs-newtype-wrappers&quot;&gt;Primitives vs newtype wrappers&lt;&#x2F;h3&gt;
&lt;p&gt;Let&#x27;s start with a simple example: we are serializing a single &lt;code&gt;Int&lt;&#x2F;code&gt;. The default codec just uses the fixed width 32-bit representation of the integer:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Int = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;100
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;results in:&lt;&#x2F;p&gt;
&lt;table style=&quot;border-collapse: initial; border: 0px; width: auto; color: black&quot;&gt;
  &lt;tr&gt;
    &lt;td style=&quot;border: 1px solid; padding: 6px; text-align: center; background-color: rgb(154, 231, 147); margin: 0px; border-spacing: 1px; font-family: monospace; font-weight: normal&quot;&gt;0&lt;&#x2F;td&gt;
    &lt;td style=&quot;border: 1px solid; padding: 6px; text-align: center; background-color: rgb(154, 231, 147); margin: 0px; border-spacing: 1px; font-family: monospace; font-weight: normal&quot;&gt;0&lt;&#x2F;td&gt;
    &lt;td style=&quot;border: 1px solid; padding: 6px; text-align: center; background-color: rgb(154, 231, 147); margin: 0px; border-spacing: 1px; font-family: monospace; font-weight: normal&quot;&gt;0&lt;&#x2F;td&gt;
    &lt;td style=&quot;border: 1px solid; padding: 6px; text-align: center; background-color: rgb(154, 231, 147); margin: 0px; border-spacing: 1px; font-family: monospace; font-weight: normal&quot;&gt;100&lt;&#x2F;td&gt;
  &lt;&#x2F;tr&gt;
&lt;&#x2F;table&gt;
&lt;p&gt;Imagine that later we decide that &lt;code&gt;Int&lt;&#x2F;code&gt; is just too generic, and what we have here is in fact a &lt;code&gt;Coordinate&lt;&#x2F;code&gt;. We can define a a newtype wrapper like the following:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;final case class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; Coordinate&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Int&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span&gt;AnyVal
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;and then define the binary codec either by using &lt;code&gt;map&lt;&#x2F;code&gt; and &lt;code&gt;contramap&lt;&#x2F;code&gt; on the integer codec, or by using the &lt;code&gt;deriveForWrapper&lt;&#x2F;code&gt; macro:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;object&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; Coordinate {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;implicit val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;codec&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: BinaryCodec[Coordinate] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;DeriveBinaryCodec.deriveForWrapper
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The binary representation of a &lt;code&gt;Coordinate&lt;&#x2F;code&gt; will be exactly the same as for an &lt;code&gt;Int&lt;&#x2F;code&gt;, so we are still fully backward and forward compatible regarding our serialization format:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Coordinate &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;Coordinate(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;results in:&lt;&#x2F;p&gt;
&lt;table style=&quot;border-collapse: initial; border: 0px; width: auto; color: black&quot;&gt;
  &lt;tr&gt;
    &lt;td style=&quot;border: 1px solid; padding: 6px; text-align: center; background-color: rgb(154, 231, 147); margin: 0px; border-spacing: 1px; font-family: monospace; font-weight: normal&quot;&gt;0&lt;&#x2F;td&gt;
    &lt;td style=&quot;border: 1px solid; padding: 6px; text-align: center; background-color: rgb(154, 231, 147); margin: 0px; border-spacing: 1px; font-family: monospace; font-weight: normal&quot;&gt;0&lt;&#x2F;td&gt;
    &lt;td style=&quot;border: 1px solid; padding: 6px; text-align: center; background-color: rgb(154, 231, 147); margin: 0px; border-spacing: 1px; font-family: monospace; font-weight: normal&quot;&gt;0&lt;&#x2F;td&gt;
    &lt;td style=&quot;border: 1px solid; padding: 6px; text-align: center; background-color: rgb(154, 231, 147); margin: 0px; border-spacing: 1px; font-family: monospace; font-weight: normal&quot;&gt;100&lt;&#x2F;td&gt;
  &lt;&#x2F;tr&gt;
&lt;&#x2F;table&gt;
&lt;h3 id=&quot;collections&quot;&gt;Collections&lt;&#x2F;h3&gt;
&lt;p&gt;First let&#x27;s see what happens if we try to serialize a pair of coordinates:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;xy &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;(Coordinate(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;), Coordinate(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;results in:&lt;&#x2F;p&gt;
&lt;table style=&quot;border-collapse: initial; border: 0px; width: auto; color: black&quot;&gt;
  &lt;tr&gt;
    &lt;td style=&quot;border: 1px solid; padding: 6px; text-align: center; background-color: rgb(147, 154, 231); margin: 0px; border-spacing: 1px; font-family: monospace; font-weight: normal&quot;&gt;0&lt;&#x2F;td&gt;
    &lt;td style=&quot;border: 1px solid; padding: 6px; text-align: center; background-color: rgb(154, 231, 147); margin: 0px; border-spacing: 1px; font-family: monospace; font-weight: normal&quot;&gt;0&lt;&#x2F;td&gt;
    &lt;td style=&quot;border: 1px solid; padding: 6px; text-align: center; background-color: rgb(154, 231, 147); margin: 0px; border-spacing: 1px; font-family: monospace; font-weight: normal&quot;&gt;0&lt;&#x2F;td&gt;
    &lt;td style=&quot;border: 1px solid; padding: 6px; text-align: center; background-color: rgb(154, 231, 147); margin: 0px; border-spacing: 1px; font-family: monospace; font-weight: normal&quot;&gt;0&lt;&#x2F;td&gt;
    &lt;td style=&quot;border: 1px solid; padding: 6px; text-align: center; background-color: rgb(154, 231, 147); margin: 0px; border-spacing: 1px; font-family: monospace; font-weight: normal&quot;&gt;1&lt;&#x2F;td&gt;
    &lt;td style=&quot;border: 1px solid; padding: 6px; text-align: center; background-color: rgb(231, 154, 147); margin: 0px; border-spacing: 1px; font-family: monospace; font-weight: normal&quot;&gt;0&lt;&#x2F;td&gt;
    &lt;td style=&quot;border: 1px solid; padding: 6px; text-align: center; background-color: rgb(231, 154, 147); margin: 0px; border-spacing: 1px; font-family: monospace; font-weight: normal&quot;&gt;0&lt;&#x2F;td&gt;
    &lt;td style=&quot;border: 1px solid; padding: 6px; text-align: center; background-color: rgb(231, 154, 147); margin: 0px; border-spacing: 1px; font-family: monospace; font-weight: normal&quot;&gt;0&lt;&#x2F;td&gt;
    &lt;td style=&quot;border: 1px solid; padding: 6px; text-align: center; background-color: rgb(231, 154, 147); margin: 0px; border-spacing: 1px; font-family: monospace; font-weight: normal&quot;&gt;2&lt;&#x2F;td&gt;    
  &lt;&#x2F;tr&gt;
&lt;&#x2F;table&gt;
&lt;p&gt;the binary representation starts with a &lt;code&gt;0&lt;&#x2F;code&gt;, which is an &lt;em&gt;ADT header&lt;&#x2F;em&gt;. We will talk about it later. The rest of the data is just a flat representation of the two coordinates, taking in total 9 bytes.&lt;&#x2F;p&gt;
&lt;p&gt;Now we start storing arrays of these coordinates:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;coordinates&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Array&lt;&#x2F;span&gt;&lt;span&gt;[(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Coordinate&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Coordinate&lt;&#x2F;span&gt;&lt;span&gt;)] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= 
&lt;&#x2F;span&gt;&lt;span&gt;  Array(
&lt;&#x2F;span&gt;&lt;span&gt;    (Coordinate(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;), Coordinate(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;)),
&lt;&#x2F;span&gt;&lt;span&gt;    (Coordinate(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;), Coordinate(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;)),
&lt;&#x2F;span&gt;&lt;span&gt;    (Coordinate(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;), Coordinate(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;6&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;  )
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Arrays are serialized simply by writing the length of the array as a variable-length integer and then serializing all elements.&lt;&#x2F;p&gt;
&lt;table style=&quot;border-collapse: initial; border: 0px; width: auto; color: black&quot;&gt;
  &lt;tr&gt;
    &lt;td style=&quot;border: 1px solid; padding: 6px; text-align: center; background-color: rgb(147, 154, 231); margin: 0px; border-spacing: 1px; font-family: monospace; font-weight: normal&quot;&gt;6&lt;&#x2F;td&gt;
    &lt;td style=&quot;border: 1px solid; padding: 6px; text-align: center; background-color: rgb(154, 231, 147); margin: 0px; border-spacing: 1px; font-family: monospace; font-weight: normal&quot;&gt;0&lt;&#x2F;td&gt;
    &lt;td style=&quot;border: 1px solid; padding: 6px; text-align: center; background-color: rgb(154, 231, 147); margin: 0px; border-spacing: 1px; font-family: monospace; font-weight: normal&quot;&gt;0&lt;&#x2F;td&gt;    
    &lt;td style=&quot;border: 1px solid; padding: 6px; text-align: center; background-color: rgb(154, 231, 147); margin: 0px; border-spacing: 1px; font-family: monospace; font-weight: normal&quot;&gt;0&lt;&#x2F;td&gt;
    &lt;td style=&quot;border: 1px solid; padding: 6px; text-align: center; background-color: rgb(154, 231, 147); margin: 0px; border-spacing: 1px; font-family: monospace; font-weight: normal&quot;&gt;0&lt;&#x2F;td&gt;
    &lt;td style=&quot;border: 1px solid; padding: 6px; text-align: center; background-color: rgb(154, 231, 147); margin: 0px; border-spacing: 1px; font-family: monospace; font-weight: normal&quot;&gt;1&lt;&#x2F;td&gt;
    &lt;td style=&quot;border: 1px solid; padding: 6px; text-align: center; background-color: rgb(154, 231, 147); margin: 0px; border-spacing: 1px; font-family: monospace; font-weight: normal&quot;&gt;0&lt;&#x2F;td&gt;
    &lt;td style=&quot;border: 1px solid; padding: 6px; text-align: center; background-color: rgb(154, 231, 147); margin: 0px; border-spacing: 1px; font-family: monospace; font-weight: normal&quot;&gt;0&lt;&#x2F;td&gt;
    &lt;td style=&quot;border: 1px solid; padding: 6px; text-align: center; background-color: rgb(154, 231, 147); margin: 0px; border-spacing: 1px; font-family: monospace; font-weight: normal&quot;&gt;0&lt;&#x2F;td&gt;
    &lt;td style=&quot;border: 1px solid; padding: 6px; text-align: center; background-color: rgb(154, 231, 147); margin: 0px; border-spacing: 1px; font-family: monospace; font-weight: normal&quot;&gt;2&lt;&#x2F;td&gt; 
    &lt;td style=&quot;border: 1px solid; padding: 6px; text-align: center; background-color: rgb(231, 154, 147); margin: 0px; border-spacing: 1px; font-family: monospace; font-weight: normal&quot;&gt;0&lt;&#x2F;td&gt;
    &lt;td style=&quot;border: 1px solid; padding: 6px; text-align: center; background-color: rgb(231, 154, 147); margin: 0px; border-spacing: 1px; font-family: monospace; font-weight: normal&quot;&gt;0&lt;&#x2F;td&gt;    
    &lt;td style=&quot;border: 1px solid; padding: 6px; text-align: center; background-color: rgb(231, 154, 147); margin: 0px; border-spacing: 1px; font-family: monospace; font-weight: normal&quot;&gt;0&lt;&#x2F;td&gt;
    &lt;td style=&quot;border: 1px solid; padding: 6px; text-align: center; background-color: rgb(231, 154, 147); margin: 0px; border-spacing: 1px; font-family: monospace; font-weight: normal&quot;&gt;0&lt;&#x2F;td&gt;
    &lt;td style=&quot;border: 1px solid; padding: 6px; text-align: center; background-color: rgb(231, 154, 147); margin: 0px; border-spacing: 1px; font-family: monospace; font-weight: normal&quot;&gt;3&lt;&#x2F;td&gt;
    &lt;td style=&quot;border: 1px solid; padding: 6px; text-align: center; background-color: rgb(231, 154, 147); margin: 0px; border-spacing: 1px; font-family: monospace; font-weight: normal&quot;&gt;0&lt;&#x2F;td&gt;
    &lt;td style=&quot;border: 1px solid; padding: 6px; text-align: center; background-color: rgb(231, 154, 147); margin: 0px; border-spacing: 1px; font-family: monospace; font-weight: normal&quot;&gt;0&lt;&#x2F;td&gt;
    &lt;td style=&quot;border: 1px solid; padding: 6px; text-align: center; background-color: rgb(231, 154, 147); margin: 0px; border-spacing: 1px; font-family: monospace; font-weight: normal&quot;&gt;0&lt;&#x2F;td&gt;
    &lt;td style=&quot;border: 1px solid; padding: 6px; text-align: center; background-color: rgb(231, 154, 147); margin: 0px; border-spacing: 1px; font-family: monospace; font-weight: normal&quot;&gt;4&lt;&#x2F;td&gt; 
    &lt;td style=&quot;border: 1px solid; padding: 6px; text-align: center; background-color: rgb(231, 147, 200); margin: 0px; border-spacing: 1px; font-family: monospace; font-weight: normal&quot;&gt;0&lt;&#x2F;td&gt;
    &lt;td style=&quot;border: 1px solid; padding: 6px; text-align: center; background-color: rgb(231, 147, 200); margin: 0px; border-spacing: 1px; font-family: monospace; font-weight: normal&quot;&gt;0&lt;&#x2F;td&gt;    
    &lt;td style=&quot;border: 1px solid; padding: 6px; text-align: center; background-color: rgb(231, 147, 200); margin: 0px; border-spacing: 1px; font-family: monospace; font-weight: normal&quot;&gt;0&lt;&#x2F;td&gt;
    &lt;td style=&quot;border: 1px solid; padding: 6px; text-align: center; background-color: rgb(231, 147, 200); margin: 0px; border-spacing: 1px; font-family: monospace; font-weight: normal&quot;&gt;0&lt;&#x2F;td&gt;
    &lt;td style=&quot;border: 1px solid; padding: 6px; text-align: center; background-color: rgb(231, 147, 200); margin: 0px; border-spacing: 1px; font-family: monospace; font-weight: normal&quot;&gt;5&lt;&#x2F;td&gt;
    &lt;td style=&quot;border: 1px solid; padding: 6px; text-align: center; background-color: rgb(231, 147, 200); margin: 0px; border-spacing: 1px; font-family: monospace; font-weight: normal&quot;&gt;0&lt;&#x2F;td&gt;
    &lt;td style=&quot;border: 1px solid; padding: 6px; text-align: center; background-color: rgb(231, 147, 200); margin: 0px; border-spacing: 1px; font-family: monospace; font-weight: normal&quot;&gt;0&lt;&#x2F;td&gt;
    &lt;td style=&quot;border: 1px solid; padding: 6px; text-align: center; background-color: rgb(231, 147, 200); margin: 0px; border-spacing: 1px; font-family: monospace; font-weight: normal&quot;&gt;0&lt;&#x2F;td&gt;
    &lt;td style=&quot;border: 1px solid; padding: 6px; text-align: center; background-color: rgb(231, 147, 200); margin: 0px; border-spacing: 1px; font-family: monospace; font-weight: normal&quot;&gt;6&lt;&#x2F;td&gt;    
  &lt;&#x2F;tr&gt;
&lt;&#x2F;table&gt;
&lt;p&gt;The variable-length integer encoding of &lt;code&gt;3&lt;&#x2F;code&gt; is &lt;code&gt;6&lt;&#x2F;code&gt;, and that is simply followed by the three 9-byte long serialized representation of the coordinate pairs.&lt;&#x2F;p&gt;
&lt;p&gt;What if we decide we don&#x27;t want to use &lt;code&gt;Array&lt;&#x2F;code&gt; but ZIO&#x27;s &lt;code&gt;Chunk&lt;&#x2F;code&gt; instead? Or if we realize our data model is more precise if we talk about a &lt;em&gt;set&lt;&#x2F;em&gt; of coordinate pairs? Nothing! Desert uses the same encoding for all collection types, allowing us to always choose the best data type without being worried about breaking the serialization format. In some collections, such as linked lists, there is no way to know the number of elements without iterating through the whole data set. Desert supports these collection types by writing &lt;code&gt;-1&lt;&#x2F;code&gt; as the number of elements, and then prefixing each element with a single byte where &lt;code&gt;1&lt;&#x2F;code&gt; represents we have a next element and &lt;code&gt;0&lt;&#x2F;code&gt; that we don&#x27;t. This is actually exactly the same binary format as a series of &lt;code&gt;Option[T]&lt;&#x2F;code&gt; values where the first and only &lt;code&gt;None&lt;&#x2F;code&gt; represents the end of the sequence.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;records&quot;&gt;Records&lt;&#x2F;h3&gt;
&lt;p&gt;Maybe using tuples of coordinates was a good idea in the beginning but as our data model evolves we want to introduced a named record type instead:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;final case class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; Point&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Coordinate&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;y&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Coordinate&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We can use &lt;code&gt;desert&lt;&#x2F;code&gt;&#x27;s codec derivation feature to get a binary codec for this type:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;object&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; Point {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;implicit val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;schema&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: Schema[Point] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;DeriveSchema.gen
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;implicit val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;codec&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: BinaryCodec[Point] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;DerivedBinaryCodec.derive
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;When using &lt;code&gt;desert-zio-scheme&lt;&#x2F;code&gt; we also need to derive a &lt;code&gt;Schema&lt;&#x2F;code&gt; instance - this is not required when using the &lt;code&gt;desert-shapeless&lt;&#x2F;code&gt; version of the codec derivation.&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s see how &lt;code&gt;desert&lt;&#x2F;code&gt; serializes an instance of this &lt;code&gt;Point&lt;&#x2F;code&gt; type:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;pt &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;Point(Coordinate(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;), Coordinate(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;results in:&lt;&#x2F;p&gt;
&lt;table style=&quot;border-collapse: initial; border: 0px; width: auto; color: black&quot;&gt;
  &lt;tr&gt;
    &lt;td style=&quot;border: 1px solid; padding: 6px; text-align: center; background-color: rgb(147, 154, 231); margin: 0px; border-spacing: 1px; font-family: monospace; font-weight: normal&quot;&gt;0&lt;&#x2F;td&gt;
    &lt;td style=&quot;border: 1px solid; padding: 6px; text-align: center; background-color: rgb(154, 231, 147); margin: 0px; border-spacing: 1px; font-family: monospace; font-weight: normal&quot;&gt;0&lt;&#x2F;td&gt;
    &lt;td style=&quot;border: 1px solid; padding: 6px; text-align: center; background-color: rgb(154, 231, 147); margin: 0px; border-spacing: 1px; font-family: monospace; font-weight: normal&quot;&gt;0&lt;&#x2F;td&gt;
    &lt;td style=&quot;border: 1px solid; padding: 6px; text-align: center; background-color: rgb(154, 231, 147); margin: 0px; border-spacing: 1px; font-family: monospace; font-weight: normal&quot;&gt;0&lt;&#x2F;td&gt;
    &lt;td style=&quot;border: 1px solid; padding: 6px; text-align: center; background-color: rgb(154, 231, 147); margin: 0px; border-spacing: 1px; font-family: monospace; font-weight: normal&quot;&gt;1&lt;&#x2F;td&gt;
    &lt;td style=&quot;border: 1px solid; padding: 6px; text-align: center; background-color: rgb(231, 154, 147); margin: 0px; border-spacing: 1px; font-family: monospace; font-weight: normal&quot;&gt;0&lt;&#x2F;td&gt;
    &lt;td style=&quot;border: 1px solid; padding: 6px; text-align: center; background-color: rgb(231, 154, 147); margin: 0px; border-spacing: 1px; font-family: monospace; font-weight: normal&quot;&gt;0&lt;&#x2F;td&gt;
    &lt;td style=&quot;border: 1px solid; padding: 6px; text-align: center; background-color: rgb(231, 154, 147); margin: 0px; border-spacing: 1px; font-family: monospace; font-weight: normal&quot;&gt;0&lt;&#x2F;td&gt;
    &lt;td style=&quot;border: 1px solid; padding: 6px; text-align: center; background-color: rgb(231, 154, 147); margin: 0px; border-spacing: 1px; font-family: monospace; font-weight: normal&quot;&gt;2&lt;&#x2F;td&gt;    
  &lt;&#x2F;tr&gt;
&lt;&#x2F;table&gt;
&lt;p&gt;This is exactly the same as the tuple&#x27;s binary representation was, which probably isn&#x27;t a big surprise as they are structurally equivalent. Still this is an important property as it allows us to replace any tuple with an equivalent record type and keeping the binary format exactly the same!&lt;&#x2F;p&gt;
&lt;p&gt;If we have to change a record&#x27;s type, we can only change any of its fields if that field&#x27;s new type has a compatible binary representation with the old one. All the cases described in this post are valid data evolution steps. Beside those there are a few special type of changes &lt;code&gt;desert&lt;&#x2F;code&gt; supports for records. Let&#x27;s see!s&lt;&#x2F;p&gt;
&lt;h3 id=&quot;adding-a-field&quot;&gt;Adding a field&lt;&#x2F;h3&gt;
&lt;p&gt;As a next step let&#x27;s imagine our data type requires a new field. Let&#x27;s add a &lt;code&gt;z&lt;&#x2F;code&gt; coordinate to our point:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;final case class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; Point&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Coordinate&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;y&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Coordinate&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;z&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Coordinate&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;object&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; Point {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;implicit val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;codec&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: BinaryCodec[Point] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;DerivedBinaryCodec.derive 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;pt &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;Point(Coordinate(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;), Coordinate(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;), Coordinate(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Serializing this &lt;code&gt;pt&lt;&#x2F;code&gt; value results in:&lt;&#x2F;p&gt;
&lt;table style=&quot;border-collapse: initial; border: 0px; width: auto; color: black&quot;&gt;
  &lt;tr&gt;
    &lt;td style=&quot;border: 1px solid; padding: 6px; text-align: center; background-color: rgb(147, 154, 231); margin: 0px; border-spacing: 1px; font-family: monospace; font-weight: normal&quot;&gt;0&lt;&#x2F;td&gt;
    &lt;td style=&quot;border: 1px solid; padding: 6px; text-align: center; background-color: rgb(154, 231, 147); margin: 0px; border-spacing: 1px; font-family: monospace; font-weight: normal&quot;&gt;0&lt;&#x2F;td&gt;
    &lt;td style=&quot;border: 1px solid; padding: 6px; text-align: center; background-color: rgb(154, 231, 147); margin: 0px; border-spacing: 1px; font-family: monospace; font-weight: normal&quot;&gt;0&lt;&#x2F;td&gt;
    &lt;td style=&quot;border: 1px solid; padding: 6px; text-align: center; background-color: rgb(154, 231, 147); margin: 0px; border-spacing: 1px; font-family: monospace; font-weight: normal&quot;&gt;0&lt;&#x2F;td&gt;
    &lt;td style=&quot;border: 1px solid; padding: 6px; text-align: center; background-color: rgb(154, 231, 147); margin: 0px; border-spacing: 1px; font-family: monospace; font-weight: normal&quot;&gt;1&lt;&#x2F;td&gt;
    &lt;td style=&quot;border: 1px solid; padding: 6px; text-align: center; background-color: rgb(231, 154, 147); margin: 0px; border-spacing: 1px; font-family: monospace; font-weight: normal&quot;&gt;0&lt;&#x2F;td&gt;
    &lt;td style=&quot;border: 1px solid; padding: 6px; text-align: center; background-color: rgb(231, 154, 147); margin: 0px; border-spacing: 1px; font-family: monospace; font-weight: normal&quot;&gt;0&lt;&#x2F;td&gt;
    &lt;td style=&quot;border: 1px solid; padding: 6px; text-align: center; background-color: rgb(231, 154, 147); margin: 0px; border-spacing: 1px; font-family: monospace; font-weight: normal&quot;&gt;0&lt;&#x2F;td&gt;
    &lt;td style=&quot;border: 1px solid; padding: 6px; text-align: center; background-color: rgb(231, 154, 147); margin: 0px; border-spacing: 1px; font-family: monospace; font-weight: normal&quot;&gt;2&lt;&#x2F;td&gt;
    &lt;td style=&quot;border: 1px solid; padding: 6px; text-align: center; background-color: rgb(231, 147, 200); margin: 0px; border-spacing: 1px; font-family: monospace; font-weight: normal&quot;&gt;0&lt;&#x2F;td&gt;
    &lt;td style=&quot;border: 1px solid; padding: 6px; text-align: center; background-color: rgb(231, 147, 200); margin: 0px; border-spacing: 1px; font-family: monospace; font-weight: normal&quot;&gt;0&lt;&#x2F;td&gt;
    &lt;td style=&quot;border: 1px solid; padding: 6px; text-align: center; background-color: rgb(231, 147, 200); margin: 0px; border-spacing: 1px; font-family: monospace; font-weight: normal&quot;&gt;0&lt;&#x2F;td&gt;
    &lt;td style=&quot;border: 1px solid; padding: 6px; text-align: center; background-color: rgb(231, 147, 200); margin: 0px; border-spacing: 1px; font-family: monospace; font-weight: normal&quot;&gt;3&lt;&#x2F;td&gt;    
  &lt;&#x2F;tr&gt;
&lt;&#x2F;table&gt;
&lt;p&gt;If we try to read this value with the &lt;em&gt;deserializer&lt;&#x2F;em&gt; of our original &lt;code&gt;Point&lt;&#x2F;code&gt; type, it will read &lt;code&gt;Point(Coordinate(1), Coordinate(2))&lt;&#x2F;code&gt;, but the next deserialized value will be corrupt as the input stream will point to the beginning of the &lt;code&gt;0, 0, 0, 3&lt;&#x2F;code&gt; value. Similarly, if we would try to read a binary serialized with the old &lt;code&gt;Point&lt;&#x2F;code&gt; &lt;em&gt;serializer&lt;&#x2F;em&gt;, it would read the next four bytes from the data stream which, if even exists, belongs to some other serialized element.&lt;&#x2F;p&gt;
&lt;p&gt;The solution for this in &lt;code&gt;desert&lt;&#x2F;code&gt; is to &lt;strong&gt;explicitly document data evolution&lt;&#x2F;strong&gt;. This is done by listing each modification in an &lt;em&gt;attribute&lt;&#x2F;em&gt; called &lt;code&gt;evolutionSteps&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span&gt;@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;evolutionSteps&lt;&#x2F;span&gt;&lt;span&gt;(FieldAdded[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Coordinate&lt;&#x2F;span&gt;&lt;span&gt;](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;z&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, Coordinate(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;)))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;final case class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; Point&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Coordinate&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;y&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Coordinate&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;z&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Coordinate&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;object&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; Point {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;implicit val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;codec&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: BinaryCodec[Point] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;DerivedBinaryCodec.derive 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;pt &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;Point(Coordinate(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;), Coordinate(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;), Coordinate(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;With this annotation, we mark &lt;code&gt;z&lt;&#x2F;code&gt; as a newly added field, and provide a &lt;em&gt;default value&lt;&#x2F;em&gt; for it which will be used in cases when reading an old version of the serialized data which did not have this field yet. Every time we change the data type we record the change as a new element in this attribute. There are other supported evolution step types as we will see soon.&lt;&#x2F;p&gt;
&lt;p&gt;But first let&#x27;s see what changes in the binary representation of &lt;code&gt;Point&lt;&#x2F;code&gt; now that we added this attribute!&lt;&#x2F;p&gt;
&lt;table style=&quot;border-collapse: initial; border: 0px; width: auto; color: black&quot;&gt;
  &lt;tr&gt;
    &lt;td style=&quot;border: 1px solid; padding: 6px; text-align: center; background-color: rgb(147, 154, 231); margin: 0px; border-spacing: 1px; font-family: monospace; font-weight: normal&quot;&gt;1&lt;&#x2F;td&gt;
    &lt;td style=&quot;border: 1px solid; padding: 6px; text-align: center; background-color: rgb(154, 231, 147); margin: 0px; border-spacing: 1px; font-family: monospace; font-weight: normal&quot;&gt;16&lt;&#x2F;td&gt;
    &lt;td style=&quot;border: 1px solid; padding: 6px; text-align: center; background-color: rgb(231, 147, 200); margin: 0px; border-spacing: 1px; font-family: monospace; font-weight: normal&quot;&gt;8&lt;&#x2F;td&gt;
    &lt;td style=&quot;border: 1px solid; padding: 6px; text-align: center; background-color: rgb(154, 231, 147); margin: 0px; border-spacing: 1px; font-family: monospace; font-weight: normal&quot;&gt;0&lt;&#x2F;td&gt;
    &lt;td style=&quot;border: 1px solid; padding: 6px; text-align: center; background-color: rgb(154, 231, 147); margin: 0px; border-spacing: 1px; font-family: monospace; font-weight: normal&quot;&gt;0&lt;&#x2F;td&gt;
    &lt;td style=&quot;border: 1px solid; padding: 6px; text-align: center; background-color: rgb(154, 231, 147); margin: 0px; border-spacing: 1px; font-family: monospace; font-weight: normal&quot;&gt;0&lt;&#x2F;td&gt;
    &lt;td style=&quot;border: 1px solid; padding: 6px; text-align: center; background-color: rgb(154, 231, 147); margin: 0px; border-spacing: 1px; font-family: monospace; font-weight: normal&quot;&gt;1&lt;&#x2F;td&gt;
    &lt;td style=&quot;border: 1px solid; padding: 6px; text-align: center; background-color: rgb(231, 154, 147); margin: 0px; border-spacing: 1px; font-family: monospace; font-weight: normal&quot;&gt;0&lt;&#x2F;td&gt;
    &lt;td style=&quot;border: 1px solid; padding: 6px; text-align: center; background-color: rgb(231, 154, 147); margin: 0px; border-spacing: 1px; font-family: monospace; font-weight: normal&quot;&gt;0&lt;&#x2F;td&gt;
    &lt;td style=&quot;border: 1px solid; padding: 6px; text-align: center; background-color: rgb(231, 154, 147); margin: 0px; border-spacing: 1px; font-family: monospace; font-weight: normal&quot;&gt;0&lt;&#x2F;td&gt;
    &lt;td style=&quot;border: 1px solid; padding: 6px; text-align: center; background-color: rgb(231, 154, 147); margin: 0px; border-spacing: 1px; font-family: monospace; font-weight: normal&quot;&gt;2&lt;&#x2F;td&gt;
    &lt;td style=&quot;border: 1px solid; padding: 6px; text-align: center; background-color: rgb(231, 147, 200); margin: 0px; border-spacing: 1px; font-family: monospace; font-weight: normal&quot;&gt;0&lt;&#x2F;td&gt;
    &lt;td style=&quot;border: 1px solid; padding: 6px; text-align: center; background-color: rgb(231, 147, 200); margin: 0px; border-spacing: 1px; font-family: monospace; font-weight: normal&quot;&gt;0&lt;&#x2F;td&gt;
    &lt;td style=&quot;border: 1px solid; padding: 6px; text-align: center; background-color: rgb(231, 147, 200); margin: 0px; border-spacing: 1px; font-family: monospace; font-weight: normal&quot;&gt;0&lt;&#x2F;td&gt;
    &lt;td style=&quot;border: 1px solid; padding: 6px; text-align: center; background-color: rgb(231, 147, 200); margin: 0px; border-spacing: 1px; font-family: monospace; font-weight: normal&quot;&gt;3&lt;&#x2F;td&gt;    
  &lt;&#x2F;tr&gt;
&lt;&#x2F;table&gt;
&lt;p&gt;Now that we have an &lt;em&gt;evolution step&lt;&#x2F;em&gt; the first byte, which was always &lt;code&gt;0&lt;&#x2F;code&gt; before, becomes &lt;code&gt;1&lt;&#x2F;code&gt;. Every evolution step increases this value, which is interpreted as the type&#x27;s &lt;em&gt;version&lt;&#x2F;em&gt;. For each ADT which has a version other than 0, this first version byte is followed by a list of the binary encoding of the evolution steps. Here the &lt;code&gt;16&lt;&#x2F;code&gt; is the variable-length encoding of the value &lt;code&gt;8&lt;&#x2F;code&gt;, which is the length of the &quot;version 0&quot; part of the data type. This is followed by &lt;code&gt;8&lt;&#x2F;code&gt; which is just the variable-length encoding of the value &lt;code&gt;4&lt;&#x2F;code&gt;, and it represents the &lt;em&gt;field added&lt;&#x2F;em&gt; evolution step, encoding the newly added field&#x27;s size.&lt;&#x2F;p&gt;
&lt;p&gt;With this format when the &lt;em&gt;old&lt;&#x2F;em&gt; deserializer reads the point, it knows it needs to skip additional 4 bytes after reading the &lt;code&gt;x&lt;&#x2F;code&gt; and &lt;code&gt;y&lt;&#x2F;code&gt; coordinates. Also when the &lt;em&gt;new&lt;&#x2F;em&gt; deserializer encounters an old point, that binary data will begin with &lt;code&gt;0&lt;&#x2F;code&gt;, so the deserializer is aware that it&#x27;s an older version and can set the deserialized value&#x27;s &lt;code&gt;z&lt;&#x2F;code&gt; coordinate to the provided default.&lt;&#x2F;p&gt;
&lt;p&gt;By documenting the data type change we get full forward and backward compatibility in this case. The cost is that instead of &lt;code&gt;13&lt;&#x2F;code&gt; bytes, now each &lt;code&gt;Point&lt;&#x2F;code&gt; takes &lt;code&gt;15&lt;&#x2F;code&gt; bytes.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;making-a-field-optional&quot;&gt;Making a field optional&lt;&#x2F;h3&gt;
&lt;p&gt;Another special data type change is making an existing field optional. Staying with the previous example we could change our &lt;code&gt;Point&lt;&#x2F;code&gt; type like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span&gt;@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;evolutionSteps&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;  FieldAdded[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Coordinate&lt;&#x2F;span&gt;&lt;span&gt;](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;z&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, Coordinate(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;)),
&lt;&#x2F;span&gt;&lt;span&gt;  FieldMadeOptional(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;z&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;final case class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; Point&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Coordinate&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;y&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Coordinate&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;z&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Coordinate&lt;&#x2F;span&gt;&lt;span&gt;])
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;object&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; Point {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;implicit val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;codec&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: BinaryCodec[Point] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;DerivedBinaryCodec.derive 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;pt &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;Point(Coordinate(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;), Coordinate(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;), None)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This of course can no longer guarantee full forward and backward compatibility - but it can be useful as an intermediate step in getting rid of some unused parts of the data model, while still being able to access it when it&#x27;s available from older serialized data.&lt;&#x2F;p&gt;
&lt;p&gt;This evolution step is represented by a variable-length integer &lt;code&gt;-1&lt;&#x2F;code&gt; in the ADT header. All positive values are representing the &lt;em&gt;field added&lt;&#x2F;em&gt; case, with the actual value containing the size of the added field. -1 is a special marker for field removed, and it is followed by another variable-length integer encoding the field position which has been made optional. Then serializing the &lt;code&gt;Option&lt;&#x2F;code&gt; field, the integer gets prefixed by a &lt;code&gt;1&lt;&#x2F;code&gt; if the value was &lt;code&gt;Some&lt;&#x2F;code&gt;, or the whole option is serialized as a &lt;code&gt;0&lt;&#x2F;code&gt; if it was &lt;code&gt;None&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The total serialized record of the above example would look like this:&lt;&#x2F;p&gt;
&lt;table style=&quot;border-collapse: initial; border: 0px; width: auto; color: black&quot;&gt;
  &lt;tr&gt;
    &lt;td style=&quot;border: 1px solid; padding: 6px; text-align: center; background-color: rgb(147, 154, 231); margin: 0px; border-spacing: 1px; font-family: monospace; font-weight: normal&quot;&gt;2&lt;&#x2F;td&gt;
    &lt;td style=&quot;border: 1px solid; padding: 6px; text-align: center; background-color: rgb(154, 231, 147); margin: 0px; border-spacing: 1px; font-family: monospace; font-weight: normal&quot;&gt;16&lt;&#x2F;td&gt;
    &lt;td style=&quot;border: 1px solid; padding: 6px; text-align: center; background-color: rgb(231, 147, 200); margin: 0px; border-spacing: 1px; font-family: monospace; font-weight: normal&quot;&gt;2&lt;&#x2F;td&gt;
    &lt;td style=&quot;border: 1px solid; padding: 6px; text-align: center; background-color: rgb(60, 200, 150); margin: 0px; border-spacing: 1px; font-family: monospace; font-weight: normal&quot;&gt;1&lt;&#x2F;td&gt;
    &lt;td style=&quot;border: 1px solid; padding: 6px; text-align: center; background-color: rgb(60, 200, 150); margin: 0px; border-spacing: 1px; font-family: monospace; font-weight: normal&quot;&gt;1&lt;&#x2F;td&gt;    
    &lt;td style=&quot;border: 1px solid; padding: 6px; text-align: center; background-color: rgb(154, 231, 147); margin: 0px; border-spacing: 1px; font-family: monospace; font-weight: normal&quot;&gt;0&lt;&#x2F;td&gt;
    &lt;td style=&quot;border: 1px solid; padding: 6px; text-align: center; background-color: rgb(154, 231, 147); margin: 0px; border-spacing: 1px; font-family: monospace; font-weight: normal&quot;&gt;0&lt;&#x2F;td&gt;
    &lt;td style=&quot;border: 1px solid; padding: 6px; text-align: center; background-color: rgb(154, 231, 147); margin: 0px; border-spacing: 1px; font-family: monospace; font-weight: normal&quot;&gt;0&lt;&#x2F;td&gt;
    &lt;td style=&quot;border: 1px solid; padding: 6px; text-align: center; background-color: rgb(154, 231, 147); margin: 0px; border-spacing: 1px; font-family: monospace; font-weight: normal&quot;&gt;1&lt;&#x2F;td&gt;
    &lt;td style=&quot;border: 1px solid; padding: 6px; text-align: center; background-color: rgb(231, 154, 147); margin: 0px; border-spacing: 1px; font-family: monospace; font-weight: normal&quot;&gt;0&lt;&#x2F;td&gt;
    &lt;td style=&quot;border: 1px solid; padding: 6px; text-align: center; background-color: rgb(231, 154, 147); margin: 0px; border-spacing: 1px; font-family: monospace; font-weight: normal&quot;&gt;0&lt;&#x2F;td&gt;
    &lt;td style=&quot;border: 1px solid; padding: 6px; text-align: center; background-color: rgb(231, 154, 147); margin: 0px; border-spacing: 1px; font-family: monospace; font-weight: normal&quot;&gt;0&lt;&#x2F;td&gt;
    &lt;td style=&quot;border: 1px solid; padding: 6px; text-align: center; background-color: rgb(231, 154, 147); margin: 0px; border-spacing: 1px; font-family: monospace; font-weight: normal&quot;&gt;2&lt;&#x2F;td&gt;
    &lt;td style=&quot;border: 1px solid; padding: 6px; text-align: center; background-color: rgb(231, 147, 200); margin: 0px; border-spacing: 1px; font-family: monospace; font-weight: normal&quot;&gt;0&lt;&#x2F;td&gt;
  &lt;&#x2F;tr&gt;
&lt;&#x2F;table&gt;
&lt;p&gt;The first byte is now &lt;code&gt;2&lt;&#x2F;code&gt; as we have two evolution steps. The next one still defines that the original part of the data is 8 bytes long, the third byte shows that this time the new &lt;em&gt;z&lt;&#x2F;em&gt; field is taking only 1 byte (as it was set to &lt;code&gt;None&lt;&#x2F;code&gt;). The header is now containing two more bytes, as described above: the first &lt;code&gt;1&lt;&#x2F;code&gt; means a field has been made optional, and the second points to the field.&lt;&#x2F;p&gt;
&lt;p&gt;This can be still loaded by the very first point serializer (or even as the coordinate pair tuple), as everything after the first two coordinates would be skipped. It can also be loaded as a &lt;code&gt;Point&lt;&#x2F;code&gt; with non-optional z coordinate, but only if the serialized data is a &lt;code&gt;Some&lt;&#x2F;code&gt;. So in the above example it would lead to a deserialization error. The change is fully backward compatible so our latest deserializer can still load all the variants we have seen before.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;removing-a-field&quot;&gt;Removing a field&lt;&#x2F;h3&gt;
&lt;p&gt;The final special data evolution step supported by the library is &lt;em&gt;removing&lt;&#x2F;em&gt; a field completely. This is more limited than the previous ones though - backward compatibility is easy, newer versions of the deserializer just have to skip the removed fields which they can easily do. But forward compatibility is only possible if the removed field was an &lt;strong&gt;option field&lt;&#x2F;strong&gt; - that&#x27;s the only type &lt;code&gt;desert&lt;&#x2F;code&gt; can automatically provide a default value, &lt;code&gt;None&lt;&#x2F;code&gt; for.&lt;&#x2F;p&gt;
&lt;p&gt;The binary header for removing a field needs to store the actual &lt;em&gt;field name&lt;&#x2F;em&gt; because it cannot otherwise identify the field which is not actually in the rest of the data set. To make this more space-efficient, &lt;code&gt;desert&lt;&#x2F;code&gt; uses string deduplication and only needs to serialize the actual field name once.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;sum-types&quot;&gt;Sum types&lt;&#x2F;h3&gt;
&lt;p&gt;Scala 2 sealed trait hierarchies and Scala 3 enums are simply serialized with the same techniques mentioned above, but with a &lt;em&gt;constructor ID&lt;&#x2F;em&gt; serialized as a prefix to the binary. Constructor identifiers are associated in order - as the constructors appear in the source code. This means that adding new constructors is backward and forward compatible, as long as they are added as the &lt;em&gt;last&lt;&#x2F;em&gt; constructor. Otherwise the identifiers will be rearranged and binary compatibility breaks.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;transients&quot;&gt;Transients&lt;&#x2F;h3&gt;
&lt;p&gt;It is possible to make a previously non-transient field transient and maintain binary compatibility. The rules are the same as for &lt;em&gt;removing&lt;&#x2F;em&gt; a field.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;type-registry&quot;&gt;Type registry&lt;&#x2F;h3&gt;
&lt;p&gt;As mentioned earlier, a &lt;em&gt;type registry&lt;&#x2F;em&gt; can be used to associate identifiers to types, and then serialize arbitrary values using these identifiers. Maintaining the stability of this mapping is also very important when evolving data types. What if we want to delete a type which was added to the type registry because we never want to use it again, and we already migrated our serialized data and we are sure we will never encounter that ID again during deserialization?&lt;&#x2F;p&gt;
&lt;p&gt;We still cannot just simply remove the entry from the type registry, because it will break all the following identifiers as they get assigned sequentially. The library has a solution for this - it is possible to registry empty placeholders where we previously had an actual type - it will maintain the identifier order, but will lead to a runtime error when that identifier is encountered during deserialization.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;&#x2F;h2&gt;
&lt;p&gt;In this post I summarized the key features of the &lt;code&gt;desert&lt;&#x2F;code&gt; serialization library, and explained in detail how it supports changes into the data model while trying to keep maximal backward and forward compatibility.&lt;&#x2F;p&gt;
&lt;p&gt;In the next post I will show how the same library can be implemented for &lt;strong&gt;Rust&lt;&#x2F;strong&gt;, how the Scala solution maps into different concepts in the other language and what difficulties I&#x27;ve encountered during the migration process.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>[Video] Beyond OpenAPI @ Functional Scala 2023</title>
        <published>2024-01-21T00:00:00+00:00</published>
        <updated>2024-01-21T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Daniel Vigovszky
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://blog.vigoo.dev/posts/funscala2023-talk/"/>
        <id>https://blog.vigoo.dev/posts/funscala2023-talk/</id>
        
        <content type="html" xml:base="https://blog.vigoo.dev/posts/funscala2023-talk/">&lt;p&gt;My talk at &lt;a href=&quot;https:&#x2F;&#x2F;www.functionalscala.com&#x2F;&quot;&gt;Functional Scala 2023&lt;&#x2F;a&gt; about my experience with generating client libraries from OpenAPI specifications, and an alternative code-first approach using &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;zio&#x2F;zio-http&#x2F;&quot;&gt;ZIO Http&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;iframe width=&quot;800&quot; height=&quot;450&quot; src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;wwKs37GVubg?si=dMEqTmjUgGBhYB38&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&quot; allowfullscreen&gt;&lt;&#x2F;iframe&gt;</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Type class derivation with ZIO Schema</title>
        <published>2023-12-02T00:00:00+00:00</published>
        <updated>2023-12-02T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Daniel Vigovszky
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://blog.vigoo.dev/posts/zio-schema-deriving/"/>
        <id>https://blog.vigoo.dev/posts/zio-schema-deriving/</id>
        
        <content type="html" xml:base="https://blog.vigoo.dev/posts/zio-schema-deriving/">&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;&#x2F;h2&gt;
&lt;p&gt;Making the compiler to automatically &lt;em&gt;derive&lt;&#x2F;em&gt; implementations of a type class for your custom algebraic data types is a common technique in programming languages. Haskell, for example, has built-in syntax for it:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;haskell&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-haskell &quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;data &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Literal &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;StringLit String
&lt;&#x2F;span&gt;&lt;span&gt;             &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;BoolLit Bool
&lt;&#x2F;span&gt;&lt;span&gt;               &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;deriving&lt;&#x2F;span&gt;&lt;span&gt; (Show)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;and Rust is using macros instantiated by &lt;em&gt;annotations&lt;&#x2F;em&gt; to do the same:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;Rust&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-Rust &quot;&gt;&lt;code class=&quot;language-Rust&quot; data-lang=&quot;Rust&quot;&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;deriving&lt;&#x2F;span&gt;&lt;span&gt;(Debug)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;enum &lt;&#x2F;span&gt;&lt;span&gt;Literal {
&lt;&#x2F;span&gt;&lt;span&gt;  StringLit(String),
&lt;&#x2F;span&gt;&lt;span&gt;  BoolLit(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;bool&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Scala 3 has its own syntax for deriving type classes:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span&gt;enum Literal deriving Show:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span&gt;StringLit(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span&gt;BoolLit(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Boolean&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;but the more traditional way that works with Scala 2 as well is to define an implicit in the type&#x27;s companion object by an explicit macro invocation:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;sealed trait&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; Literal
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;object&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; Literal {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;final case class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; StringLit(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: String) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Literal
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;final case class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; BoolLit(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: String) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Literal
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;implicit val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;show&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: Show[Literal] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;DeriveShow[Literal]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;All these examples from different languages are common in a way that in order to automatically generate an implementation for an arbitrary type we need to be able to gather information about these types as (compilation-) runtime values, and to generate new code fragments (or actual abstract syntax tree) which then takes part of to the compilation, producing the same result as writing the implementation by hand.&lt;&#x2F;p&gt;
&lt;p&gt;This means using some kind of macro, depending on which programming language we use. But writing these macros is never easy, and in some cases can be very different from the usual way of writing code - so in each programming language people are writing &lt;em&gt;libraries&lt;&#x2F;em&gt; helping type class derivation in one way or the other.&lt;&#x2F;p&gt;
&lt;p&gt;In this post I will show a library like that for Scala, the &lt;code&gt;Deriver&lt;&#x2F;code&gt; feature of &lt;a href=&quot;https:&#x2F;&#x2F;zio.dev&#x2F;zio-schema&#x2F;&quot;&gt;ZIO Schema&lt;&#x2F;a&gt; that I added at the end of last year (2022). But before that let&#x27;s see a real world example and what alternatives we had.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;example&quot;&gt;Example&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;vigoo.github.io&#x2F;desert&#x2F;&quot;&gt;Desert&lt;&#x2F;a&gt; is a Scala serialization library I wrote in 2020. Not surprisingly in the core of Desert is a &lt;em&gt;trait&lt;&#x2F;em&gt; that describes serialization and deserailization of a type &lt;code&gt;T&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;trait&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; BinaryCodec&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span&gt;BinarySerializer[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;with &lt;&#x2F;span&gt;&lt;span&gt;BinaryDeserializer[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;trait&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; BinarySerializer&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;serialize&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: T)(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;implicit &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;context&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: SerializationContext): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Unit
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;trait&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; BinaryDeserializer&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;deserialize&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;()(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;implicit &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;ctx&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: DeserializationContext): T
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Although we can implement these traits manually, in order to take advantage of Desert&#x27;s type evolution capabilities, for complex types like &lt;em&gt;case classes&lt;&#x2F;em&gt; or &lt;em&gt;enums&lt;&#x2F;em&gt; we want the user to be able to write something like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;final case class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; Point&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Int&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;y&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Int&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;z&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Int&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;object&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; Point {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;implicit val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;codec&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: BinaryCodec[Point] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;DerivedBinaryCodec.derive
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;alternatives&quot;&gt;Alternatives&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;scala-3-mirrors&quot;&gt;Scala 3 mirrors&lt;&#x2F;h3&gt;
&lt;p&gt;First of all, &lt;strong&gt;Scala 3&lt;&#x2F;strong&gt; has some built-in support for implementing derivation macros using its &lt;code&gt;Mirror&lt;&#x2F;code&gt; type, explained in the &lt;a href=&quot;https:&#x2F;&#x2F;docs.scala-lang.org&#x2F;scala3&#x2F;reference&#x2F;contextual&#x2F;derivation.html&quot;&gt;official documentation&lt;&#x2F;a&gt;. We can see a simple example of this technique &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;zio&#x2F;zio&#x2F;blob&#x2F;series%2F2.x&#x2F;test-magnolia&#x2F;shared&#x2F;src&#x2F;main&#x2F;scala-3&#x2F;zio&#x2F;test&#x2F;magnolia&#x2F;DeriveGen.scala&quot;&gt;in the ZIO codebase&lt;&#x2F;a&gt; where I have implemented a deriving mechanism for the &lt;code&gt;Gen[R, A]&lt;&#x2F;code&gt; trait which is Scala 3 specific. (The Scala 2 version is using the Magnolia library, introduced below, which did not have a Scala 3 version back then). The &lt;code&gt;Mirror&lt;&#x2F;code&gt; values are summoned by the compiler and they provide the type information:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span&gt;inline &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;gen&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span&gt;](using &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;m&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Mirror&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Of&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span&gt;]): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;DeriveGen&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;DeriveGen&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span&gt;] {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Gen&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Any&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;elemInstances &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; summonAll[m.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;MirroredElemTypes&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;      inline m &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;match &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Mirror&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;SumOf&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span&gt;]     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; genSum(s, elemInstances)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;p&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Mirror&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ProductOf&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; genProduct(p, elemInstances)
&lt;&#x2F;span&gt;&lt;span&gt;      }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;As this function is an &lt;a href=&quot;https:&#x2F;&#x2F;docs.scala-lang.org&#x2F;scala3&#x2F;reference&#x2F;metaprogramming&#x2F;inline.html&quot;&gt;inline function&lt;&#x2F;a&gt;, it gets evaluated compile time, using this summoned &lt;code&gt;Mirror&lt;&#x2F;code&gt; value to produce an implementation of &lt;code&gt;Gen[Any, T]&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;This is a little low level and requires knowledge of inline functions and things like &lt;code&gt;summonAll&lt;&#x2F;code&gt; etc., but otherwise a relatively easy way to solve the type class derivation problem. But it is Scala 3 only.&lt;&#x2F;p&gt;
&lt;p&gt;Back in 2020 when I wrote the first version of Desert, there was no Scala 3 at all, and the three main way to do this were&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;writing a (Scala 2) macro by hand&lt;&#x2F;li&gt;
&lt;li&gt;using &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;milessabin&#x2F;shapeless&quot;&gt;Shapeless&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;using &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;softwaremill&#x2F;magnolia&quot;&gt;Magnolia&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;scala-2-macros&quot;&gt;Scala 2 macros&lt;&#x2F;h3&gt;
&lt;p&gt;Writing a custom derivation logic with Scala 2 macros is not easy, but it is completely possible. It starts by defining a &lt;a href=&quot;https:&#x2F;&#x2F;www.scala-lang.org&#x2F;api&#x2F;2.13.12&#x2F;scala-reflect&#x2F;scala&#x2F;reflect&#x2F;macros&#x2F;whitebox&#x2F;Context.html&quot;&gt;whitebox macro&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;object&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; Derive {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;[A]: BinaryCodec[A] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= macro&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; deriveImpl[A]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;deriveImpl&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;[A&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;c.WeakTypeTag](
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;c&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: whitebox.Context
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  ): c.Tree &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;import&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; c.universe.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The job of &lt;code&gt;deriveImpl&lt;&#x2F;code&gt; is to examine the type of &lt;code&gt;A&lt;&#x2F;code&gt; and generate a &lt;code&gt;Tree&lt;&#x2F;code&gt; that represents the implementation of the &lt;code&gt;BinaryCodec&lt;&#x2F;code&gt; trait for &lt;code&gt;A&lt;&#x2F;code&gt;. We can start by getting a &lt;code&gt;Type&lt;&#x2F;code&gt; value for &lt;code&gt;A&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;tpe&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; weakTypeOf[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;and then use that to get all kind of information about this type. For example to check if it is a &lt;em&gt;case class&lt;&#x2F;em&gt;, we could write&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;isCaseClass&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;tpe&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Type&lt;&#x2F;span&gt;&lt;span&gt;): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Boolean =&lt;&#x2F;span&gt;&lt;span&gt; tpe.typeSymbol.asClass.isCaseClass
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;and then try to collect all the fields of that case class:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;fields &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; tpe.decls.sorted.collect {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;p&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;TermSymbol &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; p.isCaseAccessor &amp;amp;&amp;amp; !p.isMethod &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; p
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;As we can see this is a very direct and low level way to work with the types, much harder then the &lt;code&gt;Mirror&lt;&#x2F;code&gt; type we used for Scala 3. Once we gathered all the necessary information for generating the derived type class, we can use &lt;em&gt;quotes&lt;&#x2F;em&gt; to construct fragments of Scala AST:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;fieldSerializationStatements &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;codec &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;q&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;new BinaryCodec[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;$tpe&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;] {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;  def serialize(value: T)(implicit context: SerializationContext): Unit = {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;    ..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;$fieldSerializationStatements
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;  }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In the end, this quoted &lt;code&gt;codec&lt;&#x2F;code&gt; value is a &lt;code&gt;Tree&lt;&#x2F;code&gt; which we can return from the macro.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;shapeless&quot;&gt;Shapeless&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;milessabin&#x2F;shapeless&quot;&gt;Shapeless&lt;&#x2F;a&gt; is a library for &lt;em&gt;type level programming&lt;&#x2F;em&gt; in Scala 2 (and there is a &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;typelevel&#x2F;shapeless-3&quot;&gt;new version&lt;&#x2F;a&gt; for Scala 3 too). It provides things like type-level heterogeneous lists and all of operations on them, and it also defines &lt;em&gt;macros&lt;&#x2F;em&gt; that can convert an arbitrary case class into a &lt;em&gt;generic representation&lt;&#x2F;em&gt;, which is essentially a type level list containing all the fields. Similarly it can convert an arbitrary sum type (sealed trait in Scala 2) to a generic representation of coproducts. For example the &lt;code&gt;Point&lt;&#x2F;code&gt; case class we used in an earlier example would be represented like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;final case class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; Point&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Int&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;y&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Int&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;z&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Int&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;point&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Point &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;Point(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;genericPoint&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Int &lt;&#x2F;span&gt;&lt;span&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Int &lt;&#x2F;span&gt;&lt;span&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Int &lt;&#x2F;span&gt;&lt;span&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;HNil &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; type
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt; :: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt; :: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt; :: HNil &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; value
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;labelledGenericPoint &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; type too complex to show here
&lt;&#x2F;span&gt;&lt;span&gt;  (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;x&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt; -&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;) :: (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;y&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt; -&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;) :: (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;z&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt; -&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;) :: HNil &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; value
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In connection with type class derivation the idea is that by using Shapeless we no longer have to write macros to extract type information for our types - we can work with these generic representations instead using advanced type level programming techniques. So the complexity of writing macros is replaced with the complexity of doing type level computation.&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s see how it would look like. First we start by creating a &lt;code&gt;derive&lt;&#x2F;code&gt; method that gets the type we are deriving the codec for as a type parameter:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This &lt;code&gt;T&lt;&#x2F;code&gt; is an arbitrary type, for example our &lt;code&gt;Point&lt;&#x2F;code&gt; structure. In order to get its generic representation provided by Shapeless we have to start using type level techniques, by introducing new type parameters for the things we want to calculate (as types) and implicits to drive these computations. The following version, when compiles, will &quot;calculate&quot; the generic representation of &lt;code&gt;T&lt;&#x2F;code&gt; as the type parameter &lt;code&gt;H&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;H&lt;&#x2F;span&gt;&lt;span&gt;](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;implicit &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;gen&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;LabelledGeneric&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Aux&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;H&lt;&#x2F;span&gt;&lt;span&gt;]) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;BinaryCodec&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span&gt;] {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;serialize&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span&gt;)(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;implicit &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;context&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;SerializationContext&lt;&#x2F;span&gt;&lt;span&gt;): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Unit = &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;h&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;H &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; gen.to(value) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; generic representation of (value: T)
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This is not that hard yet but we need to recursively summon implicit codecs for our fields, so we can&#x27;t just use this &lt;code&gt;H&lt;&#x2F;code&gt; value to go through all the fields in a traditional way - we need to traverse it on the type level.&lt;&#x2F;p&gt;
&lt;p&gt;To do that we need to write our own type level computations implemented as implicit instances for &lt;code&gt;HNil&lt;&#x2F;code&gt; and &lt;code&gt;::&lt;&#x2F;code&gt; etc. The serialization part of the codec would look something like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;implicit val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;hnilSerializer&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;BinarySerializer&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;HNil&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;BinarySerializer&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;HNil&lt;&#x2F;span&gt;&lt;span&gt;] {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;serialize&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;HNil&lt;&#x2F;span&gt;&lt;span&gt;)(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;implicit &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;context&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;SerializationContext&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; no (more) fields
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;implicit def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;hlistSerializer&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;K &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Symbol&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;H&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;T &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;HList&lt;&#x2F;span&gt;&lt;span&gt;](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;implicit
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;witness&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Witness&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Aux&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;K&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; type level extraction of the field&amp;#39;s name
&lt;&#x2F;span&gt;&lt;span&gt;  headSerializer: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;BinarySerializer&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;H&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; type class summoning for the field
&lt;&#x2F;span&gt;&lt;span&gt;  tailSerializer: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;BinarySerializer&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; hlist recursion
&lt;&#x2F;span&gt;&lt;span&gt;): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;BinarySerializer&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;FieldType&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;K&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;H&lt;&#x2F;span&gt;&lt;span&gt;] :: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Similar methods have to be implemented for coproducts too, and also in the codec example we would have to simultaneously derive the serializer &lt;em&gt;and&lt;&#x2F;em&gt; the deserializer. A real implementation would also require access to the &lt;em&gt;annotations&lt;&#x2F;em&gt; of various fields to drive the serialization logic, which requires more and more type level calculations and complicates these type signatures.&lt;&#x2F;p&gt;
&lt;p&gt;I did chose to use Shapeless in the first version of Desert, and the real &lt;code&gt;derive&lt;&#x2F;code&gt; method has the following signature:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;H&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Ks &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;HList&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Trs &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;HList&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Trcs &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;HList&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;KsTrs &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;HList&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;TH&lt;&#x2F;span&gt;&lt;span&gt;](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;implicit
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;gen&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;LabelledGeneric&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Aux&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;H&lt;&#x2F;span&gt;&lt;span&gt;],
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;keys&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Lazy&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Symbols&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Aux&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;H&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Ks&lt;&#x2F;span&gt;&lt;span&gt;]],
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;transientAnnotations&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Annotations&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Aux&lt;&#x2F;span&gt;&lt;span&gt;[transientField, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Trs&lt;&#x2F;span&gt;&lt;span&gt;],
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;transientConstructorAnnotations&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Annotations&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Aux&lt;&#x2F;span&gt;&lt;span&gt;[transientConstructor, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Trcs&lt;&#x2F;span&gt;&lt;span&gt;],
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;taggedTransients&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;TagTransients&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Aux&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;H&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Trs&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Trcs&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;TH&lt;&#x2F;span&gt;&lt;span&gt;],
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;zip&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Zip&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Aux&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Ks &lt;&#x2F;span&gt;&lt;span&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Trs &lt;&#x2F;span&gt;&lt;span&gt;:: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;HNil&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;KsTrs&lt;&#x2F;span&gt;&lt;span&gt;],
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;toList&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ToTraversable&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Aux&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;KsTrs&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span&gt;, (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Symbol&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span&gt;[transientField])],
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;serializationPlan&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Lazy&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;SerializationPlan&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;TH&lt;&#x2F;span&gt;&lt;span&gt;]],
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;deserializationPlan&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Lazy&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;DeserializationPlan&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;TH&lt;&#x2F;span&gt;&lt;span&gt;]],
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;toConstructorMap&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Lazy&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ToConstructorMap&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;TH&lt;&#x2F;span&gt;&lt;span&gt;]],
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;classTag&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ClassTag&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;  ): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;BinaryCodec&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Although this works, there are many problems with this approach. All these type and implicit resolutions can make the compilation quite slow, the code is very complex and hard to understand or modify, and most importantly error messages will be a nightmare. A user trying to derive a type class for our serialization library should not get an error that complains about not being able to find an implicit value of &lt;code&gt;Zip.Aux&lt;&#x2F;code&gt; for a weird type that does not even fit on one screen!&lt;&#x2F;p&gt;
&lt;h3 id=&quot;magnolia&quot;&gt;Magnolia&lt;&#x2F;h3&gt;
&lt;p&gt;The &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;softwaremill&#x2F;magnolia&quot;&gt;Magnolia&lt;&#x2F;a&gt; library provides a much more friendly solution for deriving type classes for algebraic data types - it moves the whole problem into the value space by hiding the necessary macros. The derivation implementation for a given type class then only requires defining two functions (one for working with products, one for working with coproducts) that are regular Scala functions getting a &quot;context&quot; value and producing an instance of the derived type class. The context value contains type information - for example the name and type of all the fields of a case class - and also contains an &lt;em&gt;instance&lt;&#x2F;em&gt; of the derived type class for each of these inner elements.&lt;&#x2F;p&gt;
&lt;p&gt;To write a Magnolia based deriver you have to create an &lt;code&gt;object&lt;&#x2F;code&gt; with a &lt;code&gt;join&lt;&#x2F;code&gt; and a &lt;code&gt;split&lt;&#x2F;code&gt; method and a &lt;code&gt;Typeclass&lt;&#x2F;code&gt; type:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;object&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; BinaryCodecDerivation {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Typeclass[T] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;BinaryCodec[T]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;join&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;[T](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;ctx&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: CaseClass[BinaryCodec, T]): BinaryCodec[T] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;BinaryCodec[T] {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;serialize&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: T)(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;implicit &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;context&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: SerializationContext) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;parameter &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; ctx.parameters) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; recursively serialize the fields
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;          parameter.typeclass.serialize(parameter.dereference(value))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;        }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;      }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;split&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;[T](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;ctx&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: SealedTrait[BinaryCodec, T]): BinaryCodec[T] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;gen&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;[T]: BinaryCodec[T] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= macro &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Magnolia.gen[T]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;There is a Magnolia version for Scala 3 too, which is although quite similar, it is not source compatible with the Scala 2 version, leading to the need to define these derivations twice in cross-compiled projects.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;why-not-magnolia&quot;&gt;Why not Magnolia?&lt;&#x2F;h2&gt;
&lt;p&gt;Magnolia already existed when I wrote the first version of Desert, but I could not use it because of two reasons. In that early version of the library the derivation had to take a user defined list of &lt;em&gt;evolution steps&lt;&#x2F;em&gt;, so the actual codec definitions looked something like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;object&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; Point {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;implicit val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;codec&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: BinaryCodec[Point] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;BinaryCodec.derive(FieldAdded[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;z&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;, 1))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;It was not clear how could I pass these parameters to Magnolia context - with Shapeless it was not a problem because it is possible to simply pass them as a parameter to the &lt;code&gt;derive&lt;&#x2F;code&gt; function that &quot;starts&quot; the type level computation.&lt;&#x2F;p&gt;
&lt;p&gt;This requirement no longer exists though, as in recent versions the &lt;em&gt;evolution steps&lt;&#x2F;em&gt; are defined by attributes, which are fully supported by Magnolia as well:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span&gt;@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;evolutionSteps&lt;&#x2F;span&gt;&lt;span&gt;(FieldAdded[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Int&lt;&#x2F;span&gt;&lt;span&gt;](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;z&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;final case class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; Point&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Int&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;y&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Int&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;z&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Int&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The second reason was a much more important limitation in Magnolia that still exists - it is not possible to shortcut the derivation tree. Desert has &lt;em&gt;transient field&lt;&#x2F;em&gt; and &lt;em&gt;transient constructor&lt;&#x2F;em&gt; support. For those fields and constructors which are marked as transient we don&#x27;t want to, and cannot define codec instances. They can be things like open files, streams, actor references, sockets etc. Even though Magnolia only instantiates the type class instances when they are accessed, the derivation fails if there are types in the tree that does not have an instance. This issue is &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;softwaremill&#x2F;magnolia&#x2F;issues&#x2F;297&quot;&gt;tracked here&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;There was one more decision I did not like regarding Magnolia - the decision to have an incompatible Scala 3 version. I believe it was a big missed opportunity to seamlessly support cross-compiled type class derivation code.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;zio-schema-based-derivation&quot;&gt;ZIO Schema based derivation&lt;&#x2F;h2&gt;
&lt;p&gt;All these issues lead to writing a new derivation library - as part of the &lt;a href=&quot;https:&#x2F;&#x2F;zio.dev&#x2F;zio-schema&#x2F;&quot;&gt;ZIO Schema&lt;&#x2F;a&gt; project. It was first released in version &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;zio&#x2F;zio-schema&#x2F;releases&#x2F;tag&#x2F;v0.3.0&quot;&gt;v0.3.0&lt;&#x2F;a&gt; in November of 2022.&lt;&#x2F;p&gt;
&lt;p&gt;From the previously demonstrated type class derivation techniques the closest to ZIO Schema&#x27;s deriver is Magnolia. On the other hand it does supports the transient field use case, and it is fully cross-compilation compatible between Scala 2 and Scala 3.&lt;&#x2F;p&gt;
&lt;p&gt;To implement type class derivation based on ZIO Schema you need to implement a trait called &lt;code&gt;Deriver&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;trait&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; Deriver&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;F&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;]] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;deriveRecord&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;[A](
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;record&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: Schema.Record[A],
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;fields&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Chunk[WrappedF[F, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;]],
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;summoned&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Option[F[A]]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  ): F[A]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; more deriveXXX methods to impelment
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This looks similar to Magnolia&#x27;s &lt;code&gt;join&lt;&#x2F;code&gt; method but has some significant differences. The first thing to notice is that we get a &lt;code&gt;Schema.Record&lt;&#x2F;code&gt; value describing our case class. This is one of the cases of the core data type &lt;code&gt;Schema[T]&lt;&#x2F;code&gt; which describes Scala data types and provides a lot of features to work with them. So having a &lt;code&gt;Schema[A]&lt;&#x2F;code&gt; is a requirement to derive an &lt;code&gt;F[A]&lt;&#x2F;code&gt; with &lt;code&gt;Deriver&lt;&#x2F;code&gt; - but luckily ZIO schema has derivation support for Schema itself.&lt;&#x2F;p&gt;
&lt;p&gt;The second thing to notice is that &lt;code&gt;Schema[A]&lt;&#x2F;code&gt; itself does not know anything about type class derivation and especially about the actual &lt;code&gt;F&lt;&#x2F;code&gt; type class that is being derived, so the second parameter of &lt;code&gt;deriveRecord&lt;&#x2F;code&gt; is a collection of potentially derived instances of our derived type class for each field. &lt;code&gt;WrappedF&lt;&#x2F;code&gt; is just making this lazy so if we decide we don&#x27;t need instances for (some of) the fields they won&#x27;t be traversed (they still need to have a &lt;code&gt;Schema&lt;&#x2F;code&gt; though - but it can even be a &lt;code&gt;Schema.fail&lt;&#x2F;code&gt; for things not representable by ZIO Schema - it will be fine if we never touch them by unwrapping the &lt;code&gt;WrappedF&lt;&#x2F;code&gt; value).&lt;&#x2F;p&gt;
&lt;p&gt;The third parameter is also interesting as it provides full control to the developer to choose between the summoned implicit and the derivation logic. If your &lt;code&gt;deriveRecord&lt;&#x2F;code&gt; is called for a record type &lt;code&gt;A&lt;&#x2F;code&gt; and there is already an implicit &lt;code&gt;F[A]&lt;&#x2F;code&gt; that the compiler can find (for example defined in &lt;code&gt;A&lt;&#x2F;code&gt;&#x27;s companion object), it will be passed in the &lt;code&gt;summoned&lt;&#x2F;code&gt; parameter to &lt;code&gt;deriveRecord&lt;&#x2F;code&gt;. The usual logic is to choose the summoned value when it is available and only derive an instance when there isn&#x27;t any. By calling &lt;code&gt;.autoAcceptSummoned&lt;&#x2F;code&gt; on our &lt;code&gt;Deriver&lt;&#x2F;code&gt; class we can automatically enable this behavior - in this case &lt;code&gt;deriveRecord&lt;&#x2F;code&gt; will only be called for the cases where &lt;code&gt;summoned&lt;&#x2F;code&gt; was &lt;code&gt;None&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Another method we have on &lt;code&gt;Deriver&lt;&#x2F;code&gt; is &lt;code&gt;.cached&lt;&#x2F;code&gt; which stores the generated type class instances in a concurrent hash map shared between the macro invocations.&lt;&#x2F;p&gt;
&lt;p&gt;Our ZIO Schema based Desert codec derivation is defined using these modifiers:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;object&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; DerivedBinaryCodec {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;lazy val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;deriver &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;BinaryCodecDeriver().cached.autoAcceptSummoned
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;private final case class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; BinaryCodecDeriver() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Deriver[BinaryCodec] {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;As ZIO Schema is not only describing records and enums but also primitive types, tuples, and special cases like &lt;code&gt;Option&lt;&#x2F;code&gt; and &lt;code&gt;Either&lt;&#x2F;code&gt; and collection types, the deriver has to support all these.&lt;&#x2F;p&gt;
&lt;p&gt;The minimum set of methods to implement is &lt;code&gt;deriveRecord&lt;&#x2F;code&gt;, &lt;code&gt;deriveEnum&lt;&#x2F;code&gt;, &lt;code&gt;derivePrimitive&lt;&#x2F;code&gt;, &lt;code&gt;deriveOption&lt;&#x2F;code&gt;, &lt;code&gt;deriveSequence&lt;&#x2F;code&gt;, &lt;code&gt;deriveMap&lt;&#x2F;code&gt; and &lt;code&gt;deriveTransformedRecord&lt;&#x2F;code&gt;. In addition to that we can also override &lt;code&gt;deriveEither&lt;&#x2F;code&gt;, &lt;code&gt;deriveSet&lt;&#x2F;code&gt; and &lt;code&gt;deriveTupleN&lt;&#x2F;code&gt; (1-22) to handle these cases specially.&lt;&#x2F;p&gt;
&lt;p&gt;In case of Desert the &lt;code&gt;deriveRecord&lt;&#x2F;code&gt; and &lt;code&gt;deriveEnum&lt;&#x2F;code&gt; are calling to the implementation of the same data-evolution aware binary format that was previously implemented using Shapeless, but this time it is automatically supporting Scala 2 and Scala 3 the same time. The &lt;code&gt;derivePrimitive&lt;&#x2F;code&gt; is just choosing from predefined &lt;code&gt;BinaryCodec&lt;&#x2F;code&gt; instances based on the primitive&#x27;s type:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;override def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;derivePrimitive&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;](
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;st&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;StandardType&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;],
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;summoned&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;BinaryCodec&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;]]
&lt;&#x2F;span&gt;&lt;span&gt;): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;BinaryCodec&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span&gt;  st &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;match &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span&gt;StandardType.UnitType           &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; unitCodec
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span&gt;StandardType.StringType         &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; stringCodec
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span&gt;StandardType.BoolType           &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; booleanCodec
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span&gt;StandardType.ByteType           &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; byteCodec
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Same applies for option, either, sequence etc - it is just a mapping to the library&#x27;s own definition of these binary codecs.&lt;&#x2F;p&gt;
&lt;p&gt;Under the hood &lt;code&gt;Deriver&lt;&#x2F;code&gt; is a macro (implemented separately both for Scala 2 and Scala 3) that traverses the types simultaneously with the provided &lt;code&gt;Schema&lt;&#x2F;code&gt; (so it does not need to regenerate those) and maps these informations into calls through the &lt;code&gt;Deriver&lt;&#x2F;code&gt; interface. The whole process is initiated by calling the &lt;code&gt;derive&lt;&#x2F;code&gt; method on our &lt;code&gt;Deriver&lt;&#x2F;code&gt;, which is the entry point of these macros, so it has a different looking (but source-code compatible) definition for Scala 2 and Scala 3:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; Scala 3
&lt;&#x2F;span&gt;&lt;span&gt;inline &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;implicit &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;schema&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Schema&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;]): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;F&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; Scala 2
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;F&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;deriver&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Deriver&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;F&lt;&#x2F;span&gt;&lt;span&gt;])(
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;implicit &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;schema&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Schema&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;F&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= macro&lt;&#x2F;span&gt;&lt;span&gt; deriveImpl[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;F&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;These are compatible if you are directly calling them: so you can write&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;binaryCodecDeriver&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Deriver&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;BinaryCodec&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;pointCodec&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;BinaryCodec&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Point&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; binaryCodecDeriver.derive[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Point&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Or even:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;object&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; BinaryCodecDeriver &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span&gt;Deriver[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;BinaryCodec&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;pointCodec&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;BinaryCodec&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Point&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;BinaryCodecDeriver.derive[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Point&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;But if you want to wrap this derive call you have to be aware that they are macro calls, and they have to be wrapped by (version-specific) macros. This is what Desert is doing - as shown before, it uses the &lt;code&gt;cached&lt;&#x2F;code&gt; and &lt;code&gt;autoAcceptSummoned&lt;&#x2F;code&gt; modifiers to create a deriver, but still exposes a simple &lt;code&gt;derive&lt;&#x2F;code&gt; method through an &lt;code&gt;object&lt;&#x2F;code&gt;. To do so it needs to wrap the inner deriver macro with its own macro like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; Scala 2
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;trait&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; DerivedBinaryCodecVersionSpecific {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;deriver&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: Deriver[BinaryCodec]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;[T](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;implicit &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;schema&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: Schema[T]): BinaryCodec[T] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;macro &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;DerivedBinaryCodecVersionSpecific.deriveImpl[T]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;object&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; DerivedBinaryCodecVersionSpecific {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;deriveImpl&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;[T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;c.WeakTypeTag](
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;c&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: whitebox.Context)(
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;schema&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: c.Expr[Schema[T]]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    ): c.Tree &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;import&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; c.universe.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;tpe &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; weakTypeOf[T]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;q&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;_root_.zio.schema.Derive.derive[BinaryCodec, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;$tpe&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;]  (_root_.io.github.vigoo.desert.zioschema.DerivedBinaryCodec.deriver)(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;$schema&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;)&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; Scala 3
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;trait&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; DerivedBinaryCodecVersionSpecific {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;lazy val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;deriver&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: Deriver[BinaryCodec]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  inline &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;[T](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;implicit &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;schema&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: Schema[T]): BinaryCodec[T] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    Derive.derive[BinaryCodec, T](DerivedBinaryCodec.deriver)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;We have a new alternative for deriving type class instances from type information, based on ZIO Schema. You may want to use it if you want to have a single deriver source code for both Scala 2 and Scala 3, if you need more flexibility than what Magnolia provides, or if you are already using ZIO Schema in your project.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Generating a Rust client library for ZIO Http endpoints</title>
        <published>2023-09-07T00:00:00+00:00</published>
        <updated>2023-09-07T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Daniel Vigovszky
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://blog.vigoo.dev/posts/generating-a-rust-client-library-for-zio-http-endpoints/"/>
        <id>https://blog.vigoo.dev/posts/generating-a-rust-client-library-for-zio-http-endpoints/</id>
        
        <content type="html" xml:base="https://blog.vigoo.dev/posts/generating-a-rust-client-library-for-zio-http-endpoints/">&lt;p&gt;We at &lt;a href=&quot;https:&#x2F;&#x2F;golem.cloud&quot;&gt;Golem Cloud&lt;&#x2F;a&gt; built our first developer preview on top of the ZIO ecosystem, including &lt;a href=&quot;https:&#x2F;&#x2F;github.io&#x2F;zio&#x2F;zio-http&quot;&gt;ZIO Http&lt;&#x2F;a&gt; for defining and implementing our server&#x27;s REST API. By using &lt;strong&gt;ZIO Http&lt;&#x2F;strong&gt; we immediately had the ability to call our endpoints using endpoint &lt;strong&gt;client&lt;&#x2F;strong&gt;s, which allowed us to develop the first version of Golem&#x27;s &lt;strong&gt;CLI tool&lt;&#x2F;strong&gt; very rapidly.&lt;&#x2F;p&gt;
&lt;p&gt;Although very convenient for development, &lt;em&gt;using&lt;&#x2F;em&gt; a CLI tool built with Scala for the JVM is not a pleasant experience for the users due to the slow startup time. One possible solution is to compile to native using &lt;a href=&quot;https:&#x2F;&#x2F;www.graalvm.org&#x2F;22.0&#x2F;reference-manual&#x2F;native-image&#x2F;&quot;&gt;GraalVM Native Image&lt;&#x2F;a&gt; but it is very hard to set up and even when it works, it is extremely fragile - further changes to the code or updated dependencies can break it causing unexpected extra maintenance cost. After some initial experiments we dropped this idea - and instead chose to reimplement the CLI using &lt;strong&gt;Rust&lt;&#x2F;strong&gt; - a language being a much better fit for command line tools, and also already an important technology in our Golem stack.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;zio-http&quot;&gt;ZIO Http&lt;&#x2F;h2&gt;
&lt;p&gt;If we rewrite &lt;code&gt;golem-cli&lt;&#x2F;code&gt; to Rust, we lose the convenience of using  &lt;strong&gt;endpoint definitions&lt;&#x2F;strong&gt; (written in Scala with ZIO Http, the ones we have for implementing the server) for calling our API, and we would also lose all the &lt;strong&gt;types&lt;&#x2F;strong&gt; used in these APIs as they are all defined as Scala case classes and enums. Just to have more context, let&#x27;s take a look at one of the endpoints!&lt;&#x2F;p&gt;
&lt;p&gt;A ZIO Http &lt;strong&gt;endpoint&lt;&#x2F;strong&gt; is just a definition of a single endpoint of a HTTP API, describing the routing as well the inputs and outputs of it:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;getWorkerMetadata &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span&gt;    Endpoint(GET &#x2F; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;v1&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt; &#x2F; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;templates&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt; &#x2F; rawTemplateId &#x2F; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;workers&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt; &#x2F; workerName)
&lt;&#x2F;span&gt;&lt;span&gt;      .header(Auth.tokenSecret)
&lt;&#x2F;span&gt;&lt;span&gt;      .outErrorCodec(errorCodec)
&lt;&#x2F;span&gt;&lt;span&gt;      .out[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;WorkerMetadata&lt;&#x2F;span&gt;&lt;span&gt;] ?? Doc.p(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;Get the current worker status and metadata&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Let&#x27;s see what we have here:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;the endpoint is reached by sending a &lt;strong&gt;GET&lt;&#x2F;strong&gt; request&lt;&#x2F;li&gt;
&lt;li&gt;the request &lt;strong&gt;path&lt;&#x2F;strong&gt; consists of some static segments as well as the &lt;em&gt;template id&lt;&#x2F;em&gt; and the &lt;em&gt;worker name&lt;&#x2F;em&gt;&lt;&#x2F;li&gt;
&lt;li&gt;it also requires an &lt;strong&gt;authorization header&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;we define the kind of errors it can return&lt;&#x2F;li&gt;
&lt;li&gt;and finally it defines that the response&#x27;s &lt;strong&gt;body&lt;&#x2F;strong&gt; will contain a JSON representation (default in ZIO Http) of a type called &lt;code&gt;WorkerMetadata&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;What are &lt;code&gt;rawTemplateId&lt;&#x2F;code&gt; and &lt;code&gt;workerName&lt;&#x2F;code&gt;? These are so called &lt;strong&gt;path codecs&lt;&#x2F;strong&gt;, defined in a common place so they can be reused in multiple endpoints. They allow us to have dynamic parts of the request path mapped to specific types - so when we implement the endpoint (or call it in a client) we don&#x27;t have to pass strings and we can directly work with the business domain types, in this case &lt;code&gt;RawTemplateId&lt;&#x2F;code&gt; and &lt;code&gt;WorkerName&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The simplest way to define path codecs is to &lt;strong&gt;transform&lt;&#x2F;strong&gt; an existing one:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;workerName&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;PathCodec&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;WorkerName&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span&gt;  string(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;worker-name&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;).transformOrFailLeft(WorkerName.make(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;).toErrorEither, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;.value)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Here the &lt;code&gt;make&lt;&#x2F;code&gt; function is a &lt;strong&gt;ZIO Prelude&lt;&#x2F;strong&gt; &lt;a href=&quot;https:&#x2F;&#x2F;zio.github.io&#x2F;zio-prelude&#x2F;docs&#x2F;functionaldatatypes&#x2F;validation&quot;&gt;&lt;code&gt;Validation&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; which we have to convert to an &lt;code&gt;Either&lt;&#x2F;code&gt; for the transform function. Validations can contain more than one failures, as opposed to &lt;code&gt;Either&lt;&#x2F;code&gt;s, which allows us to compose them in a way that we can keep multiple errors instead of immediately returning with the first failure.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;code&gt;tokenSecret&lt;&#x2F;code&gt; is similar, but it is a &lt;code&gt;HeaderCodec&lt;&#x2F;code&gt; describing what type of header it is and how the value of the given header should be mapped to a specific type (a token, in this case).&lt;&#x2F;p&gt;
&lt;p&gt;What is &lt;code&gt;WorkerMetadata&lt;&#x2F;code&gt; and how does ZIO Http know how to produce a JSON from it?&lt;&#x2F;p&gt;
&lt;p&gt;It&#x27;s just a simple &lt;em&gt;case class&lt;&#x2F;em&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;final case class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; WorkerMetadata&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;workerId&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ComponentInstanceId&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;accountId&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;AccountId&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;args&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Chunk&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;],
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;env&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Map&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;],
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;status&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;InstanceStatus&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;templateVersion&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Int&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;retryCount&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Int
&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;But with an implicit &lt;strong&gt;derived&lt;&#x2F;strong&gt; &lt;strong&gt;ZIO Schema&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;object&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; WorkerMetadata {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;implicit val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;schema&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: Schema[WorkerMetadata] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;DeriveSchema.gen[WorkerMetadata]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We will talk more about ZIO Schema below - for now all we need to know is it describes the structure of Scala types, and this information can be used to serialize data into various formats, including JSON.&lt;&#x2F;p&gt;
&lt;p&gt;Once we have our endpoints defined like this, we can do several things with them - they are just data describing what an endpoint looks like!&lt;&#x2F;p&gt;
&lt;h3 id=&quot;implementing-an-endpoint&quot;&gt;Implementing an endpoint&lt;&#x2F;h3&gt;
&lt;p&gt;When developing a &lt;em&gt;server&lt;&#x2F;em&gt;, the most important thing to do with an endpoint is to &lt;strong&gt;implement&lt;&#x2F;strong&gt; it. Implementing an endpoint looks like the following:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;getWorkerMetadataImpl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span&gt;    getWorkerMetadata.implement {
&lt;&#x2F;span&gt;&lt;span&gt;      Handler.fromFunctionZIO { (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;rawTemplateId&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;workerName&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;authTokenId&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; ... ZIO program returning a WorkerMetadata
&lt;&#x2F;span&gt;&lt;span&gt;      }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;em&gt;type&lt;&#x2F;em&gt; of &lt;code&gt;getWorkerMetadataImpl&lt;&#x2F;code&gt; is &lt;code&gt;Route&lt;&#x2F;code&gt; - it is no longer just a description of what an endpoint looks like, it defines a specific HTTP route and its associated &lt;em&gt;request handler&lt;&#x2F;em&gt;, implemented by a ZIO effect (remember that ZIO effects are also values - we &lt;em&gt;describe&lt;&#x2F;em&gt; what we need to do when a request comes in, but executing it will be the responsibility of the server implementation).&lt;&#x2F;p&gt;
&lt;p&gt;The nice thing about ZIO Http endpoints is that they are completely type safe. I&#x27;ve hidden the type signature in the previous code snippets but actually &lt;code&gt;getWorkerMetadata&lt;&#x2F;code&gt; has the type:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span&gt;Endpoint[
&lt;&#x2F;span&gt;&lt;span&gt;    (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RawTemplateId&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;WorkerName&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;    (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RawTemplateId&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;WorkerName&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;TokenSecret&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;WorkerEndpointError&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;WorkerMetadata&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;None
&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Here the &lt;em&gt;second&lt;&#x2F;em&gt; type parameter defines the &lt;strong&gt;input&lt;&#x2F;strong&gt; of the request handler and the &lt;em&gt;forth&lt;&#x2F;em&gt; type parameter defines the &lt;strong&gt;output&lt;&#x2F;strong&gt; the server constructs the response from.&lt;&#x2F;p&gt;
&lt;p&gt;With these types, we really just have to implement a (ZIO) function from the input to the output:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;RawTemplateId&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;WorkerName&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;TokenSecret&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;ZIO[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Any&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;WorkerEndpointError&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;WorkerMetadata&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;and this is exactly what we pass to &lt;code&gt;Handler.fromFunctionZIO&lt;&#x2F;code&gt; in the above example.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;calling-an-endpoint&quot;&gt;Calling an endpoint&lt;&#x2F;h3&gt;
&lt;p&gt;The same endpoint values can also be used to make requests to our API from clients such as &lt;code&gt;golem-cli&lt;&#x2F;code&gt;. Taking advantage of the same type safe representation we can just call &lt;code&gt;apply&lt;&#x2F;code&gt; on the endpoint definition passing its input as a parameter to get an &lt;strong&gt;invocation&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;invocation &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; getInstanceMetadata(rawTemplateId, workerName, token)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;this invocation can be &lt;strong&gt;executed&lt;&#x2F;strong&gt; to perform the actual request using an &lt;code&gt;EndpointExecutor&lt;&#x2F;code&gt; which can be easily constructed from a ZIO Http &lt;code&gt;Client&lt;&#x2F;code&gt; and some other parameters like the URL of the remote server:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span&gt;executor(invocation).flatMap { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;workerMetadata &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; 
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;the-task&quot;&gt;The task&lt;&#x2F;h2&gt;
&lt;p&gt;So can we do anything to keep this convenient way of calling our endpoints when migrating the CLI to Rust? At the time of writing we already had more than 60 endpoints, with many complex types used in them - defining them by hand in Rust, and keeping the Scala and Rust code in sync sounds like a nightmare.&lt;&#x2F;p&gt;
&lt;p&gt;The ideal case would be to have something like this in Rust:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;async_trait&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;pub trait &lt;&#x2F;span&gt;&lt;span&gt;Worker {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;  async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;get_worker_metadata&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;template_id&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;TemplateId, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;worker_name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;WorkerName, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;authorization&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;Token) -&amp;gt; Result&amp;lt;WorkerMetadata, WorkerError&amp;gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;with an implementation that just requires the same amount of configuration as the Scala endpoint executor (server URL, etc), and all the referenced types like &lt;code&gt;WorkerMetadata&lt;&#x2F;code&gt; would be an exact clone of the Scala types just in Rust.&lt;&#x2F;p&gt;
&lt;p&gt;Fortunately we can have (almost) this by taking advantage of the declarative nature of ZIO Http and ZIO Schema!&lt;&#x2F;p&gt;
&lt;p&gt;In the rest of this post we will see how we can &lt;strong&gt;generate Rust code&lt;&#x2F;strong&gt; using a combination of ZIO libraries to automatically have all our type definitions and client implementation ready to use from the Rust version of &lt;code&gt;golem-cli&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-building-blocks&quot;&gt;The building blocks&lt;&#x2F;h2&gt;
&lt;p&gt;We want to generate from an arbitrary set of ZIO Http &lt;code&gt;Endpoint&lt;&#x2F;code&gt; definitions a &lt;strong&gt;Rust crate&lt;&#x2F;strong&gt; ready to be compiled, published and used. We will take advantage of the following libraries:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zio.dev&#x2F;zio-http&#x2F;&quot;&gt;ZIO Http&lt;&#x2F;a&gt; as the source of &lt;strong&gt;endpoint&lt;&#x2F;strong&gt; definitions&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zio.dev&#x2F;zio-schema&#x2F;&quot;&gt;ZIO Schema&lt;&#x2F;a&gt; for observing the &lt;strong&gt;type&lt;&#x2F;strong&gt; definitions&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zio.dev&#x2F;zio-parser&#x2F;&quot;&gt;ZIO Parser&lt;&#x2F;a&gt; because it has a composable &lt;strong&gt;printer&lt;&#x2F;strong&gt; concept&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zio.dev&#x2F;zio-nio&#x2F;&quot;&gt;ZIO NIO&lt;&#x2F;a&gt; for working with the &lt;strong&gt;filesystem&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zio.dev&#x2F;zio-prelude&#x2F;&quot;&gt;ZIO Prelude&lt;&#x2F;a&gt; for implementing the stateful endpoint&#x2F;type discovery in a purely functional way&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;generating-rust-code&quot;&gt;Generating Rust code&lt;&#x2F;h2&gt;
&lt;p&gt;Let&#x27;s start with the actual source code generation. This is something that can be done in many different ways - one extreme could be to just concatenate strings (or use a &lt;code&gt;StringBuilder&lt;&#x2F;code&gt;) while the other is to build a full real Rust &lt;em&gt;AST&lt;&#x2F;em&gt; and pretty print that. I had a &lt;a href=&quot;https:&#x2F;&#x2F;blog.vigoo.dev&#x2F;posts&#x2F;funscala2021-talk&#x2F;&quot;&gt;talk on Function Scala 2021 about the topic&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;For this task I chose a technique which is somewhere in the middle and provides some extent of composability while also allowing use to do just the amount of abstraction we want to. The idea is that we define a &lt;em&gt;Rust code generator model&lt;&#x2F;em&gt; which does not have to strictly follow the actual generated language&#x27;s concepts, and then define a pretty printer for this model. This way we only have to model the subset of the language we need for the code generator, and we can keep simplifications or even complete string fragments in it if that makes our life easier.&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s see how this works with some examples!&lt;&#x2F;p&gt;
&lt;p&gt;We will have to generate &lt;em&gt;type definitions&lt;&#x2F;em&gt; so we can define a Scala &lt;em&gt;enum&lt;&#x2F;em&gt; describing what kind of type definitions we want to generate:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span&gt;enum RustDef:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span&gt;TypeAlias(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Name&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;typ&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RustType&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;derives&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Chunk&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RustType&lt;&#x2F;span&gt;&lt;span&gt;])
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span&gt;Newtype(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Name&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;typ&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RustType&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;derives&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Chunk&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RustType&lt;&#x2F;span&gt;&lt;span&gt;])
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span&gt;Struct(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Name&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;fields&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Chunk&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RustDef&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Field&lt;&#x2F;span&gt;&lt;span&gt;], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;derives&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Chunk&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RustType&lt;&#x2F;span&gt;&lt;span&gt;], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;isPublic&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Boolean&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span&gt;Enum(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Name&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;cases&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Chunk&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RustDef&lt;&#x2F;span&gt;&lt;span&gt;], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;derives&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Chunk&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RustType&lt;&#x2F;span&gt;&lt;span&gt;])
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span&gt;Impl(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;tpe&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RustType&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;functions&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Chunk&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RustDef&lt;&#x2F;span&gt;&lt;span&gt;])
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span&gt;ImplTrait(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;implemented&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RustType&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;forType&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RustType&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;functions&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Chunk&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RustDef&lt;&#x2F;span&gt;&lt;span&gt;])
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span&gt;Function(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Name&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;parameters&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Chunk&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RustDef&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Parameter&lt;&#x2F;span&gt;&lt;span&gt;], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;returnType&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RustType&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;body&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;isPublic&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Boolean&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We can make this as convenient to use as we want, for example adding constructors like:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;struct&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Name&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;fields&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Field&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RustDef
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;code&gt;Name&lt;&#x2F;code&gt; is an opaque string type with extension methods to convert between various cases like pascal case, snake case, etc. &lt;code&gt;RustType&lt;&#x2F;code&gt; is a similar &lt;em&gt;enum&lt;&#x2F;em&gt; to &lt;code&gt;RustDef&lt;&#x2F;code&gt;, containing all the different type descriptions we will have to use. But it is definitely not how a proper Rust parser would define what a type is - for example we can have a &lt;code&gt;RustType.Option&lt;&#x2F;code&gt; as a shortcut for wrapping a Rust type in Rust&#x27;s own option type, just because it makes our code generator simpler to write.&lt;&#x2F;p&gt;
&lt;p&gt;So once we have this model (which in practice evolves together with the code generator, usually starting with a few simple case classes) we can use &lt;strong&gt;ZIO Parser&lt;&#x2F;strong&gt;&#x27;s printer feature to define composable elements constructing Rust source code.&lt;&#x2F;p&gt;
&lt;p&gt;We start by defining a module and a type alias for our printer:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;object&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; Rust&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;Rust[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Printer&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Char&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;and then just define building blocks - what these building blocks are depends completely on us, and the only thing it affects is how well you can compose them. Having very small building blocks may reduce the readability of the code generator, but using too large chunks reduces their composability and makes it harder to change or refactor.&lt;&#x2F;p&gt;
&lt;p&gt;We can define some short aliases for often used characters or string fragments:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;gt&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Rust&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Any&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;Printer.print(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;&amp;#39;&amp;gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;lt&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Rust&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Any&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;Printer.print(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;&amp;#39;&amp;lt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;bracketed&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;inner&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Rust&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;]): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Rust&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span&gt;  lt ~ inner ~ gt
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;and we have to define &lt;code&gt;Rust&lt;&#x2F;code&gt; printers for each of our model types. For example for the &lt;code&gt;RustType&lt;&#x2F;code&gt; enum it could be something like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;typename&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Rust&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RustType&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;Printer.byValue:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span&gt;RustType.Primitive(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;)             &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; str(name)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span&gt;RustType.Option(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;inner&lt;&#x2F;span&gt;&lt;span&gt;)               &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; typename(RustType.Primitive(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;Option&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)) ~ bracketed(typename(inner))
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span&gt;RustType.Vec(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;inner&lt;&#x2F;span&gt;&lt;span&gt;)                  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; typename(RustType.Primitive(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;Vec&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)) ~ bracketed(typename(inner))
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span&gt;RustType.SelectFromModule(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;path&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;typ&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;Printer.anyString.repeatWithSep(dcolon)(path) ~ dcolon ~ typename(typ)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span&gt;RustType.Parametric(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;params&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    str(name) ~ bracketed(typename.repeatWithSep(comma)(params))
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We can see that &lt;code&gt;typename&lt;&#x2F;code&gt; uses itself to recursively generate inner type names, for example when generating type parameters of tuple members. It also demonstrates that we can extract patterns such as &lt;code&gt;bracketed&lt;&#x2F;code&gt; to simplify our printer definitions and eliminate repetition.&lt;&#x2F;p&gt;
&lt;p&gt;Another nice feature we get by using a general purpose printer library like ZIO Parser is that we can use the built-in combinators to get printers for new types. One example is the sequential composition of printers. For example the following fragment:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;p &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; str(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;pub &amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;) ~ name ~ str(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;) ~ typename
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;would have the type &lt;code&gt;Rust[(Name, RustType)]&lt;&#x2F;code&gt; and we can even make that a printer of a case class like:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;final case class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; PublicField&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Name&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;typ&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RustType&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;p2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; p.from[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;PublicField&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;where &lt;code&gt;p2&lt;&#x2F;code&gt; will have the type &lt;code&gt;Rust[PublicField&lt;&#x2F;code&gt;].&lt;&#x2F;p&gt;
&lt;p&gt;Another very useful combinator is &lt;strong&gt;repetition&lt;&#x2F;strong&gt;. For example if we have a printer for an enum&#x27;s case:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;enumCase&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Rust&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RustDef&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;we can simply use one of the repetition combinators to make a printer for a &lt;em&gt;list of enum cases&lt;&#x2F;em&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;enumCases&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Rust&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Chunk&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RustDef&lt;&#x2F;span&gt;&lt;span&gt;]] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; enumCase.*
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;or as in the &lt;code&gt;typename&lt;&#x2F;code&gt; example above:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span&gt;typename.repeatWithSep(comma)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;to have a &lt;code&gt;Rust[Chunk[RustType]]&lt;&#x2F;code&gt; that inserts a comma between each element when printed.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;inspecting-the-scala-types&quot;&gt;Inspecting the Scala types&lt;&#x2F;h2&gt;
&lt;p&gt;As we have seen the &lt;em&gt;endpoint DSL&lt;&#x2F;em&gt; uses &lt;strong&gt;ZIO Schema&lt;&#x2F;strong&gt; to capture information about the types being used in the endpoints (usually as request or response bodies, serialized into JSON). We can use the same information to generate &lt;strong&gt;Rust types&lt;&#x2F;strong&gt; from our Scala types!&lt;&#x2F;p&gt;
&lt;p&gt;The core data type defined by the ZIO Schema library is called &lt;code&gt;Schema&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;sealed trait&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; Schema&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Schema describes the structure of a Scala type &lt;code&gt;A&lt;&#x2F;code&gt; in a way we can inspect it from regular Scala code. Let&#x27;s imagine we have &lt;code&gt;Schema[WorkerMetadata]&lt;&#x2F;code&gt; coming from our endpoint definition and we have to generate an equivalent Rust &lt;code&gt;struct&lt;&#x2F;code&gt; with the same field names and field types.&lt;&#x2F;p&gt;
&lt;p&gt;The first thing to notice is that type definitions are recursive. Unless &lt;code&gt;WorkerMetadata&lt;&#x2F;code&gt; only contains fields of &lt;em&gt;primitive types&lt;&#x2F;em&gt; such as integer or string, our job does not end with generating a single Rust struct - we need to recursively generate all the other types &lt;code&gt;WorkerMetadata&lt;&#x2F;code&gt; is depending on! To capture this fact let&#x27;s introduce a type that represents everything we have to extract from a single (or a set of) schemas in order to generate Rust types from them:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;final case class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; RustModel&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;typeRefs&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Map&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Schema&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span&gt;], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RustType&lt;&#x2F;span&gt;&lt;span&gt;], 
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;definitions&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Chunk&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RustDef&lt;&#x2F;span&gt;&lt;span&gt;], 
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;requiredCrates&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Set&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Crate&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We have &lt;code&gt;typeRefs&lt;&#x2F;code&gt; which associates a &lt;code&gt;RustType&lt;&#x2F;code&gt; with a schema so we can use it in future steps of our code generator to refer to a generated type in our Rust codebase. We have a list of &lt;code&gt;RustDef&lt;&#x2F;code&gt; values which are the generated type definitions, ready to be printed with out &lt;code&gt;Rust&lt;&#x2F;code&gt; pretty printer. And finally we can also gather a set of required extra rust &lt;em&gt;crates&lt;&#x2F;em&gt;, because some of the types considered &lt;em&gt;primitive types&lt;&#x2F;em&gt; by ZIO Schema are not having proper representations in the Rust standard library, only in external crates. Examples are UUIDs and various date&#x2F;time types.&lt;&#x2F;p&gt;
&lt;p&gt;So our job now is to write a function of&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;fromSchemas&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;schemas&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Seq&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Schema&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span&gt;]]): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Either&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RustModel&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;code&gt;Either&lt;&#x2F;code&gt; result type is used to indicate failures. Even if we write a transformation that can produce from any &lt;code&gt;Schema&lt;&#x2F;code&gt; a proper &lt;code&gt;RustModel&lt;&#x2F;code&gt;, we always have to have an error result when working with ZIO Schema because it has an explicit failure case called &lt;code&gt;Schema.Fail&lt;&#x2F;code&gt;. If we process a schema and end up with a &lt;code&gt;Fail&lt;&#x2F;code&gt; node, we can&#x27;t do anything else than fail our code generator.&lt;&#x2F;p&gt;
&lt;p&gt;There are many important details to consider when implementing this function, but let&#x27;s just see first what the actual &lt;code&gt;Schema&lt;&#x2F;code&gt; type looks like. When we have a value of &lt;code&gt;Schema[?]&lt;&#x2F;code&gt; we can pattern match on it and implement the following cases:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Schema.Primitive&lt;&#x2F;code&gt; describes a primitive type - there are a lot of primitive types defined by ZIO Schema&#x27;s &lt;code&gt;StandardType&lt;&#x2F;code&gt; enum&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Schema.Enum&lt;&#x2F;code&gt; describes a type with multiple cases (a &lt;em&gt;sum type&lt;&#x2F;em&gt;) such as a &lt;code&gt;sealed trait&lt;&#x2F;code&gt; or &lt;code&gt;enum&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Schema.Record&lt;&#x2F;code&gt; describes a type with multiple fields (a &lt;em&gt;product type&lt;&#x2F;em&gt;) such as a &lt;code&gt;case class&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Schema.Map&lt;&#x2F;code&gt; represents a &lt;em&gt;map&lt;&#x2F;em&gt; with a key and value type&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Schema.Sequence&lt;&#x2F;code&gt; represents a &lt;em&gt;sequence&lt;&#x2F;em&gt; of items of a given element type&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Schema.Set&lt;&#x2F;code&gt; is a &lt;em&gt;set&lt;&#x2F;em&gt; of items of a given element type&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Schema.Optional&lt;&#x2F;code&gt; represents an &lt;em&gt;optional&lt;&#x2F;em&gt; type (like an &lt;code&gt;Option[T]&lt;&#x2F;code&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Schema.Either&lt;&#x2F;code&gt; is a special case of sum types representing either one or the other type (like an &lt;code&gt;Either[A, B]&lt;&#x2F;code&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Schema.Lazy&lt;&#x2F;code&gt; is used to safely encode recursive types, it contains a function that evaluates into an inner &lt;code&gt;Schema&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Schema.Dynamic&lt;&#x2F;code&gt; represents a type that is dynamic - like a &lt;code&gt;JSON&lt;&#x2F;code&gt; value&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Schema.Transform&lt;&#x2F;code&gt; assigns a transformation function that converts a &lt;em&gt;value&lt;&#x2F;em&gt; of a type represented by the schema to a value of some other type. As we have no way to inspect these functions (they are compiled Scala functions) in our code generator, this is not very interesting for us now.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Schema.Fail&lt;&#x2F;code&gt; as already mentioned represents a failure in describing the data type&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;When traversing a &lt;code&gt;Schema&lt;&#x2F;code&gt; recursively (for any reason), it is important to keep in mind that it &lt;em&gt;can&lt;&#x2F;em&gt; encode recursive types! A simple example is a binary tree:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;final case class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; Tree&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;label&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;left&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Tree&lt;&#x2F;span&gt;&lt;span&gt;], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;right&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Tree&lt;&#x2F;span&gt;&lt;span&gt;])
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We can construct a &lt;code&gt;Schema[Tree[A]]&lt;&#x2F;code&gt; if we have a &lt;code&gt;Schema[A]&lt;&#x2F;code&gt;. This will be something like (pseudo-code):&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;lazy val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;tree&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Schema&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Tree&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span&gt;  Schema.Record(
&lt;&#x2F;span&gt;&lt;span&gt;    Field(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;label&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, Schema[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;]),
&lt;&#x2F;span&gt;&lt;span&gt;    Field(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;left&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, Schema.Optional(Schema.Lazy(() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; tree))),
&lt;&#x2F;span&gt;&lt;span&gt;    Field(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;right&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, Schema.Optional(Schema.Lazy(() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; tree)))
&lt;&#x2F;span&gt;&lt;span&gt;  )
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;If we are not prepared for recursive types we can easily get into an endless loop (or stack overflow) when processing these schemas.&lt;&#x2F;p&gt;
&lt;p&gt;This is just one example of things to keep track of while converting a schema into a set of Rust definitions. If fields refer to the self type we want to use &lt;code&gt;Box&lt;&#x2F;code&gt; so to put them on the heap. We also need to keep track of if everything within a generated type derives &lt;code&gt;Ord&lt;&#x2F;code&gt; and &lt;code&gt;Hash&lt;&#x2F;code&gt; - and if yes, we should derive an instance for the same type classes for our generated type as well.&lt;&#x2F;p&gt;
&lt;p&gt;My preferred way to implement such recursive stateful transformation functions is to use &lt;strong&gt;ZIO Prelude&lt;&#x2F;strong&gt;&#x27;s &lt;code&gt;ZPure&lt;&#x2F;code&gt; type. It&#x27;s type definition looks a little scary:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;sealed trait&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; ZPure&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;W&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;S1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;S2&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;R&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;E&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;ZPure&lt;&#x2F;code&gt; describes a &lt;em&gt;purely functional computation&lt;&#x2F;em&gt; which can:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Emit log entries of type &lt;code&gt;W&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Works with an inital state of type &lt;code&gt;S1&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Results in a final state of type &lt;code&gt;S2&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Has access to some context of type &lt;code&gt;R&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Can fail with a value of &lt;code&gt;E&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Or succeed with a value of &lt;code&gt;A&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;In this case we need the state, failure and result types only, but we could also take advantage of &lt;code&gt;W&lt;&#x2F;code&gt; to log debug information within our schema transformation function.&lt;&#x2F;p&gt;
&lt;p&gt;To make it easier to work with &lt;code&gt;ZPure&lt;&#x2F;code&gt; we can introduce a &lt;em&gt;type alias&lt;&#x2F;em&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;Fx[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ZPure&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Nothing&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;State&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;State&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Any&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;where &lt;code&gt;State&lt;&#x2F;code&gt; is our own &lt;em&gt;case class&lt;&#x2F;em&gt; containing everything we need:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;final case class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; State&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;typeRefs&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Map&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Schema&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span&gt;], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RustType&lt;&#x2F;span&gt;&lt;span&gt;],
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;definitions&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Chunk&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RustDef&lt;&#x2F;span&gt;&lt;span&gt;],
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;requiredCrates&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Set&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Crate&lt;&#x2F;span&gt;&lt;span&gt;],
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;processed&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Set&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Schema&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span&gt;]],
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;stack&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Chunk&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Schema&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span&gt;]],
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;nameTypeIdMap&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Map&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Name&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Set&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;TypeId&lt;&#x2F;span&gt;&lt;span&gt;]],
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;schemaCaps&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Map&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Schema&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span&gt;], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Capabilities&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We won&#x27;t get into the details of the state type here, but I&#x27;m showing some fragments to get a feeling of working with &lt;code&gt;ZPure&lt;&#x2F;code&gt; values.&lt;&#x2F;p&gt;
&lt;p&gt;Some helper functions to manipulate the state can make our code much easier to read:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;private def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;getState&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Fx&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;State&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;ZPure.get[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;State&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;private def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;updateState&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;State &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;State&lt;&#x2F;span&gt;&lt;span&gt;): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Fx&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Unit&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;ZPure.update[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;State&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;State&lt;&#x2F;span&gt;&lt;span&gt;](f)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;For example we can use &lt;code&gt;updateState&lt;&#x2F;code&gt;  to manipulate the &lt;code&gt;stack&lt;&#x2F;code&gt; field of the state around another computation - before running it, we add a schema to the stack, after that we remove it:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;private def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;stacked&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;R&lt;&#x2F;span&gt;&lt;span&gt;](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;schema&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Schema&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;])(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Fx&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;R&lt;&#x2F;span&gt;&lt;span&gt;]): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Fx&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;R&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span&gt;  updateState(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;s &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; s.copy(stack &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; s.stack :+ schema))
&lt;&#x2F;span&gt;&lt;span&gt;    .zipRight(f)
&lt;&#x2F;span&gt;&lt;span&gt;    .zipLeft(updateState(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;s &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; s.copy(stack &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; s.stack.dropRight(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;))))
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This allows us to decide whether we have to wrap a generated field&#x27;s type in &lt;code&gt;Box&lt;&#x2F;code&gt; in the rust code:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;private def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;boxIfNeeded&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;schema&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Schema&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;]): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Fx&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RustType&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;for
&lt;&#x2F;span&gt;&lt;span&gt;    state &amp;lt;- getState
&lt;&#x2F;span&gt;&lt;span&gt;    backRef &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; state.stack.contains(schema)
&lt;&#x2F;span&gt;&lt;span&gt;    rustType &amp;lt;- getRustType(schema)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;yield if&lt;&#x2F;span&gt;&lt;span&gt; backRef then RustType.box(rustType) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;else&lt;&#x2F;span&gt;&lt;span&gt; rustType
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;By looking into &lt;code&gt;state.stack&lt;&#x2F;code&gt; we can decide if we are dealing with a recursive type or not, and make our decision regarding boxing the field.&lt;&#x2F;p&gt;
&lt;p&gt;Another example is to guard against infinite recursion when traversing the schema definition, as I explained before. We can define a helper function that just keeps track of all the visited schemas and shortcuts the computation if something has already been seen:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;private def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;ifNotProcessed&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Schema&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;])(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Fx&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Unit&lt;&#x2F;span&gt;&lt;span&gt;]): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Fx&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Unit&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span&gt;  getState.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;flatMap&lt;&#x2F;span&gt;&lt;span&gt;: state &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; state.processed.contains(value) then ZPure.unit
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;else&lt;&#x2F;span&gt;&lt;span&gt; updateState(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;.copy(processed &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; state.processed + value)).zipRight(f)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Putting all these smaller combinators together we have an easy-to-read core recursive transformation function for converting the schema:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;private def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;process&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;schema&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Schema&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;]): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Fx&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Unit&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span&gt;  ifNotProcessed(schema):
&lt;&#x2F;span&gt;&lt;span&gt;    getRustType(schema).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;flatMap&lt;&#x2F;span&gt;&lt;span&gt;: typeRef &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;      stacked(schema):
&lt;&#x2F;span&gt;&lt;span&gt;        schema &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;match
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In the end to run a &lt;code&gt;Fx[A]&lt;&#x2F;code&gt; all we need to do is to provide an initial state:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span&gt;processSchema.provideState(State.empty).runEither
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;inspecting-the-endpoints&quot;&gt;Inspecting the endpoints&lt;&#x2F;h2&gt;
&lt;p&gt;We generated Rust code for all our types but we still need to generate HTTP clients. The basic idea is the same as what we have seen so far:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Traversing the &lt;code&gt;Endpoint&lt;&#x2F;code&gt; data structure for each endpoint we have&lt;&#x2F;li&gt;
&lt;li&gt;Generate some intermediate model&lt;&#x2F;li&gt;
&lt;li&gt;Pretty print this model to Rust code&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The conversion once again is recursive, can fail, and requires keeping track of various things, so we can use &lt;code&gt;ZPure&lt;&#x2F;code&gt; to implement it. Not repeating the same details, in this section we will talk about what exactly the endpoint descriptions look like and what we have be aware of when trying to process them.&lt;&#x2F;p&gt;
&lt;p&gt;The first problem to solve is that currently ZIO Http does not have a concept of multiple endpoints. We are not composing &lt;code&gt;Endpoint&lt;&#x2F;code&gt; values into an API, instead we first &lt;strong&gt;implement&lt;&#x2F;strong&gt; them to get &lt;code&gt;Route&lt;&#x2F;code&gt; values and compose those. We can no longer inspect the endpoint definitions from the composed routes, so unfortunately we have to repeat ourselves and somehow compose our set of endpoints for our code generator.&lt;&#x2F;p&gt;
&lt;p&gt;First we can define a &lt;code&gt;RustEndpoint&lt;&#x2F;code&gt; class, similar to the &lt;code&gt;RustModel&lt;&#x2F;code&gt; earlier, containing all the necessary information to generate Rust code for a &lt;strong&gt;single endpoint&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;We can construct it with a function:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;object&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; RustEndpoint&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;fromEndpoint&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;PathInput&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Input&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Err&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Output&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Middleware &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;EndpointMiddleware&lt;&#x2F;span&gt;&lt;span&gt;](
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;endpoint&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Endpoint&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;PathInput&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Input&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Err&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Output&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Middleware&lt;&#x2F;span&gt;&lt;span&gt;],
&lt;&#x2F;span&gt;&lt;span&gt;  ): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Either&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RustEndpoint&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The second thing to notice: endpoints do not have a name! If we look back to our initial example of &lt;code&gt;getWorkerMetadata&lt;&#x2F;code&gt;, it did not have a unique name except the Scala value it was assigned to. But we can&#x27;t observe that in our code generator (without writing a macro) so here we have chosen to just get a name as a string next to the definition.&lt;&#x2F;p&gt;
&lt;p&gt;Then we can define a &lt;strong&gt;collection&lt;&#x2F;strong&gt; of &lt;code&gt;RustEndpoint&lt;&#x2F;code&gt;s:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;final case class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; RustEndpoints&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Name&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;originalEndpoints&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Chunk&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RustEndpoint&lt;&#x2F;span&gt;&lt;span&gt;])
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;and define a &lt;code&gt;++&lt;&#x2F;code&gt; operator between &lt;code&gt;RustEndpoint&lt;&#x2F;code&gt; and &lt;code&gt;RustEndpoints&lt;&#x2F;code&gt;. In the end we can use these to define APIs like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;for
&lt;&#x2F;span&gt;&lt;span&gt;      getDefaultProject &amp;lt;- fromEndpoint(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;getDefaultProject&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, ProjectEndpoints.getDefaultProject)
&lt;&#x2F;span&gt;&lt;span&gt;      getProjects       &amp;lt;- fromEndpoint(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;getProjects&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, ProjectEndpoints.getProjects)
&lt;&#x2F;span&gt;&lt;span&gt;      postProject       &amp;lt;- fromEndpoint(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;postProject&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, ProjectEndpoints.postProject)
&lt;&#x2F;span&gt;&lt;span&gt;      getProject        &amp;lt;- fromEndpoint(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;getProject&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, ProjectEndpoints.getProject)
&lt;&#x2F;span&gt;&lt;span&gt;      deleteProject     &amp;lt;- fromEndpoint(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;deleteProject&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, ProjectEndpoints.deleteProject)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;yield &lt;&#x2F;span&gt;&lt;span&gt;(getDefaultProject ++ getProjects ++ postProject ++ getProject ++ deleteProject).named(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;Project&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The collection of endpoints also have a name (&lt;code&gt;&quot;Project&quot;&lt;&#x2F;code&gt;). In the code generator we can use these to have a separate &lt;strong&gt;client&lt;&#x2F;strong&gt; (trait and implementation) for each of these groups of endpoints.&lt;&#x2F;p&gt;
&lt;p&gt;When processing a single endpoint, we need to process the following parts of data:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Inputs (&lt;code&gt;endpoint.input&lt;&#x2F;code&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;Outputs (&lt;code&gt;endpoint.output&lt;&#x2F;code&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;Errors (&lt;code&gt;endpoint.error&lt;&#x2F;code&gt;)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Everything we need is encoded in one of these three fields of an endpoint, and all three are built on the same abstraction called &lt;code&gt;HttpCodec&lt;&#x2F;code&gt;. Still there is a significant difference in what we want to do with inputs versus what we want to do with outputs and errors, so we can write two different traversals for gathering all the necessary information from them.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;inputs&quot;&gt;Inputs&lt;&#x2F;h3&gt;
&lt;p&gt;When gathering information from the inputs, we are going to run into the following cases:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;HttpCodec.Combine&lt;&#x2F;code&gt; means we have two different inputs; we need both, so we have to process both inner codecs sequentially, both extending our conversion function&#x27;s state.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;HttpCodec.Content&lt;&#x2F;code&gt; describes a &lt;strong&gt;request body&lt;&#x2F;strong&gt;. Here we have a &lt;code&gt;Schema&lt;&#x2F;code&gt; of our request body type and we can use the previously generated schema-to-rust type mapping to know how to refer to the generated rust type in our client code. It is important that in case there are &lt;strong&gt;multiple content codecs&lt;&#x2F;strong&gt;, that means the endpoint receives a &lt;code&gt;multipart&#x2F;form-data&lt;&#x2F;code&gt; body, while if there is only one codec, it accepts an &lt;code&gt;application&#x2F;json&lt;&#x2F;code&gt; representation of that.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;HttpCodec.ContentStream&lt;&#x2F;code&gt; represents a body containing a stream of a given element type. We can model this as just a &lt;code&gt;Vec&amp;lt;A&amp;gt;&lt;&#x2F;code&gt; in the Rust side, but there is one special case here - if the element is a &lt;code&gt;Byte&lt;&#x2F;code&gt;, ZIO Http expects a simple byte stream of type &lt;code&gt;application&#x2F;octet-stream&lt;&#x2F;code&gt; instead of a JSON-encoded array of bytes.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;HttpCodec.Fallback&lt;&#x2F;code&gt; this represents the case when we should either use the first codec, &lt;em&gt;or&lt;&#x2F;em&gt; the second. A special case is when the &lt;code&gt;right&lt;&#x2F;code&gt; value of &lt;code&gt;Fallback&lt;&#x2F;code&gt; is &lt;code&gt;HttpCodec.Empty&lt;&#x2F;code&gt;. This is how ZIO Http represents optional inputs! We have to handle this specially in our code generator to mark some of the input parameters of the generated API as optional parameters. We don&#x27;t support currently the other cases (when &lt;code&gt;right&lt;&#x2F;code&gt; is not empty) as it is not frequently used and was not required for the &lt;em&gt;Golem API&lt;&#x2F;em&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;HttpCodec.Header&lt;&#x2F;code&gt; means we need to send a &lt;em&gt;header&lt;&#x2F;em&gt; in the request, which can be a static (value described by the endpoint) or dynamic one (where we need to add an extra parameter to the generated function to get a value of the header). There are a couple of different primitive types supported for the value, such as string, numbers, UUIDs.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;HttpCodec.Method&lt;&#x2F;code&gt; defines the method to be used for calling the endpoint&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;HttpCodec.Path&lt;&#x2F;code&gt; describes the request path, which consists of a sequence of static and dynamic segments - for the dynamic segments the generated API need to have exposed function parameters of the appropriate type&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;HttpCodec.Query&lt;&#x2F;code&gt; similar to the header codec defines query parameters to be sent&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;HttpCodec.TransformOrFail&lt;&#x2F;code&gt; transforms a value with a Scala function - the same case as with &lt;code&gt;Schema.Transform&lt;&#x2F;code&gt;. We cannot use the Scala function in our code generator so we just need to ignore this and go to the inner codec.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;HttpCodec.Annotated&lt;&#x2F;code&gt; attaches additional information to the codecs that we are currently not using, but it could be used to get documentation strings and include them in the generated code as comments, for example.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;outputs&quot;&gt;Outputs&lt;&#x2F;h3&gt;
&lt;p&gt;For outputs we are dealing with the same &lt;code&gt;HttpCodec&lt;&#x2F;code&gt; type but there are some significant differences:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;We can ignore &lt;code&gt;Path&lt;&#x2F;code&gt;, &lt;code&gt;Method&lt;&#x2F;code&gt;, &lt;code&gt;Query&lt;&#x2F;code&gt; as they have no meaning for outputs&lt;&#x2F;li&gt;
&lt;li&gt;We could look for &lt;em&gt;output headers&lt;&#x2F;em&gt; but currently we ignore them&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Fallback&lt;&#x2F;code&gt; on the other hand needs to be properly handled for outputs (errors, especially) because this is how the different error responses are encoded.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Status&lt;&#x2F;code&gt; is combined with &lt;code&gt;Content&lt;&#x2F;code&gt; in these &lt;code&gt;Fallback&lt;&#x2F;code&gt; nodes to describe cases. This complicates the code generator because we need to record &quot;possible outputs&quot; which are only added as real output once we are sure we will not get any other piece of information for them.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;To understand the error fallback handling better, let&#x27;s take a look at how it is defined in one of Golem&#x27;s endpoint groups:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;errorCodec&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;HttpCodec&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;HttpCodecType&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Status &lt;&#x2F;span&gt;&lt;span&gt;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;HttpCodecType&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Content&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;LimitsEndpointError&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span&gt;  HttpCodec.enumeration[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;LimitsEndpointError&lt;&#x2F;span&gt;&lt;span&gt;](
&lt;&#x2F;span&gt;&lt;span&gt;    HttpCodec.error[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;LimitsEndpointError&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Unauthorized&lt;&#x2F;span&gt;&lt;span&gt;](Status.Unauthorized),
&lt;&#x2F;span&gt;&lt;span&gt;    HttpCodec.error[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;LimitsEndpointError&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ArgValidationError&lt;&#x2F;span&gt;&lt;span&gt;](Status.BadRequest),
&lt;&#x2F;span&gt;&lt;span&gt;    HttpCodec.error[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;LimitsEndpointError&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;LimitExceeded&lt;&#x2F;span&gt;&lt;span&gt;](Status.Forbidden),
&lt;&#x2F;span&gt;&lt;span&gt;    HttpCodec.error[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;LimitsEndpointError&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;InternalError&lt;&#x2F;span&gt;&lt;span&gt;](Status.InternalServerError)
&lt;&#x2F;span&gt;&lt;span&gt;  )
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This leads to a series of nested &lt;code&gt;HttpCodec.Fallback&lt;&#x2F;code&gt;, &lt;code&gt;HttpCodec.Combine&lt;&#x2F;code&gt;, &lt;code&gt;HttpCodec.Status&lt;&#x2F;code&gt; and &lt;code&gt;HttpCodec.Content&lt;&#x2F;code&gt; nodes. When processing them we first add values of possible outputs:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;final case class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; PossibleOutput&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;tpe&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RustType&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;status&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Status&lt;&#x2F;span&gt;&lt;span&gt;], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;isError&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Boolean&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;schema&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Schema&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span&gt;])
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;and once we have fully processed one branch of a &lt;code&gt;Fallback&lt;&#x2F;code&gt;, we finalize these possible outputs and make them real outputs. The way these different error cases are mapped into different case classes of a a single error type (&lt;code&gt;LimitsEndpointError&lt;&#x2F;code&gt;) also complicates things. When we reach a &lt;code&gt;HttpCodec.Content&lt;&#x2F;code&gt; referencing  &lt;code&gt;Schema[LimitsEndpointError.LimitExceeded&lt;&#x2F;code&gt;] for example, all we see is a &lt;code&gt;Schema.Record&lt;&#x2F;code&gt; - and not the parent enum! For this reason in the code generator we are explicitly defining the error ADT type:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;fromEndpoint &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;RustEndpoint.withKnownErrorAdt[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;LimitsEndpointError&lt;&#x2F;span&gt;&lt;span&gt;].zio
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;and we detect if all cases are subtypes of this error ADT and generate the client code according to that.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;the-rust-client&quot;&gt;The Rust client&lt;&#x2F;h3&gt;
&lt;p&gt;It is time to take a look at what the output of all this looks like. In this section we will examine some parts of the generated Rust code.&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s take a look at the &lt;strong&gt;Projects API&lt;&#x2F;strong&gt;. We have generated a &lt;code&gt;trait&lt;&#x2F;code&gt; for all the endpoints belonging to it:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;async_trait&lt;&#x2F;span&gt;&lt;span&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;async_trait&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;pub trait &lt;&#x2F;span&gt;&lt;span&gt;Project {
&lt;&#x2F;span&gt;&lt;span&gt;    async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;get_default_project&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;authorization&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;amp;str&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; Result&amp;lt;crate::model::Project, ProjectError&amp;gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;get_projects&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;project_name&lt;&#x2F;span&gt;&lt;span&gt;: Option&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;amp;str&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;authorization&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;amp;str&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; Result&amp;lt;Vec&amp;lt;crate::model::Project&amp;gt;, ProjectError&amp;gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;post_project&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;field0&lt;&#x2F;span&gt;&lt;span&gt;: crate::model::ProjectDataRequest, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;authorization&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;amp;str&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; Result&amp;lt;crate::model::Project, ProjectError&amp;gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;get_project&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;project_id&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;amp;str&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;authorization&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;amp;str&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; Result&amp;lt;crate::model::Project, ProjectError&amp;gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;delete_project&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;project_id&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;amp;str&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;authorization&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;amp;str&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; Result&amp;lt;(), ProjectError&amp;gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This is quite close to our original goal! One significant difference is that some type information is lost: &lt;code&gt;project_id&lt;&#x2F;code&gt; was &lt;code&gt;ProjectId&lt;&#x2F;code&gt; in Scala, and &lt;code&gt;authorization&lt;&#x2F;code&gt; was &lt;code&gt;TokenSecret&lt;&#x2F;code&gt; etc. Unfortunately with the current version of ZIO Schema these newtypes (or Scala 3 opaque types) are represented as primitive types transformed by a function. As explained earlier, we can&#x27;t inspect the transformation function so all we can do is to use the underlying primitive type&#x27;s schema here. This can be solved by introducing the concept of newtypes into ZIO Schema.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;code&gt;ProjectError&lt;&#x2F;code&gt; is a client specific generated &lt;code&gt;enum&lt;&#x2F;code&gt; which can represent a mix of internal errors (such as not being able to call the endpoint) as well as the endpoint-specific domain errors:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;pub enum &lt;&#x2F;span&gt;&lt;span&gt;ProjectError {
&lt;&#x2F;span&gt;&lt;span&gt;    RequestFailure(reqwest::Error),
&lt;&#x2F;span&gt;&lt;span&gt;    InvalidHeaderValue(reqwest::header::InvalidHeaderValue),
&lt;&#x2F;span&gt;&lt;span&gt;    UnexpectedStatus(reqwest::StatusCode),
&lt;&#x2F;span&gt;&lt;span&gt;    Status404 {
&lt;&#x2F;span&gt;&lt;span&gt;        message: String,
&lt;&#x2F;span&gt;&lt;span&gt;    },
&lt;&#x2F;span&gt;&lt;span&gt;    Status403 {
&lt;&#x2F;span&gt;&lt;span&gt;        error: String,
&lt;&#x2F;span&gt;&lt;span&gt;    },
&lt;&#x2F;span&gt;&lt;span&gt;    Status400 {
&lt;&#x2F;span&gt;&lt;span&gt;        errors: Vec&amp;lt;String&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    },
&lt;&#x2F;span&gt;&lt;span&gt;    Status500 {
&lt;&#x2F;span&gt;&lt;span&gt;        error: String,
&lt;&#x2F;span&gt;&lt;span&gt;    },
&lt;&#x2F;span&gt;&lt;span&gt;    Status401 {
&lt;&#x2F;span&gt;&lt;span&gt;        message: String,
&lt;&#x2F;span&gt;&lt;span&gt;    },
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;So why are these per-status-code error types inlined here instead of generating the error ADT as a Rust &lt;code&gt;enum&lt;&#x2F;code&gt; and using that? The reason is a difference between Scala and Rust: we have a single error ADT in Scala and we can still use its &lt;em&gt;cases&lt;&#x2F;em&gt; directly in the endpoint definition:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;sealed trait&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; ProjectEndpointError
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;object&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; ProjectEndpointError {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;final case class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; ArgValidation(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;errors&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: Chunk[String]) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ProjectEndpointError
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;HttpCodec.error[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ProjectEndpointError&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ArgValidation&lt;&#x2F;span&gt;&lt;span&gt;](Status.BadRequest),
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We &lt;em&gt;do&lt;&#x2F;em&gt; generate the corresponding &lt;code&gt;ProjectEndpointError&lt;&#x2F;code&gt; enum in Rust:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span&gt;(Debug, Clone, PartialEq, Eq, Hash, Ord, PartialOrd, serde::Serialize, serde::Deserialize)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;pub enum &lt;&#x2F;span&gt;&lt;span&gt;ProjectEndpointError {
&lt;&#x2F;span&gt;&lt;span&gt;    ArgValidation {
&lt;&#x2F;span&gt;&lt;span&gt;        errors: Vec&amp;lt;String&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    },
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;but we cannot use &lt;code&gt;ProjectEndpointError::ArgValidation&lt;&#x2F;code&gt; as a type in the above &lt;code&gt;ProjectError&lt;&#x2F;code&gt; enum. And we cannot safely do something like &lt;code&gt;Either[ClientError, ProjectEndpointError]&lt;&#x2F;code&gt; because in the endpoint DSL we just have a sequence of status code - error case pairs. There is no guarantee that one enum case is only used once in that mapping, or that every case is used at least once. For this reason the mapping from &lt;code&gt;ProjectError&lt;&#x2F;code&gt; to &lt;code&gt;ProjectEndpointError&lt;&#x2F;code&gt; is generated as a transformation function:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;ProjectError {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;to_project_endpoint_error&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; Option&amp;lt;crate::model::ProjectEndpointError&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;match &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;      ProjectError::Status400 { errors } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;Some(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;crate&lt;&#x2F;span&gt;&lt;span&gt;::model::ProjectEndpointError::ArgValidation { errors: errors.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;clone&lt;&#x2F;span&gt;&lt;span&gt;() }), 
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;For each client trait we also generate a &lt;strong&gt;live implementation&lt;&#x2F;strong&gt;, represented by a struct containing configuration for the client:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span&gt;(Clone, Debug)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;pub struct &lt;&#x2F;span&gt;&lt;span&gt;ProjectLive {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;base_url&lt;&#x2F;span&gt;&lt;span&gt;: reqwest::Url,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;allow_insecure&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;bool&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And the implementation of the client trait for these live structs are just using &lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;reqwest&#x2F;latest&#x2F;reqwest&#x2F;&quot;&gt;&lt;code&gt;reqwest&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; (a HTTP client library for Rust) to construct the request from the input parameters exactly the way the endpoint definition described:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;get_project&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;project_id&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;amp;str&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;authorization&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;amp;str&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; Result&amp;lt;Project, ProjectError&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; url &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.base_url.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;clone&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;  url.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;set_path&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;format!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;v1&#x2F;projects&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;{project_id}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; headers &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;reqwest::header::HeaderMap::new();
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;      
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; builder &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;reqwest::Client::builder();
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; client &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; builder.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;build&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; result &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; client
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;(url)
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;headers&lt;&#x2F;span&gt;&lt;span&gt;(headers)
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;send&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    .await&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt; result.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;status&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;as_u16&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;200 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; body &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; result.json::&amp;lt;crate::model::Project&amp;gt;().await&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;      Ok(body)
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;404 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; body &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; result.json::&amp;lt;ProjectEndpointErrorNotFoundPayload&amp;gt;().await&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;      Err(ProjectError::Status404 { message: body.message })
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;putting-it-all-together&quot;&gt;Putting it all together&lt;&#x2F;h2&gt;
&lt;p&gt;At this point we have seen how &lt;em&gt;ZIO Http&lt;&#x2F;em&gt; describes endpoints, how &lt;em&gt;ZIO Schema&lt;&#x2F;em&gt; encodes Scala types, how we can use &lt;em&gt;ZIO Parser&lt;&#x2F;em&gt; to have composable printers and how &lt;em&gt;ZIO Prelude&lt;&#x2F;em&gt; can help with working with state in a purely functional code. The only thing remaining is to wire everything together and define an easy to use function that, when executed, creates all the required &lt;em&gt;Rust files&lt;&#x2F;em&gt; ready to be compiled.&lt;&#x2F;p&gt;
&lt;p&gt;We can create a class for this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;final case class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; ClientCrateGenerator&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;version&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;description&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;homepage&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;endpoints&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Chunk&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RustEndpoints&lt;&#x2F;span&gt;&lt;span&gt;]):
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Here &lt;code&gt;endpoints&lt;&#x2F;code&gt; is a collection of a &lt;strong&gt;group of endpoints&lt;&#x2F;strong&gt;, as it was shown earlier. So first you can use &lt;code&gt;RustEndpoint.fromEither&lt;&#x2F;code&gt; and &lt;code&gt;++&lt;&#x2F;code&gt; to create a &lt;code&gt;RustEndpoints&lt;&#x2F;code&gt; value for each API you have, and then generate a client for all of those in one run with this class.&lt;&#x2F;p&gt;
&lt;p&gt;The first thing to do is collect &lt;em&gt;all&lt;&#x2F;em&gt; the referenced &lt;code&gt;Schema&lt;&#x2F;code&gt; from all the endpoints:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;private val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;allSchemas &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; endpoints.map(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;.endpoints.toSet.flatMap(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;.referredSchemas)).reduce(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt; union &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Then we define a ZIO function (it is an effectful function, manipulating the filesystem!) to generate the files:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;generate&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;targetDirectory&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Path&lt;&#x2F;span&gt;&lt;span&gt;): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ZIO&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Any&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Throwable&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Unit&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;for
&lt;&#x2F;span&gt;&lt;span&gt;    clientModel &amp;lt;- ZIO.fromEither(RustModel.fromSchemas(allSchemas.toSeq))
&lt;&#x2F;span&gt;&lt;span&gt;                      .mapError(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RuntimeException&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;Failed to generate client model: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;$err&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;    cargoFile &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; targetDirectory &#x2F; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;Cargo.toml&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    srcDir &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; targetDirectory &#x2F; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;src&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    libFile &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; srcDir &#x2F; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;lib.rs&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    modelFile &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; srcDir &#x2F; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;model.rs&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    requiredCrates &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; clientModel.requiredCrates union endpoints.map(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;.requiredCrates).reduce(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt; union &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt; &amp;lt;- Files.createDirectories(targetDirectory)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt; &amp;lt;- Files.createDirectories(srcDir)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt; &amp;lt;- writeCargo(cargoFile, requiredCrates)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt; &amp;lt;- writeLib(libFile)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt; &amp;lt;- writeModel(modelFile, clientModel.definitions)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt; &amp;lt;- ZIO.foreachDiscard(endpoints): endpoints &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;           &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;clientFile &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; srcDir &#x2F; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;${&lt;&#x2F;span&gt;&lt;span&gt;endpoints.name.toSnakeCase&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;}.rs&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;           writeClient(clientFile, endpoints)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;yield &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The steps are straightforward:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Create a &lt;code&gt;RustModel&lt;&#x2F;code&gt; using all the collected &lt;code&gt;Schema[?]&lt;&#x2F;code&gt; values&lt;&#x2F;li&gt;
&lt;li&gt;Create all the required directories&lt;&#x2F;li&gt;
&lt;li&gt;Write a &lt;em&gt;cargo file&lt;&#x2F;em&gt; - having all the dependencies and other metadata required to compile the Rust project&lt;&#x2F;li&gt;
&lt;li&gt;Write a &lt;em&gt;lib file&lt;&#x2F;em&gt; - this is just a series of &lt;code&gt;pub mod xyz;&lt;&#x2F;code&gt; lines, defining the generated modules which are put in different fiels&lt;&#x2F;li&gt;
&lt;li&gt;Write all the generated Rust types into a &lt;code&gt;model.rs&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;For each endpoint group create a &lt;code&gt;xyz.rs&lt;&#x2F;code&gt; module containing the client trait and implementation&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;For working with the file system - creating directories, writing data into files, we can use the [&lt;a href=&quot;https:&#x2F;&#x2F;zio.dev&#x2F;zio-nio&#x2F;&quot;&gt;ZIO NIO&lt;&#x2F;a&gt;] library providing ZIO wrapprers for all these functionalities.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;links&quot;&gt;Links&lt;&#x2F;h3&gt;
&lt;p&gt;Finally, some links:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;strong&gt;code generator&lt;&#x2F;strong&gt; is open source and available at https:&#x2F;&#x2F;github.com&#x2F;vigoo&#x2F;zio-http-rust - the code and the repository itself is not documented at the moment, except by this blog post.&lt;&#x2F;li&gt;
&lt;li&gt;The generated &lt;strong&gt;Golem client for Rust&lt;&#x2F;strong&gt; is published as a crate to https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;golem-client&lt;&#x2F;li&gt;
&lt;li&gt;The new &lt;strong&gt;Golem CLI&lt;&#x2F;strong&gt;, using the generated client, is also open sourced and can be found at https:&#x2F;&#x2F;github.com&#x2F;golemcloud&#x2F;golem-cli&lt;&#x2F;li&gt;
&lt;li&gt;Finally you can learn more about &lt;strong&gt;Golem&lt;&#x2F;strong&gt; itself at https:&#x2F;&#x2F;www.golem.cloud&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>[Video] Introducing ZIO Flow @ ZIO World 2023</title>
        <published>2023-09-06T00:00:00+00:00</published>
        <updated>2023-09-06T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Daniel Vigovszky
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://blog.vigoo.dev/posts/introducing-zio-flow/"/>
        <id>https://blog.vigoo.dev/posts/introducing-zio-flow/</id>
        
        <content type="html" xml:base="https://blog.vigoo.dev/posts/introducing-zio-flow/">&lt;p&gt;My short talk at &lt;a href=&quot;https:&#x2F;&#x2F;www.zioworld.com&#x2F;&quot;&gt;ZIO World 2023&lt;&#x2F;a&gt; about the  &lt;a href=&quot;https:&#x2F;&#x2F;zio.dev&#x2F;zio-flow&#x2F;&quot;&gt;zio-flow library&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;iframe width=&quot;800&quot; height=&quot;450&quot; src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;ujJuFd6Vvfc?si=bsh3b7f-LXFVP_v_&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&quot; allowfullscreen&gt;&lt;&#x2F;iframe&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>[Video] Binary Serialization Of Evolving Data Types @ Functional Scala 2022</title>
        <published>2022-12-01T00:00:00+00:00</published>
        <updated>2022-12-01T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Daniel Vigovszky
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://blog.vigoo.dev/posts/funscala2022-talk/"/>
        <id>https://blog.vigoo.dev/posts/funscala2022-talk/</id>
        
        <content type="html" xml:base="https://blog.vigoo.dev/posts/funscala2022-talk/">&lt;p&gt;My talk at &lt;a href=&quot;https:&#x2F;&#x2F;www.functionalscala.com&#x2F;&quot;&gt;Functional Scala 2022&lt;&#x2F;a&gt; about the binary serialization library &lt;a href=&quot;https:&#x2F;&#x2F;vigoo.github.io&#x2F;desert&#x2F;&quot;&gt;desert&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;iframe width=&quot;800&quot; height=&quot;450&quot; src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;Y2KopYpjZ3Y&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&quot; allowfullscreen&gt;&lt;&#x2F;iframe&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>ZIO Kafka with transactions - a debugging story</title>
        <published>2022-06-15T00:00:00+00:00</published>
        <updated>2022-06-15T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Daniel Vigovszky
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://blog.vigoo.dev/posts/zio-kafka-debugging-story/"/>
        <id>https://blog.vigoo.dev/posts/zio-kafka-debugging-story/</id>
        
        <content type="html" xml:base="https://blog.vigoo.dev/posts/zio-kafka-debugging-story/">&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;&#x2F;h2&gt;
&lt;p&gt;With one of our clients, we were working on a chain of services responsible for processing some logs coming from a Kafka topic, partition them by some properties like user and date, infer and aggregate the log schema and eventually store the partitioned data in a different format. The details of this use case are not important for understanding this post, in which I&#x27;m going to explain the recent changes to &lt;a href=&quot;https:&#x2F;&#x2F;ziverge.com&#x2F;blog&#x2F;introduction-to-zio-kafka&quot;&gt;ZIO Kafka&lt;&#x2F;a&gt;, how was it implemented and how did we know it&#x27;s not perfect, and the long story of investigation that finally resulted in a fix making this new feature usable in production.&lt;&#x2F;p&gt;
&lt;p&gt;We only have to know about the first component of this data pipeline, which is a zio-kafka service:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Consumes it&#x27;s source topic. Each record in this topic consists one or more log entries for a given user. The kafka topic&#x27;s partitions are not aligned with our target partition (of user&#x2F;date), all kafka partitions may contain data from all users.&lt;&#x2F;li&gt;
&lt;li&gt;The service partitions the source data per user&#x2F;date&#x2F;hour and writes the log entries into Avro files in the local file system&lt;&#x2F;li&gt;
&lt;li&gt;It also computes and aggregates a log schema in memory for each of these files&lt;&#x2F;li&gt;
&lt;li&gt;It is using Kafka transactions to achieve &lt;a href=&quot;https:&#x2F;&#x2F;www.baeldung.com&#x2F;kafka-exactly-once&quot;&gt;exactly-once delivery&lt;&#x2F;a&gt;. This means that the processed records are not committed when they are written to the Avro files - there is a periodic event triggered every 30 seconds and at each rebalance that uploads the Avro files to S3, and &lt;em&gt;then&lt;&#x2F;em&gt; it emits Kafka messages to downstream containing references to the uploaded files and their aggregated schema, and it commits all the offsets of all the input Kafka topic&#x27;s &lt;em&gt;transactionally&lt;&#x2F;em&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;blog-zio-kafka-debugging-1.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;stream-restarting-mode-in-zio-kafka&quot;&gt;Stream restarting mode in zio-kafka&lt;&#x2F;h2&gt;
&lt;p&gt;When we first implemented this using zio-kafka and started to test it we have seen a lot of errors like&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;Transiting to abortable error state due to org.apache.kafka.clients.consumer.CommitFailedException: Transaction offset Commit failed due to consumer group metadata mismatch: Specified group generation id is not valid.&quot;}&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;Group generation ID&lt;&#x2F;em&gt; is a counter that gets incremented at each rebalance. The problem was that zio-kafka by default provides a continuous stream for partitions that survives rebalances. So we have a single stream per Kafka partition and after a rebalance we end up with some of them revoked and their streams stopped, some new streams created, but the ones that remained assigned are not going to be recreated.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;blog-zio-kafka-debugging-2.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;This works fine without using transactions, but it means your stream can contain messages from multiple generations. I first tried to solve this by detecting generation switches downstream but quickly realized this cannot work. It&#x27;s too late to commit the previous generation when there are already records from the new generation; we have to do it before the rebalance finishes.&lt;&#x2F;p&gt;
&lt;p&gt;To solve this I introduced a new &lt;em&gt;mode&lt;&#x2F;em&gt; in zio-kafka back in February 2022, with &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;zio&#x2F;zio-kafka&#x2F;pull&#x2F;427&quot;&gt;this pull request&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;This adds a new mode to zio-kafka&#x27;s core run loop which guarantees that every rebalance stops all the partition streams and create new ones every time.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;blog-zio-kafka-debugging-3.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;With this approach the library user can build the following logic on top of the &quot;stream of partition streams&quot; API of zio-kafka:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Get the next set of partition streams&lt;&#x2F;li&gt;
&lt;li&gt;Merge and drain them all&lt;&#x2F;li&gt;
&lt;li&gt;Perform a &lt;em&gt;flush&lt;&#x2F;em&gt; - upload and commit everything before start working on the new set of streams&lt;&#x2F;li&gt;
&lt;li&gt;Repeat&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;This alone is still not enough - we have to block the rebalancing until we are done with the committing otherwise we would still get the invalid generation ID error.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;code&gt;onRevoke&lt;&#x2F;code&gt; and &lt;code&gt;onAssigned&lt;&#x2F;code&gt; callbacks from the underlying Java Kafka library are working in a way that they block the rebalance process so that&#x27;s the place where we can finish every processing for the revoked partitions. This extension point is provided by zio-kafka too but it&#x27;s completely detached from the streaming API so I have introduced a rebalance event queue with with some promises and timeouts to coordinate this:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;In &lt;code&gt;onRevoke&lt;&#x2F;code&gt; we publish a rebalance event and wait until it gets processed.&lt;&#x2F;li&gt;
&lt;li&gt;Because the new run loop mode is guaranteed to terminate all streams on rebalance (which &lt;em&gt;is&lt;&#x2F;em&gt; already happening, as we are in &lt;code&gt;onRevoke&lt;&#x2F;code&gt;) we can be sure that eventually the main consumer stream&#x27;s current stage - that drains the previous generation&#x27;s partition streams will finish soon&lt;&#x2F;li&gt;
&lt;li&gt;and then it performs the rotation and fulfills the promise in the rebalance event.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;With these changes our service started to work - but we had to know if it works correctly.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;qos-tests&quot;&gt;QoS tests&lt;&#x2F;h2&gt;
&lt;p&gt;We implemented a QoS test running on Spark which periodically checks that we are not loosing any data with our new pipeline.&lt;&#x2F;p&gt;
&lt;p&gt;Our log entries have associated unique identifiers coming from upstream - so what we can do in this test is to consume an hour amount of log records from the same Kafka topic our service is consuming from, and read all the Avro files produced in that period (with some padding of course to have some tolerance for lag) and then see if there are any missing records in our output.&lt;&#x2F;p&gt;
&lt;p&gt;Another source of truth for the investigation was an older system doing something similar, resulting in the same input being available as archived CSV files in some cases. Comparing the archived CSV files with the archived Avro files I could verify that the QoS test itself works correctly, by checking that both methods report the same set of missing records.&lt;&#x2F;p&gt;
&lt;p&gt;What we learned from these tests was that:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;there is data loss&lt;&#x2F;li&gt;
&lt;li&gt;the data loss is related to rebalances&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;To understand it&#x27;s related to rebalances I was comparing failing QoS reports from several hours, figured out the ingestion time for some of the missing log records within these hours, and checked our service and infrastructure logs around that time. Every time there was a rebalance near the reported errors.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;additional-tests&quot;&gt;Additional tests&lt;&#x2F;h2&gt;
&lt;p&gt;During the investigation I added some additional debug features and logs to the system.&lt;&#x2F;p&gt;
&lt;p&gt;One of them is an extra verification step, enabled only temporarily in our development cluster, that&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;aggregates all the log identifiers at the earliest point - as soon as they got in the zio-kafka partition stream&lt;&#x2F;li&gt;
&lt;li&gt;after uploading the Avro files and committing the records, it re-downloads all the files from S3 and checks if they got all the log identifiers that they should.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;This never reported any error so based on that I considered the flow &lt;em&gt;after&lt;&#x2F;em&gt; zio-kafka correct.&lt;&#x2F;p&gt;
&lt;p&gt;We also have a lot of debug logs coming from the Java Kafka library, from zio-kafka and from our service to help understanding the issue:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;After each rebalance, the Java library logs the offset it&#x27;s starting to read from&lt;&#x2F;li&gt;
&lt;li&gt;When committing I&#x27;m logging the minimum and maximum offset contained by the committed and uploaded Avro files per kafka partition&lt;&#x2F;li&gt;
&lt;li&gt;All streams creation and termination are logged&lt;&#x2F;li&gt;
&lt;li&gt;If records within a partition stream are skipping an offset (this was never logged actually)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;I wrote a test app that reads our service&#x27;s logs from a given period, logged from all the Kubernetes pods it&#x27;s running on, and runs a state machine that verifies that all the logged offsets from the different pods are in sync. It fails in two cases:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;When a pod &lt;em&gt;resets its offsets&lt;&#x2F;em&gt; to something that was previously seen in the logs and there is a gap&lt;&#x2F;li&gt;
&lt;li&gt;When a pod &lt;em&gt;rotates&lt;&#x2F;em&gt; a kafka without it got assigned to that pod first (so if multiple pods would somehow consume the same partition which Kafka prevents)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;I tried for long to write integration tests using embedded Kafka (similar to how it&#x27;s done in zio-kafka&#x27;s test suite) that reproduces the data loss issue, without any luck. In all my simulated cases everything works perfectly.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;theories-and-fixes&quot;&gt;Theories and fixes&lt;&#x2F;h2&gt;
&lt;p&gt;From logs from the time ranges where the data loss is reported from, these additional checks were not showing any discrepancies.&lt;&#x2F;p&gt;
&lt;p&gt;This could only mean two things:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;All the kafka&#x2F;zio-kafka level is correct but we are still loosing data in our service-specific logic, somewhere in writing to Avro-s and uploading to S3.&lt;&#x2F;li&gt;
&lt;li&gt;On Kafka level everything is fine but somehow zio-kafka does not pass all the records to our service&#x27;s logic&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;I trusted the validation mode I described earlier (the one that re-downloads the data) so I ruled out the first option.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;zio-kafka-internals&quot;&gt;zio-kafka internals&lt;&#x2F;h2&gt;
&lt;p&gt;Before discussing the fixes I tried to make in zio-kafka, first let&#x27;s talk about how the library works.&lt;&#x2F;p&gt;
&lt;p&gt;The zio-kafka library wraps the Java library for Kafka and provides a ZIO Stream interface for consuming the records. As I mentioned earlier, it creates a separate stream for each kafka partition assigned to the consumer. The primary operation on the Java interface is called &lt;code&gt;poll&lt;&#x2F;code&gt;. This method is responsible for fetching data for all the subscribed partitions for a given timeout. Another important property is that in case of rebalancing, the &lt;code&gt;poll&lt;&#x2F;code&gt; is blocked until the rebalancing completes, and it calls the already mentioned revoked&#x2F;assigned callbacks in this blocked state.&lt;&#x2F;p&gt;
&lt;p&gt;Another thing it has to support is back pressure. We don&#x27;t want this &lt;code&gt;poll&lt;&#x2F;code&gt; to fetch more and more data for partitions where we did process the previous records yet. In other words, upstream demand in our ZIO Streams must control what partitions we &lt;code&gt;poll&lt;&#x2F;code&gt;. In the Java level this is controlled by pausing and resuming individual partitions.&lt;&#x2F;p&gt;
&lt;p&gt;So let&#x27;s see a summary of how the consumer streams work:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Each partition stream is a repeated ZIO effect that enqueues a &lt;code&gt;Request&lt;&#x2F;code&gt; in a &lt;em&gt;queue&lt;&#x2F;em&gt; and then waits for the promise contained in this request to be fulfilled. The promise will contain a chunk of records fetched from Kafka if everything went well.&lt;&#x2F;li&gt;
&lt;li&gt;There is a single (per consumer) &lt;em&gt;run loop&lt;&#x2F;em&gt; which periodically calls &lt;code&gt;poll&lt;&#x2F;code&gt;. Before calling it, it pauses&#x2F;resumes partitions based on which partitions has at least one &lt;code&gt;Request&lt;&#x2F;code&gt; since the last &lt;code&gt;poll&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;This, as ZIO streams are pull based, implements the back pressure semantics mentioned earlier.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;There is a similar mechanism for gathering commit requests and then performing them as part of the &lt;em&gt;run loop&lt;&#x2F;em&gt; but in our use case that is not used - the transactional producer is independent of this mechanism.&lt;&#x2F;p&gt;
&lt;p&gt;There is one more concept which is very important for to understand the problem: &lt;em&gt;buffered records&lt;&#x2F;em&gt;. Imagine that we are consuming five partitions, &lt;code&gt;1 .. 5&lt;&#x2F;code&gt; and only have a request (downstream pull) for partition &lt;code&gt;1&lt;&#x2F;code&gt;. This means we are pausing &lt;code&gt;2 .. 5&lt;&#x2F;code&gt; and do a &lt;code&gt;poll&lt;&#x2F;code&gt; but what if the resulting record set contains records from other partitions? There could be multiple reason for this (and some of them may not be possible in practice), for example there could be some data already buffered within the Java library for the paused partitions, or maybe a rebalance assigns some new partitions which are not paused yet (as we don&#x27;t know we are going to get them) resulting in immediately fetching some data for them.&lt;&#x2F;p&gt;
&lt;p&gt;The library handles these cases in a simple way: it &lt;em&gt;buffers&lt;&#x2F;em&gt; these records which were not requested in a per-partition map, and when a partition is pulled next time, it will not only give the records returned by &lt;code&gt;poll&lt;&#x2F;code&gt; to the request&#x27;s promise, but also all the buffered ones, prepended to the new set of records.&lt;&#x2F;p&gt;
&lt;p&gt;Another important detail for this investigation is that we don&#x27;t care about graceful shutdown, or if records got lost during shutdown. This is also very interesting in general, but our service is not trying to finish writing and uploading all data during shutdown, it simply ignores the partial data and quits without committing them so they get reprocessed as soon as possible in another consumer.&lt;&#x2F;p&gt;
&lt;p&gt;What happens during rebalancing? Let&#x27;s forget the default mode of zio-kafka for this discussion and focus on the new mode which &lt;em&gt;restarts&lt;&#x2F;em&gt; all the partition streams every time.&lt;&#x2F;p&gt;
&lt;p&gt;We don&#x27;t know in advance that a rebalance will happen, it happens during the call to &lt;code&gt;poll&lt;&#x2F;code&gt;. The method in the &lt;em&gt;run loop&lt;&#x2F;em&gt; that contains this logic is called &lt;code&gt;handlePoll&lt;&#x2F;code&gt; and does roughly the following (in our case):&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;store the current state (containing the current streams, requests, buffered records etc) in a ref&lt;&#x2F;li&gt;
&lt;li&gt;pause&#x2F;resume partitions based on the current requests, as described earlier&lt;&#x2F;li&gt;
&lt;li&gt;call &lt;code&gt;poll&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;during &lt;code&gt;poll&lt;&#x2F;code&gt; in the revoked callback we end all partition streams. This means they get an interrupt signal and they stop. As I mentioned earlier, in this mode the consumer merges the partition streams and drain them; this is the other side of it, interrupting all the streams so we know that eventually this merged stream will also stop.&lt;&#x2F;li&gt;
&lt;li&gt;dropping all the buffered records, but first adding them to a &lt;em&gt;drain queue&lt;&#x2F;em&gt; (this is a fix that was not part of the original implementation). It is now guaranteed that the partition streams will get the remaining buffered elements before they stop.&lt;&#x2F;li&gt;
&lt;li&gt;storing the fact of the rebalancing, so the rest of &lt;code&gt;handlePoll&lt;&#x2F;code&gt; knows about it when &lt;code&gt;poll&lt;&#x2F;code&gt; returns.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;once &lt;code&gt;poll&lt;&#x2F;code&gt; returned, buffer all records for all unrequested partitions. this is another place where a fix was made, currently we treat &lt;em&gt;all&lt;&#x2F;em&gt; records unrequested in case of a rebalancing, because all the streams were restarted, so the original requests were made by the previous set of streams; fulfilling them would loose data because the new streams are not waiting for the same promises.&lt;&#x2F;li&gt;
&lt;li&gt;the next step would be to fulfill all the requests that we can by using the combination of buffered records and the &lt;code&gt;poll&lt;&#x2F;code&gt; result. But we had a rebalance and dropped all the requests! So this step must not do anything.&lt;&#x2F;li&gt;
&lt;li&gt;finally we start new streams for each assigned partition&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;So based on all this, and the theory that the commits&#x2F;offsets are all correct but somehow data is lost between the Java library and the service logic, the primary suspect was the &lt;em&gt;buffered records&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s see what fixes and changes I made, in time order:&lt;&#x2F;p&gt;
&lt;h2 id=&quot;fix-attempt-1&quot;&gt;Fix attempt 1&lt;&#x2F;h2&gt;
&lt;p&gt;The first time I suspected buffered records are behind the issue I realized that when we end &lt;em&gt;all&lt;&#x2F;em&gt; partition streams during rebalancing, we loose the buffered records. This is not a problem if those partitions are really revoked - it means there was no demand for those partitions, so it&#x27;s just that some records were read ahead and now they get dropped and will be reprocessed on another consumer.&lt;&#x2F;p&gt;
&lt;p&gt;But if the same partition is &quot;reassigned&quot; to the same consumer, this could be a data loss! The reason is that there is an internal state in Kafka which is a per-consumer, per-partition &lt;em&gt;position&lt;&#x2F;em&gt;. In this case this position would point to &lt;em&gt;after&lt;&#x2F;em&gt; the buffered records, so the next &lt;code&gt;poll&lt;&#x2F;code&gt; will get the next records and the previously buffered ones will not be prepended as usual because the revocation clears the buffer.&lt;&#x2F;p&gt;
&lt;p&gt;Note that this whole problem would not exist if the reassigned partitions get &lt;em&gt;reseted&lt;&#x2F;em&gt; to the last committed offset after rebalancing. I don&#x27;t think this is the case, only when a new partition is assigned to a consumer with no previous position.&lt;&#x2F;p&gt;
&lt;p&gt;My first fix was passing the buffered records to the user-defined revoke handler so it could write the remaining records to the Avro files before uploading them. This was just a quick test, as it does not really fit into the API of zio-kafka.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;fix-attempt-2&quot;&gt;Fix attempt 2&lt;&#x2F;h2&gt;
&lt;p&gt;After playing with the first fix for a while I thought it solved the issue but it was just not reproducing - it is not completely clear why, probably I missed some test results.&lt;&#x2F;p&gt;
&lt;p&gt;But I wrote a second version of the same fix, this time by adding the remaining buffered elements to the end of the partition streams before they stop, instead of explicitly passing them to the revoke handler.&lt;&#x2F;p&gt;
&lt;p&gt;This should work exactly the same but handles the problem transparently.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;fix-attempt-3&quot;&gt;Fix attempt 3&lt;&#x2F;h2&gt;
&lt;p&gt;After some more testing it was clear that the QoS tests were still showing data loss. The investigation continued and the next problem I have found was that in &lt;code&gt;handlePoll&lt;&#x2F;code&gt; after a rebalance we were not storing the buffered records anymore in this &quot;restarting streams&quot; mode. I did not catch this in the first fix attempts I was focusing on dealing with the buffered records at the &lt;em&gt;end&lt;&#x2F;em&gt; of the revoked streams.&lt;&#x2F;p&gt;
&lt;p&gt;What does it mean it was not storing the buffered records? In &lt;code&gt;handlePoll&lt;&#x2F;code&gt; there is a series of state manipulation functions and the buffered records map is part of this state. The logic here is quite complicated and it very much depends on whether we are running the consumer in &lt;em&gt;normal&lt;&#x2F;em&gt; or &lt;em&gt;stream restarting&lt;&#x2F;em&gt; mode. The problem was that for some reason after a rebalance (in the new mode only) this buffered records field was cleared instead of preserving records from before the rebalance.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;fix-attempt-4&quot;&gt;Fix attempt 4&lt;&#x2F;h2&gt;
&lt;p&gt;Very soon turned out that my previous fix was not doing anything, because there was one more problem in the state handling in &lt;code&gt;handlePoll&lt;&#x2F;code&gt;. As I wrote, it bufferes only those records which were not &lt;em&gt;requested&lt;&#x2F;em&gt;. For those partitions which have a request, it fulfills these requests with the new records instead. When the reassigned partitions are not restarted during rebalancing (as in the &lt;em&gt;normal mode&lt;&#x2F;em&gt;) this is OK but for us, as we are creating new streams, the old requests must be dropped and not taken into account when deciding which records to buffer.&lt;&#x2F;p&gt;
&lt;p&gt;In other words, in &lt;em&gt;restarting streams mode&lt;&#x2F;em&gt; we have to buffer all records after a rebalance.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;fix-attempt-5&quot;&gt;Fix attempt 5&lt;&#x2F;h2&gt;
&lt;p&gt;I was very confident about the previous fix but something was still not OK, the test continued to report data loss. After several code reviews and discussions, I realized that it is not guaranteed that the &lt;code&gt;onRevoked&lt;&#x2F;code&gt; and &lt;code&gt;onAssigned&lt;&#x2F;code&gt; callbacks are called within a single &lt;code&gt;poll&lt;&#x2F;code&gt;! My code was not prepared for this (the original zio-kafka code was, actually, but I did not realize this for a long time).&lt;&#x2F;p&gt;
&lt;p&gt;First of all I had to change the way how the rebalance callbacks are passing information to the poll handler. The previously added rebalance event (which was a simple case class) was changed to be either &lt;code&gt;Revoked&lt;&#x2F;code&gt;, &lt;code&gt;Assigned&lt;&#x2F;code&gt; or &lt;code&gt;RevokedAndAssigned&lt;&#x2F;code&gt; and I made sure that for each case all the run loop state variables are modified correctly.&lt;&#x2F;p&gt;
&lt;p&gt;Immediately after deploying this, I saw evidence in the logs that indeed the revoked and assigned callbacks are called separately, so the fix was definitely needed. The only problem was that I did not really understand how could this cause data loss, and by doing some rebalancing tests it turned out that the problem still exists.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;fix-attempt-6&quot;&gt;Fix attempt 6&lt;&#x2F;h2&gt;
&lt;p&gt;One more thing I added in the previous attempt was a log in a place that was suspicious to me and I did not care about it earlier. When adding requests to the run loop - these are added to the run loop&#x27;s command queue when a partition stream tries to pull, completely asynchronous to the run loop itself - it was checking if currently the run loop is in the middle of a rebalancing. So in case the rebalancing takes multiple &lt;code&gt;poll&lt;&#x2F;code&gt;s, as we have seen, it is possible that between the &lt;code&gt;onRevoked&lt;&#x2F;code&gt; and &lt;code&gt;onAssigned&lt;&#x2F;code&gt; events we get some new requests from the streams.&lt;&#x2F;p&gt;
&lt;p&gt;In the restart-streams mode all partition streams are interrupted on the revoke event, and no new streams are created until the assigned event. This means that these requests can &lt;em&gt;only&lt;&#x2F;em&gt; come from the previous streams so they should be ignored. But what zio-kafka was doing was to add these requests to the run loop&#x27;s pending requests. This is correct behavior in its normal mode, because on rebalance some of the streams survive it and their requests can be still fulfilled.&lt;&#x2F;p&gt;
&lt;p&gt;But in our case it is incorrect, because after the assignment is done and some records are fetched by &lt;code&gt;poll&lt;&#x2F;code&gt;, these pending requests get fulfilled with them, &quot;stealing&quot; the records from the new partition streams!&lt;&#x2F;p&gt;
&lt;p&gt;At this point I really felt like this was the last missing piece of the puzzle.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;And it was!&lt;&#x2F;p&gt;
&lt;p&gt;The final set of fixes are published &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;zio&#x2F;zio-kafka&#x2F;pull&#x2F;473&quot;&gt;in this pull request&lt;&#x2F;a&gt;. The service and its tests are running perfectly since more than 10 days, proving that it is correct.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>[Video] ZIO Parser @ ZIO World 2022</title>
        <published>2022-03-11T00:00:00+00:00</published>
        <updated>2022-03-11T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Daniel Vigovszky
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://blog.vigoo.dev/posts/zioworld-talk/"/>
        <id>https://blog.vigoo.dev/posts/zioworld-talk/</id>
        
        <content type="html" xml:base="https://blog.vigoo.dev/posts/zioworld-talk/">&lt;p&gt;My talk at &lt;a href=&quot;https:&#x2F;&#x2F;zioworld.com&#x2F;&quot;&gt;ZIO World 2022&lt;&#x2F;a&gt; introducing &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;zio&#x2F;zio-parser&quot;&gt;ZIO Parser&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;iframe width=&quot;800&quot; height=&quot;450&quot; src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;IG6SmKPPamY&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;&#x2F;iframe&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>[Video] Generating Libraries @ Functional Scala 2021</title>
        <published>2021-12-03T00:00:00+00:00</published>
        <updated>2021-12-03T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Daniel Vigovszky
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://blog.vigoo.dev/posts/funscala2021-talk/"/>
        <id>https://blog.vigoo.dev/posts/funscala2021-talk/</id>
        
        <content type="html" xml:base="https://blog.vigoo.dev/posts/funscala2021-talk/">&lt;p&gt;My talk at &lt;a href=&quot;https:&#x2F;&#x2F;www.functionalscala.com&#x2F;&quot;&gt;Functional Scala 2021&lt;&#x2F;a&gt; about generating libraries in Scala:&lt;&#x2F;p&gt;
&lt;iframe width=&quot;800&quot; height=&quot;450&quot; src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;HCPTmytex3U&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;&#x2F;iframe&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Writing kubectl plugins with ZIO K8s</title>
        <published>2021-03-07T00:00:00+00:00</published>
        <updated>2021-03-07T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Daniel Vigovszky
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://blog.vigoo.dev/posts/zio-k8s-plugins/"/>
        <id>https://blog.vigoo.dev/posts/zio-k8s-plugins/</id>
        
        <content type="html" xml:base="https://blog.vigoo.dev/posts/zio-k8s-plugins/">&lt;p&gt;Originally posted &lt;a href=&quot;https:&#x2F;&#x2F;ziverge.com&#x2F;blog&#x2F;zio-k8s-kubectl-plugin&quot;&gt;at the Ziverge blog&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Andrea Peruffo recently published &lt;a href=&quot;https:&#x2F;&#x2F;www.lightbend.com&#x2F;blog&#x2F;writing-kubectl-plugins-with-scala-or-java-with-fabric8-kubernetes-client-on-graalvm?utm_campaign=Oktopost-BLG+-+Writing+Kubectl+plugins+in+Java+or+Scala&quot;&gt;a blog post on the Lightbend blog&lt;&#x2F;a&gt; about how they migrated a &lt;code&gt;kubectl&lt;&#x2F;code&gt; plugin from Golang to Scala using the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;fabric8io&#x2F;kubernetes-client&quot;&gt;Fabric8&lt;&#x2F;a&gt; Kubernetes client and a few Scala libraries. This is a perfect use case for the &lt;a href=&quot;https:&#x2F;&#x2F;coralogix.github.io&#x2F;zio-k8s&#x2F;&quot;&gt;zio-k8s library&lt;&#x2F;a&gt; announced &lt;a href=&quot;https:&#x2F;&#x2F;coralogix.com&#x2F;log-analytics-blog&#x2F;the-coralogix-operator-a-tale-of-zio-and-kubernetes&#x2F;&quot;&gt;two weeks ago&lt;&#x2F;a&gt;, so we decided to write this post demonstrating how to implement the same example using the ZIO ecosystem.&lt;&#x2F;p&gt;
&lt;p&gt;We are going to implement the same example, originally described in the &lt;a href=&quot;https:&#x2F;&#x2F;dev.to&#x2F;ikwattro&#x2F;write-a-kubectl-plugin-in-java-with-jbang-and-fabric8-566&quot;&gt;Write a kubectl plugin in Java with JBang and fabric8&lt;&#x2F;a&gt; article, using the following libraries:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zio.dev&#x2F;&quot;&gt;ZIO&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;coralogix.github.io&#x2F;zio-k8s&#x2F;&quot;&gt;ZIO K8s&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zio.github.io&#x2F;zio-logging&#x2F;&quot;&gt;ZIO Logging&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;vigoo.github.io&#x2F;clipp&#x2F;docs&#x2F;&quot;&gt;clipp&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;sttp.softwaremill.com&#x2F;en&#x2F;latest&#x2F;&quot;&gt;sttp&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;circe.github.io&#x2F;circe&#x2F;&quot;&gt;circe&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The source code of the example &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;zivergetech&#x2F;zio-k8s-kubectl-plugin-example&quot;&gt;can be found here&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The linked blog post does a great job in explaining the benefits and difficulties of compiling to native image with GraalVM so we are not going to repeat it here. Instead, we will focus on how the implementation looks in the functional Scala world.&lt;&#x2F;p&gt;
&lt;p&gt;The example has to implement two &lt;em&gt;kubectl commands&lt;&#x2F;em&gt;: &lt;code&gt;version&lt;&#x2F;code&gt; to print its own version and &lt;code&gt;list&lt;&#x2F;code&gt; to list information about &lt;em&gt;all Pods of the Kubernetes cluster&lt;&#x2F;em&gt; in either ASCII table, JSON or YAML format.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;cli-parameters&quot;&gt;CLI parameters&lt;&#x2F;h3&gt;
&lt;p&gt;Let&#x27;s start with defining these command line options with the &lt;a href=&quot;https:&#x2F;&#x2F;vigoo.github.io&#x2F;clipp&#x2F;docs&#x2F;&quot;&gt;clipp&lt;&#x2F;a&gt; library!&lt;&#x2F;p&gt;
&lt;p&gt;First, we define the data structures that describe our parameters:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;sealed trait&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; Format
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;object&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; Format {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case object&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; Default &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Format
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case object&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; Json &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Format
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case object&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; Yaml &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Format
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;sealed trait&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; Command
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;object&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; Command {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;final case class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; ListPods(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;format&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: Format) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Command
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case object&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; Version &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Command
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;final case class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; Parameters&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;verbose&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Boolean&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;command&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Command&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;When parsing the arguments (passed as an array of strings), we need to either produce a &lt;code&gt;Parameters&lt;&#x2F;code&gt; value or fail and print some usage information.&lt;&#x2F;p&gt;
&lt;p&gt;With &lt;code&gt;clipp&lt;&#x2F;code&gt;, this is done by defining a parameter parser using its parser DSL in a &lt;em&gt;for comprehension&lt;&#x2F;em&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;spec &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_           &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span&gt; metadata(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;kubectl lp&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;verbose     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span&gt; flag(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;Verbose logging&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;&amp;#39;v&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;verbose&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;commandName &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span&gt; command(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;version&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;list&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;command     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;- 
&lt;&#x2F;span&gt;&lt;span&gt;      commandName &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;match &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;version&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; 
&lt;&#x2F;span&gt;&lt;span&gt;          pure(Command.Version)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;list&amp;quot;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;specifiedFormat &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span&gt; optional {
&lt;&#x2F;span&gt;&lt;span&gt;                                namedParameter[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Format&lt;&#x2F;span&gt;&lt;span&gt;](
&lt;&#x2F;span&gt;&lt;span&gt;                                  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;Output format&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                                  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;default|json|yaml&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                                  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;&amp;#39;o&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                                  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;output&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;                                )
&lt;&#x2F;span&gt;&lt;span&gt;                              }
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;format           &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; specifiedFormat.getOrElse(Format.Default)
&lt;&#x2F;span&gt;&lt;span&gt;          } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;yield &lt;&#x2F;span&gt;&lt;span&gt;Command.ListPods(format)
&lt;&#x2F;span&gt;&lt;span&gt;      }
&lt;&#x2F;span&gt;&lt;span&gt;  } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;yield &lt;&#x2F;span&gt;&lt;span&gt;Parameters(verbose, command)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;As we can see, it is possible to make decisions in the parser based on the previously parsed values, so each &lt;em&gt;command&lt;&#x2F;em&gt; can have a different set of arguments. In order to parse the possible &lt;em&gt;output formats&lt;&#x2F;em&gt;, we also implement the &lt;code&gt;ParameterParser&lt;&#x2F;code&gt; type class for &lt;code&gt;Format&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;implicit val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;parameterParser&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ParameterParser&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Format&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ParameterParser&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Format&lt;&#x2F;span&gt;&lt;span&gt;] {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;override def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;parse&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Either&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Format&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span&gt;      value.toLowerCase &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;match &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;default&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;Right(Format.Default)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;json&amp;quot;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;Right(Format.Json)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;yaml&amp;quot;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;Right(Format.Yaml)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_         &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;Left(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;Invalid output format &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;$value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;#39;, use &amp;#39;default&amp;#39;, &amp;#39;json&amp;#39; or &amp;#39;yaml&amp;#39;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;      }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;override def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;example&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Format &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;Format.Default
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This is all we need to bootstrap our command line application. The following main function parses the arguments and provides the parsed &lt;code&gt;Parameters&lt;&#x2F;code&gt; value to the &lt;code&gt;ZIO&lt;&#x2F;code&gt; program:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;run&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;args&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;]): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;URIO&lt;&#x2F;span&gt;&lt;span&gt;[zio.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ZEnv&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ExitCode&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;clippConfig &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; config.fromArgsWithUsageInfo(args, Parameters.spec)
&lt;&#x2F;span&gt;&lt;span&gt;  runWithParameters()
&lt;&#x2F;span&gt;&lt;span&gt;    .provideCustomLayer(clippConfig)
&lt;&#x2F;span&gt;&lt;span&gt;    .catchAll { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ParserFailure &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;ZIO.succeed(ExitCode.failure) }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;runWithParameters&lt;&#x2F;span&gt;&lt;span&gt;(): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ZIO&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ZEnv &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;with &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ClippConfig&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Parameters&lt;&#x2F;span&gt;&lt;span&gt;], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Nothing&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ExitCode&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;working-with-kubernetes&quot;&gt;Working with Kubernetes&lt;&#x2F;h3&gt;
&lt;p&gt;In &lt;code&gt;runWithParameters&lt;&#x2F;code&gt;, we have everything needed to initialize the logging and Kubernetes modules and perform the actual command. Before talking about the initialization though, let&#x27;s take a look at how we can list the pods!&lt;&#x2F;p&gt;
&lt;p&gt;We define a data type holding all the information we want to report about each pod:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; PodInfo&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;namespace&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;status&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;message&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The task now is to fetch &lt;em&gt;all pods&lt;&#x2F;em&gt; from Kubernetes and construct &lt;code&gt;PodInfo&lt;&#x2F;code&gt; values. In &lt;code&gt;zio-k8s&lt;&#x2F;code&gt; &lt;em&gt;getting a list of pods&lt;&#x2F;em&gt; is defined as a &lt;strong&gt;ZIO Stream&lt;&#x2F;strong&gt;, which under the hood sends multiple HTTP requests to Kubernetes taking advantage of its &lt;em&gt;pagination&lt;&#x2F;em&gt; capability. In this &lt;em&gt;stream&lt;&#x2F;em&gt; each element will be a &lt;code&gt;Pod&lt;&#x2F;code&gt; and we can start processing them one by one as soon they arrive over the wire. This way the implementation of the &lt;code&gt;list&lt;&#x2F;code&gt; command can be something like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;run&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;format&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Format&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= 
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span&gt; log.debug(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;Executing the list command&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span&gt; pods
&lt;&#x2F;span&gt;&lt;span&gt;            .getAll(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;namespace&lt;&#x2F;span&gt;&lt;span&gt; = None)
&lt;&#x2F;span&gt;&lt;span&gt;            .mapM(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;toModel&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;            .run(reports.sink(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;format&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;            .catchAll { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;k8sFailure &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;              console.putStrLnErr(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;Failed to get the list of pods: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;$k8sFailure&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;  } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;yield &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Let&#x27;s take a look at each line!&lt;&#x2F;p&gt;
&lt;p&gt;First, &lt;code&gt;log.debug&lt;&#x2F;code&gt; uses the &lt;em&gt;ZIO logging&lt;&#x2F;em&gt; library. We are going to initialize logging in a way that these messages only appear if the &lt;code&gt;--verbose&lt;&#x2F;code&gt; option was enabled.&lt;&#x2F;p&gt;
&lt;p&gt;Then &lt;code&gt;pods.getAll&lt;&#x2F;code&gt; is the ZIO Stream provided by the &lt;em&gt;ZIO K8s&lt;&#x2F;em&gt; library. Not providing a specific namespace means that we are getting pods from &lt;em&gt;all&lt;&#x2F;em&gt; namespaces.&lt;&#x2F;p&gt;
&lt;p&gt;With &lt;code&gt;mapM(toModel)&lt;&#x2F;code&gt; we transform each &lt;code&gt;Pod&lt;&#x2F;code&gt; in the stream to our &lt;code&gt;PodInfo&lt;&#x2F;code&gt; data structure.&lt;&#x2F;p&gt;
&lt;p&gt;Finally we &lt;code&gt;run&lt;&#x2F;code&gt; the stream into a &lt;em&gt;sink&lt;&#x2F;em&gt; that is responsible for displaying the &lt;code&gt;PodInfo&lt;&#x2F;code&gt; structures with the specific &lt;em&gt;output format&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;code&gt;Pod&lt;&#x2F;code&gt; objects returned in the stream are simple &lt;em&gt;case classes&lt;&#x2F;em&gt; containing all the information available for the given resource. Most of the fields of these case classes are &lt;em&gt;optional&lt;&#x2F;em&gt; though, even though we can be sure that in our case each pod would have a name, a namespace and a status. To make working with these data structures easier within a set of expectations, they feature &lt;em&gt;getter methods&lt;&#x2F;em&gt; that are ZIO functions either returning the field&#x27;s value, or failing if they are not specified. With these we can implement &lt;code&gt;toModel&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;toModel&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;pod&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Pod&lt;&#x2F;span&gt;&lt;span&gt;): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;IO&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;K8sFailure&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;PodInfo&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;metadata  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span&gt; pod.getMetadata
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;name      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span&gt; metadata.getName
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;namespace &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span&gt; metadata.getNamespace
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;status    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span&gt; pod.getStatus
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;phase     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span&gt; status.getPhase
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;message    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; status.message.getOrElse(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;yield &lt;&#x2F;span&gt;&lt;span&gt;PodInfo(name, namespace, phase, message)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;An alternative would be to just store the optional values in &lt;code&gt;PodInfo&lt;&#x2F;code&gt; and handle their absence in the &lt;em&gt;report sink&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s talk about the &lt;em&gt;type&lt;&#x2F;em&gt; of the above defined &lt;code&gt;run&lt;&#x2F;code&gt; function:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span&gt;ZIO[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Pods &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;with &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Console &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;with &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Logging&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Nothing&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Unit&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The ZIO &lt;em&gt;environment&lt;&#x2F;em&gt; precisely specifies the modules used by our &lt;code&gt;run&lt;&#x2F;code&gt; function:&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Module&lt;&#x2F;th&gt;&lt;th&gt;Description&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;Pods&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;for accessing K8s pods&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;Console&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;for printing &lt;em&gt;errors&lt;&#x2F;em&gt; on the standard error channel with &lt;code&gt;putStrLnErr&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;Logging&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;for emitting some debug logs&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;The error type is &lt;code&gt;Nothing&lt;&#x2F;code&gt; because it can never fail - all errors are catched and displayed for the user within the run function.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;initialization&quot;&gt;Initialization&lt;&#x2F;h3&gt;
&lt;p&gt;Now we can see that in order to run the &lt;code&gt;list&lt;&#x2F;code&gt; command in &lt;code&gt;runWithParameters&lt;&#x2F;code&gt;, we must &lt;em&gt;provide&lt;&#x2F;em&gt; &lt;code&gt;Pods&lt;&#x2F;code&gt; and &lt;code&gt;Logging&lt;&#x2F;code&gt; modules to our implementation (&lt;code&gt;Console&lt;&#x2F;code&gt; is part of the default environment and does not need to be provided).&lt;&#x2F;p&gt;
&lt;p&gt;These modules are described by &lt;em&gt;ZIO Layers&lt;&#x2F;em&gt; which can be composed together to provide the &lt;em&gt;environment&lt;&#x2F;em&gt; for running our ZIO program. In this case we need to define a &lt;em&gt;logging layer&lt;&#x2F;em&gt; and a &lt;em&gt;kubernetes pods client&lt;&#x2F;em&gt; layer and then compose the two for our &lt;code&gt;list&lt;&#x2F;code&gt; implementation.&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s start with logging:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;configuredLogging&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;verbose&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Boolean&lt;&#x2F;span&gt;&lt;span&gt;): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ZLayer&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Console &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;with &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Clock&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Nothing&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Logging&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;logLevel &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= if &lt;&#x2F;span&gt;&lt;span&gt;(verbose) LogLevel.Trace &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;LogLevel.Info
&lt;&#x2F;span&gt;&lt;span&gt;    Logging.consoleErr(logLevel) &amp;gt;&amp;gt;&amp;gt; initializeSlf4jBridge
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We create a simple ZIO console logger that will print lines to the standard error channel; the enabled log level is determined by the &lt;code&gt;verbose&lt;&#x2F;code&gt; command line argument. As this logger writes to the console and also prints timestamps, our logging layer &lt;em&gt;requires&lt;&#x2F;em&gt; &lt;code&gt;Console with Clock&lt;&#x2F;code&gt; to be able to build a &lt;code&gt;Logging&lt;&#x2F;code&gt; module. Enabling the &lt;em&gt;SLF4j bridge&lt;&#x2F;em&gt; guarantees that logs coming from third party libraries will also get logged through ZIO logging. In our example this means that when we enable verbose logging, our &lt;code&gt;kubectl&lt;&#x2F;code&gt; plugin will log the HTTP requests made by the Kubernetes library!&lt;&#x2F;p&gt;
&lt;p&gt;The second layer we must define constructs a &lt;code&gt;Pods&lt;&#x2F;code&gt; module:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;pods &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; k8sDefault &amp;gt;&amp;gt;&amp;gt; Pods.live)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;By using &lt;code&gt;k8sDefault&lt;&#x2F;code&gt; we ask &lt;code&gt;zio-k8s&lt;&#x2F;code&gt; to use the &lt;em&gt;default configuration chain&lt;&#x2F;em&gt;, which first tries to load the &lt;code&gt;kubeconfig&lt;&#x2F;code&gt; and use the active &lt;em&gt;context&lt;&#x2F;em&gt; stored in it. This is exactly what &lt;code&gt;kubectl&lt;&#x2F;code&gt; does, so it is the perfect choice when writing a &lt;code&gt;kubectl&lt;&#x2F;code&gt; plugin. Other variants provide more flexibility such as loading custom configuration with the &lt;a href=&quot;https:&#x2F;&#x2F;zio.github.io&#x2F;zio-config&#x2F;&quot;&gt;ZIO Config&lt;&#x2F;a&gt; library. Once we have a &lt;em&gt;k8s configuration&lt;&#x2F;em&gt; we just feed it to the set of resource modules we need. In this example we only need to access pods. In more complex applications this would be something like &lt;code&gt;k8sDefault &amp;gt;&amp;gt;&amp;gt; (Pods.live ++ Deployments.live ++ ...)&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;With both layers defined, we can now provide them to our command implementation:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span&gt;runCommand(parameters.command)
&lt;&#x2F;span&gt;&lt;span&gt;  .provideCustomLayer(logging ++ pods)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;output&quot;&gt;Output&lt;&#x2F;h3&gt;
&lt;p&gt;The last thing missing is the &lt;em&gt;report sink&lt;&#x2F;em&gt; that we are running the stream of pods into. We are going to define three different sinks for the three output types.&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s start with JSON!&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;sink&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Encoder&lt;&#x2F;span&gt;&lt;span&gt;]: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ZSink&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Console&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Nothing&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Unit&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span&gt;  ZSink.foreach { (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;item&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    console.putStrLn(item.asJson.printWith(Printer.spaces2SortKeys))
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The JSON sink requires &lt;code&gt;Console&lt;&#x2F;code&gt; and then for each element &lt;code&gt;T&lt;&#x2F;code&gt; it converts it to JSON and pretty prints it to console. Note that this is going to be a JSON document per each line. We could easily define a different sink that collects each element and produces a single valid JSON array of them:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;arraySink&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Encoder&lt;&#x2F;span&gt;&lt;span&gt;]: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ZSink&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Console&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Nothing&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Unit&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span&gt;    ZSink.collectAll.flatMap { (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;items&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Chunk&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span&gt;]) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;      ZSink.fromEffect {
&lt;&#x2F;span&gt;&lt;span&gt;        console.putStrLn(Json.arr(items.map(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;.asJson): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;_*&lt;&#x2F;span&gt;&lt;span&gt;).printWith(Printer.spaces2SortKeys))
&lt;&#x2F;span&gt;&lt;span&gt;      }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;code&gt;T&lt;&#x2F;code&gt; type paramter in our example will always be &lt;code&gt;PodInfo&lt;&#x2F;code&gt;. By requiring it to have an implementation of circe&#x27;s &lt;code&gt;Encoder&lt;&#x2F;code&gt; type class we can call &lt;code&gt;.asJson&lt;&#x2F;code&gt; on instances of &lt;code&gt;T&lt;&#x2F;code&gt;, encoding it into a JSON object. We can &lt;em&gt;derive&lt;&#x2F;em&gt; these encoders automatically:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;implicit val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;encoder&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Encoder&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;PodInfo&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; deriveEncoder
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Producing YAML output is exactly the same except of first converting the JSON model to YAML with &lt;code&gt;asJson.asYaml&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The third output format option is to generate ASCII tables. We implement that with the same Java library as the original post, called &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;vdmeer&#x2F;asciitable&quot;&gt;&lt;code&gt;asciitable&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;. In order to separate the specification of how to convert a &lt;code&gt;PodInfo&lt;&#x2F;code&gt; to a table from the sink implementation, we can define our own type class similar to the JSON &lt;code&gt;Encoder&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;trait&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; Tabular&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;** Initializes a table by setting properties and adding header rows
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;      *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;createTableRenderer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;(): ZManaged[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Any&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Nothing&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;, AsciiTable]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;** Adds a single item of type T to the table created with [[createTableRenderer()]]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;      *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;addRow&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;table&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: AsciiTable)(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;item&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: T): UIO[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Unit&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;** Adds the table&amp;#39;s footer and renders it to a string
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;      *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;renderTable&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;table&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: AsciiTable): UIO[String]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We can implement this for &lt;code&gt;PodInfo&lt;&#x2F;code&gt; and then use a generic sink for printing the result table, similar to the previous examples:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;sink&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span&gt;](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;implicit &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;tabular&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Tabular&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span&gt;]): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ZSink&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Console&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Nothing&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Unit&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span&gt;  ZSink.managed[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Console&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Nothing&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;AsciiTable&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Unit&lt;&#x2F;span&gt;&lt;span&gt;](tabular.createTableRenderer()) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;table &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; initialize the table
&lt;&#x2F;span&gt;&lt;span&gt;      ZSink.foreach(tabular.addRow(table)) &amp;lt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; add each row
&lt;&#x2F;span&gt;&lt;span&gt;      printResultTable[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span&gt;](table) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; print the result
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;printResultTable&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span&gt;](
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;table&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;AsciiTable
&lt;&#x2F;span&gt;&lt;span&gt;)(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;implicit &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;tabular&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Tabular&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span&gt;]): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ZSink&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Console&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Nothing&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Unit&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span&gt;  ZSink.fromEffect {
&lt;&#x2F;span&gt;&lt;span&gt;    tabular
&lt;&#x2F;span&gt;&lt;span&gt;      .renderTable(table)
&lt;&#x2F;span&gt;&lt;span&gt;      .flatMap(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;str &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; console.putStrLn(str))
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;trying-it-out&quot;&gt;Trying it out&lt;&#x2F;h3&gt;
&lt;p&gt;With the report sinks implemenented we have everything ready to try out our new &lt;code&gt;kubectl&lt;&#x2F;code&gt; plugin!&lt;&#x2F;p&gt;
&lt;p&gt;We can compile the example to &lt;em&gt;native image&lt;&#x2F;em&gt; and copy the resulting image to a location on the &lt;code&gt;PATH&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#383a42;&quot;&gt;&lt;code&gt;&lt;span&gt;sbt nativeImage
&lt;&#x2F;span&gt;&lt;span&gt;cp target&#x2F;native-image&#x2F;kubectl-lp ~&#x2F;bin
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Then use &lt;code&gt;kubectl lp&lt;&#x2F;code&gt; to access our custom functions:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;blog-ziok8s-kubectlplugin.png&quot; alt=&quot;kubectl-example&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>The Coralogix Operator: A Tale of ZIO and Kubernetes</title>
        <published>2021-02-16T00:00:00+00:00</published>
        <updated>2021-02-16T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Daniel Vigovszky
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://blog.vigoo.dev/posts/zio-k8s/"/>
        <id>https://blog.vigoo.dev/posts/zio-k8s/</id>
        
        <content type="html" xml:base="https://blog.vigoo.dev/posts/zio-k8s/">&lt;p&gt;My blog post &lt;a href=&quot;https:&#x2F;&#x2F;coralogix.com&#x2F;blog&#x2F;the-coralogix-operator-a-tale-of-zio-and-kubernetes&#x2F;&quot;&gt;published at the Coralogix blog&lt;&#x2F;a&gt; about using &lt;a href=&quot;https:&#x2F;&#x2F;coralogix.github.io&#x2F;zio-k8s&#x2F;&quot;&gt;zio-k8s&lt;&#x2F;a&gt; for writing operators.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>ZIO-AWS with ZIO Query</title>
        <published>2020-11-01T00:00:00+00:00</published>
        <updated>2020-11-01T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Daniel Vigovszky
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://blog.vigoo.dev/posts/zioaws-zioquery/"/>
        <id>https://blog.vigoo.dev/posts/zioaws-zioquery/</id>
        
        <content type="html" xml:base="https://blog.vigoo.dev/posts/zioaws-zioquery/">&lt;p&gt;A few years ago I wrote a &lt;a href=&quot;https:&#x2F;&#x2F;blog.vigoo.dev&#x2F;posts&#x2F;aws-rate-limits-prezidig&#x2F;&quot;&gt;post&lt;&#x2F;a&gt; about how I refactored one of our internal tools at &lt;a href=&quot;https:&#x2F;&#x2F;prezi.com&quot;&gt;Prezi&lt;&#x2F;a&gt;. This command line tool was able to discover a set of AWS resources and present them in a nice human readable way. The primary motivation at that time was to introduce circuit breaking to survive AWS API rate limits.&lt;&#x2F;p&gt;
&lt;p&gt;I have recently published a set of libraries, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;vigoo&#x2F;zio-aws&quot;&gt;&lt;strong&gt;zio-aws&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;, and thought it would be interesting to rewrite this tool on top of it, and use this opportunity to try out &lt;a href=&quot;https:&#x2F;&#x2F;zio.github.io&#x2F;zio-query&#x2F;&quot;&gt;&lt;strong&gt;ZIO Query&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; on a real-world example. In this post I&#x27;m going to show step by step how to build an efficient and easily extensible query tool with the help of &lt;em&gt;ZIO&lt;&#x2F;em&gt; libraries. The full source can be found &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;vigoo&#x2F;aws-query&quot;&gt;on GitHub&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-task&quot;&gt;The task&lt;&#x2F;h2&gt;
&lt;p&gt;The CLI tool we build will get an arbitrary string as an input, and search for it in various AWS resources. Once it has a match, it has to traverse a graph of these resources and finally pretty-print all the gathered information to the console.&lt;&#x2F;p&gt;
&lt;img src=&quot;&#x2F;images&#x2F;awsquery-1.png&quot;&#x2F;&gt;
&lt;p&gt;The provided input could mean any of the following:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;An &lt;strong&gt;EC2&lt;&#x2F;strong&gt; &lt;em&gt;instance ID&lt;&#x2F;em&gt;&lt;&#x2F;li&gt;
&lt;li&gt;An &lt;strong&gt;ELB&lt;&#x2F;strong&gt; (load balancer)&#x27;s &lt;em&gt;name&lt;&#x2F;em&gt;&lt;&#x2F;li&gt;
&lt;li&gt;An &lt;strong&gt;ElasticBeanstalk&lt;&#x2F;strong&gt; &lt;em&gt;environment name&lt;&#x2F;em&gt; or &lt;em&gt;ID&lt;&#x2F;em&gt;&lt;&#x2F;li&gt;
&lt;li&gt;An &lt;strong&gt;ElasticBeanstalk&lt;&#x2F;strong&gt; &lt;em&gt;application name&lt;&#x2F;em&gt;&lt;&#x2F;li&gt;
&lt;li&gt;An &lt;strong&gt;ASG&lt;&#x2F;strong&gt; (auto-scaling group) &lt;em&gt;ID&lt;&#x2F;em&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;For the level of detail to be reported I copied the original tool. This means finding all the related resources in the above sets (plus among &lt;em&gt;launch configurations&lt;&#x2F;em&gt;) but only include a single &lt;em&gt;EC2 instance&lt;&#x2F;em&gt; in the output if it was explicitly queried. So for example if the search term matches an &lt;em&gt;ELB&lt;&#x2F;em&gt; that belongs to an &lt;em&gt;ElasticBeanstalk environment&lt;&#x2F;em&gt;, the report will contain the &lt;em&gt;EB app&lt;&#x2F;em&gt; and all its other environments as well, but won&#x27;t show individual instances. This choice does not affect the design and could be easily changed or extended with additional resource types.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;aws-client&quot;&gt;AWS client&lt;&#x2F;h2&gt;
&lt;p&gt;For querying the above mentioned resources, we have to call four different AWS services. The &lt;code&gt;zio-aws&lt;&#x2F;code&gt; project adds a streaming ZIO wrapper for &lt;em&gt;all&lt;&#x2F;em&gt; the libraries in &lt;a href=&quot;https:&#x2F;&#x2F;docs.aws.amazon.com&#x2F;sdk-for-java&#x2F;v2&#x2F;developer-guide&#x2F;welcome.html&quot;&gt;AWS Java SDK v2&lt;&#x2F;a&gt;, each published as separate artifact:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span&gt;libraryDependencies ++= Seq(
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;io.github.vigoo&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt; %% &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;zio-aws-autoscaling&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt; % zioAwsVersion,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;io.github.vigoo&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt; %% &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;zio-aws-ec2&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt; % zioAwsVersion,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;io.github.vigoo&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt; %% &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;zio-aws-elasticloadbalancing&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt; % zioAwsVersion,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;io.github.vigoo&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt; %% &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;zio-aws-elasticbeanstalk&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt; % zioAwsVersion
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;io.github.vigoo&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt; %% &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;zio-aws-netty&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt; % zioAwsVersion,    
&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In addition to loading the necessary client libraries, we also need one of the &lt;em&gt;http implementations&lt;&#x2F;em&gt;, in this case I chose the default &lt;em&gt;Netty&lt;&#x2F;em&gt;. Other possibilities are &lt;em&gt;akka-http&lt;&#x2F;em&gt; and &lt;em&gt;http4s&lt;&#x2F;em&gt;. If your application already uses one of these for other HTTP communications you may want to use them to share their configuration and pools.&lt;&#x2F;p&gt;
&lt;p&gt;The client libraries have a &lt;code&gt;ZStream&lt;&#x2F;code&gt; API for all the operations that either support streaming (like for example S3 download&#x2F;upload) or pagination, and &lt;code&gt;ZIO&lt;&#x2F;code&gt; wrapper for non-streaming simple operations. Instead of using the Java SDK&#x27;s builders, the requests are described by &lt;em&gt;case classes&lt;&#x2F;em&gt;, and the &lt;em&gt;result&lt;&#x2F;em&gt; types have convenience accessors to handle the nullable results.&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s see some examples!&lt;&#x2F;p&gt;
&lt;p&gt;We can get information about &lt;em&gt;EB applications&lt;&#x2F;em&gt; with the &lt;em&gt;ElasticBeanstalk&lt;&#x2F;em&gt; API&#x27;s &lt;a href=&quot;https:&#x2F;&#x2F;docs.aws.amazon.com&#x2F;elasticbeanstalk&#x2F;latest&#x2F;api&#x2F;API_DescribeApplications.html&quot;&gt;&lt;code&gt;DescribeApplications&lt;&#x2F;code&gt; operation&lt;&#x2F;a&gt;. This is defined like the following in &lt;code&gt;zio-aws-elasticbeanstalk&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;describeApplications&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;request&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;DescribeApplicationsRequest&lt;&#x2F;span&gt;&lt;span&gt;): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ZIO&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ElasticBeanstalk&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;AwsError&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;DescribeApplicationsResponse&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ReadOnly&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;ApplicationName &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;String
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; DescribeApplicationsRequest&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;applicationNames&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Iterable&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ApplicationName&lt;&#x2F;span&gt;&lt;span&gt;]])
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; DescribeApplicationsResponse&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;applications &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Iterable&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ApplicationDescription&lt;&#x2F;span&gt;&lt;span&gt;]])
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;object&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; DescribeApplicationsResponse {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;trait&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; ReadOnly {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;editable&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: DescribeApplicationsResponse
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;applicationsValue&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: Option[List[ApplicationDescription.ReadOnly]]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;applications&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: ZIO[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Any&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;, AwsError, List[ApplicationDescription.ReadOnly]]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;A few things to notice here:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;The client function requires the &lt;code&gt;ElasticBeanstalk&lt;&#x2F;code&gt; module. We will see how to set up the dependencies in the &lt;em&gt;Putting all together&lt;&#x2F;em&gt; section.&lt;&#x2F;li&gt;
&lt;li&gt;The primitive types defined by the AWS schema are currently simple type aliases. In the future they will be probably replaced by &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;zio&#x2F;zio-prelude&quot;&gt;zio-prelude&lt;&#x2F;a&gt;&#x27;s &lt;em&gt;newtypes&lt;&#x2F;em&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;Each wrapper type has a &lt;code&gt;ReadOnly&lt;&#x2F;code&gt; trait and a &lt;em&gt;case class&lt;&#x2F;em&gt;. The case classes are used as input, and the read-only interfaces as outputs. This way the result provided by the Java SDK can be accessed directly and it only has to be rewrapped in the case class if it is passed to another call as input.&lt;&#x2F;li&gt;
&lt;li&gt;In many cases the AWS SDK describes fields as optional even if in normal circumstances it would never be &lt;code&gt;None&lt;&#x2F;code&gt;. To make it more convenient to work with these, the &lt;code&gt;ReadOnly&lt;&#x2F;code&gt; interface contains &lt;em&gt;accessor functions&lt;&#x2F;em&gt; which fail with &lt;code&gt;FieldIsNone&lt;&#x2F;code&gt; in case the field did not have any value. The pure optional values can be accessed with the &lt;code&gt;xxxValue&lt;&#x2F;code&gt; variants. See &lt;code&gt;applications&lt;&#x2F;code&gt; and &lt;code&gt;applicationsValue&lt;&#x2F;code&gt; in the above example.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;For operations support pagination, the wrapper functions return a stream. The actual first AWS call happens when the stream is first pulled. An example for this that we have to use in this application is the &lt;em&gt;EC2&lt;&#x2F;em&gt; API&#x27;s &lt;a href=&quot;https:&#x2F;&#x2F;docs.aws.amazon.com&#x2F;AWSEC2&#x2F;latest&#x2F;APIReference&#x2F;API_DescribeInstances.html&quot;&gt;&lt;code&gt;DescribeInstances&lt;&#x2F;code&gt; operation&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;describeInstances&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;request&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;DescribeInstancesRequest&lt;&#x2F;span&gt;&lt;span&gt;): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ZStream&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Ec2&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;AwsError&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Reservation&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ReadOnly&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The pagination can be controlled by setting the &lt;code&gt;MaxResults&lt;&#x2F;code&gt; property in &lt;code&gt;DescribeInstancesRequest&lt;&#x2F;code&gt;. For the user of the &lt;code&gt;describeInstances&lt;&#x2F;code&gt; function this is completely transparent, the returned stream will gather all the results, possibly by performing multiple AWS requests.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;queries&quot;&gt;Queries&lt;&#x2F;h2&gt;
&lt;p&gt;We could implement the resource discovery directly using the low level AWS wrappers described above, using ZIO&#x27;s tools to achieve concurrency. There are several things to consider though:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;We don&#x27;t know what resource we are looking for, so we should start multiple queries in parallel to find a match as soon as possible&lt;&#x2F;li&gt;
&lt;li&gt;Some queries return additional data that could be reused later. For example it is not possible to search for an ELB by a instance ID contained by it; for that we have to query &lt;em&gt;all&lt;&#x2F;em&gt; load balancers and check the members on client side.&lt;&#x2F;li&gt;
&lt;li&gt;There are AWS operations that support querying multiple entities, for example by providing a list of IDs to look for&lt;&#x2F;li&gt;
&lt;li&gt;We should minimize the number of calls to AWS, both for performance reasons, and to avoid getting rate limited&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;We can achieve all this by expressing our AWS queries with a higher level abstraction, delegating the execution to a library called &lt;a href=&quot;https:&#x2F;&#x2F;zio.github.io&#x2F;zio-query&#x2F;&quot;&gt;ZIO Query&lt;&#x2F;a&gt;. This library let us define composable &lt;em&gt;queries&lt;&#x2F;em&gt; to arbitrary &lt;em&gt;data sources&lt;&#x2F;em&gt;, and it automatically provides &lt;em&gt;pipelining&lt;&#x2F;em&gt;, &lt;em&gt;batching&lt;&#x2F;em&gt; and &lt;em&gt;caching&lt;&#x2F;em&gt;. A perfect match for the problem we have to solve here.&lt;&#x2F;p&gt;
&lt;p&gt;To be able to cache results that became available as a side effect of a query, we need a &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;zio&#x2F;zio-query&#x2F;pull&#x2F;105&quot;&gt;recent improvement&lt;&#x2F;a&gt; that is not published yet, so &lt;code&gt;aws-query&lt;&#x2F;code&gt; currently uses a snapshot release of &lt;code&gt;zio-query&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span&gt;libraryDependencies += &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;dev.zio&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt; %% &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;zio-query&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt; % &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;0.2.5+12-c41557f7-SNAPSHOT&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The first step is to define custom &lt;em&gt;data sources&lt;&#x2F;em&gt;. Data sources must implement a function &lt;code&gt;runAll&lt;&#x2F;code&gt; with the following signature:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;runAll&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;requests&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Chunk&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Chunk&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;]]): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ZIO&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;R&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Nothing&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;CompletedRequestMap&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Here &lt;code&gt;A&lt;&#x2F;code&gt; is the &lt;em&gt;request type&lt;&#x2F;em&gt; specific to a given data source (extending &lt;code&gt;Request[E, A]&lt;&#x2F;code&gt;, and the returned &lt;code&gt;CompletedRequestMap&lt;&#x2F;code&gt; will store an &lt;code&gt;Either[E, A]&lt;&#x2F;code&gt; result for each request. The two nested chunks model sequential and parallel execution: the requests in the inner chunks can be executed in parallel, while these batches contained by the outer chunk must be performed sequentially. In practice we won&#x27;t implement this method but use &lt;code&gt;DataSource.Batched&lt;&#x2F;code&gt; that is a simplified version that can perform requests in parallel but does not make further optimizations on the requests to be performed sequentially.&lt;&#x2F;p&gt;
&lt;p&gt;What should belong to one data source?  It could be a single data source for all the AWS queries, or one per service, or one per resource type. The best choice in this case is to have one for each resource type, for the following reasons:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;There are no opportunities to do any cross-resource-type caching. For example when we are querying EC2 instances, we won&#x27;t fetch auto scaling groups as a side effect.&lt;&#x2F;li&gt;
&lt;li&gt;If all requests are about the same data type, implementing the data source is much simpler&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Let&#x27;s see a simple example. EC2 instances can be queried by &lt;em&gt;instance ID&lt;&#x2F;em&gt; with the &lt;a href=&quot;https:&#x2F;&#x2F;docs.aws.amazon.com&#x2F;AWSEC2&#x2F;latest&#x2F;APIReference&#x2F;API_DescribeInstances.html&quot;&gt;&lt;code&gt;DescribeInstances&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; operation, and it supports querying for multiple IDs in a single request. We first define a &lt;em&gt;request type&lt;&#x2F;em&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; GetEc2Instance&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;InstanceId&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span&gt;Request[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;AwsError&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Instance&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ReadOnly&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Then the data source:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;ec2InstancesDataSource&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;DataSource&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Logging &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;with &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Ec2&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;GetEc2Instance&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= 
&lt;&#x2F;span&gt;&lt;span&gt;  DataSource.Batched.make(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;ec2&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;) { (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;requests&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Chunk&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;GetEc2Instance&lt;&#x2F;span&gt;&lt;span&gt;]) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;import&lt;&#x2F;span&gt;&lt;span&gt; AwsDataSource.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;result &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span&gt; ec2.describeInstances(DescribeInstancesRequest(instanceIds &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;Some(requests.map(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;.id))))
&lt;&#x2F;span&gt;&lt;span&gt;        .mapM(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;.instances)
&lt;&#x2F;span&gt;&lt;span&gt;        .flatMap(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;instances &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;ZStream.fromIterable(instances))
&lt;&#x2F;span&gt;&lt;span&gt;        .foldM(CompletedRequestMap.empty) { (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;resultMap&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;item&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;instanceId &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span&gt; item.instanceId
&lt;&#x2F;span&gt;&lt;span&gt;          } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;yield&lt;&#x2F;span&gt;&lt;span&gt; resultMap.insert(GetEc2Instance(instanceId))(Right(item))
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        .recordFailures(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;DescribeInstances&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, requests)
&lt;&#x2F;span&gt;&lt;span&gt;    } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;yield&lt;&#x2F;span&gt;&lt;span&gt; result
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Here &lt;code&gt;requests&lt;&#x2F;code&gt; holds a set of &lt;code&gt;GetEc2Instance&lt;&#x2F;code&gt; requests to be performed in parallel. We can simply do this by taking all the &lt;em&gt;instance IDs&lt;&#x2F;em&gt; from these requests and performing a single &lt;code&gt;describeInstances&lt;&#x2F;code&gt; AWS call. The result, as I explained before, is a &lt;code&gt;ZStream&lt;&#x2F;code&gt; of instances. We have to construct a &lt;code&gt;CompletedRequestMap&lt;&#x2F;code&gt; holding one entry for each request in &lt;code&gt;requests&lt;&#x2F;code&gt;. To do this we &lt;code&gt;foldM&lt;&#x2F;code&gt; the stream, using the &lt;code&gt;instanceId&lt;&#x2F;code&gt; accessor function to reconstruct the request value for each item in the result stream.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;code&gt;.recordFailures&lt;&#x2F;code&gt; function is a helper extension method defined in &lt;code&gt;AwsDataSource&lt;&#x2F;code&gt;. It catches all errors and produces a &lt;code&gt;CompletedRequestMap&lt;&#x2F;code&gt; where all requested items are recorded as failures:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;recordFailures&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;description&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;, 
&lt;&#x2F;span&gt;&lt;span&gt;                      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;requests&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Iterable&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Request&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;AwsError&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;]]): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ZIO&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;R&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Nothing&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;CompletedRequestMap&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span&gt;  f.catchAll { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;error &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    log.error(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;$description&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt; failed with &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;$error&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;) *&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;      ZIO.succeed {
&lt;&#x2F;span&gt;&lt;span&gt;        requests.foldLeft(CompletedRequestMap.empty) { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;resultMap&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;req&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;          resultMap.insert(req)(Left(error))
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;      }
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This is necessary because the data source requires a function of type &lt;code&gt;Chunk[A] =&amp;gt; ZIO[R, Nothing, CompletedRequestMap]&lt;&#x2F;code&gt; that cannot fail.&lt;&#x2F;p&gt;
&lt;p&gt;With the data source defined, we can define primitive &lt;em&gt;queries&lt;&#x2F;em&gt; on it:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;getEc2Instance&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;InstanceId&lt;&#x2F;span&gt;&lt;span&gt;): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ZQuery&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Logging &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;with &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Ec2&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;AwsError&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Instance&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ReadOnly&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span&gt;  ZQuery.fromRequest(GetEc2Instance(id))(ec2InstancesDataSource)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;A more complex example is &lt;code&gt;ebEnvDataSource&lt;&#x2F;code&gt;, the data source of &lt;em&gt;ElasticBeanstalk environments&lt;&#x2F;em&gt;. For this resource, we have different request types:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;sealed trait&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; EbEnvRequest&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span&gt;Request[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;AwsError&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; GetEnvironmentByName&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;EnvironmentName&lt;&#x2F;span&gt;&lt;span&gt;) 
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span&gt;EbEnvRequest[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;EnvironmentDescription&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ReadOnly&lt;&#x2F;span&gt;&lt;span&gt;]]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; GetEnvironmentById&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;EnvironmentId&lt;&#x2F;span&gt;&lt;span&gt;) 
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span&gt;EbEnvRequest[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;EnvironmentDescription&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ReadOnly&lt;&#x2F;span&gt;&lt;span&gt;]]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; GetEnvironmentByApplicationName&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ApplicationName&lt;&#x2F;span&gt;&lt;span&gt;) 
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span&gt;EbEnvRequest[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;EnvironmentDescription&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ReadOnly&lt;&#x2F;span&gt;&lt;span&gt;]]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In the data source implementation we get a &lt;code&gt;Chunk&lt;&#x2F;code&gt; of &lt;code&gt;EbEnvRequest&lt;&#x2F;code&gt; to be performed in parallel. We start it by separating it per request type:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;byName &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; requests.collect { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span&gt;GetEnvironmentByName(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; name }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;byId &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; requests.collect { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span&gt;GetEnvironmentById(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; id }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;byAppName &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; requests.collect { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span&gt;GetEnvironmentByApplicationName(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; name }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Then for each of these collections, if not empty, we can perform a &lt;code&gt;describeEnvironments&lt;&#x2F;code&gt; AWS call and then fold the result stream to create partial &lt;code&gt;CompletedRequestMap&lt;&#x2F;code&gt; values. What is interesting here is that if we already queried an environment by either name or id or it&#x27;s application name, we already know both its identifier and name, so we can store additional items in &lt;code&gt;CompletedRequestMap&lt;&#x2F;code&gt; that will be cached and reused in future queries. For example this is how the query by-id gets processed:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span&gt;resultMap &amp;lt;- elasticbeanstalk
&lt;&#x2F;span&gt;&lt;span&gt;  .describeEnvironments(DescribeEnvironmentsRequest(environmentIds &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;Some(byId)))
&lt;&#x2F;span&gt;&lt;span&gt;  .foldM(initialResultMap) { (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;resultMap&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;item&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span&gt; item.environmentName
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span&gt; item.environmentId
&lt;&#x2F;span&gt;&lt;span&gt;    } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;yield&lt;&#x2F;span&gt;&lt;span&gt; resultMap
&lt;&#x2F;span&gt;&lt;span&gt;        .insert(GetEnvironmentById(id))(Right(Some(item)))
&lt;&#x2F;span&gt;&lt;span&gt;        .insert(GetEnvironmentByName(name))(Right(Some(item)))
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;  .recordFailures(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;DescribeEnvironmentRequest(id)&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, byId.map(GetEnvironmentById))
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;For all three request types we describe the computation to create a partial &lt;code&gt;CompletedRequestMap&lt;&#x2F;code&gt; for them. Then we can implement the data source by executing these (maximum) three queries in parallel and combining the results:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span&gt;byNameResultMap
&lt;&#x2F;span&gt;&lt;span&gt;  .zipWithPar(byIdResultMap)(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt; ++ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  .zipWithPar(byAppNameResultMap)(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt; ++ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;There are some cases where being able to query &lt;em&gt;all&lt;&#x2F;em&gt; instances of a given resource is also a requirement. An example is &lt;em&gt;load balancers&lt;&#x2F;em&gt;, where the only way to find if an ELB contains a given &lt;em&gt;EC2 instance&lt;&#x2F;em&gt; is to query &lt;em&gt;all&lt;&#x2F;em&gt; ELBs and check their members. There are a few more cases that require a very similar implementation, so it makes sense extracting it to a common place. We define an &lt;code&gt;AllOrPerItem&lt;&#x2F;code&gt; trait that defines the specifics per use case:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;trait&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; AllOrPerItem&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;R&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Req&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Item&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: String
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;isGetAll&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;request&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: Req): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Boolean
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;isPerItem&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;request&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: Req): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Boolean
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;allReq&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: Req
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;itemToReq&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;item&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: Item): ZIO[R, AwsError, Req]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;getAll&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;(): ZStream[R, AwsError, Item]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;getSome&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;reqs&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: Set[Req]): ZStream[R, AwsError, Item]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;processAdditionalRequests&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;requests&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: Chunk[Req], 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;                                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;partialResult&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: CompletedRequestMap): ZIO[R, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Nothing&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;, CompletedRequestMap] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    ZIO.succeed(partialResult)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;By implementing these one-liners the actual data source implementation can be a shared code defined in &lt;code&gt;AllOrPerItem.make&lt;&#x2F;code&gt;. It&#x27;s very similar to the examples already seen. If any of the requests is the &lt;em&gt;get all request&lt;&#x2F;em&gt;, that&#x27;s the only thing to be performed, and all the result items will be cached. Otherwise a single batched request is made.&lt;&#x2F;p&gt;
&lt;p&gt;These primitive &lt;code&gt;ZQuery&lt;&#x2F;code&gt;s then can be composed to more complex queries. For example the following code:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;instance &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span&gt; ec2query.getEc2Instance(instanceId)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;imageId &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;- &lt;&#x2F;span&gt;&lt;span&gt;ZQuery.fromEffect(instance.imageId)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;imgElb &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;- &lt;&#x2F;span&gt;&lt;span&gt;(ec2query.getImage(imageId) &amp;lt;&amp;amp;&amp;gt; elbquery.loadBalancerOf(instanceId))
&lt;&#x2F;span&gt;&lt;span&gt;  (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;image&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;elb&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; imgElb
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;elbReport &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span&gt; optionally(elb)(getElbReport)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;result &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;yield&lt;&#x2F;span&gt;&lt;span&gt; result    
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This is part of the definition of a query of type &lt;code&gt;ZQuery[QueryEnv, AwsError, LinkedReport[Ec2InstanceKey, Ec2InstanceReport]]&lt;&#x2F;code&gt;. We will talk about &lt;code&gt;QueryEnv&lt;&#x2F;code&gt; and &lt;code&gt;LinkedReport&lt;&#x2F;code&gt; later, for now it&#x27;s enough to understand that this is a more complex query that provides an &lt;em&gt;EC2 instance report&lt;&#x2F;em&gt;; the data type that will be used to render the human-readable output. The query first gets an EC2 instance by &lt;em&gt;instance ID&lt;&#x2F;em&gt;. Then with &lt;code&gt;ZQuery.fromEffect&lt;&#x2F;code&gt; we lift a &lt;code&gt;ZIO&lt;&#x2F;code&gt; effect to the query. In this case this is a &lt;code&gt;zio-aws&lt;&#x2F;code&gt; &lt;em&gt;accessor function&lt;&#x2F;em&gt; that fails if &lt;code&gt;imageId&lt;&#x2F;code&gt; is &lt;code&gt;None&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;By this we express that we &lt;em&gt;expect&lt;&#x2F;em&gt; that &lt;code&gt;imageId&lt;&#x2F;code&gt; is always specified, and if not, we fail the &lt;em&gt;whole query&lt;&#x2F;em&gt;. Then we use &lt;code&gt;&amp;lt;&amp;amp;&amp;gt;&lt;&#x2F;code&gt; (it&#x27;s alias is &lt;code&gt;zipPar&lt;&#x2F;code&gt;) to perform two queries &lt;strong&gt;in parallel&lt;&#x2F;strong&gt;: getting an EC2 image and finding the load balancer containing the instance. Once both queries are finished, we optionally generate a &lt;em&gt;load balancer report&lt;&#x2F;em&gt; (if we have found an ELB link) and then we construct the result.&lt;&#x2F;p&gt;
&lt;p&gt;Here &lt;code&gt;optionally&lt;&#x2F;code&gt; is a simple helper function that makes our query more readable. It could have been written as &lt;code&gt;elb.fold(ZQuery.none)(getElbReport)&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Another useful combinator on &lt;code&gt;ZQuery&lt;&#x2F;code&gt; is &lt;code&gt;collectAllPar&lt;&#x2F;code&gt; that runs a subquery on each item of a collection in parallel:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;elbNames &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;- &lt;&#x2F;span&gt;&lt;span&gt;ZQuery.fromEffect(asg.loadBalancerNames)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;result &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;- &lt;&#x2F;span&gt;&lt;span&gt;ZQuery.collectAllPar(elbNames.map(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; elbquery.getLoadBalancer(name) &amp;gt;&amp;gt;= getElbReport))
&lt;&#x2F;span&gt;&lt;span&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;yield&lt;&#x2F;span&gt;&lt;span&gt; result
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;As I mentioned earlier, we have no way to know what resource we are looking for (in fact we could for example detect EC2 &lt;em&gt;instance IDs&lt;&#x2F;em&gt; by a pattern but let&#x27;s ignore that for now). So on top level we simply start _all the possible queries &lt;strong&gt;at once&lt;&#x2F;strong&gt; and let print all the non-failing ones:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;renderers &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;- &lt;&#x2F;span&gt;&lt;span&gt;ZQuery.collectAllPar(possibleQueries).run
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;- &lt;&#x2F;span&gt;&lt;span&gt;ZIO.foreach_(renderers.flatten)(identity)
&lt;&#x2F;span&gt;&lt;span&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;yield &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Where &lt;code&gt;possibleQueries&lt;&#x2F;code&gt; is a where we list all the queries we want to support, tied to the &lt;em&gt;renderer&lt;&#x2F;em&gt; to show it on the console.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;report-cache&quot;&gt;Report cache&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;em&gt;ZIO Query&lt;&#x2F;em&gt; solves caching and optimizes the requests on the AWS resource level, but we still have a problem. The queries form a cyclic graph. For example an &lt;em&gt;EC2 instance&lt;&#x2F;em&gt; holds a link to its &lt;em&gt;load balancer&lt;&#x2F;em&gt;, that holds a link to the &lt;em&gt;EB environment&lt;&#x2F;em&gt; it is defined in. The environment refers back to the ELB, and it also links to the &lt;em&gt;EB app&lt;&#x2F;em&gt; and the application has again links to all the &lt;em&gt;environments&lt;&#x2F;em&gt; it contains.&lt;&#x2F;p&gt;
&lt;p&gt;We want to collect all these resources exactly once, and there is a chance that parallel queries reach to the same resource. To solve this we can add an extra &lt;em&gt;caching layer&lt;&#x2F;em&gt; on top of &lt;em&gt;ZIO Query&lt;&#x2F;em&gt;. Let&#x27;s define this caching layer as a ZIO &lt;em&gt;module&lt;&#x2F;em&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;object&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; ReportCache {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;trait&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; Service {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;storeIfNew&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;[A &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Report](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;reportKey&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: ReportKey, 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;                                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;query&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: ZQuery[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Any&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;, AwsError, A]): ZQuery[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Any&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;, AwsError, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Boolean&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;retrieve&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;[A &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Report](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;key&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: ReportKey): ZIO[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Any&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;, AwsError, Option[A]]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;code&gt;storeIfNew&lt;&#x2F;code&gt; function is a &lt;em&gt;query&lt;&#x2F;em&gt;, to be used in high level queries to shortcut cycles in case a given report is already stored in the cache. We can define a helper function &lt;code&gt;cached&lt;&#x2F;code&gt; like the following:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;protected def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;cached&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;R &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ReportCache &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;with &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Logging&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;B &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Report&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;K &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ReportKey&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;  (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;input&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;keyFn&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;A &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ZIO&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Any&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;AwsError&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;K&lt;&#x2F;span&gt;&lt;span&gt;])
&lt;&#x2F;span&gt;&lt;span&gt;  (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;query&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;K &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ZQuery&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;R&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;AwsError&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;B&lt;&#x2F;span&gt;&lt;span&gt;]): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ZQuery&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;R&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;AwsError&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;LinkedReport&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;K&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;B&lt;&#x2F;span&gt;&lt;span&gt;]] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;key &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;- &lt;&#x2F;span&gt;&lt;span&gt;ZQuery.fromEffect(keyFn(input))
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;env &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;- &lt;&#x2F;span&gt;&lt;span&gt;ZQuery.environment[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;R&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span&gt; storeIfNew(
&lt;&#x2F;span&gt;&lt;span&gt;      key,
&lt;&#x2F;span&gt;&lt;span&gt;      query(key).provide(env ? &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;provided environment&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    )
&lt;&#x2F;span&gt;&lt;span&gt;  } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;yield &lt;&#x2F;span&gt;&lt;span&gt;LinkedReport[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;K&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;B&lt;&#x2F;span&gt;&lt;span&gt;](key)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Then we can use it in queries like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;getEbAppReport&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ApplicationName&lt;&#x2F;span&gt;&lt;span&gt;): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ZQuery&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;QueryEnv&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;AwsError&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;LinkedReport&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;EbAppKey&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;EbAppReport&lt;&#x2F;span&gt;&lt;span&gt;]] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span&gt;  cached(name)(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;ZIO.succeed(EbAppKey(name))) { (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;key&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;EbAppKey&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Let&#x27;s see in detail how this works!&lt;&#x2F;p&gt;
&lt;p&gt;First of all, we define the following types:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;final case class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; LinkedReport&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;K &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ReportKey&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;R &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Report&lt;&#x2F;span&gt;&lt;span&gt;](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;key&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;K&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;sealed trait&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; ReportKey
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;final case class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; Ec2InstanceKey&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;instanceId&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;InstanceId&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span&gt;ReportKey
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;sealed trait&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; Report
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;final case class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; Ec2InstanceReport&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;instanceId&lt;&#x2F;span&gt;&lt;span&gt;: ec2.model.primitives.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;InstanceId&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                                   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;                                   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;elb&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;LinkedReport&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ElbKey&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ElbReport&lt;&#x2F;span&gt;&lt;span&gt;]]
&lt;&#x2F;span&gt;&lt;span&gt;                                  ) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span&gt;Report
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In &lt;code&gt;cached&lt;&#x2F;code&gt;, we provide a &lt;code&gt;keyFn&lt;&#x2F;code&gt; that is an effectful function to extract the &lt;code&gt;ReportKey&lt;&#x2F;code&gt; from the arbitrary input that can be the key itself, or an already fetched resource. Then we call the &lt;code&gt;ReportCache&lt;&#x2F;code&gt; module&#x27;s &lt;code&gt;storeIfNew&lt;&#x2F;code&gt; query and return a &lt;code&gt;LinkedReport&lt;&#x2F;code&gt;. A &lt;em&gt;linked report&lt;&#x2F;em&gt; is just a wrapper around a report key, it is the type to be used in &lt;code&gt;Report&lt;&#x2F;code&gt; types to refer to each other. We store the cyclic resource graph by using these report keys and the cache&#x27;s &lt;code&gt;retrieve&lt;&#x2F;code&gt; function to resolve the references on demand.&lt;&#x2F;p&gt;
&lt;p&gt;One thing to notice is the &lt;code&gt;.provide&lt;&#x2F;code&gt; in the code of &lt;code&gt;cached&lt;&#x2F;code&gt;. The report cache does not know about the environments needed for the queries it caches the results of; the &lt;code&gt;query&lt;&#x2F;code&gt; parameter of &lt;code&gt;storeIfNew&lt;&#x2F;code&gt; has the type &lt;code&gt;ZQuery[Any, AwsError, A]&lt;&#x2F;code&gt;. For this reason &lt;code&gt;cached&lt;&#x2F;code&gt; eliminates the environment of its inner query by getting it and calling &lt;code&gt;.provide(env)&lt;&#x2F;code&gt; before passing it to the cache.&lt;&#x2F;p&gt;
&lt;p&gt;The report cache itself can be implemented with &lt;a href=&quot;https:&#x2F;&#x2F;zio.dev&#x2F;docs&#x2F;datatypes&#x2F;datatypes_stm&quot;&gt;&lt;em&gt;STM&lt;&#x2F;em&gt;&lt;&#x2F;a&gt;. First we create a &lt;a href=&quot;https:&#x2F;&#x2F;zio.dev&#x2F;docs&#x2F;datatypes&#x2F;datatypes_tmap&quot;&gt;&lt;code&gt;TMap&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span&gt;cache &amp;lt;- TMap.empty[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ReportKey&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Promise&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;AwsError&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Report&lt;&#x2F;span&gt;&lt;span&gt;]].commit
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We want to store the fact that a query &lt;em&gt;has been started&lt;&#x2F;em&gt; for a given report key. This can be modelled with a &lt;code&gt;Promise&lt;&#x2F;code&gt; that eventually gets a &lt;code&gt;Report&lt;&#x2F;code&gt; value. With this &lt;code&gt;TMap&lt;&#x2F;code&gt; structure, the &lt;code&gt;storeIfNew&lt;&#x2F;code&gt; function can be defined as:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;override def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;storeIfNew&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;A &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Report&lt;&#x2F;span&gt;&lt;span&gt;](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;reportKey&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ReportKey&lt;&#x2F;span&gt;&lt;span&gt;, 
&lt;&#x2F;span&gt;&lt;span&gt;                                     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;query&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ZQuery&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Any&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;AwsError&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;]): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ZQuery&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Any&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;AwsError&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Boolean&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span&gt;  ZQuery.fromEffect {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;promise &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;- &lt;&#x2F;span&gt;&lt;span&gt;Promise.make[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;AwsError&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Report&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;finalQuery &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span&gt; cache.get(reportKey).flatMap {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span&gt;Some(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;report&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; replacing the query with the cached value
&lt;&#x2F;span&gt;&lt;span&gt;          ZSTM.succeed(ZQuery.succeed(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span&gt;None &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; replacing the query with the cached value
&lt;&#x2F;span&gt;&lt;span&gt;          cache.put(reportKey, promise).map { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;            query.foldM(
&lt;&#x2F;span&gt;&lt;span&gt;              &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;failure &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;ZQuery.fromEffect(promise.fail(failure)) *&amp;gt; ZQuery.fail(failure),
&lt;&#x2F;span&gt;&lt;span&gt;              &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;success &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;ZQuery.fromEffect(promise.succeed(success))
&lt;&#x2F;span&gt;&lt;span&gt;            )
&lt;&#x2F;span&gt;&lt;span&gt;          }
&lt;&#x2F;span&gt;&lt;span&gt;      }.commit
&lt;&#x2F;span&gt;&lt;span&gt;    } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;yield&lt;&#x2F;span&gt;&lt;span&gt; finalQuery
&lt;&#x2F;span&gt;&lt;span&gt;  }.flatMap(identity)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This may seem simple but actually we are combining three different layers of abstraction here!&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;The whole thing is a &lt;em&gt;query&lt;&#x2F;em&gt;. But we first run a &lt;em&gt;ZIO effect&lt;&#x2F;em&gt; that &lt;strong&gt;produces&lt;&#x2F;strong&gt; a query, and then execute that result query (in &lt;code&gt;.flatMap(identity)&lt;&#x2F;code&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;In the effect we create a promise that might be used or not, depending on the outcome of the transaction. Then we do &lt;code&gt;cache.get&lt;&#x2F;code&gt; which is an &lt;em&gt;STM transaction&lt;&#x2F;em&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;In the transaction we produce a &lt;code&gt;ZQuery&lt;&#x2F;code&gt; value that is either returning a simple &lt;code&gt;false&lt;&#x2F;code&gt; value if the report was already cached, or we store the already created promise in the map and return the query that constructs the report as the &lt;em&gt;result&lt;&#x2F;em&gt; of the transaction.&lt;&#x2F;li&gt;
&lt;li&gt;As it is an &lt;em&gt;STM transaction&lt;&#x2F;em&gt; it may be retried multiple times but eventually it returns with a query that is either a NOP or calculates the &lt;em&gt;report&lt;&#x2F;em&gt; &lt;strong&gt;and&lt;&#x2F;strong&gt; sets the promise in the end.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The other function of &lt;code&gt;ReportCache&lt;&#x2F;code&gt;, &lt;code&gt;retrieve&lt;&#x2F;code&gt; will be used when traversing the gathered &lt;em&gt;reports&lt;&#x2F;em&gt; to follow the &lt;code&gt;LinkedReport&lt;&#x2F;code&gt; links. It is simply a combination of getting an item from the &lt;code&gt;TMap&lt;&#x2F;code&gt; and then waiting for the stored promise.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;throttling&quot;&gt;Throttling&lt;&#x2F;h2&gt;
&lt;p&gt;The original implementation of this tool did not control the amount and rate of AWS requests in any way, and a few years ago API rate limits made it somewhat unusable. As I explained &lt;a href=&quot;https:&#x2F;&#x2F;blog.vigoo.dev&#x2F;posts&#x2F;aws-rate-limits-prezidig&#x2F;&quot;&gt;in a previous post&lt;&#x2F;a&gt;, I solved it by centralizing the calls to AWS then adding &lt;em&gt;circuit breaking and retry&lt;&#x2F;em&gt; to handle the &lt;em&gt;throttling errors&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;In this new implementation &lt;em&gt;ZIO Query&lt;&#x2F;em&gt; &#x27;s batching feature already reduces the load but AWS has a global rate limit that can be reached any time, regardless of the actual request rate provided by this application. So how could we handle this with &lt;code&gt;zio-aws&lt;&#x2F;code&gt; and ZIO Query?&lt;&#x2F;p&gt;
&lt;p&gt;There is useful ZIO library called &lt;a href=&quot;https:&#x2F;&#x2F;www.vroste.nl&#x2F;rezilience&#x2F;&quot;&gt;rezilience&lt;&#x2F;a&gt; that defines utilities to express circuit breaking, retries, rate limiting and other similar policies. With this library we can create a policy that detects &lt;code&gt;AwsError&lt;&#x2F;code&gt;s representing throttling failures:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;private def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;throttlingPolicy&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ZManaged&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Random &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;with &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Clock &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;with &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Logging&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Nothing&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Policy&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;AwsError&lt;&#x2F;span&gt;&lt;span&gt;]] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;cb &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;- &lt;&#x2F;span&gt;&lt;span&gt;CircuitBreaker.make[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;AwsError&lt;&#x2F;span&gt;&lt;span&gt;](
&lt;&#x2F;span&gt;&lt;span&gt;      trippingStrategy &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;TrippingStrategy.failureCount(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;      resetPolicy &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;Retry.Schedules.exponentialBackoff(min &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;.second, max &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;.minute),
&lt;&#x2F;span&gt;&lt;span&gt;      isFailure &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span&gt;GenericAwsError(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;AwsServiceException&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; error.isThrottlingException &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;true
&lt;&#x2F;span&gt;&lt;span&gt;      }
&lt;&#x2F;span&gt;&lt;span&gt;    )
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;retry &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;- &lt;&#x2F;span&gt;&lt;span&gt;Retry.make(min &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;.second, max &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;.minute)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;retryComposable &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; retry.widen[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;PolicyError&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;AwsError&lt;&#x2F;span&gt;&lt;span&gt;]] { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span&gt;Policy.WrappedError(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;e&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; e }
&lt;&#x2F;span&gt;&lt;span&gt;  } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;yield&lt;&#x2F;span&gt;&lt;span&gt; cb.toPolicy compose retryComposable.toPolicy
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This will open a circuit breaker in case of throttling errors, and retry the operation with exponential back-off.&lt;&#x2F;p&gt;
&lt;p&gt;These policies can be applied to &lt;code&gt;ZIO&lt;&#x2F;code&gt; effects. What we really need is to apply a policy like this to &lt;em&gt;all&lt;&#x2F;em&gt; AWS call. It should be the actual call to the underlying &lt;em&gt;AWS Java SDK&lt;&#x2F;em&gt;, not on the &lt;code&gt;zio-aws&lt;&#x2F;code&gt; wrapper level, because for example a streaming API function may produce multiple AWS requests.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;code&gt;zio-aws&lt;&#x2F;code&gt; library supports applying &lt;code&gt;AwsCallAspect&lt;&#x2F;code&gt;s on the &lt;em&gt;AWS service client layers&lt;&#x2F;em&gt; to modify the underlying SDK calls. This is exactly what we need to apply the throttling policy to all calls! What&#x27;s even better, by creating a single &lt;code&gt;throttlingPolicy&lt;&#x2F;code&gt; and applying it to all the service layers (&lt;code&gt;ec2&lt;&#x2F;code&gt;, &lt;code&gt;elasticloadbalancing&lt;&#x2F;code&gt;, &lt;code&gt;elasticbeanstalk&lt;&#x2F;code&gt; and &lt;code&gt;autoscaling&lt;&#x2F;code&gt;) they will share a common circuit breaker that matches the situation perfectly as the AWS API rate limiting is applied to globally to all services.&lt;&#x2F;p&gt;
&lt;p&gt;An AWS call aspect has the following form:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;throttling &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;AwsCallAspect&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Any&lt;&#x2F;span&gt;&lt;span&gt;] {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;override def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;apply&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;R1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ZIO&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;R1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;AwsError&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Described&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;]]): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ZIO&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;R1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;AwsError&lt;&#x2F;span&gt;&lt;span&gt;, aspects.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Described&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;]] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span&gt;    policy(f).mapError {
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span&gt;Policy.WrappedError(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;e&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; e
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span&gt;Policy.BulkheadRejection &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;AwsError.fromThrowable(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RuntimeException&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;Bulkhead rejection&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span&gt;Policy.CircuitBreakerOpen &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;AwsError.fromThrowable(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RuntimeException&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;AWS rate limit exceeded&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;      }
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Another simple example could be logging all AWS requests:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;callLogging&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;AwsCallAspect&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Logging&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;AwsCallAspect&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Logging&lt;&#x2F;span&gt;&lt;span&gt;] {
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;override final def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;apply&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;R1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Logging&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ZIO&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;R1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;AwsError&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Described&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;]]): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ZIO&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;R1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;AwsError&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Described&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;]] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span&gt;     f.flatMap { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;@&lt;&#x2F;span&gt;&lt;span&gt;Described(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;description&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;       log.info(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;[${&lt;&#x2F;span&gt;&lt;span&gt;description.service&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;}&#x2F;${&lt;&#x2F;span&gt;&lt;span&gt;description.operation&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;}]&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;).as(r)
&lt;&#x2F;span&gt;&lt;span&gt;     }
&lt;&#x2F;span&gt;&lt;span&gt; }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;These aspects can be applied to a &lt;code&gt;zio-aws&lt;&#x2F;code&gt; &lt;code&gt;ZLayer&lt;&#x2F;code&gt; directly, such as:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span&gt;ec2.live @@ (throttling &amp;gt;&amp;gt;&amp;gt; callLogging)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;rendering&quot;&gt;Rendering&lt;&#x2F;h2&gt;
&lt;p&gt;With the queries and report cache ready the last missing building block is &lt;em&gt;rendering&lt;&#x2F;em&gt; the gathered reports. We implement it in its own ZIO module with the following interface:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;object&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; Rendering {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;trait&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; Service {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;renderEc2Instance&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;report&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: LinkedReport[Ec2InstanceKey, Ec2InstanceReport]): UIO[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Unit&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;renderElb&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;report&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: LinkedReport[ElbKey, ElbReport], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;context&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: Option[String]): UIO[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Unit&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;renderAsg&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;report&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: LinkedReport[AsgKey, AsgReport]): UIO[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Unit&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;renderEbEnv&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;report&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: LinkedReport[EbEnvKey, EbEnvReport]): UIO[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Unit&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;renderEbApp&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;report&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: LinkedReport[EbAppKey, EbAppReport]): UIO[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Unit&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The live implementation of course needs access to &lt;code&gt;ReportCache&lt;&#x2F;code&gt; and writes the report out to &lt;code&gt;Console&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;live&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ZLayer&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Console &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;with &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ReportCache&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Nothing&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Rendering&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We need two main things to implement report rendering:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;A way to pretty-print reports to the console&lt;&#x2F;li&gt;
&lt;li&gt;We have to track which report was already rendered to be able to traverse the cyclic result graph&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;To track the already printed reports we can simply create a &lt;code&gt;Ref&lt;&#x2F;code&gt; holding a set of visited &lt;code&gt;ReportKey&lt;&#x2F;code&gt;s:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;private case class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; State&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;alreadyVisited&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Set&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ReportKey&lt;&#x2F;span&gt;&lt;span&gt;])
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;alreadyVisited &amp;lt;- Ref.make(State(Set.empty))
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;For pretty printing the reports there are several possibilities. Eventually we want to call &lt;code&gt;console.putStr&lt;&#x2F;code&gt; to write to the console. The original implementation of this tool used a string templating engine to define the output. Instead of doing that we can write a pretty-printing DSL to define our output in Scala. Take a look at the following example:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span&gt;ifNotVisitedYet(report) { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;env &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  sectionHeader(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;Beanstalk&#x2F;Env&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;) &amp;lt;-&amp;gt; highlighted(env.name) &amp;lt;-&amp;gt; 
&lt;&#x2F;span&gt;&lt;span&gt;    details(env.id) &amp;lt;-&amp;gt; 
&lt;&#x2F;span&gt;&lt;span&gt;    normal(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;is a Beanstalk environment of the application ${&lt;&#x2F;span&gt;&lt;span&gt;env.appName&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;}&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;) \\
&lt;&#x2F;span&gt;&lt;span&gt;  indented {
&lt;&#x2F;span&gt;&lt;span&gt;    keyword(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;AWS Console&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;) &amp;lt;:&amp;gt; 
&lt;&#x2F;span&gt;&lt;span&gt;      link(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;https:&#x2F;&#x2F;console.aws.amazon.com&#x2F;elasticbeanstalk&#x2F;home?region=${&lt;&#x2F;span&gt;&lt;span&gt;env.region&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;}#&#x2F;environment&#x2F;dashboard?applicationName=${&lt;&#x2F;span&gt;&lt;span&gt;env.appName&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;}&amp;amp;environmentId=${&lt;&#x2F;span&gt;&lt;span&gt;env.id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;}&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;) \\
&lt;&#x2F;span&gt;&lt;span&gt;    keyword(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;Health&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;) &amp;lt;:&amp;gt; highlighted(env.health.toString) \\
&lt;&#x2F;span&gt;&lt;span&gt;    keyword(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;Currently running version&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;) &amp;lt;:&amp;gt; normal(env.version) \\
&lt;&#x2F;span&gt;&lt;span&gt;    normal(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;${&lt;&#x2F;span&gt;&lt;span&gt;env.asgs.size&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;} ASGs, ${&lt;&#x2F;span&gt;&lt;span&gt;env.instanceCount&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;} instances, ${&lt;&#x2F;span&gt;&lt;span&gt;env.elbs.size&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;} ELBs&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;) \\
&lt;&#x2F;span&gt;&lt;span&gt;    env.elbs.foreach_(elb(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;, None)) \\
&lt;&#x2F;span&gt;&lt;span&gt;    env.asgs.foreach_(asg) \\
&lt;&#x2F;span&gt;&lt;span&gt;    ebApp(env.app)
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We can see here a couple of functions and operators, all created to the specific task of printing &lt;em&gt;AWS resource reports&lt;&#x2F;em&gt;:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ifNotYetVisitedYet&lt;&#x2F;code&gt; must somehow interact with the &lt;code&gt;Ref&lt;&#x2F;code&gt; we defined above&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;-&amp;gt;&lt;&#x2F;code&gt; concatenates two texts with a space&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;:&amp;gt;&lt;&#x2F;code&gt; concatenates two texts with a colon and a space&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;\\&lt;&#x2F;code&gt; concatenates two texts with a newline&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;keyword&lt;&#x2F;code&gt;, &lt;code&gt;link&lt;&#x2F;code&gt;, &lt;code&gt;normal&lt;&#x2F;code&gt;, &lt;code&gt;highlighted&lt;&#x2F;code&gt; etc. add styling to the given text&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;foreach_&lt;&#x2F;code&gt; is coming from &lt;code&gt;zio-prelude&lt;&#x2F;code&gt;-s &lt;code&gt;Traversable&lt;&#x2F;code&gt;. We will see why is it used soon.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;We could define these styling functions as &lt;code&gt;ZIO&lt;&#x2F;code&gt; effects and the helper operators as general extension methods on &lt;code&gt;ZIO&lt;&#x2F;code&gt;. Then we could store required state (for example for indentation) in a &lt;code&gt;Ref&lt;&#x2F;code&gt; for example. This works but we can do better. By defining our own monadic data type &lt;code&gt;Print[A]&lt;&#x2F;code&gt; we get the following advantages:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;It is more type safe. The pretty printing operators will be only applicable to pretty printing functions, not to arbitrary ZIO effects&lt;&#x2F;li&gt;
&lt;li&gt;Pretty printing state gets completely hidden from the pretty printing definitions&lt;&#x2F;li&gt;
&lt;li&gt;We can easily do some optimizations such as collapsing multiple newlines into one, which makes rendering optional lines more convenient&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;So let&#x27;s define a data type to represent pretty printing:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;sealed trait&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; Print&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;final case class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; PrintPure&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span&gt;Print[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;final case class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; PrintS&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span&gt;Print[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Unit&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;final case class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; PrintModified&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;modifiers&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span&gt;Print[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Unit&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;final case object&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; PrintNL &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span&gt;Print[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Unit&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;final case class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; PrintIndented&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;p&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Print&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;]) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span&gt;Print[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;final case class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; PrintFlatMap&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;B&lt;&#x2F;span&gt;&lt;span&gt;](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Print&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;A &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Print&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;B&lt;&#x2F;span&gt;&lt;span&gt;]) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span&gt;Print[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;B&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;final case class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; PrintEffect&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;UIO&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;]) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span&gt;Print[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;PrintPure&lt;&#x2F;code&gt; and &lt;code&gt;PrintFlatMap&lt;&#x2F;code&gt; can be used to implement &lt;code&gt;zio-prelude&lt;&#x2F;code&gt;s type classes:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;implicit val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;print &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Covariant&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Print&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;with &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;IdentityFlatten&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Print&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;with &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;IdentityBoth&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Print&lt;&#x2F;span&gt;&lt;span&gt;] {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;override def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;B&lt;&#x2F;span&gt;&lt;span&gt;](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;A &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;B&lt;&#x2F;span&gt;&lt;span&gt;): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Print&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Print&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;B&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= 
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;fa &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;PrintFlatMap(fa, (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;PrintPure(f(a)))
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;override def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;any&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Print&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Any&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span&gt;    PrintPure(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;override def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;flatten&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;ffa&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Print&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Print&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;]]): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Print&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= 
&lt;&#x2F;span&gt;&lt;span&gt;    PrintFlatMap(ffa, (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;fa&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Print&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;]) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; fa)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;override def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;both&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;B&lt;&#x2F;span&gt;&lt;span&gt;](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;fa&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Print&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;fb&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Print&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;B&lt;&#x2F;span&gt;&lt;span&gt;]): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Print&lt;&#x2F;span&gt;&lt;span&gt;[(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;B&lt;&#x2F;span&gt;&lt;span&gt;)] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= 
&lt;&#x2F;span&gt;&lt;span&gt;    PrintFlatMap(fa, (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; map((&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;B&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;(a, b))(fb))
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;What are these type classes providing to us?&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Covariant&lt;&#x2F;code&gt; basically gives us &lt;code&gt;map&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;IdentityFlatten&lt;&#x2F;code&gt; means that the data type can be &quot;flattened&quot; associatively and has an identity element. This gives us &lt;code&gt;flatten&lt;&#x2F;code&gt; and &lt;code&gt;flatMap&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;IdentityBoth&lt;&#x2F;code&gt; means we have an associative binary operator to combine two values. This enables syntax like &lt;code&gt;&amp;lt;*&amp;gt;&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Having this we can define primitive pretty printing operators like:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;normal&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;text&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Print&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Unit&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;PrintS(text)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;space&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Print&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Unit&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;PrintS(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot; &amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;implicit class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; PrintOps&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Print&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;]) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;&amp;lt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;[B](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;next&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Print[B]): Print[B] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    self *&amp;gt; space *&amp;gt; next
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Then we can use the syntax provided by &lt;code&gt;zio-prelude&lt;&#x2F;code&gt; to compose these pretty printer values. The only thing remaining is to provide a transformation of &lt;code&gt;Print[A]&lt;&#x2F;code&gt; to &lt;code&gt;UIO[A]&lt;&#x2F;code&gt;. This is where we can hide the pretty printer state and can handle special rules like collapsing newlines:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;private trait&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; PrettyConsole {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;protected val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;console&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: Console.Service
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;private case class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; PrettyState(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;indentation&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: String, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;afterNL&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Boolean&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;private def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;printFlatMap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;[A, B](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: Print[A], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: A &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Print[B], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;state&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: PrettyState): UIO[(B, PrettyState)] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;r1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; runImpl(a, state)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;r2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; runImpl(f(r1._1), r1._2)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;yield&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; r2
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;private def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;runImpl&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;[A](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;p&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: Print[A], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;state&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: PrettyState): UIO[(A, PrettyState)] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    p &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;match &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;PrintPure(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ZIO.succeed((a, state))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;PrintS(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ZIO.when(state.afterNL)(console.putStr(state.indentation)) *&amp;gt; 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;        console.putStr(s).as(((), state.copy(afterNL &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;false)))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;PrintModified(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;modifiers&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ZIO.when(state.afterNL)(console.putStr(state.indentation)) *&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;        console.putStr(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;modifiers&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;$s$RESET&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;).as(((), state.copy(afterNL &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;false)))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;PrintNL &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;(state.afterNL) ZIO.succeed(((), state)) 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;else&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; console.putStrLn(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;).as(((), state.copy(afterNL &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;true)))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;PrintIndented(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; runImpl(f, state.copy(indentation &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; state.indentation + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;)).map { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;          (a, s.copy(indentation &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; state.indentation)) }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;PrintFlatMap(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; printFlatMap(a, f, state)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;PrintEffect(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; f.map((&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;, state))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;run&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;[A](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;p&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: Print[A]): UIO[A] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; runImpl(p, PrettyState(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;, afterNL &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;false)).map(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;._1)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;A couple of things to notice here:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;PrettyState&lt;&#x2F;code&gt; holds the indentation and a flag that is true when the last print was a &lt;em&gt;new line&lt;&#x2F;em&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;runImpl&lt;&#x2F;code&gt; gets the state as input and has the capability to modify it, by returning the modified state together with the computation&#x27;s result&lt;&#x2F;li&gt;
&lt;li&gt;there is a &lt;code&gt;PrintEffect&lt;&#x2F;code&gt; constructor that allows lifting arbitrary &lt;code&gt;ZIO&lt;&#x2F;code&gt; effects to the pretty printer. This is needed for interacting with the &lt;code&gt;Ref&lt;&#x2F;code&gt; that holds the record of already printed reports.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;putting-all-together&quot;&gt;Putting all together&lt;&#x2F;h2&gt;
&lt;p&gt;Putting all this together means getting command line arguments, setting up the AWS client libraries, the report cache and the rendering modules and running the top level queries.&lt;&#x2F;p&gt;
&lt;p&gt;To parse the command line arguments we can use my &lt;a href=&quot;https:&#x2F;&#x2F;vigoo.github.io&#x2F;clipp&#x2F;docs&#x2F;&quot;&gt;clipp library&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;final case class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; Parameters&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;verbose&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Boolean&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;searchInput&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;region&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;paramSpec &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= for &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span&gt; metadata(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;aws-query&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;search for AWS infrastructure resources&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;verbose &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span&gt; flag(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;Verbose logging&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;&amp;#39;v&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;verbose&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;searchInput &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span&gt; parameter[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;Search input&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;NAME_OR_ID&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;region &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span&gt; optional { namedParameter[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;AWS region&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;REGION&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;region&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;) }
&lt;&#x2F;span&gt;&lt;span&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;yield &lt;&#x2F;span&gt;&lt;span&gt;Parameters(verbose, searchInput, region.getOrElse(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;us-east-1&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;params &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; clipp.zioapi.config.fromArgsWithUsageInfo(args, paramSpec)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;code&gt;verbose&lt;&#x2F;code&gt; flag is used to set up logging. We use &lt;a href=&quot;https:&#x2F;&#x2F;zio.github.io&#x2F;zio-logging&#x2F;&quot;&gt;zio-logging&lt;&#x2F;a&gt; with SLF4j support (to be able to see logs from the underlying AWS Java SDK) with lo4j2 backend. In order to control the log level by the command line &lt;code&gt;verbose&lt;&#x2F;code&gt; flag, instead of the usual XML-based configuration for log4j2 we define a ZIO &lt;em&gt;layer&lt;&#x2F;em&gt; that&#x27;s only purpose is to perform the configuration programmatically:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;private def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;log4j2Configuration&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ZLayer&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Has&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ClippConfig&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Service&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Parameters&lt;&#x2F;span&gt;&lt;span&gt;]], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Throwable&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Has&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Log4jConfiguration&lt;&#x2F;span&gt;&lt;span&gt;]] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  ZLayer.fromServiceM[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ClippConfig&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Service&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Parameters&lt;&#x2F;span&gt;&lt;span&gt;], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Any&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Throwable&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Log4jConfiguration&lt;&#x2F;span&gt;&lt;span&gt;] { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;params &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    ZIO.effect {
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;builder &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;ConfigurationBuilderFactory.newConfigurationBuilder()       
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;      Configurator.initialize(builder.build())
&lt;&#x2F;span&gt;&lt;span&gt;      Log4jConfiguration()
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This way the root logger&#x27;s level can depend on the &lt;code&gt;Parameters&lt;&#x2F;code&gt; parsed by &lt;code&gt;clipp&lt;&#x2F;code&gt;. Composing this layer with &lt;code&gt;zio-logger&lt;&#x2F;code&gt;s &lt;code&gt;Slf4jLogger&lt;&#x2F;code&gt; gives us a working &lt;code&gt;Logging&lt;&#x2F;code&gt; layer:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;logging &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; log4j2Configuration &amp;gt;+&amp;gt; Slf4jLogger.make { (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;message&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; message }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;By bootstrapping the parameters and the logging we can run our main application like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;result &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span&gt; awsQuery()
&lt;&#x2F;span&gt;&lt;span&gt;    .provideCustomLayer(params &amp;gt;+&amp;gt; logging)
&lt;&#x2F;span&gt;&lt;span&gt;    .catchAll { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;ZIO.succeed(ExitCode.failure) }
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;- &lt;&#x2F;span&gt;&lt;span&gt;ZIO.effect(LogManager.shutdown()).orDie
&lt;&#x2F;span&gt;&lt;span&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;yield&lt;&#x2F;span&gt;&lt;span&gt; result
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;code&gt;clipp&lt;&#x2F;code&gt; parser will print detailed usage info in case it fails, and other runtime errors are logged, so we can simply catch all errors and exit with a failure on top level.&lt;&#x2F;p&gt;
&lt;p&gt;In &lt;code&gt;awsQuery&lt;&#x2F;code&gt; we create all the other layers necessary for running the queries. First we need to create the &lt;em&gt;throttling policy&lt;&#x2F;em&gt; that is used by all the AWS service clients as I explained above:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;private def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;awsQuery&lt;&#x2F;span&gt;&lt;span&gt;(): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ZIO&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Random &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;with &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Clock &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;with &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Console &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;with &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Logging &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;with &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ClippConfig&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Parameters&lt;&#x2F;span&gt;&lt;span&gt;], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Nothing&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ExitCode&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span&gt;    throttlingPolicy.use { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;policy &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;      
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;code&gt;zio-aws&lt;&#x2F;code&gt; library uses &lt;a href=&quot;https:&#x2F;&#x2F;zio.github.io&#x2F;zio-config&#x2F;&quot;&gt;ZIO Config&lt;&#x2F;a&gt; for configuration. This means we need a &lt;code&gt;ZConfig[CommonAwsConfig]&lt;&#x2F;code&gt; to construct the &lt;code&gt;AwsConfig&lt;&#x2F;code&gt; layer:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;commonConfig &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;ZLayer.succeed(CommonAwsConfig(
&lt;&#x2F;span&gt;&lt;span&gt;  region &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;Some(Region.of(params.region)),
&lt;&#x2F;span&gt;&lt;span&gt;  credentialsProvider &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;DefaultCredentialsProvider.create(),
&lt;&#x2F;span&gt;&lt;span&gt;  endpointOverride &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;None,
&lt;&#x2F;span&gt;&lt;span&gt;  commonClientConfig &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;None
&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;awsCore &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;(netty.default ++ commonConfig) &amp;gt;&amp;gt;&amp;gt; core.config.configured()
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;code&gt;AwsConfig&lt;&#x2F;code&gt; layer combines the configuration with a selected HTTP backend. In our case this is the &lt;em&gt;Netty&lt;&#x2F;em&gt; backend, using its default configuration.&lt;&#x2F;p&gt;
&lt;p&gt;Then we define the per-service client layers, applying the throttling and call logging &lt;em&gt;aspects&lt;&#x2F;em&gt; as I described before:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;awsClients &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span&gt;  ec2.live @@ (throttling &amp;gt;&amp;gt;&amp;gt; callLogging) ++
&lt;&#x2F;span&gt;&lt;span&gt;  elasticloadbalancing.live @@ (throttling &amp;gt;&amp;gt;&amp;gt; callLogging) ++
&lt;&#x2F;span&gt;&lt;span&gt;  elasticbeanstalk.live @@ (throttling &amp;gt;&amp;gt;&amp;gt; callLogging) ++
&lt;&#x2F;span&gt;&lt;span&gt;  autoscaling.live @@ (throttling &amp;gt;&amp;gt;&amp;gt; callLogging)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;To produce the final layer, we feed the logging and the &lt;code&gt;AwsConfig&lt;&#x2F;code&gt; layers to the client layers, and add the &lt;code&gt;ReportCache&lt;&#x2F;code&gt; and &lt;code&gt;Render&lt;&#x2F;code&gt; implementations:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;finalLayer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= 
&lt;&#x2F;span&gt;&lt;span&gt;  ((ZLayer.service[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Logger&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;]] ++ awsCore) &amp;gt;&amp;gt;&amp;gt; awsClients) ++
&lt;&#x2F;span&gt;&lt;span&gt;  ((Console.any ++ cache.live) &amp;gt;+&amp;gt; render.live)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This has the environment &lt;code&gt;ClippConfig[Parameters] with Console with Logging with ReportCache with Rendering with AllServices&lt;&#x2F;code&gt; where&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;AllServices &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Ec2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;with &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ElasticLoadBalancing &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;with &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ElasticBeanstalk &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;with &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;AutoScaling
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;We reimplemented the tool to query AWS resources using functional programming techniques, built on top of ZIO libraries. By separating the execution from the problem specification we get an easily readable and maintainable code that can be easily extended with new queries or reports without having to thing about how caching and concurrency is implemented under the hood. We can rate limit AWS requests without touching the actual queries, and take advantage of batching AWS operations while keeping the query logic simple and unaware of this optimization.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Code generation in ZIO-AWS</title>
        <published>2020-09-23T00:00:00+00:00</published>
        <updated>2020-09-23T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Daniel Vigovszky
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://blog.vigoo.dev/posts/zioaws-code-generation/"/>
        <id>https://blog.vigoo.dev/posts/zioaws-code-generation/</id>
        
        <content type="html" xml:base="https://blog.vigoo.dev/posts/zioaws-code-generation/">&lt;p&gt;I have recently published a set of libraries, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;vigoo&#x2F;zio-aws&quot;&gt;&lt;strong&gt;zio-aws&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;, aiming to provide a better interface for working with &lt;em&gt;AWS services&lt;&#x2F;em&gt; from &lt;a href=&quot;https:&#x2F;&#x2F;zio.dev&#x2F;&quot;&gt;ZIO&lt;&#x2F;a&gt; applications. For more information about how the ZIO &lt;em&gt;interface&lt;&#x2F;em&gt; works and how to get started with these libraries, read the repository&#x27;s README. In this post, I will focus on how these libraries are generated from the schema provided by the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;aws&#x2F;aws-sdk-java-v2&quot;&gt;AWS Java SDK v2&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;generating-code&quot;&gt;Generating code&lt;&#x2F;h2&gt;
&lt;p&gt;I wanted to cover &lt;em&gt;all&lt;&#x2F;em&gt; AWS services at once. This means client libraries for more than 200 services, so the only possible approach was to &lt;em&gt;generate&lt;&#x2F;em&gt; these libraries on top of a small hand-written core.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;schema&quot;&gt;Schema&lt;&#x2F;h3&gt;
&lt;p&gt;The first thing we need for generating code is a source schema. This is the model that we use to create the source code from. It is usually constructed by some kind of DSL or more directly described by a JSON or YAML or similar data model. In the case of &lt;strong&gt;zio-aws&lt;&#x2F;strong&gt; this was already defined in the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;aws&#x2F;aws-sdk-java-v2&quot;&gt;AWS Java SDK v2&lt;&#x2F;a&gt; project. The way it works is:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;There is a &lt;code&gt;codegen&lt;&#x2F;code&gt; project, published in the &lt;code&gt;software.amazon.awssdk&lt;&#x2F;code&gt; group among the client libraries, that contains the Java classes used for generating the Java SDK itself. This contains the data model classes for parsing the actual schema as well.&lt;&#x2F;li&gt;
&lt;li&gt;In the AWS Java SDK v2 repository, the schema is located in the subdirectory called &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;aws&#x2F;aws-sdk-java-v2&#x2F;tree&#x2F;master&#x2F;services&quot;&gt;&lt;code&gt;services&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;. There is a directory for each AWS service and it contains among other things some relevant &lt;em&gt;JSON&lt;&#x2F;em&gt; schema files:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;service-2.json&lt;&#x2F;code&gt; is the main schema of the service, describing the data structures and operations&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;paginators-1.json&lt;&#x2F;code&gt; describes the operations that the Java SDK creates a &lt;em&gt;paginator interface&lt;&#x2F;em&gt; for&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;customization.config&lt;&#x2F;code&gt; contains extra information, including changes to be applied on top of the service model&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Fortunately, these are also embedded in the generated &lt;em&gt;AWS Java SDK&lt;&#x2F;em&gt; libraries as resources, so getting &lt;em&gt;all client libraries&lt;&#x2F;em&gt; on the classpath gives us an easy way to get the corresponding schemas as well&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;I decided to use the low-level data classes from the AWS &lt;code&gt;codegen&lt;&#x2F;code&gt; library to parse these files and using that build a higher-level model that can be then used as an input for the &lt;em&gt;code generator&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;This is encapsulated in a &lt;em&gt;ZIO layer&lt;&#x2F;em&gt; called &lt;code&gt;Loader&lt;&#x2F;code&gt;, which has two functions:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;findModels&lt;&#x2F;span&gt;&lt;span&gt;(): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ZIO&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Blocking&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Throwable&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Set&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ModelId&lt;&#x2F;span&gt;&lt;span&gt;]]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;loadCodegenModel&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ModelId&lt;&#x2F;span&gt;&lt;span&gt;): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ZIO&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Blocking&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Throwable&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;C2jModels&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The first one, &lt;code&gt;findModels&lt;&#x2F;code&gt; uses the &lt;code&gt;ClassLoader&lt;&#x2F;code&gt; to enumerate all &lt;code&gt;codegen-resources&lt;&#x2F;code&gt; folders on the &lt;em&gt;classpath&lt;&#x2F;em&gt; and just returns a set of &lt;code&gt;ModelId&lt;&#x2F;code&gt;s. &lt;code&gt;ModelId&lt;&#x2F;code&gt; is a pair of a model name (such as &lt;code&gt;s3&lt;&#x2F;code&gt;) and an optional submodule name (for example &lt;code&gt;dynamodb:dynamodbstreams&lt;&#x2F;code&gt;).&lt;&#x2F;p&gt;
&lt;p&gt;Then for each detected model we can load it with the &lt;code&gt;loadCodegenModel&lt;&#x2F;code&gt; function, &lt;code&gt;C2jModels&lt;&#x2F;code&gt; is a class from the AWS &lt;code&gt;codegen&lt;&#x2F;code&gt; library.&lt;&#x2F;p&gt;
&lt;p&gt;Figuring out how to interpret these data structures, and how to map them to the generated Java API was the hardest part, but it&#x27;s out of scope for this post. Our next topic here is how we generate code from our &lt;em&gt;model&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;scalameta&quot;&gt;Scalameta&lt;&#x2F;h3&gt;
&lt;p&gt;There are several possibilities to generate source code and I tried many of them during the past years. Let&#x27;s see some examples:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Using a general-purpose text template engine. An example we used at &lt;a href=&quot;https:&#x2F;&#x2F;prezi.com&quot;&gt;Prezi&lt;&#x2F;a&gt; is the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bkiers&#x2F;Liqp&quot;&gt;Java implementation of the Liquid templating engine&lt;&#x2F;a&gt;. Another example is the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;OpenAPITools&#x2F;openapi-generator&quot;&gt;OpenAPI generator project&lt;&#x2F;a&gt; that uses &lt;a href=&quot;https:&#x2F;&#x2F;mustache.github.io&#x2F;&quot;&gt;Mustache&lt;&#x2F;a&gt; templates to generate server and client code from OpenAPI specifications.&lt;&#x2F;li&gt;
&lt;li&gt;Generating from code with some general-purpose pretty-printing library. With this approach, we are using the pretty-printer library&#x27;s composability features to create source code building blocks, and map the code generator model to these constructs. It is easier to express complex logic in this case, as we don&#x27;t have to encode it in a limited dynamic template model. On the other hand, reading the code generator&#x27;s source and imagining the output is not easy, and nothing enforces that the pretty-printer building blocks are actually creating valid source code.&lt;&#x2F;li&gt;
&lt;li&gt;If the target language has an AST with a pretty-printing feature, we can map the model to the AST directly and just pretty print at the end. With this, we get a much more efficient development cycle, as the generated code is at least guaranteed to be syntactically correct. But the AST can be far from how the target language&#x27;s textual representation looks like, which makes it difficult to read and write this code.&lt;&#x2F;li&gt;
&lt;li&gt;With a library that supports building ASTs with &lt;em&gt;quasiquotes&lt;&#x2F;em&gt;, we can build the AST fragments with a syntax that is very close to the generated target language. For &lt;em&gt;Scala&lt;&#x2F;em&gt;, a library that supports this and is used in a lot of tooling projects is &lt;a href=&quot;https:&#x2F;&#x2F;scalameta.org&#x2F;&quot;&gt;Scalameta&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;I wanted to try using &lt;em&gt;Scalameta&lt;&#x2F;em&gt; ever since I met Devon Stewart and he mentioned how he uses it in &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;twilio&#x2F;guardrail&#x2F;&quot;&gt;guardrail&lt;&#x2F;a&gt;. Finally, this was a perfect use case to do so!&lt;&#x2F;p&gt;
&lt;p&gt;To get an understanding of what kind of Scala language constructs can be built with &lt;em&gt;quasiquotes&lt;&#x2F;em&gt; with &lt;em&gt;Scalameta&lt;&#x2F;em&gt;, check &lt;a href=&quot;https:&#x2F;&#x2F;scalameta.org&#x2F;docs&#x2F;trees&#x2F;quasiquotes.html&quot;&gt;the list of them in the official documentation&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;We get a good mix of both worlds with this. It is possible to express complex template logic in real code, creating higher-level constructs, taking advantage of the full power of Scala. On the other hand, the actual &lt;em&gt;quasiquoted&lt;&#x2F;em&gt; fragments are still close to the code generator&#x27;s target language (which is in this case also Scala).&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s see a short example of this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;private def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;generateMap&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;m&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Model&lt;&#x2F;span&gt;&lt;span&gt;): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ZIO&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;GeneratorContext&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;GeneratorFailure&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ModelWrapper&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;keyModel &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span&gt; get(m.shape.getMapKeyType.getShape)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;valueModel &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span&gt; get(m.shape.getMapValueType.getShape)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;keyT &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;- &lt;&#x2F;span&gt;&lt;span&gt;TypeMapping.toWrappedType(keyModel)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;valueT &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;- &lt;&#x2F;span&gt;&lt;span&gt;TypeMapping.toWrappedType(valueModel)
&lt;&#x2F;span&gt;&lt;span&gt;  } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;yield &lt;&#x2F;span&gt;&lt;span&gt;ModelWrapper(
&lt;&#x2F;span&gt;&lt;span&gt;    code &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;List(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;q&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&amp;quot;&amp;quot;type ${&lt;&#x2F;span&gt;&lt;span&gt;m.asType&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;} = Map[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;$keyT&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;$valueT&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;]&amp;quot;&amp;quot;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  )
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;For each &lt;em&gt;AWS&lt;&#x2F;em&gt; service-specific &lt;em&gt;model type&lt;&#x2F;em&gt; we generate some kind of wrapper code into the ZIO service client library. This is done by processing the schema model to an intermediate format where for each such wrapper, we have a &lt;code&gt;ModelWrapper&lt;&#x2F;code&gt; value that already has the &lt;em&gt;Scalameta AST&lt;&#x2F;em&gt; for that particular wrapper. The above code fragment creates this for &lt;em&gt;map types&lt;&#x2F;em&gt;, which is a simple type alias for a Scala &lt;code&gt;Map&lt;&#x2F;code&gt;. It&#x27;s a &lt;code&gt;ZIO&lt;&#x2F;code&gt; function, taking advantage of passing around the context in the &lt;em&gt;environment&lt;&#x2F;em&gt; and safely handling generator failures, while the actual generated code part in the &lt;code&gt;q&quot;&quot;&quot;...&quot;&quot;&quot;&lt;&#x2F;code&gt; remained quite readable.&lt;&#x2F;p&gt;
&lt;p&gt;Then the whole &lt;em&gt;model package&lt;&#x2F;em&gt; can be expressed like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;primitiveModels &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;- &lt;&#x2F;span&gt;&lt;span&gt;ZIO.foreach(primitiveModels.toList.sortBy(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;.name))(generateModel)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;models &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;- &lt;&#x2F;span&gt;&lt;span&gt;ZIO.foreach(complexModels.toList.sortBy(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;.name))(generateModel)
&lt;&#x2F;span&gt;&lt;span&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;yield &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;q&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&amp;quot;&amp;quot;package &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;$fullPkgName&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt; {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;            import scala.jdk.CollectionConverters._
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;            import java.time.Instant
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;            import zio.{Chunk, ZIO}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;            import software.amazon.awssdk.core.SdkBytes
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;            ..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;$parentModuleImport
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;            package object model {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;              object primitives {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;                ..${&lt;&#x2F;span&gt;&lt;span&gt;primitiveModels.flatMap(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;.code)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;              }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;              ..${&lt;&#x2F;span&gt;&lt;span&gt;models.flatMap(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;.code)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;            }}&amp;quot;&amp;quot;&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This can be then &lt;em&gt;pretty printed&lt;&#x2F;em&gt; simply with&lt;code&gt;.toString&lt;&#x2F;code&gt; and saved to a &lt;code&gt;.scala&lt;&#x2F;code&gt; file.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;building-the-libraries&quot;&gt;Building the libraries&lt;&#x2F;h2&gt;
&lt;p&gt;We have a way to collect the service models and generate source code from that, but we still have to use that generated code somehow. In &lt;code&gt;zio-aws&lt;&#x2F;code&gt; the goal was to generate a separate &lt;em&gt;client library&lt;&#x2F;em&gt; for each AWS service. At the time of writing, there were &lt;strong&gt;235&lt;&#x2F;strong&gt; such services. The generated libraries have to be built and published to &lt;em&gt;Sonatype&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;first-version&quot;&gt;First version&lt;&#x2F;h3&gt;
&lt;p&gt;In the first version I simply wired together the above described &lt;code&gt;loader&lt;&#x2F;code&gt; and &lt;code&gt;generator&lt;&#x2F;code&gt; module into a &lt;code&gt;ZIO&lt;&#x2F;code&gt; &lt;em&gt;command line&lt;&#x2F;em&gt; app, using &lt;a href=&quot;https:&#x2F;&#x2F;vigoo.github.io&#x2F;clipp&#x2F;docs&#x2F;&quot;&gt;clipp&lt;&#x2F;a&gt; for command line parsing. It&#x27;s &lt;code&gt;main&lt;&#x2F;code&gt; was really just something like the following:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;app &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= for &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;svcs &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span&gt; config.parameters[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Parameters&lt;&#x2F;span&gt;&lt;span&gt;].map(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;.serviceList)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;ids &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span&gt; svcs &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;match &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span&gt;Some(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;ids&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;ZIO.succeed(ids.toSet)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span&gt;None &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; loader.findModels().mapError(ReflectionError)
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;- &lt;&#x2F;span&gt;&lt;span&gt;ZIO.foreachPar(ids) { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;model &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span&gt; loader.loadCodegenModel(id).mapError(ReflectionError)
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span&gt; generator.generateServiceCode(id, model).mapError(GeneratorError)
&lt;&#x2F;span&gt;&lt;span&gt;    } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;yield &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span&gt; generator.generateBuildSbt(ids).mapError(GeneratorError)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span&gt; generator.copyCoreProject().mapError(GeneratorError)
&lt;&#x2F;span&gt;&lt;span&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;yield &lt;&#x2F;span&gt;&lt;span&gt;ExitCode.success
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;cfg &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; config.fromArgsWithUsageInfo(args, Parameters.spec).mapError(ParserError)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;modules &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; loader.live ++ (cfg &amp;gt;+&amp;gt; generator.live)
&lt;&#x2F;span&gt;&lt;span&gt;app.provideCustomLayer(modules)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Then created a &lt;em&gt;multi-module&lt;&#x2F;em&gt; &lt;code&gt;sbt&lt;&#x2F;code&gt; project with the following modules:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;zio-aws-codegen&lt;&#x2F;code&gt; the CLI code generator we were talking about so far&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;zio-aws-core&lt;&#x2F;code&gt; holding the common part of all AWS service wrapper libraries. This contains things like how to translate AWS pagination into &lt;code&gt;ZStream&lt;&#x2F;code&gt; etc.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;zio-aws-akka-http&lt;&#x2F;code&gt;, &lt;code&gt;zio-aws-http4s&lt;&#x2F;code&gt; and &lt;code&gt;zio-aws-netty&lt;&#x2F;code&gt; are the supported &lt;em&gt;HTTP layers&lt;&#x2F;em&gt;, all depend on &lt;code&gt;zio-aws-core&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;I also created a first &lt;em&gt;example&lt;&#x2F;em&gt; project in a separate &lt;code&gt;sbt&lt;&#x2F;code&gt; project, that demonstrated the use of some of the generated AWS client libraries. With this primitive setup, building everything from scratch and running the example took the following steps:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;sbt compile&lt;&#x2F;code&gt; the root project&lt;&#x2F;li&gt;
&lt;li&gt;manually running &lt;code&gt;zio-aws-codegen&lt;&#x2F;code&gt; to generate &lt;em&gt;all client libs at once&lt;&#x2F;em&gt; to a separate directory, with a corresponding &lt;code&gt;build.sbt&lt;&#x2F;code&gt; including all these projects in a single &lt;code&gt;sbt&lt;&#x2F;code&gt; project&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;sbt publishLocal&lt;&#x2F;code&gt; in the generated &lt;code&gt;sbt&lt;&#x2F;code&gt; project&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;sbt run&lt;&#x2F;code&gt; in the &lt;em&gt;examples&lt;&#x2F;em&gt; project&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;For the second, manual step I created some &lt;em&gt;custom sbt tasks&lt;&#x2F;em&gt; called &lt;code&gt;generateAll&lt;&#x2F;code&gt;, &lt;code&gt;buildAll&lt;&#x2F;code&gt;, and &lt;code&gt;publishLocalAll&lt;&#x2F;code&gt;, that downloaded an &lt;code&gt;sbt-launch-*.jar&lt;&#x2F;code&gt; and used it to run the code generator and fork an &lt;code&gt;sbt&lt;&#x2F;code&gt; to build the generated project.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;code&gt;generateAll&lt;&#x2F;code&gt; task was quite simple:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span&gt;generateAll := Def.taskDyn {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;root &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; baseDirectory.value.getAbsolutePath
&lt;&#x2F;span&gt;&lt;span&gt;  Def.task {
&lt;&#x2F;span&gt;&lt;span&gt;    (codegen &#x2F; Compile &#x2F; run).toTask(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot; --target-root ${&lt;&#x2F;span&gt;&lt;span&gt;root&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;}&#x2F;generated --source-root ${&lt;&#x2F;span&gt;&lt;span&gt;root&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;} --version &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;$zioAwsVersion&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt; --zio-version &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;$zioVersion&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt; --zio-rs-version &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;$zioReactiveStreamsInteropVersion&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;).value
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}.value
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Launching a second &lt;code&gt;sbt&lt;&#x2F;code&gt; took more effort:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span&gt;buildAll := Def.taskDyn {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; generateAll.value
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;generatedRoot &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; baseDirectory.value &#x2F; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;generated&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;launcherVersion &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; sbtVersion.value
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;launcher &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;sbt-launch-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;$launcherVersion&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;.jar&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;launcherFile &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; generatedRoot &#x2F; launcher
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  Def.task[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Unit&lt;&#x2F;span&gt;&lt;span&gt;] {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(!launcherFile.exists) {
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;u &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; url(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;https:&#x2F;&#x2F;oss.sonatype.org&#x2F;content&#x2F;repositories&#x2F;public&#x2F;org&#x2F;scala-sbt&#x2F;sbt-launch&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;$launcherVersion&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&#x2F;sbt-launch-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;$launcherVersion&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;.jar&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;      sbt.io.Using.urlInputStream(u) { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;inputStream &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        IO.transfer(inputStream, launcherFile)
&lt;&#x2F;span&gt;&lt;span&gt;      }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;fork &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ForkRun&lt;&#x2F;span&gt;&lt;span&gt;(ForkOptions()
&lt;&#x2F;span&gt;&lt;span&gt;      .withWorkingDirectory(generatedRoot))
&lt;&#x2F;span&gt;&lt;span&gt;    fork.run(
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;xsbt.boot.Boot&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;      classpath &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; launcherFile :: Nil,
&lt;&#x2F;span&gt;&lt;span&gt;      options &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;compile&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt; :: Nil,
&lt;&#x2F;span&gt;&lt;span&gt;      log &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; streams.value.log
&lt;&#x2F;span&gt;&lt;span&gt;    )
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}.value
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;With these extra tasks, I released the first version of the library manually, but there was a lot of annoying difficulties:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Having to switch between various &lt;code&gt;sbt&lt;&#x2F;code&gt; projects&lt;&#x2F;li&gt;
&lt;li&gt;The need to &lt;code&gt;publishLocal&lt;&#x2F;code&gt; the generated artifacts in order to build the examples, or any kind of integration tests that I planned to add&lt;&#x2F;li&gt;
&lt;li&gt;The only way to build only those client libraries that are needed for the examples&#x2F;tests was to build and publish them manually, as this dependency was not tracked at all between the unrelated &lt;code&gt;sbt&lt;&#x2F;code&gt; projects&lt;&#x2F;li&gt;
&lt;li&gt;Because the generated &lt;code&gt;sbt&lt;&#x2F;code&gt; project could not refer to the outer &lt;code&gt;zio-aws-core&lt;&#x2F;code&gt; project, it has to be copied into the generated project in the code generator step&lt;&#x2F;li&gt;
&lt;li&gt;Building and publishing all the &lt;strong&gt;235&lt;&#x2F;strong&gt; projects at once required about &lt;strong&gt;16Gb&lt;&#x2F;strong&gt; memory and hours of compilation time. It was too big to run on any of the (freely available) CI systems.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;proper-solution&quot;&gt;Proper solution&lt;&#x2F;h3&gt;
&lt;p&gt;When I mentioned this, &lt;em&gt;Itamar Ravid&lt;&#x2F;em&gt; recommended trying to make it an &lt;em&gt;sbt code generator&lt;&#x2F;em&gt;. &lt;code&gt;sbt&lt;&#x2F;code&gt; has built-in support for generating source code, as described &lt;a href=&quot;https:&#x2F;&#x2F;www.scala-sbt.org&#x2F;1.0&#x2F;docs&#x2F;Howto-Generating-Files.html&quot;&gt;on it&#x27;s documentation page&lt;&#x2F;a&gt;. This alone though would not be enough to cover our use case, as in &lt;code&gt;zio-aws&lt;&#x2F;code&gt; even the &lt;em&gt;set of projects&lt;&#x2F;em&gt; is dynamic and comes from the enumeration of schema models. Fortunately, there is support for that in too, through the &lt;code&gt;extraProjects&lt;&#x2F;code&gt; property of &lt;code&gt;sbt&lt;&#x2F;code&gt; &lt;em&gt;plugins&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;With these two tools, the new project layout became the following:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;zio-aws-codegen&lt;&#x2F;code&gt; is an sbt &lt;strong&gt;plugin&lt;&#x2F;strong&gt;, having it&#x27;s own &lt;code&gt;sbt&lt;&#x2F;code&gt; project in a subdirectory&lt;&#x2F;li&gt;
&lt;li&gt;the &lt;code&gt;zio-aws-core&lt;&#x2F;code&gt; and the HTTP libraries are all in the top-level project as before&lt;&#x2F;li&gt;
&lt;li&gt;examples and integration tests are also part of the top-level project&lt;&#x2F;li&gt;
&lt;li&gt;the &lt;code&gt;zio-aws-codegen&lt;&#x2F;code&gt; plugin is referenced using a &lt;code&gt;ProjectRef&lt;&#x2F;code&gt; from the outer project&lt;&#x2F;li&gt;
&lt;li&gt;the plugin adds all the &lt;em&gt;AWS service client wrapper libraries&lt;&#x2F;em&gt; to the top-level project&lt;&#x2F;li&gt;
&lt;li&gt;these projects generate their source on-demand&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;In this setup, it is possible to build any subset of the generated libraries without the need to process and compile all of them, so it needs much less memory. It is also much simpler to run tests or build examples on top of them, as the test and example projects can directly depend on the generated libraries as &lt;code&gt;sbt&lt;&#x2F;code&gt; submodules. And even developing the &lt;em&gt;code generator&lt;&#x2F;em&gt; itself is convenient - although for editing it, it has to be opened as in a separate IDE session, but otherwise, &lt;code&gt;sbt reload&lt;&#x2F;code&gt; on the top level project automatically recompiles the plugin when needed.&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s see piece by piece how we can achieve this!&lt;&#x2F;p&gt;
&lt;h4 id=&quot;project-as-a-source-dependency&quot;&gt;Project as a source dependency&lt;&#x2F;h4&gt;
&lt;p&gt;The first thing I wanted to do is having the &lt;code&gt;zio-aws-codegen&lt;&#x2F;code&gt; project converted to an &lt;code&gt;sbt&lt;&#x2F;code&gt; plugin, but still having it in the same repository and be able to use it without having to install to a local repository. Although the whole code generator code could have been added to the top level &lt;code&gt;sbt&lt;&#x2F;code&gt; project&#x27;s &lt;code&gt;project&lt;&#x2F;code&gt; source, I wanted to keep it as a separate module to be able to publish it as a library or a CLI tool in the future if needed.&lt;&#x2F;p&gt;
&lt;p&gt;This can be achieved by putting it in a subdirectory of the top level project, with a separate &lt;code&gt;build.sbt&lt;&#x2F;code&gt; that contains the&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span&gt;sbtPlugin := &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;true
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;(beside the usual ones). Then it can be referenced in the top level project&#x27;s &lt;code&gt;project&#x2F;plugins.sbt&lt;&#x2F;code&gt; in the following way:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;lazy val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;codegen &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; project
&lt;&#x2F;span&gt;&lt;span&gt;  .in(file(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;.&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;  .dependsOn(ProjectRef(file(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;..&#x2F;zio-aws-codegen&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;zio-aws-codegen&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;and enabled in the &lt;code&gt;build.sbt&lt;&#x2F;code&gt; as&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span&gt;enablePlugins(ZioAwsCodegenPlugin)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;dynamically-generating-projects&quot;&gt;Dynamically generating projects&lt;&#x2F;h4&gt;
&lt;p&gt;To generate the subprojects dynamically, we need the &lt;code&gt;Set[ModelId]&lt;&#x2F;code&gt; coming from the &lt;code&gt;loader&lt;&#x2F;code&gt; module. It is a &lt;code&gt;ZIO&lt;&#x2F;code&gt; module, so from the &lt;code&gt;sbt&lt;&#x2F;code&gt; plugin we have to use &lt;code&gt;Runtime.default.unsafeRun&lt;&#x2F;code&gt; to execute it.&lt;&#x2F;p&gt;
&lt;p&gt;As the code generator project is now an &lt;code&gt;sbt&lt;&#x2F;code&gt; plugin, all the &lt;code&gt;sbt&lt;&#x2F;code&gt; data structures are directly available, so we can just write a function that maps the &lt;code&gt;ModelId&lt;&#x2F;code&gt;s to &lt;code&gt;Project&lt;&#x2F;code&gt;s:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;protected def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;generateSbtSubprojects&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;ids&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Set&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ModelId&lt;&#x2F;span&gt;&lt;span&gt;]): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Seq&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Project&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= ???
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;One interesting part here is that some of the subprojects are depending on each other. This happens with AWS service &lt;em&gt;submodules&lt;&#x2F;em&gt;, indicated by the second parameter of &lt;code&gt;ModelId&lt;&#x2F;code&gt;. An example is &lt;code&gt;dynamodbstreams&lt;&#x2F;code&gt; that depends on &lt;code&gt;dynamodb&lt;&#x2F;code&gt;. When creating the &lt;code&gt;Project&lt;&#x2F;code&gt; values, we have to be able to &lt;code&gt;dependOn&lt;&#x2F;code&gt; on some other already generated projects, and they have to be generated in the correct order to do so.&lt;&#x2F;p&gt;
&lt;p&gt;We could do a full topological sort, but it is not necessary, here we know that the maximum depth of dependencies is 1, so it is enough to put the submodules at the end of the sequence:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;map &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; ids
&lt;&#x2F;span&gt;&lt;span&gt;  .toSeq
&lt;&#x2F;span&gt;&lt;span&gt;  .sortWith { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;aIsDependent &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; a.subModuleName &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;match &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span&gt;Some(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;!=&lt;&#x2F;span&gt;&lt;span&gt; a.name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;true
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;false
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;bIsDependent &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; b.subModuleName &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;match &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span&gt;Some(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;!=&lt;&#x2F;span&gt;&lt;span&gt; b.name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;true
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;false
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    bIsDependent || (!aIsDependent &amp;amp;&amp;amp; a.toString &amp;lt; b.toString)
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Then in order to be able get the dependencies, we do a &lt;em&gt;fold&lt;&#x2F;em&gt; on the ordered &lt;code&gt;ModelId&lt;&#x2F;code&gt;s:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span&gt;  .foldLeft(Map.empty[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ModelId&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Project&lt;&#x2F;span&gt;&lt;span&gt;]) { (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;mapping&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;deps &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; id.subModule &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;match &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span&gt;Some(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;!=&lt;&#x2F;span&gt;&lt;span&gt; id.name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;          Seq(ClasspathDependency(LocalProject(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;zio-aws-core&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;), None),
&lt;&#x2F;span&gt;&lt;span&gt;              ClasspathDependency(mapping(ModelId(id.name, Some(id.name))), None))
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;          Seq(ClasspathDependency(LocalProject(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;zio-aws-core&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;), None))
&lt;&#x2F;span&gt;&lt;span&gt;      }      
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;project &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;Project(fullName, file(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;generated&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;) &#x2F; name)
&lt;&#x2F;span&gt;&lt;span&gt;        .settings(
&lt;&#x2F;span&gt;&lt;span&gt;          libraryDependencies += &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;software.amazon.awssdk&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt; % id.name % awsLibraryVersion.value,
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;        .dependsOn(deps: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;_*&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;      mapping.updated(id, project)
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;To make it easier to work with the generated projects, we also create a project named &lt;code&gt;all&lt;&#x2F;code&gt; that aggregates all the ones generated above.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;applying-settings-to-the-generated-projects&quot;&gt;Applying settings to the generated projects&lt;&#x2F;h4&gt;
&lt;p&gt;The code generator only sets the basic settings for the generated projects: name, path and dependencies. We need a lot more, setting organization and version, all the publishing options, controlling the Scala version, etc.&lt;&#x2F;p&gt;
&lt;p&gt;I decided to keep these settings outside of the code generator plugin, in the top-level &lt;code&gt;sbt&lt;&#x2F;code&gt; project. By creating an &lt;code&gt;AutoPlugin&lt;&#x2F;code&gt; end enabling it for all projects, we can inject all the common settings for both the hand-written and the generated projects:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;object&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; Common &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span&gt;AutoPlugin &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;object&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; autoImport {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;scala212Version &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;2.12.12&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;scala213Version &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;2.13.3&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;import&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; autoImport.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;override val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;trigger &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; allRequirements
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;override val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;requires &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Sonatype
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;override lazy val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;projectSettings &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    Seq(
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;      scalaVersion := scala213Version,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;      crossScalaVersions := List(scala212Version, scala213Version),
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    )
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;source-generator-task&quot;&gt;Source generator task&lt;&#x2F;h4&gt;
&lt;p&gt;At this point, we could also add the already existing &lt;em&gt;source code generation&lt;&#x2F;em&gt; to the initialization of the plugin, and just generate all the subproject&#x27;s all source files every time the &lt;code&gt;sbt&lt;&#x2F;code&gt; project is loaded. With this number of generated projects though, it would have been a very big startup overhead and would not allow us to split the build (at least not the code generation part) on CI, to solve the memory and build time issues.&lt;&#x2F;p&gt;
&lt;p&gt;As &lt;code&gt;sbt&lt;&#x2F;code&gt; has built-in support for defining &lt;em&gt;source generator tasks&lt;&#x2F;em&gt;, we can do much better!&lt;&#x2F;p&gt;
&lt;p&gt;Instead of generating the source codes in one step, we define a &lt;code&gt;generateSources&lt;&#x2F;code&gt; task and add it to each &lt;em&gt;generated subproject&lt;&#x2F;em&gt; as a &lt;em&gt;source generator&lt;&#x2F;em&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span&gt;Compile &#x2F; sourceGenerators += generateSources.taskValue,
&lt;&#x2F;span&gt;&lt;span&gt;awsLibraryId := id.toString
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;code&gt;awsLibraryId&lt;&#x2F;code&gt; is a custom property that we the &lt;code&gt;generateSources&lt;&#x2F;code&gt; task can use to determine which schema to use for the code generation.&lt;&#x2F;p&gt;
&lt;p&gt;The first part of this task is to gather the information from the project it got applied on, including the custom &lt;code&gt;awsLibraryId&lt;&#x2F;code&gt; property:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;lazy val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;generateSources &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span&gt;  Def.task {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;log &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; streams.value.log
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;idStr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; awsLibraryId.value
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;ModelId.parse(idStr) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;match &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span&gt;Left(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;failure&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; sys.error(failure)
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span&gt;Right(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; value
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;targetRoot &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;(sourceManaged in Compile).value
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;travisSrc &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; travisSource.value
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;travisDst &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; travisTarget.value
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;parallelJobs &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; travisParallelJobs.value
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;From these, we create a &lt;code&gt;Parameters&lt;&#x2F;code&gt; data structure to pass to the &lt;code&gt;generator&lt;&#x2F;code&gt; module. This is what we used to construct with &lt;code&gt;clipp&lt;&#x2F;code&gt; from CLI arguments:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;params &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;Parameters(
&lt;&#x2F;span&gt;&lt;span&gt;      targetRoot &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;Path.fromJava(targetRoot.toPath),
&lt;&#x2F;span&gt;&lt;span&gt;      travisSource &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;Path.fromJava(travisSrc.toPath),
&lt;&#x2F;span&gt;&lt;span&gt;      travisTarget &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;Path.fromJava(travisDst.toPath),
&lt;&#x2F;span&gt;&lt;span&gt;      parallelTravisJobs &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; parallelJobs
&lt;&#x2F;span&gt;&lt;span&gt;    )
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And finally, construct the &lt;code&gt;ZIO&lt;&#x2F;code&gt; environment, load a &lt;strong&gt;single&lt;&#x2F;strong&gt; schema model, and generate the library&#x27;s source code:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span&gt;    zio.Runtime.default.unsafeRun {
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;cfg &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;ZLayer.succeed(params)
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;env &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; loader.live ++ (cfg &amp;gt;+&amp;gt; generator.live)
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;task &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;- &lt;&#x2F;span&gt;&lt;span&gt;ZIO.effect(log.info(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;Generating sources for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;$id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;model &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span&gt; loader.loadCodegenModel(id)
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;files &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span&gt; generator.generateServiceCode(id, model)
&lt;&#x2F;span&gt;&lt;span&gt;        } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;yield&lt;&#x2F;span&gt;&lt;span&gt; files.toSeq
&lt;&#x2F;span&gt;&lt;span&gt;      task.provideCustomLayer(env).catchAll { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;generatorError &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        ZIO.effect(log.error(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;Code generator failure: ${&lt;&#x2F;span&gt;&lt;span&gt;generatorError&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;}&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)).as(Seq.empty)
&lt;&#x2F;span&gt;&lt;span&gt;      }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;code&gt;generateServiceCode&lt;&#x2F;code&gt; function returns a &lt;code&gt;Set[File]&lt;&#x2F;code&gt; value containing all the generated source files. This is the result of the &lt;em&gt;source generator task&lt;&#x2F;em&gt;, and &lt;code&gt;sbt&lt;&#x2F;code&gt; uses this information to add the generated files to the compilation.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;referencing-the-generated-projects&quot;&gt;Referencing the generated projects&lt;&#x2F;h4&gt;
&lt;p&gt;When defining downstream projects in the &lt;code&gt;build.sbt&lt;&#x2F;code&gt;, such as integration tests and other examples, we have to refer to the generated projects somehow. There is no value of type &lt;code&gt;Project&lt;&#x2F;code&gt; in scope to do so, but we can do it easily by name using &lt;code&gt;LocalProject&lt;&#x2F;code&gt;. The following example shows how the &lt;code&gt;example1&lt;&#x2F;code&gt; subproject does this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;lazy val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;example1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;Project(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;example1&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, file(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;examples&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;) &#x2F; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;example1&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  .dependsOn(
&lt;&#x2F;span&gt;&lt;span&gt;    core,
&lt;&#x2F;span&gt;&lt;span&gt;    http4s,
&lt;&#x2F;span&gt;&lt;span&gt;    netty,
&lt;&#x2F;span&gt;&lt;span&gt;    LocalProject(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;zio-aws-elasticbeanstalk&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;    LocalProject(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;zio-aws-ec2&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  )
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;parallel-build-on-travis-ci&quot;&gt;Parallel build on Travis CI&lt;&#x2F;h4&gt;
&lt;p&gt;The last thing that I wanted to solve is building the full &lt;code&gt;zio-aws&lt;&#x2F;code&gt; suite on a CI. I am using &lt;a href=&quot;https:&#x2F;&#x2F;travis-ci.org&#x2F;&quot;&gt;Travis CI&lt;&#x2F;a&gt; for my private projects, so that&#x27;s what I built it for. The idea is to split the set of &lt;em&gt;service client libraries&lt;&#x2F;em&gt; to chunks and create &lt;a href=&quot;https:&#x2F;&#x2F;docs.travis-ci.com&#x2F;user&#x2F;build-matrix&#x2F;&quot;&gt;build matrix&lt;&#x2F;a&gt; to run those in parallel. The tricky part is that the set of generated service libraries is dynamic, collected by the code generator.&lt;&#x2F;p&gt;
&lt;p&gt;To solve this, I started to generate the &lt;code&gt;.travis.yml&lt;&#x2F;code&gt;  build descriptor as well. The &lt;em&gt;hand-written&lt;&#x2F;em&gt; part has been moved to &lt;code&gt;.travis.base.yml&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;language&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;scala
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;services&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;docker
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;scala&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;2.12.12
&lt;&#x2F;span&gt;&lt;span&gt;  - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;2.13.3
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;cache&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;directories&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;$HOME&#x2F;.cache&#x2F;coursier
&lt;&#x2F;span&gt;&lt;span&gt;    - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;$HOME&#x2F;.ivy2&#x2F;cache
&lt;&#x2F;span&gt;&lt;span&gt;    - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;$HOME&#x2F;.sbt
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;env&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;COMMANDS=&amp;quot;clean zio-aws-core&#x2F;test zio-aws-akka-http&#x2F;test zio-aws-http4s&#x2F;test zio-aws-netty&#x2F;test&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;COMMANDS=&amp;quot;clean examples&#x2F;compile&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;COMMANDS=&amp;quot;clean integtests&#x2F;test&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;before_install&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;if [ &amp;quot;$COMMANDS&amp;quot; = &amp;quot;clean integtests&#x2F;test&amp;quot; ]; then docker pull localstack&#x2F;localstack; fi
&lt;&#x2F;span&gt;&lt;span&gt;  - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;if [ &amp;quot;$COMMANDS&amp;quot; = &amp;quot;clean integtests&#x2F;test&amp;quot; ]; then docker run -d -p 4566:4566 --env SERVICES=s3,dynamodb --env START_WEB=0 localstack&#x2F;localstack; fi
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;script&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;sbt ++$TRAVIS_SCALA_VERSION -jvm-opts travis&#x2F;jvmopts $COMMANDS
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I use the &lt;code&gt;COMMANDS&lt;&#x2F;code&gt; environment variable to define the parallel sets of &lt;code&gt;sbt&lt;&#x2F;code&gt; commands here. There are three predefined sets: building &lt;code&gt;zio-aws-core&lt;&#x2F;code&gt; and the HTTP implementations, building the &lt;em&gt;example projects&lt;&#x2F;em&gt; and running the &lt;em&gt;integration test&lt;&#x2F;em&gt;. The last two involve generating actual service client code and building them - but only the few that are necessary, so it is not an issue to do that redundantly.&lt;&#x2F;p&gt;
&lt;p&gt;The real &lt;code&gt;.travis.yml&lt;&#x2F;code&gt; file is then generated by running a task &lt;em&gt;manually&lt;&#x2F;em&gt;, &lt;code&gt;sbt generateTravisYaml&lt;&#x2F;code&gt;. It is implemented in the &lt;code&gt;zio-aws-codegen&lt;&#x2F;code&gt; plugin and it loads the &lt;code&gt;.travis.base.yml&lt;&#x2F;code&gt; file and extends the &lt;code&gt;env&lt;&#x2F;code&gt; section with a set of &lt;code&gt;COMMANDS&lt;&#x2F;code&gt; variants, each compiling a subset of the generated subprojects.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;Travis CI can now build &lt;code&gt;zio-aws&lt;&#x2F;code&gt; and run its integration tests. A build runs for hours, but it is stable, and consists of 22 parallel jobs to build all the libraries for both Scala 2.12 and 2.13. At the same time, developing the code generator and the other subprojects and tests became really convenient.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>prox part 4 - simplified redesign</title>
        <published>2020-08-03T00:00:00+00:00</published>
        <updated>2020-08-03T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Daniel Vigovszky
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://blog.vigoo.dev/posts/prox-4-simplify/"/>
        <id>https://blog.vigoo.dev/posts/prox-4-simplify/</id>
        
        <content type="html" xml:base="https://blog.vigoo.dev/posts/prox-4-simplify/">&lt;h2 id=&quot;blog-post-series&quot;&gt;Blog post series&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;blog.vigoo.dev&#x2F;posts&#x2F;prox-1-types&#x2F;&quot;&gt;Part 1 - type level programming&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;blog.vigoo.dev&#x2F;posts&#x2F;prox-2-io-akkastreams&#x2F;&quot;&gt;Part 2 - akka streams with cats effect&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;blog.vigoo.dev&#x2F;posts&#x2F;prox-3-zio&#x2F;&quot;&gt;Part 3 - effect abstraction and ZIO&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;blog.vigoo.dev&#x2F;posts&#x2F;prox-4-simplify&#x2F;&quot;&gt;Part 4 - simplified redesign&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;intro&quot;&gt;Intro&lt;&#x2F;h2&gt;
&lt;p&gt;In &lt;a href=&quot;https:&#x2F;&#x2F;blog.vigoo.dev&#x2F;posts&#x2F;prox-4-simplify&#x2F;2019-02-10-prox-1-types.html&quot;&gt;Part 1&lt;&#x2F;a&gt; I described how the advanced type level programming techniques can be used to describe the execution of system processes. It was both a good playground to experiment with these and the result has been proven useful as we started to use it in more and more production systems and test environments at &lt;a href=&quot;https:&#x2F;&#x2F;prezi.com&quot;&gt;Prezi&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;On the other hand as I mentioned at the end of the first post, there is a tradeoff. These techniques made the original version of &lt;em&gt;prox&lt;&#x2F;em&gt; very hard to maintain and improve, and the error messages library users got by small mistakes were really hard to understand.&lt;&#x2F;p&gt;
&lt;p&gt;Last December (in 2019) I redesigned the library to be simpler and easier to use by making some compromises. Let&#x27;s discover how!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;a-single-process&quot;&gt;A single process&lt;&#x2F;h2&gt;
&lt;p&gt;We start completely from scratch and try to design the library with the same functionality but with simplicity in mind. The code snippets shown here are not necessarily the final, current state of the traits and objects of the library, but some intermediate steps so we see the thought process.&lt;&#x2F;p&gt;
&lt;p&gt;First let&#x27;s focus on defining a &lt;strong&gt;single process&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;trait&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; Process {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;command&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: String
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;arguments&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: List[String]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;workingDirectory&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: Option[Path]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;environmentVariables&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: Map[String, String]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;removedEnvironmentVariables&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: Set[String]    
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Without deciding already how it will be implemented, we know we need these information to be able to launch the process alone. And how to execute it? Let&#x27;s separate it completely:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;trait&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; ProcessResult {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;exitCode&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: ExitCode
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;trait&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; ProcessRunner {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;start&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;process&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: Process): Resource[IO, Fiber[IO, ProcessResult]]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I decided that better integration with the IO library (&lt;a href=&quot;https:&#x2F;&#x2F;typelevel.org&#x2F;cats-effect&#x2F;&quot;&gt;cats-effect&lt;&#x2F;a&gt; in this case) is also a goal of the redesign, so for starter modelled the &lt;em&gt;running process&lt;&#x2F;em&gt; as a cancellable fiber resulting in &lt;code&gt;ProcessResult&lt;&#x2F;code&gt;, where cancellation means &lt;strong&gt;terminating&lt;&#x2F;strong&gt; the process. At this stage of the redesign I worked directly with &lt;code&gt;IO&lt;&#x2F;code&gt; instead of the &lt;em&gt;IO typeclasses&lt;&#x2F;em&gt; and later replaced it like I described in &lt;a href=&quot;https:&#x2F;&#x2F;blog.vigoo.dev&#x2F;posts&#x2F;prox-4-simplify&#x2F;2019-08-13-prox-3-zio.html&quot;&gt;the previous post&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s see how a simple runner implementation would look like:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;import&lt;&#x2F;span&gt;&lt;span&gt; java.lang.{Process &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; JvmProcess}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; JVMProcessRunner&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;implicit &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;contextShift&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ContextShift&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;IO&lt;&#x2F;span&gt;&lt;span&gt;]) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span&gt;ProcessRunner &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;import&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; JVMProcessRunner.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;override def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;start&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;process&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: Process): Resource[IO, Fiber[IO, ProcessResult]] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;builder &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; withEnvironmentVariables(process,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;      withWorkingDirectory(process,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ProcessBuilder((process.command :: process.arguments).asJava)))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;start &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;IO.delay(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;JVMRunningProcess(builder.start())).bracketCase { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;runningProcess &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;      runningProcess.waitForExit()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    } {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;, Completed) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;        IO.unit
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;, Error(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;reason&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;)) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;        IO.raiseError(reason)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;runningProcess&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;, Canceled) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;        runningProcess.terminate() &amp;gt;&amp;gt; IO.unit
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    }.start
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    Resource.make(start)(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;.cancel)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Here &lt;code&gt;withEnvironmentVariables&lt;&#x2F;code&gt; and &lt;code&gt;withWorkingDirectories&lt;&#x2F;code&gt; are just helper functions around the JVM &lt;em&gt;process builder&lt;&#x2F;em&gt;. The more important part is the &lt;em&gt;cancelation&lt;&#x2F;em&gt; and that we expose it as a &lt;em&gt;resource&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;First we wrap the started JVM process in a &lt;code&gt;JVMRunningProcess&lt;&#x2F;code&gt; class which really just wraps some of it&#x27;s operations in IO operations:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; SimpleProcessResult&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;override val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;exitCode&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ExitCode&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span&gt;ProcessResult
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; JVMRunningProcess&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;nativeProcess&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;JvmProcess&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span&gt;RunningProcess &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;override def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;isAlive&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: IO[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Boolean&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;IO.delay(nativeProcess.isAlive)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;override def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;kill&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;(): IO[ProcessResult] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;IO.delay(nativeProcess.destroyForcibly()) &amp;gt;&amp;gt; waitForExit()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;override def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;terminate&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;(): IO[ProcessResult] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;IO.delay(nativeProcess.destroy()) &amp;gt;&amp;gt; waitForExit()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;override def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;waitForExit&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;(): IO[ProcessResult] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;exitCode &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;IO.delay(nativeProcess.waitFor())
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;yield &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;SimpleProcessResult(ExitCode(exitCode))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Then we wrap the &lt;em&gt;starting of the process&lt;&#x2F;em&gt; with &lt;code&gt;bracketCase&lt;&#x2F;code&gt;, specifying the two cases:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;On normal execution, we &lt;code&gt;waitForExit&lt;&#x2F;code&gt; for the process to stop and create the &lt;code&gt;ProcessResult&lt;&#x2F;code&gt; as the result of the bracketed IO operation.&lt;&#x2F;li&gt;
&lt;li&gt;In the release case, if JVM thrown an exception it is raised to the IO level&lt;&#x2F;li&gt;
&lt;li&gt;And if it got &lt;em&gt;canceled&lt;&#x2F;em&gt;, we &lt;code&gt;terminate&lt;&#x2F;code&gt; the process&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;This way the IO cancelation interface gets a simple way to wait for or terminate an executed process. By calling &lt;code&gt;.start&lt;&#x2F;code&gt; on this bracketed IO operation we move it to a concurrent &lt;em&gt;fiber&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Finally we wrap it in a &lt;code&gt;Resource&lt;&#x2F;code&gt;, so if the user code starting the process got canceled, it &lt;em&gt;releases the resource&lt;&#x2F;em&gt; too that ends up &lt;em&gt;terminating&lt;&#x2F;em&gt; the process, leaving no process leaks. This is something that was missing from the earlier versions of the library.&lt;&#x2F;p&gt;
&lt;p&gt;To make starting processes more convenient we can create an &lt;strong&gt;extension method&lt;&#x2F;strong&gt; on the &lt;code&gt;Process&lt;&#x2F;code&gt; trait:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;implicit class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; ProcessOps&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;private val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;process&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Process&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span&gt;AnyVal &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;start&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;implicit &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;runner&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: ProcessRunner): Resource[IO, Fiber[IO, ProcessResult]] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    runner.start(process)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;redirection&quot;&gt;Redirection&lt;&#x2F;h2&gt;
&lt;p&gt;The next step was to implement input&#x2F;output&#x2F;error &lt;em&gt;redirection&lt;&#x2F;em&gt;. In the original &lt;em&gt;prox&lt;&#x2F;em&gt; library we had two important features, both implemented with type level techniques:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Allow redirection only once per channel&lt;&#x2F;li&gt;
&lt;li&gt;The redirection source or target was a type class with &lt;em&gt;dependent result types&lt;&#x2F;em&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;To keep the type signatures simpler I decided to work around these by sacrificing some genericity and terseness. Let&#x27;s start by defining an interface for &lt;strong&gt;redirecting process output&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;trait&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; RedirectableOutput&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;P&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Process&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;]] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;connectOutput&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;[R &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;OutputRedirection, O](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;target&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: R)(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;implicit &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;outputRedirectionType&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: OutputRedirectionType.Aux[R, O]): P[O]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This is not &lt;em&gt;very&lt;&#x2F;em&gt; much different than the output redirection operator in the previous &lt;em&gt;prox&lt;&#x2F;em&gt; versions:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;F&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;To&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;NewOut&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;NewOutResult&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Result &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ProcessNode&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Redirected&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;]]
&lt;&#x2F;span&gt;&lt;span&gt;    (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;to&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;To&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;implicit
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;contextOf&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ContextOf&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Aux&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;PN&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;F&lt;&#x2F;span&gt;&lt;span&gt;],
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;target&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;CanBeProcessOutputTarget&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Aux&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;F&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;To&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;NewOut&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;NewOutResult&lt;&#x2F;span&gt;&lt;span&gt;],
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;redirectOutput&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RedirectOutput&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Aux&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;F&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;PN&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;To&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;NewOut&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;NewOutResult&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Result&lt;&#x2F;span&gt;&lt;span&gt;])
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;One of the primary differences is that we don&#x27;t allow arbitrary targets just by requiring a &lt;code&gt;CanBeProcessOutput&lt;&#x2F;code&gt; type class. Instead we can only connect the output to a value of &lt;code&gt;OutputRedirection&lt;&#x2F;code&gt; which is an ADT:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;sealed trait&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; OutputRedirection
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case object&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; StdOut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span&gt;OutputRedirection
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; OutputFile&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;path&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Path&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;append&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Boolean&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span&gt;OutputRedirection
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; OutputStream&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;O&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;OR&lt;&#x2F;span&gt;&lt;span&gt;](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;pipe&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Pipe&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;IO&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Byte&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;O&lt;&#x2F;span&gt;&lt;span&gt;], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;runner&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Stream&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;IO&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;O&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;IO&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;OR&lt;&#x2F;span&gt;&lt;span&gt;], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;chunkSize&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Int = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;8192&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span&gt;OutputRedirection
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We still need a type level calculation to extract the result type of the &lt;code&gt;OutputStream&lt;&#x2F;code&gt; case (which is the &lt;code&gt;OR&lt;&#x2F;code&gt; type parameter). This extracted by the following trait with the help of the &lt;code&gt;Aux&lt;&#x2F;code&gt; pattern:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;trait&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; OutputRedirectionType&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;R&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Out
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;runner&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;of&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: R)(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;nativeProcess&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: JvmProcess, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;blocker&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: Blocker, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;contextShift&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: ContextShift[IO]): IO[Out]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The important difference from earlier versions of the library is that this remains completely an implementation detail. &lt;code&gt;OutputRedirectionType&lt;&#x2F;code&gt; is implemented for all three cases of the &lt;code&gt;OutputRedirection&lt;&#x2F;code&gt; type and &lt;code&gt;connectOutput&lt;&#x2F;code&gt; is not even used in the default use cases, only when implementing redirection for something custom.&lt;&#x2F;p&gt;
&lt;p&gt;Instead the &lt;code&gt;RedirectableOutput&lt;&#x2F;code&gt; trait itself defines a set of operators and named function versions for redirecting to different targets. With this we loose a general-purpose, type class managed way to redirect to &lt;em&gt;anything&lt;&#x2F;em&gt; but improve a lot on the usability of the library. All these functions are easily discoverable from the IDE and there would not be any weird implicit resolution errors.&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s see some examples of these functions:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;trait&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; RedirectableOutput&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;P&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Process&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;]] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;sink&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: Pipe[IO, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Byte&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Unit&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;]): P[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Unit&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; toSink(sink)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;toSink&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;sink&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: Pipe[F, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Byte&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Unit&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;]): P[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Unit&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    connectOutput(OutputStream(sink, (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: Stream[F, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Unit&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;]) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; s.compile.drain))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;&amp;gt;#&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;[O&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Monoid](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;pipe&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: Pipe[F, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Byte&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;, O]): P[O] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; toFoldMonoid(pipe)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;toFoldMonoid&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;[O&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Monoid](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;pipe&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: Pipe[F, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Byte&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;, O]): P[O] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    connectOutput(OutputStream(pipe, (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: Stream[F, O]) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; s.compile.foldMonoid))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;&amp;gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;path&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: Path): P[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Unit&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; appendToFile(path)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;appendToFile&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;path&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: Path): P[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Unit&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    connectOutput(OutputFile[F](path, append &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;true))    
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;All of them are just using the &lt;code&gt;connectOutput&lt;&#x2F;code&gt; function so implementations of the &lt;code&gt;RedirectableOutput&lt;&#x2F;code&gt; trait need to define that single function to get this capability.&lt;&#x2F;p&gt;
&lt;p&gt;Note that &lt;code&gt;connectOutput&lt;&#x2F;code&gt; has a return type of &lt;code&gt;P[O]&lt;&#x2F;code&gt; instead of being just &lt;code&gt;Process&lt;&#x2F;code&gt;. This is important for multiple reasons.&lt;&#x2F;p&gt;
&lt;p&gt;First, in order to actually &lt;em&gt;execute&lt;&#x2F;em&gt; the output streams, we need to store it somehow in the &lt;code&gt;Process&lt;&#x2F;code&gt; data type itself. For this reason we add a type parameter to the &lt;code&gt;Process&lt;&#x2F;code&gt; trait representing the &lt;em&gt;output type&lt;&#x2F;em&gt; and store the &lt;em&gt;output stream runner function&lt;&#x2F;em&gt; itself in it:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;trait&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; Process&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;O&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;outputRedirection&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: OutputRedirection
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;runOutputStream&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: (JvmProcess, Blocker, ContextShift[IO]) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;IO[O]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Note that &lt;code&gt;runOutputStream&lt;&#x2F;code&gt; is actually the &lt;code&gt;OutputRedirectiontype.runner&lt;&#x2F;code&gt; function, got from the &quot;hidden&quot; type level operation and stored in the process data structure. With this, the &lt;em&gt;process runner&lt;&#x2F;em&gt; can be extended to pass the started JVM process to this function that sets up the redirection, and then store the result of type &lt;code&gt;O&lt;&#x2F;code&gt; in &lt;code&gt;ProcessResult[O]&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;override def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;start&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;O&lt;&#x2F;span&gt;&lt;span&gt;](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;process&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Process&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;O&lt;&#x2F;span&gt;&lt;span&gt;], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;blocker&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Blocker&lt;&#x2F;span&gt;&lt;span&gt;): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Resource&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;IO&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Fiber&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;IO&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ProcessResult&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;O&lt;&#x2F;span&gt;&lt;span&gt;]]] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; ... process builder
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;outputRedirect &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; process.outputRedirection &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;match &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span&gt;StdOut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;ProcessBuilder.Redirect.INHERIT
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span&gt;OutputFile(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;path&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;ProcessBuilder.Redirect.to(path.toFile)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span&gt;OutputStream(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;ProcessBuilder.Redirect.PIPE
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;  builder.redirectOutput(outputRedirect)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;startProcess &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= for &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;nativeProcess &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;- &lt;&#x2F;span&gt;&lt;span&gt;IO.delay(builder.start())
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;runningOutput &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span&gt; process.runOutputStream(nativeProcess, blocker, contextShift).start
&lt;&#x2F;span&gt;&lt;span&gt;  } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;yield new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;JVMRunningProcess&lt;&#x2F;span&gt;&lt;span&gt;(nativeProcess, runningOutput)  
&lt;&#x2F;span&gt;&lt;span&gt;  
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; ... bracketCase, start, Resource.make
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;It is also important that this &lt;code&gt;RedirectableOutput&lt;&#x2F;code&gt; trait is not something all process has: it is a &lt;strong&gt;capability&lt;&#x2F;strong&gt;, and only processes with unbound output should implement it. This is the new encoding of fixing the three channels of a process. Instead of having three type parameters with &lt;em&gt;phantom types&lt;&#x2F;em&gt;, now we have a combination of capability traits mixed with the &lt;code&gt;Process&lt;&#x2F;code&gt; trait, constraining what kind of redirections we can do. As this is not something unbounded and have relatively small number of cases, I chose to implement the combinations by hand, designing it in a way to minimize the redundancy in these implementation classes. This means, in total &lt;strong&gt;8&lt;&#x2F;strong&gt; classes representing the combinations of bound input, output and error.&lt;&#x2F;p&gt;
&lt;p&gt;I will demonstrate this with a single example. The &lt;code&gt;Process&lt;&#x2F;code&gt; constructor now returns a type with everything unbound, represented by having all the redirection capability traits:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;object&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; Process {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;apply&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;command&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: String, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;arguments&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: List[String] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;List.empty): ProcessImpl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    ProcessImpl(
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;      command,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;      arguments,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;      workingDirectory &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;None,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;      environmentVariables &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Map.empty,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;      removedEnvironmentVariables &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Set.empty,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;      
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;      outputRedirection &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;StdOut,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;      runOutputStream &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;IO.unit,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;      errorRedirection &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;StdOut,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;      runErrorStream &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;IO.unit,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;      inputRedirection &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;StdIn
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    )
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; ProcessImpl(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;override val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;command&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: String,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;                         &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;override val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;arguments&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: List[String],
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;                         &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;override val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;workingDirectory&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: Option[Path],
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;                         &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;override val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;environmentVariables&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: Map[String, String],
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;                         &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;override val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;removedEnvironmentVariables&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: Set[String],
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;                         &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;override val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;outputRedirection&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: OutputRedirection[F],
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;                         &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;override val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;runOutputStream&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: (java.io.InputStream, Blocker, ContextShift[F]) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;F[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Unit&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;],
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;                         &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;override val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;errorRedirection&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: OutputRedirection[F],
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;                         &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;override val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;runErrorStream&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: (java.io.InputStream, Blocker, ContextShift[F]) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;F[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Unit&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;],
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;                         &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;override val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;inputRedirection&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: InputRedirection[F])
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Process[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Unit&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Unit&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;with &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RedirectableOutput[ProcessImplO[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;]]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;with &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RedirectableError[ProcessImplE[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;]]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;with &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RedirectableInput[ProcessImplI]] {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;connectOutput&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;[R &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;OutputRedirection, RO](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;target&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: R)(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;implicit &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;outputRedirectionType&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: OutputRedirectionType.Aux[R, RO]): ProcessImplO[RO] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;      ProcessImplO(
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;        target,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;        outputRedirectionType.runner(target),
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;      )
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; ProcessImplO[O](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;                             &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;override val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;runOutputStream&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: (java.io.InputStream, Blocker, ContextShift[F]) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;F[O],
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;                             &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;                            )
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Process[O, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Unit&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;with &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RedirectableError[ProcessImplOE[O, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;]]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;with &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RedirectableInput[ProcessImplIO[O]] {    
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Each implementation class only has the necessary subset of type parameters &lt;code&gt;O&lt;&#x2F;code&gt; and &lt;code&gt;E&lt;&#x2F;code&gt; (&lt;code&gt;E&lt;&#x2F;code&gt; is the error output type), and the &lt;code&gt;I&lt;&#x2F;code&gt; &lt;code&gt;O&lt;&#x2F;code&gt; and &lt;code&gt;E&lt;&#x2F;code&gt; postfixes in the class names represent which channels are &lt;em&gt;bound&lt;&#x2F;em&gt;. Each redirection leads to a different implementation class with less and less redirection &lt;em&gt;capabilities&lt;&#x2F;em&gt;. &lt;code&gt;ProcessImplIOE&lt;&#x2F;code&gt; is the fully bound process.&lt;&#x2F;p&gt;
&lt;p&gt;This makes all the redirection operators completely type inferable and very pleasant to use for building up concrete process definitions. And we don&#x27;t loose the ability to create generic function either. We can do it by requiring redirection capabilities:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;withInput&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;O&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;E&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;P &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Process&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;O&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;E&lt;&#x2F;span&gt;&lt;span&gt;]](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;)(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;process&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Process&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;O&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;E&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;with &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RedirectableInput&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;P&lt;&#x2F;span&gt;&lt;span&gt;]): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;P &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;input &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;Stream(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;This is a test string&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;).through(text.utf8Encode)
&lt;&#x2F;span&gt;&lt;span&gt;  process &amp;lt; input
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Here we know we want to have a &lt;code&gt;Process&lt;&#x2F;code&gt; with the &lt;code&gt;RedirectableInput&lt;&#x2F;code&gt; capability. We also know that by binding the input we get a something without that trait, so we know the result is a process &lt;code&gt;P&lt;&#x2F;code&gt; but know nothing else about its further capabilities. This is where this solution gets a bit inconvenient, if we want to chain these wrapper functions. To help with it, the library contains &lt;em&gt;type aliases&lt;&#x2F;em&gt; for the whole redirection capability chain that can be used in these functions. For example:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;** Process with unbound input, output and error streams *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;UnboundProcess &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Process&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Unit&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Unit&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;  with RedirectableInput[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;UnboundOEProcess&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;  with RedirectableOutput[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;UnboundIEProcess&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;]]
&lt;&#x2F;span&gt;&lt;span&gt;  with RedirectableError[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;UnboundIOProcess&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;]]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;process-piping&quot;&gt;Process piping&lt;&#x2F;h2&gt;
&lt;p&gt;The other major feature beside redirection that &lt;em&gt;prox&lt;&#x2F;em&gt; had is &lt;strong&gt;piping processes together&lt;&#x2F;strong&gt;, meaning the first process&#x27; output gets redirected to the second process&#x27; input. Now that we have redesigned processes and redirection capabilities, we can try to implement this on top of them.&lt;&#x2F;p&gt;
&lt;p&gt;The idea is that when we construct a &lt;em&gt;process group&lt;&#x2F;em&gt; from a list of &lt;code&gt;Process&lt;&#x2F;code&gt; instances with the necessary redirection capabilities, this construction could set up the redirection and store the modified processes instead, then running them together. And it can reuse the &lt;code&gt;RedirectableOutput&lt;&#x2F;code&gt; and &lt;code&gt;RedirectableInput&lt;&#x2F;code&gt; capabilities to bind the first&#x2F;last process!&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s again start by defining what we need for the &lt;em&gt;process group&lt;&#x2F;em&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;trait&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; ProcessGroup&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;O&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;E&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span&gt;ProcessLike &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;firstProcess&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: Process[Stream[IO, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Byte&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;], E]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;innerProcesses&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: List[Process.UnboundIProcess[Stream[IO, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Byte&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;], E]]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;lastProcess&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: Process.UnboundIProcess[O, E]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;originalProcesses&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: List[Process[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Unit&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Unit&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;]]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;ProcessLike&lt;&#x2F;code&gt; is a common base trait for &lt;code&gt;Process&lt;&#x2F;code&gt; and &lt;code&gt;ProcessGroup&lt;&#x2F;code&gt;. By introducing it, we can change the &lt;code&gt;RedirectableOutput&lt;&#x2F;code&gt; trait&#x27;s self type bounds so it works for both processes and process groups.&lt;&#x2F;p&gt;
&lt;p&gt;A valid process group always have at least &lt;strong&gt;2&lt;&#x2F;strong&gt; processes and they get pre-configured during the construction of the group so when they get started, their channels can be joined. This means the group members can be split into three groups:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;strong&gt;first process&lt;&#x2F;strong&gt; has it&#x27;s output redirected to a stream, but &lt;em&gt;running&lt;&#x2F;em&gt; the stream just returns the stream itself; this way it can be connected to the next process&#x27;s input&lt;&#x2F;li&gt;
&lt;li&gt;The &lt;strong&gt;inner processes&lt;&#x2F;strong&gt; are all having their output redirected in the same way, and it is also a &lt;em&gt;requirement&lt;&#x2F;em&gt; that these must have their &lt;em&gt;input channel&lt;&#x2F;em&gt; unbound. This is needed for the operation described above, when we plug the previous process&#x27; output into the input&lt;&#x2F;li&gt;
&lt;li&gt;The &lt;strong&gt;last process&lt;&#x2F;strong&gt; can have its output freely redirected by the user, but it&#x27;s &lt;em&gt;input&lt;&#x2F;em&gt; must be unbound so the previous process can be plugged in&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;We also store the &lt;em&gt;original&lt;&#x2F;em&gt; process values for reasons explained later.&lt;&#x2F;p&gt;
&lt;p&gt;So as we can see the piping has two stages:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;First we prepare the processes by setting up their output to return an un-executed stream&lt;&#x2F;li&gt;
&lt;li&gt;And we need a process group specific start function into the &lt;code&gt;ProcessRunner&lt;&#x2F;code&gt; that plugs everything together&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;The first step is performed by the &lt;em&gt;pipe operator&lt;&#x2F;em&gt; (&lt;code&gt;|&lt;&#x2F;code&gt;), which is defined on &lt;code&gt;Process&lt;&#x2F;code&gt; via an extension method to construct group of two processes, and on &lt;code&gt;ProcessGroupImpl&lt;&#x2F;code&gt; to add more. For simplicity the piping operator is currently not defined on the bound process group types. So it has to be first constructed, and then the redirection set up.&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s see the one that adds one more process to a group:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;pipeInto&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;other&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Process&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;UnboundProcess&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;             &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;channel&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Pipe&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;IO&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Byte&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Byte&lt;&#x2F;span&gt;&lt;span&gt;]): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ProcessGroupImpl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;pl1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; lastProcess.connectOutput(OutputStream(channel, (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;stream&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Stream&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;IO&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Byte&lt;&#x2F;span&gt;&lt;span&gt;]) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;IO.pure(stream)))
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  copy(
&lt;&#x2F;span&gt;&lt;span&gt;    innerProcesses &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; pl1 :: innerProcesses,
&lt;&#x2F;span&gt;&lt;span&gt;    lastProcess &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; other,
&lt;&#x2F;span&gt;&lt;span&gt;    originalProcesses &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; other :: originalProcesses
&lt;&#x2F;span&gt;&lt;span&gt;  )
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;other&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Process&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;UnboundProcess&lt;&#x2F;span&gt;&lt;span&gt;): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ProcessGroupImpl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; pipeInto(other, identity)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Other than moving processes around in the &lt;code&gt;innerProcesses&lt;&#x2F;code&gt; and &lt;code&gt;lastProcess&lt;&#x2F;code&gt;, we also set up the &lt;strong&gt;previous last process&lt;&#x2F;strong&gt;&#x27;s output in the way I described:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;It gets redirected to a pipe which is by default &lt;code&gt;identity&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;And it&#x27;s &lt;em&gt;runner&lt;&#x2F;em&gt; instead of actually running the stream, just returns the stream definition&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;This way we can write a process group specific start function into the &lt;em&gt;process runner&lt;&#x2F;em&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;override def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;startProcessGroup&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;O&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;E&lt;&#x2F;span&gt;&lt;span&gt;](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;processGroup&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ProcessGroup&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;O&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;E&lt;&#x2F;span&gt;&lt;span&gt;], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;blocker&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Blocker&lt;&#x2F;span&gt;&lt;span&gt;): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;IO&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RunningProcessGroup&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;O&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;E&lt;&#x2F;span&gt;&lt;span&gt;]] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;first &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span&gt; startProcess(processGroup.firstProcess, blocker)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;firstOutput &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span&gt; first.runningOutput.join
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;innerResult &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;- if &lt;&#x2F;span&gt;&lt;span&gt;(processGroup.innerProcesses.isEmpty) {
&lt;&#x2F;span&gt;&lt;span&gt;      IO.pure((List.empty, firstOutput))
&lt;&#x2F;span&gt;&lt;span&gt;    } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;inner &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; processGroup.innerProcesses.reverse
&lt;&#x2F;span&gt;&lt;span&gt;      connectAndStartProcesses(inner.head, firstOutput, inner.tail, blocker, List.empty)
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;inner&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;lastInput&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; innerResult
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;last &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span&gt; startProcess(processGroup.lastProcess.connectInput(InputStream(lastInput, flushChunks &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;)), blocker)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;runningProcesses &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; processGroup.originalProcesses.reverse.zip((first :: inner) :+ last).toMap
&lt;&#x2F;span&gt;&lt;span&gt;  } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;yield new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;JVMRunningProcessGroup&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;O&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;E&lt;&#x2F;span&gt;&lt;span&gt;](runningProcesses, last.runningOutput)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;where &lt;code&gt;connectAndStartProcesses&lt;&#x2F;code&gt; is a recursive function that does the same as we do with the first process:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;start it with the &lt;code&gt;startProcess&lt;&#x2F;code&gt; function (this is the same function we discussed in the first section, that starts &lt;code&gt;Process&lt;&#x2F;code&gt; values)&lt;&#x2F;li&gt;
&lt;li&gt;then &quot;join&quot; the output fiber; this completes immediately as it is not really running the output stream just returning it&lt;&#x2F;li&gt;
&lt;li&gt;we connect the &lt;em&gt;input&lt;&#x2F;em&gt; of the next process to the previous process&#x27; output&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;One thing we did not talk about yet is getting the &lt;strong&gt;results&lt;&#x2F;strong&gt; of a process group. This is where the old implementation again used some type level techniques and returned a &lt;code&gt;RunningProcess&lt;&#x2F;code&gt; value with specific per-process output and error types for each member of the group, as a &lt;code&gt;HList&lt;&#x2F;code&gt; (or converted to a &lt;em&gt;tuple&lt;&#x2F;em&gt;).&lt;&#x2F;p&gt;
&lt;p&gt;By making the library a bit more dynamic we can drop this part too. What is that we really want to do with a running process group?&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Terminating&lt;&#x2F;strong&gt; the whole group together. Terminating just one part is something we does not support currently although it would not be hard to add.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Waiting&lt;&#x2F;strong&gt; for all processes to stop&lt;&#x2F;li&gt;
&lt;li&gt;Examining the &lt;strong&gt;exit code&lt;&#x2F;strong&gt; for each member of the group&lt;&#x2F;li&gt;
&lt;li&gt;Redirecting the &lt;strong&gt;error&lt;&#x2F;strong&gt; channel of each process to something and getting them in the result&lt;&#x2F;li&gt;
&lt;li&gt;Redirecting the &lt;strong&gt;input&lt;&#x2F;strong&gt; of the group&#x27;s first process&lt;&#x2F;li&gt;
&lt;li&gt;Redirecting the &lt;strong&gt;output&lt;&#x2F;strong&gt; of the group&#x27;s last process, and getting it in the result&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The most difficult and primary reason for the &lt;code&gt;HList&lt;&#x2F;code&gt; in the old version is the error redirection, as it can be done &lt;em&gt;per process&lt;&#x2F;em&gt;. With some restrictions we can make a reasonable implementation though.&lt;&#x2F;p&gt;
&lt;p&gt;First, we require that the processes participating in forming a &lt;em&gt;process group&lt;&#x2F;em&gt; does not have their &lt;em&gt;error channel&lt;&#x2F;em&gt; bound yet. Then we create a &lt;code&gt;RedirectableErrors&lt;&#x2F;code&gt; capability that is very similar to the existing &lt;code&gt;RedirectableError&lt;&#x2F;code&gt; trait, but provides an advanced interface through it&#x27;s &lt;code&gt;customizedPerProcess&lt;&#x2F;code&gt; field:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;trait&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; RedirectableErrors&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;P&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ProcessGroup&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;]] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;lazy val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;customizedPerProcess&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: RedirectableErrors.CustomizedPerProcess[P] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;where the &lt;code&gt;CustomizedPerProcess&lt;&#x2F;code&gt; interface contains the same redirection functions but accept a function of a &lt;code&gt;Process&lt;&#x2F;code&gt; as parameter.&lt;&#x2F;p&gt;
&lt;p&gt;For example:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;errorsToSink&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;sink&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Pipe&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;IO&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Byte&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Unit&lt;&#x2F;span&gt;&lt;span&gt;]): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;P&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Unit&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; vs
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;errorsToSink&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;sinkFn&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Process&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Pipe&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;IO&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Byte&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Unit&lt;&#x2F;span&gt;&lt;span&gt;]): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;P&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Unit&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The limitation is that for all process we need to have the same &lt;strong&gt;error result type&lt;&#x2F;strong&gt; but it still gets a lot of freedom via the advanced interface: we can tag the output with the process and split their processing further in the stream.&lt;&#x2F;p&gt;
&lt;p&gt;With this choice, we can finally define the result type of the process group too:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;trait&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; ProcessGroupResult&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;O&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;E&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;exitCodes&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: Map[Process[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Unit&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Unit&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;], ExitCode]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;output&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: O
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;errors&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: Map[Process[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Unit&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Unit&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;], E]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The error results and the exit codes are in a map indexed by the &lt;strong&gt;original process&lt;&#x2F;strong&gt;. This is the value passed to the piping operator, the one that the user constructing the group has. That&#x27;s why in the &lt;code&gt;ProcessGroup&lt;&#x2F;code&gt; trait we also had to store the original process values.&lt;&#x2F;p&gt;
&lt;p&gt;As the output of all the inner processes are piped to the next process, we only have to care about the last process&#x27; output.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;With a full redesign and making some compromises, we get a library that has a much more readable and easier to maintain code, and an API that is discoverable by the IDE and does not produce any weird error messages on misuse.&lt;&#x2F;p&gt;
&lt;p&gt;Note that in all the code snippets above I removed the &lt;em&gt;effect abstraction&lt;&#x2F;em&gt; and just used &lt;code&gt;IO&lt;&#x2F;code&gt; to make them simpler. The real code of course can be used with any IO library such as ZIO, just like the previous versions.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>prox part 3 - effect abstraction and ZIO</title>
        <published>2019-08-13T00:00:00+00:00</published>
        <updated>2019-08-13T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Daniel Vigovszky
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://blog.vigoo.dev/posts/prox-3-zio/"/>
        <id>https://blog.vigoo.dev/posts/prox-3-zio/</id>
        
        <content type="html" xml:base="https://blog.vigoo.dev/posts/prox-3-zio/">&lt;h2 id=&quot;blog-post-series&quot;&gt;Blog post series&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;blog.vigoo.dev&#x2F;posts&#x2F;prox-1-types&#x2F;&quot;&gt;Part 1 - type level programming&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;blog.vigoo.dev&#x2F;posts&#x2F;prox-2-io-akkastreams&#x2F;&quot;&gt;Part 2 - akka streams with cats effect&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;blog.vigoo.dev&#x2F;posts&#x2F;prox-3-zio&#x2F;&quot;&gt;Part 3 - effect abstraction and ZIO&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;blog.vigoo.dev&#x2F;posts&#x2F;prox-4-simplify&#x2F;&quot;&gt;Part 4 - simplified redesign&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;intro&quot;&gt;Intro&lt;&#x2F;h2&gt;
&lt;p&gt;The &lt;a href=&quot;https:&#x2F;&#x2F;blog.vigoo.dev&#x2F;posts&#x2F;prox-3-zio&#x2F;2019-02-10-prox-1-types.html&quot;&gt;first post&lt;&#x2F;a&gt; introduced the &lt;em&gt;prox library&lt;&#x2F;em&gt; and demonstrated the advanced type level programming techniques it uses. Then in the &lt;a href=&quot;https:&#x2F;&#x2F;blog.vigoo.dev&#x2F;posts&#x2F;prox-3-zio&#x2F;2019-03-07-prox-2-io-akkastreams.html&quot;&gt;second part&lt;&#x2F;a&gt; of this series we experimented with replacing the &lt;em&gt;streaming library&lt;&#x2F;em&gt; from &lt;a href=&quot;https:&#x2F;&#x2F;fs2.io&#x2F;&quot;&gt;fs2&lt;&#x2F;a&gt; to &lt;a href=&quot;https:&#x2F;&#x2F;doc.akka.io&#x2F;docs&#x2F;akka&#x2F;2.5&#x2F;stream&#x2F;&quot;&gt;Akka Streams&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;In both cases the library used &lt;a href=&quot;https:&#x2F;&#x2F;typelevel.org&#x2F;cats-effect&#x2F;&quot;&gt;cats-effect&lt;&#x2F;a&gt; for describing side effects. But it did not really take advantage of &lt;em&gt;cats-effect&lt;&#x2F;em&gt;&#x27;s effect abstraction: it explicitly defined everything to be a computation in &lt;a href=&quot;https:&#x2F;&#x2F;typelevel.org&#x2F;cats-effect&#x2F;datatypes&#x2F;io.html&quot;&gt;&lt;code&gt;IO&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;, cats-effect&#x27;s implementation of describing effectful computations.&lt;&#x2F;p&gt;
&lt;p&gt;But we can do better! By not relying on &lt;code&gt;IO&lt;&#x2F;code&gt; but the various type classes the &lt;em&gt;cats-effect&lt;&#x2F;em&gt; library provides we can make &lt;em&gt;prox&lt;&#x2F;em&gt; work with any kind of effect library out of the box. One such example is &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;zio&#x2F;zio&quot;&gt;ZIO&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;effect-abstraction&quot;&gt;Effect abstraction&lt;&#x2F;h2&gt;
&lt;p&gt;Let&#x27;s see an example of how &lt;code&gt;IO&lt;&#x2F;code&gt; used to be used in the library! The following function is in the &lt;code&gt;Start&lt;&#x2F;code&gt; type class, and it starts a process or piped process group:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;apply&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;process&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;PN&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;dontStartOutput&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Boolean = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;blocker&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Blocker&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;         (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;implicit &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;contextShift&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ContextShift&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;IO&lt;&#x2F;span&gt;&lt;span&gt;]): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;IO&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RunningProcesses&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We can observe two things here:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;The function returns an effectful computation in &lt;code&gt;IO&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;An implicit &lt;em&gt;context shifter&lt;&#x2F;em&gt; is needed by the implementations which are calling some streaming functions needing it.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;To make it independent of the effect library implementation we have to get rid of &lt;code&gt;IO&lt;&#x2F;code&gt; and use a generic type instead, let&#x27;s call it &lt;code&gt;F&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;apply&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;process&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;PN&lt;&#x2F;span&gt;&lt;span&gt;, 
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;dontStartOutput&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Boolean = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;, 
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;blocker&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Blocker&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;         (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;implicit
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;concurrent&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Concurrent&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;F&lt;&#x2F;span&gt;&lt;span&gt;],
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;contextShift&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ContextShift&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;F&lt;&#x2F;span&gt;&lt;span&gt;]): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;F&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RunningProcesses&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Beside using &lt;code&gt;F&lt;&#x2F;code&gt; instead of &lt;code&gt;IO&lt;&#x2F;code&gt; everywhere we also have a new requirement, our context type (&lt;code&gt;F&lt;&#x2F;code&gt;) have to have an implementation of the &lt;a href=&quot;https:&#x2F;&#x2F;typelevel.org&#x2F;cats-effect&#x2F;typeclasses&#x2F;concurrent.html&quot;&gt;&lt;code&gt;Concurrent&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; type class.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;Cats-effect&lt;&#x2F;em&gt; defines a hierarchy of type classes to deal with effectful computations. At the time of writing it looks like this:
&lt;img src=&quot;https:&#x2F;&#x2F;typelevel.org&#x2F;cats-effect&#x2F;img&#x2F;cats-effect-typeclasses.svg&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Read the &lt;a href=&quot;https:&#x2F;&#x2F;typelevel.org&#x2F;cats-effect&#x2F;typeclasses&#x2F;&quot;&gt;official documentation&lt;&#x2F;a&gt; for more information.&lt;&#x2F;p&gt;
&lt;p&gt;Prox is based on the &lt;code&gt;ProcessNode&lt;&#x2F;code&gt; type which has two implementations, a single &lt;code&gt;Process&lt;&#x2F;code&gt; or a set of processes piped together to a &lt;code&gt;PipedProcess&lt;&#x2F;code&gt;. Because these types store their I&#x2F;O redirection within themselves, they also have to be enriched with a context type parameter.&lt;&#x2F;p&gt;
&lt;p&gt;For example &lt;code&gt;Process&lt;&#x2F;code&gt; will look like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; Process&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;F&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Out&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Err&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;OutResult&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ErrResult&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;IRS &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RedirectionState&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ORS &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RedirectionState&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ERS &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RedirectionState&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;command&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;arguments&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;],
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;workingDirectory&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Path&lt;&#x2F;span&gt;&lt;span&gt;],
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;inputSource&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ProcessInputSource&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;F&lt;&#x2F;span&gt;&lt;span&gt;],
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;outputTarget&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ProcessOutputTarget&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;F&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Out&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;OutResult&lt;&#x2F;span&gt;&lt;span&gt;],
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;errorTarget&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ProcessErrorTarget&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;F&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Err&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ErrResult&lt;&#x2F;span&gt;&lt;span&gt;],
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;environmentVariables&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Map&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;],
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;removedEnvironmentVariables&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Set&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;])
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span&gt;ProcessNode[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Out&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Err&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;IRS&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ORS&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ERS&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The context parameter (&lt;code&gt;F&lt;&#x2F;code&gt;) is needed because the &lt;em&gt;input source&lt;&#x2F;em&gt; and &lt;em&gt;output target&lt;&#x2F;em&gt; are all representing effectful code such as writing to the standard output, reading from a file, or passing data through concurrent streams.&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s see some examples of how the abstract types of &lt;em&gt;cats-effect&lt;&#x2F;em&gt; can be used to describe the computation, when we cannot rely on &lt;code&gt;IO&lt;&#x2F;code&gt; itself!&lt;&#x2F;p&gt;
&lt;p&gt;The most basic operation is to &lt;em&gt;delay the execution&lt;&#x2F;em&gt; of some code that does not use the effect abstractions. This is how we wrap the Java process API, for example.&lt;&#x2F;p&gt;
&lt;p&gt;While with the original implementation of &lt;em&gt;prox&lt;&#x2F;em&gt; it was done by using the &lt;code&gt;IO&lt;&#x2F;code&gt; constructor:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span&gt;IO {
&lt;&#x2F;span&gt;&lt;span&gt;    systemProcess.isAlive
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;with an arbitrary &lt;code&gt;F&lt;&#x2F;code&gt; we only need to require that it has an implementation of the &lt;code&gt;Sync&lt;&#x2F;code&gt; type class:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;private class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; WrappedProcess&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;F&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Sync&lt;&#x2F;span&gt;&lt;span&gt;,  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;and then use the &lt;code&gt;delay&lt;&#x2F;code&gt; function:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span&gt;Sync[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;F&lt;&#x2F;span&gt;&lt;span&gt;].delay {
&lt;&#x2F;span&gt;&lt;span&gt;    systemProcess.isAlive
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Similarily the &lt;code&gt;Concurrent&lt;&#x2F;code&gt; type class can be used to start a concurrent computation on a &lt;em&gt;fiber&lt;&#x2F;em&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span&gt;Concurrent[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;F&lt;&#x2F;span&gt;&lt;span&gt;].start(stream.compile.toVector)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;type-level&quot;&gt;Type level&lt;&#x2F;h2&gt;
&lt;p&gt;This would be it - except that we need one more thing because of the type level techniques described in the &lt;a href=&quot;https:&#x2F;&#x2F;blog.vigoo.dev&#x2F;posts&#x2F;prox-3-zio&#x2F;2019-02-10-prox-1-types.html&quot;&gt;first post&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;To understand the problem, let&#x27;s see how the &lt;em&gt;output redirection&lt;&#x2F;em&gt; operator works. It is implemented as an &lt;em&gt;extension method&lt;&#x2F;em&gt; on the &lt;code&gt;ProcessNode&lt;&#x2F;code&gt; type:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;implicit class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; ProcessNodeOutputRedirect&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;PN &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ProcessNode&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;NotRedirected&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;]](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;processNode&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;PN&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;[F[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;], To, NewOut, NewOutResult, Result &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ProcessNode[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;, Redirected, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;]]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;to&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: To)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;implicit
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;target&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: CanBeProcessOutputTarget.Aux[F, To, NewOut, NewOutResult],
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;redirectOutput&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: RedirectOutput.Aux[F, PN, To, NewOut, NewOutResult, Result]): Result &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;      redirectOutput(processNode, to)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This extension method basically just finds the appropriate type class implementations and then call it to alter the process node to register the output redirection:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;we are redirecting the output of &lt;code&gt;processNode&lt;&#x2F;code&gt; (of type &lt;code&gt;PN&lt;&#x2F;code&gt;) to &lt;code&gt;to&lt;&#x2F;code&gt; (of type &lt;code&gt;To&lt;&#x2F;code&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;target&lt;&#x2F;code&gt; is the &lt;code&gt;CanBeProcessOutputTarget&lt;&#x2F;code&gt; implementation, containing the actual code to set up the redirection&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;redirectOutput&lt;&#x2F;code&gt; is the process node type specific implementation of the &lt;code&gt;RedirectOutput&lt;&#x2F;code&gt; interface, knowing how to set up the redirection of a &lt;code&gt;Process&lt;&#x2F;code&gt; or a &lt;code&gt;PipedProcess&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;This code would compile, but we won&#x27;t be able to use it. For example for the following code:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span&gt;running &amp;lt;- (Process[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;IO&lt;&#x2F;span&gt;&lt;span&gt;](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;echo&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, List(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;Hello world!&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)) &amp;gt; tempFile.toPath).start(blocker)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;It fails with not being able to resolve the implicits correctly. The exact error of course depends much on the context but one example for the above line could be:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#383a42;&quot;&gt;&lt;code&gt;&lt;span&gt;[error] prox&#x2F;src&#x2F;test&#x2F;scala&#x2F;io&#x2F;github&#x2F;vigoo&#x2F;prox&#x2F;ProcessSpecs.scala:95:63: diverging implicit expansion for type cats.effect.Concurrent[F]
&lt;&#x2F;span&gt;&lt;span&gt;[error] starting with method catsIorTConcurrent in object Concurrent
&lt;&#x2F;span&gt;&lt;span&gt;[error]         running &amp;lt;- (Process[IO](&amp;quot;echo&amp;quot;, List(&amp;quot;Hello world!&amp;quot;)) &amp;gt; tempFile.toPath).start(blocker)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This does not really help understanding the real problem though. As we have seen earlier, in this library the &lt;code&gt;Process&lt;&#x2F;code&gt; types have to be parameterized with the context as well, because they store their redirection logic within themselves. That&#x27;s why we specify it explicitly in the example to be &lt;code&gt;IO&lt;&#x2F;code&gt;: &lt;code&gt;Process[IO](...)&lt;&#x2F;code&gt;. What we would expect is that by tying &lt;code&gt;F[_]&lt;&#x2F;code&gt; to &lt;code&gt;IO&lt;&#x2F;code&gt; at the beginning, all the subsequent operations such as the &lt;code&gt;&amp;gt;&lt;&#x2F;code&gt; redirection would respect this and the context gets inferred to be &lt;code&gt;IO&lt;&#x2F;code&gt; everywhere in the expression.&lt;&#x2F;p&gt;
&lt;p&gt;The compiler cannot do this. If we check the definition of &lt;code&gt;&amp;gt;&lt;&#x2F;code&gt; again, you can see that there is no connection expressed between the type &lt;code&gt;PN&lt;&#x2F;code&gt; (the actual process node type) and &lt;code&gt;F&lt;&#x2F;code&gt; which is used as a type parameter for the implicit parameters.&lt;&#x2F;p&gt;
&lt;p&gt;The fix is to link the two, and we have a technique exactly for this that I described earlier: the &lt;em&gt;aux pattern&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;First let&#x27;s write some code that, in compile time, can &quot;extract&quot; the context type from a process node type:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;trait&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; ContextOf&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;PN&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Context[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;object&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; ContextOf {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Aux[PN, F[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;]] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ContextOf[PN] {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Context[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;F[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;apply&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;[PN &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ProcessNode[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;], F[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;]](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;implicit &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;contextOf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: ContextOf.Aux[PN, F]): Aux[PN, F] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; contextOf
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;implicit def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;contextOfProcess&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;[F[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;], Out, Err, OutResult, ErrResult, IRS &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RedirectionState, ORS &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RedirectionState, ERS &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RedirectionState]:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  Aux[Process[F, Out, Err, OutResult, ErrResult, IRS, ORS, ERS], F] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ContextOf[Process[F, Out, Err, OutResult, ErrResult, IRS, ORS, ERS]] {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;override type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Context[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;F[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;implicit def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;contextOfPipedProcess&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;[
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  F[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;],
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  Out, Err,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  PN1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ProcessNode[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;],
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  PN2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ProcessNode[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;],
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  IRS &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RedirectionState, ORS &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RedirectionState, ERS &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RedirectionState]:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  Aux[PipedProcess[F, Out, Err, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Byte&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;, PN1, PN2, IRS, ORS, ERS], F] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ContextOf[PipedProcess[F, Out, Err, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Byte&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;, PN1, PN2, IRS, ORS, ERS]] {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;override type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Context[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;F[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Both &lt;code&gt;Process&lt;&#x2F;code&gt; and &lt;code&gt;PipedProcess&lt;&#x2F;code&gt; have the context as their first type parameter. By creating the &lt;code&gt;ContextOf&lt;&#x2F;code&gt; type class and the corresponding &lt;code&gt;Aux&lt;&#x2F;code&gt; type we can extend the &lt;code&gt;&amp;gt;&lt;&#x2F;code&gt; operator to &lt;em&gt;require&lt;&#x2F;em&gt; such a connection (a way to get a &lt;code&gt;F[_]&lt;&#x2F;code&gt; context out of a type &lt;code&gt;PN&lt;&#x2F;code&gt;) in compile time, and with the aux pattern it unifies the type parameters and the context type gets &lt;em&gt;chained&lt;&#x2F;em&gt; through all the subsequent calls as we desired:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;F&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;To&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;NewOut&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;NewOutResult&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Result &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ProcessNode&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Redirected&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;]]
&lt;&#x2F;span&gt;&lt;span&gt;    (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;to&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;To&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;implicit
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;contextOf&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ContextOf&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Aux&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;PN&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;F&lt;&#x2F;span&gt;&lt;span&gt;],
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;target&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;CanBeProcessOutputTarget&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Aux&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;F&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;To&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;NewOut&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;NewOutResult&lt;&#x2F;span&gt;&lt;span&gt;],
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;redirectOutput&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RedirectOutput&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Aux&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;F&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;PN&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;To&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;NewOut&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;NewOutResult&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Result&lt;&#x2F;span&gt;&lt;span&gt;]): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Result &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;      redirectOutput(processNode, to)
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;zio&quot;&gt;ZIO&lt;&#x2F;h2&gt;
&lt;p&gt;Now that everything is in place, we can try out whether &lt;em&gt;prox&lt;&#x2F;em&gt; is really working with other effect libraries such as &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;zio&#x2F;zio&quot;&gt;ZIO&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;ZIO&lt;&#x2F;em&gt; has a compatibility layer for &lt;em&gt;cats-effect&lt;&#x2F;em&gt;. It&#x27;s the implementation of the type classes cats-effect provides. It is in an extra library called &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;zio&#x2F;interop-cats&quot;&gt;zio-interop-cats&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;For running processes with &lt;em&gt;prox&lt;&#x2F;em&gt; we can use the following variants of the &lt;code&gt;ZIO&lt;&#x2F;code&gt; type:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;RIO[-R, +A]&lt;&#x2F;code&gt; which is an alias for &lt;code&gt;ZIO[R, scala.Throwable, A]&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;or &lt;code&gt;Task[A]&lt;&#x2F;code&gt; which is an alias for &lt;code&gt;ZIO[scala.Any, scala.Throwable, A]&lt;&#x2F;code&gt; if we don&#x27;t take advantage of the environment parameter &lt;code&gt;R&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;This in fact assuming the correct context only means switching &lt;code&gt;IO&lt;&#x2F;code&gt; to &lt;code&gt;RIO&lt;&#x2F;code&gt; or &lt;code&gt;Task&lt;&#x2F;code&gt; in the type parameter for &lt;code&gt;Process&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;import&lt;&#x2F;span&gt;&lt;span&gt; zio.interop.catz.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;Blocker[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RIO&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Console&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span&gt;]].use { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;blocker &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span&gt; console.putStrLn(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;Starting external process...&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;- &lt;&#x2F;span&gt;&lt;span&gt;(Process[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Task&lt;&#x2F;span&gt;&lt;span&gt;](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;echo&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, List(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;Hello world!&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)) &amp;gt; tempFile.toPath).start(blocker)
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;  } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;yield &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;A nice way to have everything set up for this is to use the interop library&#x27;s &lt;a href=&quot;https:&#x2F;&#x2F;zio.dev&#x2F;docs&#x2F;interop&#x2F;interop_catseffect#cats-app&quot;&gt;&lt;code&gt;CatsApp&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; trait as an entrypoint for the application.&lt;&#x2F;p&gt;
&lt;p&gt;This brings all the necessary implicits in scope and requires you to implement the following function as the entry point of the application:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;run&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;args&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;]): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ZIO&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Environment&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Nothing&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Int&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>prox part 2 - akka streams with cats effect</title>
        <published>2019-03-07T00:00:00+00:00</published>
        <updated>2019-03-07T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Daniel Vigovszky
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://blog.vigoo.dev/posts/prox-2-io-akkastreams/"/>
        <id>https://blog.vigoo.dev/posts/prox-2-io-akkastreams/</id>
        
        <content type="html" xml:base="https://blog.vigoo.dev/posts/prox-2-io-akkastreams/">&lt;h2 id=&quot;blog-post-series&quot;&gt;Blog post series&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;blog.vigoo.dev&#x2F;posts&#x2F;prox-1-types&#x2F;&quot;&gt;Part 1 - type level programming&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;blog.vigoo.dev&#x2F;posts&#x2F;prox-2-io-akkastreams&#x2F;&quot;&gt;Part 2 - akka streams with cats effect&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;blog.vigoo.dev&#x2F;posts&#x2F;prox-3-zio&#x2F;&quot;&gt;Part 3 - effect abstraction and ZIO&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;blog.vigoo.dev&#x2F;posts&#x2F;prox-4-simplify&#x2F;&quot;&gt;Part 4 - simplified redesign&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;intro&quot;&gt;Intro&lt;&#x2F;h2&gt;
&lt;p&gt;In the previous post we have seen how &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;vigoo&#x2F;prox&quot;&gt;prox&lt;&#x2F;a&gt; applies advanced type level programming techniques to express executing external system processes. The input and output of these processes can be connected to &lt;strong&gt;streams&lt;&#x2F;strong&gt;. The current version of &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;vigoo&#x2F;prox&quot;&gt;prox&lt;&#x2F;a&gt; uses the &lt;a href=&quot;https:&#x2F;&#x2F;fs2.io&#x2F;&quot;&gt;fs2&lt;&#x2F;a&gt; library to describe these streams, and &lt;a href=&quot;https:&#x2F;&#x2F;typelevel.org&#x2F;cats-effect&#x2F;&quot;&gt;cats-effect&lt;&#x2F;a&gt; as an &lt;strong&gt;IO&lt;&#x2F;strong&gt; abstraction, allowing it to separate the specification of a process pipeline from its actual execution.&lt;&#x2F;p&gt;
&lt;p&gt;In this post we will keep &lt;a href=&quot;https:&#x2F;&#x2F;typelevel.org&#x2F;cats-effect&#x2F;&quot;&gt;cats-effect&lt;&#x2F;a&gt; but replace &lt;a href=&quot;https:&#x2F;&#x2F;fs2.io&#x2F;&quot;&gt;fs2&lt;&#x2F;a&gt; with the stream library of the Akka toolkit, &lt;a href=&quot;https:&#x2F;&#x2F;doc.akka.io&#x2F;docs&#x2F;akka&#x2F;2.5&#x2F;stream&#x2F;&quot;&gt;Akka Streams&lt;&#x2F;a&gt;. This will be a hybrid solution, as Akka Streams is not using any kind of IO abstraction, unlike &lt;a href=&quot;https:&#x2F;&#x2F;fs2.io&#x2F;&quot;&gt;fs2&lt;&#x2F;a&gt; which is implemented on top of &lt;a href=&quot;https:&#x2F;&#x2F;typelevel.org&#x2F;cats-effect&#x2F;&quot;&gt;cats-effect&lt;&#x2F;a&gt;. We will experiment with implementing &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;vigoo&#x2F;prox&quot;&gt;prox&lt;&#x2F;a&gt; purely with the &lt;em&gt;Akka&lt;&#x2F;em&gt; libraries in a future post.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;replacing-fs2-with-akka-streams&quot;&gt;Replacing fs2 with Akka Streams&lt;&#x2F;h2&gt;
&lt;p&gt;We start by removing the &lt;a href=&quot;https:&#x2F;&#x2F;fs2.io&#x2F;&quot;&gt;fs2&lt;&#x2F;a&gt; dependency and adding &lt;em&gt;Akka Streams&lt;&#x2F;em&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;co.fs2&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt; %% &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;fs2-core&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt; % &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;1.0.3&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;co.fs2&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt; %% &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;fs2-io&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt; % &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;1.0.3&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;com.typesafe.akka&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt; %% &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;akka-stream&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt; % &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;2.5.20&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Then we have to change all the &lt;em&gt;fs2&lt;&#x2F;em&gt; types used in the codebase to the matching &lt;em&gt;Akka Streams&lt;&#x2F;em&gt; types. The following table describe these pairs:&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;fs2&lt;&#x2F;th&gt;&lt;th&gt;Akka Streams&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;Stream[IO, O]&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;code&gt;Source[O, Any]&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;Pipe[IO, I, O]&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;code&gt;Flow[I, O, Any]&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;Sink[IO, O]&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;code&gt;Sink[O, Future[Done]&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;Another small difference that requires changing a lot of our functions is the &lt;em&gt;implicit context&lt;&#x2F;em&gt; these streaming solutions require.&lt;&#x2F;p&gt;
&lt;p&gt;With the original implementation it used to be:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;an implicit &lt;code&gt;ContextShift[IO]&lt;&#x2F;code&gt; instance&lt;&#x2F;li&gt;
&lt;li&gt;and an explicitly passed &lt;em&gt;blocking execution context&lt;&#x2F;em&gt; of type &lt;code&gt;ExecutionContext&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;We can treat the blocking execution context as part of the implicit context for &lt;em&gt;prox&lt;&#x2F;em&gt; too, and could refactor the library to pass both of them wrapped together within a context object.&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s see what we need for the &lt;em&gt;Akka Streams&lt;&#x2F;em&gt; based implementation!&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;an implicit &lt;code&gt;ContextShift[IO]&lt;&#x2F;code&gt; is &lt;em&gt;still needed&lt;&#x2F;em&gt; because we are still using &lt;code&gt;cats-effect&lt;&#x2F;code&gt; as our IO abstraction&lt;&#x2F;li&gt;
&lt;li&gt;The blocking execution context however was only used for passing it to &lt;em&gt;fs2&lt;&#x2F;em&gt;, so we can remove that&lt;&#x2F;li&gt;
&lt;li&gt;And for &lt;em&gt;Akka Streams&lt;&#x2F;em&gt; we will need an execution context of type &lt;code&gt;ExecutionContext&lt;&#x2F;code&gt; and also a &lt;code&gt;Materializer&lt;&#x2F;code&gt;. The materializer is used by &lt;em&gt;Akka Streams&lt;&#x2F;em&gt; to execute blueprints of streams. The usual implementation is &lt;code&gt;ActorMaterializer&lt;&#x2F;code&gt; which does that by spawning actors implementing the stream graph.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;So for example the &lt;code&gt;start&lt;&#x2F;code&gt; extension method, is modified like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;start&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RP&lt;&#x2F;span&gt;&lt;span&gt;](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;blockingExecutionContext&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ExecutionContext&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;               (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;implicit &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;start&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Start&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Aux&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;PN&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RP&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;], 
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;contextShift&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ContextShift&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;IO&lt;&#x2F;span&gt;&lt;span&gt;]): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;IO&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RP&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;start&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RP&lt;&#x2F;span&gt;&lt;span&gt;]()
&lt;&#x2F;span&gt;&lt;span&gt;               (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;implicit &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;start&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Start&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Aux&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;PN&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RP&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;],
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;contextShift&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ContextShift&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;IO&lt;&#x2F;span&gt;&lt;span&gt;],
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;materializer&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Materializer&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;executionContext&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ExecutionContext&lt;&#x2F;span&gt;&lt;span&gt;): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;IO&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RP&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;It turns out that there is one more minor difference that needs changes in the internal type signatures.&lt;&#x2F;p&gt;
&lt;p&gt;In &lt;em&gt;Akka Streams&lt;&#x2F;em&gt; byte streams are represented by not streams of element type &lt;code&gt;Byte&lt;&#x2F;code&gt;. like in &lt;em&gt;fs2&lt;&#x2F;em&gt;, but streams of &lt;em&gt;chunks&lt;&#x2F;em&gt; called &lt;code&gt;ByteString&lt;&#x2F;code&gt;s. So everywhere we used &lt;code&gt;Byte&lt;&#x2F;code&gt; as element type, such as on the process boundaries, we now simply have to use &lt;code&gt;ByteStrings&lt;&#x2F;code&gt;, for example:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;apply&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;from&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;PN1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;to&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;PN2&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;via&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Pipe&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;IO&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Byte&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Byte&lt;&#x2F;span&gt;&lt;span&gt;]): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ResultProcess 
&lt;&#x2F;span&gt;&lt;span&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;apply&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;from&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;PN1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;to&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;PN2&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;via&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Flow&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ByteString&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ByteString&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Any&lt;&#x2F;span&gt;&lt;span&gt;]): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ResultProcess 
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Another thing to notice is that &lt;em&gt;fs2&lt;&#x2F;em&gt; had a type parameter for passing the &lt;code&gt;IO&lt;&#x2F;code&gt; monad to run on. As I wrote earlier, &lt;em&gt;Akka Streams&lt;&#x2F;em&gt; does not depend on such abstractions, so this parameter is missing. On the other hand, it has a third type parameter which is set in the above example to &lt;code&gt;Any&lt;&#x2F;code&gt;. This parameter is called &lt;code&gt;Mat&lt;&#x2F;code&gt; and represents the type of the value the flow will materialize to. At this point we don&#x27;t care about it so we set it to &lt;code&gt;Any&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s take a look of the &lt;code&gt;connect&lt;&#x2F;code&gt; function of the &lt;code&gt;ProcessIO&lt;&#x2F;code&gt; trait. With &lt;em&gt;fs2&lt;&#x2F;em&gt; the &lt;code&gt;InputStreamingSource&lt;&#x2F;code&gt; is implemented like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; InputStreamingSource&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;source&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Source&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ByteString&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Any&lt;&#x2F;span&gt;&lt;span&gt;]) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span&gt;ProcessInputSource &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;override def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;toRedirect&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: Redirect &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Redirect.PIPE
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;override def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;connect&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;systemProcess&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: lang.Process, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;blockingExecutionContext&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: ExecutionContext)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;                        (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;implicit &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;contextShift&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: ContextShift[IO]): Stream[IO, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Byte&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;        source.observe(
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;            io.writeOutputStream[IO](
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;                IO { systemProcess.getOutputStream },
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;                closeAfterUse &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;true,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;                blockingExecutionContext &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; blockingExecutionContext))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;override def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;run&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;stream&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: Stream[IO, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Byte&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;])(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;implicit &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;contextShift&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: ContextShift[IO]): IO[Fiber[IO, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Unit&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;]] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;        Concurrent[IO].start(stream.compile.drain) 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We have a &lt;code&gt;source&lt;&#x2F;code&gt; stream and during the setup of the process graph, when the system process has been already created, we have to set up the redirection of this source stream to this process. This is separated to a &lt;code&gt;connect&lt;&#x2F;code&gt; and a &lt;code&gt;run&lt;&#x2F;code&gt; step:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;connect&lt;&#x2F;code&gt; step creates an &lt;em&gt;fs2 stream&lt;&#x2F;em&gt; that observers the source stream and sends each byte to the system process&#x27;s standard input. This just &lt;strong&gt;defines&lt;&#x2F;strong&gt; this stream, and returns it as a pure functional value.&lt;&#x2F;li&gt;
&lt;li&gt;The &lt;code&gt;run&lt;&#x2F;code&gt; step on the other hand has the result type &lt;code&gt;IO[Fiber[IO, Unit]]&lt;&#x2F;code&gt;. It &lt;strong&gt;defines&lt;&#x2F;strong&gt; the effect of starting a new thread and running the stream on it.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;In the case of &lt;em&gt;fs2&lt;&#x2F;em&gt; we can be sure that the &lt;code&gt;source.observe&lt;&#x2F;code&gt; function is pure just by checking it&#x27;s type signature:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;observe&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;p&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Pipe&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;F&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;O&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Unit&lt;&#x2F;span&gt;&lt;span&gt;])(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;implicit &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;F&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Concurrent&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;F&lt;&#x2F;span&gt;&lt;span&gt;]): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Stream&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;F&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;O&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;All side-effecting functions in &lt;em&gt;fs2&lt;&#x2F;em&gt; are defined as &lt;code&gt;IO&lt;&#x2F;code&gt; functions, so we simply know that this one is not among them, and that&#x27;s why the &lt;code&gt;connect&lt;&#x2F;code&gt; was a pure, non-&lt;code&gt;IO&lt;&#x2F;code&gt; function in the original implementation. With &lt;em&gt;Akka Streams&lt;&#x2F;em&gt; we don&#x27;t have any information about this encoded in the type system. We use the &lt;code&gt;source.alsoTo&lt;&#x2F;code&gt; function:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;alsoTo&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;that&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Graph&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;SinkShape&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Out&lt;&#x2F;span&gt;&lt;span&gt;], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;]): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Repr&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Out&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;which is actually also pure (only creating a blueprint of the graph to be executed), so we can safely replace the implementation to this in the &lt;em&gt;Akka Streams&lt;&#x2F;em&gt; version:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; InputStreamingSource&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;source&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Source&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ByteString&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Any&lt;&#x2F;span&gt;&lt;span&gt;]) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span&gt;ProcessInputSource &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;override def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;toRedirect&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: Redirect &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Redirect.PIPE
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;override def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;connect&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;systemProcess&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: lang.Process)(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;implicit &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;contextShift&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: ContextShift[IO]): Source[ByteString, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Any&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;        source.alsoTo(fromOutputStream(() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; systemProcess.getOutputStream, autoFlush &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;true))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;override def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;run&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;stream&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: Source[ByteString, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Any&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;])
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;                    (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;implicit &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;contextShift&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: ContextShift[IO],
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;                     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;materializer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: Materializer,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;                     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;executionContext&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: ExecutionContext): IO[Fiber[IO, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Unit&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;]] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;        Concurrent[IO].start(IO.async { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;finish &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;            stream.runWith(Sink.ignore).onComplete {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Success(Done) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; finish(Right(()))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Failure(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;reason&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; finish(Left(reason))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;            }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;        })
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The implementation of &lt;code&gt;run&lt;&#x2F;code&gt; above is a nice example of how we can integrate asynchronous operations not implemented with &lt;code&gt;cats-effect&lt;&#x2F;code&gt; to an &lt;code&gt;IO&lt;&#x2F;code&gt; based program. With &lt;code&gt;IO.async&lt;&#x2F;code&gt; we define how to start the asynchronous operation (in this case running the &lt;em&gt;Akka stream&lt;&#x2F;em&gt;) and we get a callback function, &lt;code&gt;finish&lt;&#x2F;code&gt; to be called when the asynchronous operation ends. The stream here &lt;em&gt;materializes&lt;&#x2F;em&gt; to a &lt;code&gt;Future[T]&lt;&#x2F;code&gt; value, so we can use it&#x27;s &lt;code&gt;onComplete&lt;&#x2F;code&gt; function to notify the IO system about the finished stream. The &lt;code&gt;IO&lt;&#x2F;code&gt; value returned by &lt;code&gt;IO.async&lt;&#x2F;code&gt; represents the whole asynchronous operation, it returns it&#x27;s final result when the callback is called, and &quot;blocks&quot; the program flow until it is done. This does not mean actually blocking a thread; but the next IO function will be executed only when it finished running (as it&#x27;s type is &lt;code&gt;IO[A]&lt;&#x2F;code&gt;). That is not what we need here, so we use &lt;code&gt;Concurrent[IO].start&lt;&#x2F;code&gt; to put this &lt;code&gt;IO&lt;&#x2F;code&gt; action on a separate &lt;em&gt;fiber&lt;&#x2F;em&gt;. This way all streams involved in the process graph will be executing in parallel.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;calculating-the-result&quot;&gt;Calculating the result&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;vigoo&#x2F;prox&quot;&gt;prox&lt;&#x2F;a&gt; supports multiple ways to calculate a result of running a process graph:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;If the target is a &lt;code&gt;Sink&lt;&#x2F;code&gt;, the result type is &lt;code&gt;Unit&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;If the pipe&#x27;s output is &lt;code&gt;Out&lt;&#x2F;code&gt; and there is a &lt;code&gt;Monoid&lt;&#x2F;code&gt; instance for &lt;code&gt;Out&lt;&#x2F;code&gt;, the stream is folded into an &lt;code&gt;Out&lt;&#x2F;code&gt; value&lt;&#x2F;li&gt;
&lt;li&gt;Otherwise if the pipe&#x27;s output is &lt;code&gt;Out&lt;&#x2F;code&gt;, the result type will be &lt;code&gt;Vector[Out]&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;These cases can be enforced by the &lt;code&gt;Drain&lt;&#x2F;code&gt;, &lt;code&gt;ToVector&lt;&#x2F;code&gt; and &lt;code&gt;Fold&lt;&#x2F;code&gt; wrapper classes.&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s see how we can implement them with &lt;em&gt;Akka Streams&lt;&#x2F;em&gt; compared to &lt;em&gt;fs2&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;drain-sink&quot;&gt;Drain sink&lt;&#x2F;h4&gt;
&lt;p&gt;The sink version was implemented like this with &lt;em&gt;fs2&lt;&#x2F;em&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span&gt;Concurrent[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;IO&lt;&#x2F;span&gt;&lt;span&gt;].start(stream.compile.drain)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;.compile&lt;&#x2F;code&gt; gets an interface that can be used to convert the stream to a &lt;code&gt;IO[A]&lt;&#x2F;code&gt; value in multiple ways.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;.drain&lt;&#x2F;code&gt; is one of them. It runs the stream but ignores its elements, having a result type of &lt;code&gt;IO[Unit]&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;We want to run this concurrently with the other streams so we move it to a &lt;em&gt;fiber&lt;&#x2F;em&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;With &lt;em&gt;Akka Streams&lt;&#x2F;em&gt; there is one big difference. In &lt;em&gt;fs2&lt;&#x2F;em&gt; the sink is represented as a &lt;code&gt;Pipe[F, E, Unit]&lt;&#x2F;code&gt;, so we could treat it in the same way as other stream segments. In this case the &lt;code&gt;Sink&lt;&#x2F;code&gt; is not a &lt;code&gt;Flow&lt;&#x2F;code&gt;, so we do a trick to keep the interface as close to the original one as possible:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span&gt;create((&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;sink&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Sink&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ByteString&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Future&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;R&lt;&#x2F;span&gt;&lt;span&gt;]]) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;OutputStreamingTarget&lt;&#x2F;span&gt;&lt;span&gt;(Flow.fromFunction(identity)) 
&lt;&#x2F;span&gt;&lt;span&gt;                                                with ProcessOutputTarget[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ByteString&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;R&lt;&#x2F;span&gt;&lt;span&gt;] {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;override def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;run&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;stream&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Source&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ByteString&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Any&lt;&#x2F;span&gt;&lt;span&gt;])
&lt;&#x2F;span&gt;&lt;span&gt;                    (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;implicit &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;contextShift&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ContextShift&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;IO&lt;&#x2F;span&gt;&lt;span&gt;],
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;materializer&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Materializer&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;executionContext&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ExecutionContext&lt;&#x2F;span&gt;&lt;span&gt;): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;IO&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Fiber&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;IO&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;R&lt;&#x2F;span&gt;&lt;span&gt;]] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span&gt;    Concurrent[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;IO&lt;&#x2F;span&gt;&lt;span&gt;].start(IO.async { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;complete &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        stream.runWith(sink).onComplete {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span&gt;Success(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; complete(Right(value))
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span&gt;Failure(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;reason&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; complete(Left(reason))
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    })
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The trick is that we create the &lt;code&gt;OutputStreamingTarget&lt;&#x2F;code&gt; with an identity flow, and only use the &lt;code&gt;Sink&lt;&#x2F;code&gt; when we actually run the stream, passing it to the &lt;code&gt;runWith&lt;&#x2F;code&gt; function. This materializes the stream into a &lt;code&gt;Future[Done]&lt;&#x2F;code&gt; value, that we can tie back to our &lt;code&gt;IO&lt;&#x2F;code&gt; system with &lt;code&gt;IO.async&lt;&#x2F;code&gt; as I already described it.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;combine-with-monoid&quot;&gt;Combine with Monoid&lt;&#x2F;h4&gt;
&lt;p&gt;When the element type is a &lt;em&gt;monoid&lt;&#x2F;em&gt; we can fold it into a single value. &lt;em&gt;Fs2&lt;&#x2F;em&gt; directly supports this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span&gt;Concurrent[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;IO&lt;&#x2F;span&gt;&lt;span&gt;].start(stream.compile.foldMonoid)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;em&gt;Akka Streams&lt;&#x2F;em&gt; does not use cats type classes, but it also has a way to &lt;em&gt;fold&lt;&#x2F;em&gt; the stream, so we can easily implement it using the &lt;em&gt;monoid instance&lt;&#x2F;em&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span&gt;Concurrent[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;IO&lt;&#x2F;span&gt;&lt;span&gt;].start(IO.async { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;complete &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    stream.runFold(monoid.empty)(monoid.combine).onComplete {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span&gt;Success(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; complete(Right(value))
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span&gt;Failure(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;reason&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; complete(Left(reason))
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;})
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;vector-of-elements&quot;&gt;Vector of elements&lt;&#x2F;h4&gt;
&lt;p&gt;Finally let&#x27;s see the version that keeps all the stream elements in a vector as a result:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span&gt;Concurrent[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;IO&lt;&#x2F;span&gt;&lt;span&gt;].start(stream.compile.toVector)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;With &lt;em&gt;Akka Streams&lt;&#x2F;em&gt; we can do it by running the stream into a &lt;em&gt;sink&lt;&#x2F;em&gt; created for this, &lt;code&gt;Sink.seq&lt;&#x2F;code&gt;. It materializes into a &lt;code&gt;Future[Seq[T]]&lt;&#x2F;code&gt; value that holds all the elements
of the executed stream:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span&gt;Concurrent[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;IO&lt;&#x2F;span&gt;&lt;span&gt;].start(IO.async { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;complete &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    stream.runWith(Sink.seq).onComplete {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span&gt;Success(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; complete(Right(value.toVector))
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span&gt;Failure(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;reason&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; complete(Left(reason))
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;})
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;testing&quot;&gt;Testing&lt;&#x2F;h3&gt;
&lt;p&gt;At this point the only remaining thing is to modify the tests too. One of the more complex examples is the &lt;code&gt;customProcessPiping&lt;&#x2F;code&gt; test case. With &lt;em&gt;fs2&lt;&#x2F;em&gt; it takes advantage of some &lt;em&gt;text processing&lt;&#x2F;em&gt; pipe elements coming with the library:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;customPipe&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Pipe&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;IO&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Byte&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Byte&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span&gt;    (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Stream&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;IO&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Byte&lt;&#x2F;span&gt;&lt;span&gt;]) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; s
&lt;&#x2F;span&gt;&lt;span&gt;    .through(text.utf8Decode)
&lt;&#x2F;span&gt;&lt;span&gt;    .through(text.lines)
&lt;&#x2F;span&gt;&lt;span&gt;    .map(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;.split(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;&amp;#39; &amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;).toVector)
&lt;&#x2F;span&gt;&lt;span&gt;    .map(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;v &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; v.map(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt; + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot; !!!&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;).mkString(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot; &amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;    .intersperse(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0997b3;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    .through(text.utf8Encode)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;proc &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;Process(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;echo&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, List(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;This is a test string&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;            .via(customPipe)
&lt;&#x2F;span&gt;&lt;span&gt;            .to(Process(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;wc&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, List(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;-w&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)) &amp;gt; text.utf8Decode[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;IO&lt;&#x2F;span&gt;&lt;span&gt;])
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;There are similar tools in &lt;em&gt;Akka Streams&lt;&#x2F;em&gt; to express this in the &lt;code&gt;Framing&lt;&#x2F;code&gt; module:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;customPipe &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;Framing.delimiter(
&lt;&#x2F;span&gt;&lt;span&gt;      delimiter &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;ByteString(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0997b3;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;      maximumFrameLength &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;10000&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;      allowTruncation &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;true
&lt;&#x2F;span&gt;&lt;span&gt;    ).map(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;.utf8String)
&lt;&#x2F;span&gt;&lt;span&gt;     .map(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;.split(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;&amp;#39; &amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;).toVector)
&lt;&#x2F;span&gt;&lt;span&gt;     .map(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;v &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; v.map(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt; + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot; !!!&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;).mkString(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot; &amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;     .intersperse(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0997b3;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;     .map(ByteString.apply)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;proc &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;Process(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;echo&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, List(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;This is a test string&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;            .via(customPipe)
&lt;&#x2F;span&gt;&lt;span&gt;            .to(Process(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;wc&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, List(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;-w&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)) &amp;gt; utf8Decode)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;where &lt;code&gt;utf8Decode&lt;&#x2F;code&gt; is a helper sink defined as:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;utf8Decode&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Sink&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ByteString&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Future&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;]] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span&gt;    Flow[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ByteString&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;        .reduce(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt; ++ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        .map(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;.utf8String)
&lt;&#x2F;span&gt;&lt;span&gt;        .toMat(Sink.head)(Keep.right)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;First it concatenates the &lt;code&gt;ByteString&lt;&#x2F;code&gt; chunks, then simply calls &lt;code&gt;.utf8String&lt;&#x2F;code&gt; on the result.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;final-thoughts&quot;&gt;Final thoughts&lt;&#x2F;h2&gt;
&lt;p&gt;We have seen that it is relatively easy to replace the stream library in &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;vigoo&#x2F;prox&quot;&gt;prox&lt;&#x2F;a&gt; without changing it&#x27;s interface much, if we keep &lt;a href=&quot;https:&#x2F;&#x2F;typelevel.org&#x2F;cats-effect&#x2F;&quot;&gt;cats-effect&lt;&#x2F;a&gt; for expressing the effectful computations. The complete working example is available on the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;vigoo&#x2F;prox&#x2F;compare&#x2F;akka-streams&quot;&gt;&lt;code&gt;akka-streams&lt;&#x2F;code&gt; branch&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>prox part 1 - type level programming</title>
        <published>2019-02-10T00:00:00+00:00</published>
        <updated>2019-02-10T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Daniel Vigovszky
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://blog.vigoo.dev/posts/prox-1-types/"/>
        <id>https://blog.vigoo.dev/posts/prox-1-types/</id>
        
        <content type="html" xml:base="https://blog.vigoo.dev/posts/prox-1-types/">&lt;h2 id=&quot;blog-post-series&quot;&gt;Blog post series&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;blog.vigoo.dev&#x2F;posts&#x2F;prox-1-types&#x2F;&quot;&gt;Part 1 - type level programming&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;blog.vigoo.dev&#x2F;posts&#x2F;prox-2-io-akkastreams&#x2F;&quot;&gt;Part 2 - akka streams with cats effect&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;blog.vigoo.dev&#x2F;posts&#x2F;prox-3-zio&#x2F;&quot;&gt;Part 3 - effect abstraction and ZIO&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;blog.vigoo.dev&#x2F;posts&#x2F;prox-4-simplify&#x2F;&quot;&gt;Part 4 - simplified redesign&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;intro&quot;&gt;Intro&lt;&#x2F;h2&gt;
&lt;p&gt;I started writing &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;vigoo&#x2F;prox&quot;&gt;prox&lt;&#x2F;a&gt; at the end of 2017 for two reasons. First, I never liked any of the existing solutions for running external processes and capture their input&#x2F;output streams. And I just returned from the &lt;a href=&quot;https:&#x2F;&#x2F;scala.io&#x2F;&quot;&gt;scala.io conference&lt;&#x2F;a&gt; full of inspiration; I wanted to try out some techniques and libraries and this seemed to be a nice small project to do so.&lt;&#x2F;p&gt;
&lt;p&gt;Since then, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;vigoo&#x2F;prox&quot;&gt;prox&lt;&#x2F;a&gt; has been proved to be useful, we are using it at &lt;a href=&quot;https:&#x2F;&#x2F;prezi.com&#x2F;&quot;&gt;Prezi&lt;&#x2F;a&gt; in all our Scala projects where we have to deal with external processes. The last stable version was created last October, after &lt;a href=&quot;https:&#x2F;&#x2F;typelevel.org&#x2F;cats-effect&#x2F;&quot;&gt;cats-effect 1.0&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;fs2.io&#x2F;&quot;&gt;fs2 1.0&lt;&#x2F;a&gt; was released.&lt;&#x2F;p&gt;
&lt;p&gt;This is the first part of a series of blog posts dedicated to this library. In the first one I&#x27;m going to talk about &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;milessabin&#x2F;shapeless&quot;&gt;shapeless&lt;&#x2F;a&gt; and &lt;em&gt;type level programming&lt;&#x2F;em&gt; techniques are used to create a strongly typed interface for starting system processes. In future posts I will explore replacing its dependencies such as using &lt;a href=&quot;https:&#x2F;&#x2F;doc.akka.io&#x2F;docs&#x2F;akka&#x2F;2.5&#x2F;stream&#x2F;&quot;&gt;akka-streams&lt;&#x2F;a&gt; instead of &lt;a href=&quot;https:&#x2F;&#x2F;fs2.io&#x2F;&quot;&gt;fs2&lt;&#x2F;a&gt; or &lt;a href=&quot;https:&#x2F;&#x2F;scalaz.github.io&#x2F;scalaz-zio&#x2F;&quot;&gt;ZIO&lt;&#x2F;a&gt; instead of &lt;a href=&quot;https:&#x2F;&#x2F;typelevel.org&#x2F;cats-effect&#x2F;&quot;&gt;cats-effect&lt;&#x2F;a&gt;. These different versions will be a good opportunity to do some performance comparison, and to close the series with creating a new version of the library which is easier to use in the alternative environments.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;limiting-redirection&quot;&gt;Limiting redirection&lt;&#x2F;h2&gt;
&lt;p&gt;When I started writing the library I wanted to explore how I can express some strict constraints on the type level:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;A process can have its input, output and error streams redirected, but only once&lt;&#x2F;li&gt;
&lt;li&gt;Processes without redirected output can be piped to processes without a redirected input&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;In prox &lt;em&gt;0.2.1&lt;&#x2F;em&gt; a single system process is described by the following type:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; Process&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Out&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Err&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;OutResult&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ErrResult&lt;&#x2F;span&gt;&lt;span&gt;, 
&lt;&#x2F;span&gt;&lt;span&gt;              &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;IRS &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RedirectionState&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ORS &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RedirectionState&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ERS &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RedirectionState&lt;&#x2F;span&gt;&lt;span&gt;](
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;command&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;arguments&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;],
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;workingDirectory&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Path&lt;&#x2F;span&gt;&lt;span&gt;],
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;inputSource&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ProcessInputSource&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;outputTarget&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ProcessOutputTarget&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Out&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;OutResult&lt;&#x2F;span&gt;&lt;span&gt;],
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;errorTarget&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ProcessErrorTarget&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Err&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ErrResult&lt;&#x2F;span&gt;&lt;span&gt;],
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;environmentVariables&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Map&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;])
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span&gt;ProcessNode[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Out&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Err&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;IRS&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ORS&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ERS&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;but let&#x27;s focus first on the requirement to be able to redirect one of the streams &lt;em&gt;maximum once&lt;&#x2F;em&gt;.
This is encoded by the &lt;code&gt;IRS&lt;&#x2F;code&gt;, &lt;code&gt;ORS&lt;&#x2F;code&gt; and &lt;code&gt;ERS&lt;&#x2F;code&gt; type parameters, which are all have to be subtypes of &lt;code&gt;RedirectionState&lt;&#x2F;code&gt;. &lt;code&gt;RedirectionState&lt;&#x2F;code&gt; is a &lt;strong&gt;phantom type&lt;&#x2F;strong&gt;; there are no values ever created of this type, it is only used in type signatures to encode whether one of the three streams are already redirected or not:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;** Phantom type representing the redirection state of a process *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;sealed trait&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; RedirectionState
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;** Indicates that the given channel is not redirected yet *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;trait&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; NotRedirected &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span&gt;RedirectionState
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;** Indicates that the given channel has already been redirected *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;trait&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; Redirected &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span&gt;RedirectionState
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;So for example with a simplified model of a &lt;em&gt;process&lt;&#x2F;em&gt;, &lt;code&gt;Process[IRS &amp;lt;: RedirectionState, ORS &amp;lt;: RedirectionState, ERS &amp;lt;: RedirectionState]&lt;&#x2F;code&gt;, using the output redirection operator &lt;code&gt;&amp;gt;&lt;&#x2F;code&gt; would change the types in the following way:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;p1&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Process&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;NotRedirected&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;NotRedirected&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;NotRedirected&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= ???
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;p2&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Process&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;NotRedirected&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Redirected&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;NotRedirected&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; p1 &amp;gt; (home &#x2F; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;tmp&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt; &#x2F; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;out.txt&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;p3 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; p2 &amp;gt; (home &#x2F; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;tmp&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt; &#x2F; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;another.txt&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; THIS MUST NOT COMPILE
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;How can we restrict the redirect function to only work on &lt;code&gt;Process[_, NotRedirected, _]&lt;&#x2F;code&gt;? We can define it as an &lt;strong&gt;extension method&lt;&#x2F;strong&gt; with an implicit class (once again this is a simplified version focusing only on the &lt;em&gt;redirection state&lt;&#x2F;em&gt; handling):&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;implicit class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; ProcessNodeOutputRedirect&lt;&#x2F;span&gt;&lt;span&gt;[
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;IRS &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RedirectionState&lt;&#x2F;span&gt;&lt;span&gt;, 
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ERS &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RedirectionState&lt;&#x2F;span&gt;&lt;span&gt;, 
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;PN &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Process&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;IRS&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;NotRedirected&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ERS&lt;&#x2F;span&gt;&lt;span&gt;]](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;process&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;PN&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;[To](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;to&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: To)(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;implicit &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;target&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: CanBeProcessOutputTarget[To]): Process[IRS, Redirected, ERS] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= ???
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;By forcing the &lt;code&gt;ORS&lt;&#x2F;code&gt; type parameter to be &lt;code&gt;NotRedirected&lt;&#x2F;code&gt; and setting it to &lt;code&gt;Redirected&lt;&#x2F;code&gt; in the result type we can guarantee that this function can only be called on a process that does not have their output redirected yet. The &lt;em&gt;target&lt;&#x2F;em&gt; of the redirection is extensible through the &lt;code&gt;CanBeProcessOutputTarget&lt;&#x2F;code&gt; type class, as we will see later.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;dependent-types&quot;&gt;Dependent types&lt;&#x2F;h2&gt;
&lt;p&gt;Reality is much more complicated, because of &lt;em&gt;process piping&lt;&#x2F;em&gt; and because the process types encode the redirection result types too. Let&#x27;s get back to our &lt;code&gt;&amp;gt;&lt;&#x2F;code&gt; function and see how we could modify it so it works with piped processes too. Anyway, how is process piping encoded in this library?&lt;&#x2F;p&gt;
&lt;p&gt;Two processes connected through a pipe are represented by the &lt;code&gt;PipedProcess&lt;&#x2F;code&gt; class. Both &lt;code&gt;Procses&lt;&#x2F;code&gt; and &lt;code&gt;PipedProcess&lt;&#x2F;code&gt; implements the following trait:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;sealed trait&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; ProcessNode&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Out&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Err&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;IRS &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RedirectionState&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ORS &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RedirectionState&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ERS &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RedirectionState&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We&#x27;ve already seen &lt;code&gt;Process&lt;&#x2F;code&gt;. &lt;code&gt;PipedProcess&lt;&#x2F;code&gt; is a bit more complicated:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; PipedProcess&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Out&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Err&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;PN1Out&lt;&#x2F;span&gt;&lt;span&gt;, 
&lt;&#x2F;span&gt;&lt;span&gt;                   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;PN1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ProcessNode&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;], 
&lt;&#x2F;span&gt;&lt;span&gt;                   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;PN2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ProcessNode&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;], 
&lt;&#x2F;span&gt;&lt;span&gt;                   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;IRS &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RedirectionState&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ORS &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RedirectionState&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ERS &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RedirectionState&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;    (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;from&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;PN1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;createTo&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;PipeConstruction&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;PN1Out&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;PN2&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span&gt;ProcessNode[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Out&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Err&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;IRS&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ORS&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ERS&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;To make &lt;code&gt;&amp;gt;&lt;&#x2F;code&gt; work on both, we can start by modifying its definition to work on &lt;em&gt;any&lt;&#x2F;em&gt; &lt;code&gt;ProcessNode&lt;&#x2F;code&gt; not just &lt;code&gt;Process&lt;&#x2F;code&gt; (omitting the output type params for now):&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;implicit class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; ProcessNodeOutputRedirect&lt;&#x2F;span&gt;&lt;span&gt;[
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;IRS &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RedirectionState&lt;&#x2F;span&gt;&lt;span&gt;, 
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ERS &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RedirectionState&lt;&#x2F;span&gt;&lt;span&gt;, 
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;PN &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ProcessNode&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;IRS&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;NotRedirected&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ERS&lt;&#x2F;span&gt;&lt;span&gt;]](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;process&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;PN&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;[To](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;to&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: To)(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;implicit &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;target&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: CanBeProcessOutputTarget[To]): ProcessNode[IRS, Redirected, ERS] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= ???
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This has a serious problem though. The output type is &lt;code&gt;ProcessNode&lt;&#x2F;code&gt; and not the &quot;real&quot; process type, which means that we lose type information and all the other dependent typed operations will not work. We have to make the result type &lt;strong&gt;depend&lt;&#x2F;strong&gt; on the input!&lt;&#x2F;p&gt;
&lt;p&gt;We may try to use the &lt;code&gt;RedirectionOutput&lt;&#x2F;code&gt; type class like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;implicit class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; ProcessNodeOutputRedirect&lt;&#x2F;span&gt;&lt;span&gt;[
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;IRS &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RedirectionState&lt;&#x2F;span&gt;&lt;span&gt;, 
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ERS &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RedirectionState&lt;&#x2F;span&gt;&lt;span&gt;, 
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;PN &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ProcessNode&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;IRS&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;NotRedirected&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ERS&lt;&#x2F;span&gt;&lt;span&gt;]](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;process&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;PN&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;[To](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;to&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: To)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;           (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;implicit &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;target&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: CanBeProcessOutputTarget[To],
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;redirectOutput&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: RedirectOutput[PN, To]): redirectOutput.Result &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; redirectOutput(to)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Here the result (&lt;code&gt;redirectOutput.Result&lt;&#x2F;code&gt;) is a &lt;em&gt;path dependent type&lt;&#x2F;em&gt;. This may work in some simple cases but have two serious issues:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;It is not possible to use &lt;code&gt;redirectOutput.Result&lt;&#x2F;code&gt; in the &lt;em&gt;parameter block&lt;&#x2F;em&gt; of the function, so if another type class needed it as a type parameter we could not pass it.&lt;&#x2F;li&gt;
&lt;li&gt;Further implicit resolutions and type level operations will quickly break as the compiler will not be able to unify the various path dependent types&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The &lt;strong&gt;Aux pattern&lt;&#x2F;strong&gt;, used heavily in the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;milessabin&#x2F;shapeless&quot;&gt;shapeless&lt;&#x2F;a&gt; library provides a nice pattern for fixing both problems. We start by defining a &lt;em&gt;type class&lt;&#x2F;em&gt; for describing the operation, in this case &lt;em&gt;redirecting the output channel of a process&lt;&#x2F;em&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;trait&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; RedirectOutput&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;PN &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ProcessNode&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;NotRedirected&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;To&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Result &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ProcessNode[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;, Redirected, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;apply&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;process&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: PN, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;to&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: To)(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;implicit &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;target&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: CanBeProcessOutputTarget[To]): Result
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;object&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; RedirectOutput {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Aux[PN &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ProcessNode[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;, NotRedirected, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;], To, Result0] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;        RedirectOutput[PN, To] { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Result &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Result0 }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; ... type class instances
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The type class itself is straightforward. We have to implement it for both &lt;code&gt;Process&lt;&#x2F;code&gt; and &lt;code&gt;PipedProcess&lt;&#x2F;code&gt; and set the &lt;code&gt;Result&lt;&#x2F;code&gt; type accordingly, then implement &lt;code&gt;apply&lt;&#x2F;code&gt; that sets up the actual redirection. But what the &lt;code&gt;Aux&lt;&#x2F;code&gt; type is for?&lt;&#x2F;p&gt;
&lt;p&gt;It solves the problems with the &lt;em&gt;path dependent&lt;&#x2F;em&gt; version if we use it like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;implicit class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; ProcessNodeOutputRedirect&lt;&#x2F;span&gt;&lt;span&gt;[
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;IRS &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RedirectionState&lt;&#x2F;span&gt;&lt;span&gt;, 
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ERS &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RedirectionState&lt;&#x2F;span&gt;&lt;span&gt;, 
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;PN &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ProcessNode&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;IRS&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;NotRedirected&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ERS&lt;&#x2F;span&gt;&lt;span&gt;]](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;process&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;PN&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;[To, Result &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ProcessNode[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;, Redirected, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;]](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;to&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: To)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;           (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;implicit &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;target&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: CanBeProcessOutputTarget[To],
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;redirectOutput&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: RedirectOutput.Aux[PN, To, Result]): Result &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; redirectOutput(to)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;By lifting the &lt;code&gt;Result&lt;&#x2F;code&gt; from the type class instance to a type parameter the compiler can now &quot;extract&quot; the calculated type from &lt;code&gt;redirectOutput.Result&lt;&#x2F;code&gt; to the &lt;code&gt;&amp;gt;&lt;&#x2F;code&gt; function&#x27;s &lt;code&gt;Result&lt;&#x2F;code&gt; type parameter and use it directly, both for other further type requirements or as we do here, in the result type.&lt;&#x2F;p&gt;
&lt;p&gt;This is the basic pattern used for &lt;em&gt;all&lt;&#x2F;em&gt; the operations in prox. You can check &lt;a href=&quot;http:&#x2F;&#x2F;gigiigig.github.io&#x2F;posts&#x2F;2015&#x2F;09&#x2F;13&#x2F;aux-pattern.html&quot;&gt;Luigi&#x27;s short introduction to the &lt;code&gt;Aux&lt;&#x2F;code&gt; pattern&lt;&#x2F;a&gt; for a more detailed explanation.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;starting-the-processes&quot;&gt;Starting the processes&lt;&#x2F;h2&gt;
&lt;p&gt;So far we just combined purely functional data structures in a complicated way. The result value may encode the launching of several system processes that are connected via pipes to each other and possibly other streams as we will see.&lt;&#x2F;p&gt;
&lt;p&gt;When we eventually decide to &lt;em&gt;start&lt;&#x2F;em&gt; these processes, we need a way to observe their status, wait for them to stop, get their exit code, and to access the data sent to the output streams if they were redirected. And we need this &lt;em&gt;per process&lt;&#x2F;em&gt;, while launching the whole process graph in a &lt;em&gt;single step&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;First let&#x27;s model a single &lt;em&gt;running process&lt;&#x2F;em&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;trait&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; RunningProcess&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Out&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;OutResult&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ErrResult&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;isAlive&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: IO[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Boolean&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;waitForExit&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;(): IO[ProcessResult[OutResult, ErrResult]]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;terminate&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;(): IO[ProcessResult[OutResult, ErrResult]]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;and &lt;code&gt;ProcessResult&lt;&#x2F;code&gt; that represents an already &lt;em&gt;terminated process&lt;&#x2F;em&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; ProcessResult&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;OutResult&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ErrResult&lt;&#x2F;span&gt;&lt;span&gt;](
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;exitCode&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Int&lt;&#x2F;span&gt;&lt;span&gt;, 
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;fullOutput&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;OutResult&lt;&#x2F;span&gt;&lt;span&gt;, 
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;fullError&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ErrResult
&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now we need to define a &lt;code&gt;start&lt;&#x2F;code&gt; extension method on &lt;code&gt;ProcessNode&lt;&#x2F;code&gt; that returns somehow one well typed &lt;code&gt;RunningProcess&lt;&#x2F;code&gt; for &lt;em&gt;each&lt;&#x2F;em&gt; system process that it starts.&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s forget for a second about having multiple processes piped together and just consider the single process case. For that, we would need somehing like this (the &lt;code&gt;Out&lt;&#x2F;code&gt; parameter is needed only for piping so I omitted it):&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;start&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;IO&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RunningProcess&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;OutResult&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ErrResult&lt;&#x2F;span&gt;&lt;span&gt;]]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now we can see why &lt;code&gt;Process&lt;&#x2F;code&gt; has those additional type paramters. It is not enough to encode whether the output and error channels were redirected or not, we also have to encode the expected &lt;em&gt;result type&lt;&#x2F;em&gt; of redirecting these. By storing these types in type parameters of &lt;code&gt;Process&lt;&#x2F;code&gt; we can easily imagine that by using the pattern described in the previous section, the &lt;em&gt;result type&lt;&#x2F;em&gt; can &lt;strong&gt;depend&lt;&#x2F;strong&gt; on what we redirected the process to.&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s see some examples of what this means!&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Target&lt;&#x2F;th&gt;&lt;th&gt;Result type&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;A file system path&lt;&#x2F;td&gt;&lt;td&gt;The result type is &lt;code&gt;Unit&lt;&#x2F;code&gt;, the redirection happens on OS level&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Sink&lt;&#x2F;td&gt;&lt;td&gt;The result type is &lt;code&gt;Unit&lt;&#x2F;code&gt;, only the sink&#x27;s side effect matters&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Pipe with monoid elem type&lt;&#x2F;td&gt;&lt;td&gt;The stream is folded by the monoid, the result type is &lt;code&gt;T&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Pipe with non-monoid elem type&lt;&#x2F;td&gt;&lt;td&gt;The stream captures the elements in a vector, the result type is &lt;code&gt;Vector[T]&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Custom fold function&lt;&#x2F;td&gt;&lt;td&gt;The result type is the function&#x27;s result type&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;The &lt;code&gt;CanBeProcessOutputTarget&lt;&#x2F;code&gt; type class we&#x27;ve seen earlier defines both the stream element type and the result type:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;trait&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; CanBeProcessOutputTarget&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;To&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;** Output stream element type *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Out
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;** Result type of running the output stream *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;OutResult
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;apply&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;to&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: To): ProcessOutputTarget[Out, OutResult]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;ProcessOutputTarget&lt;&#x2F;code&gt; contains the actual IO code to build the redirection of the streams, I won&#x27;t get into details in this post. Note that there are similar type classes for &lt;em&gt;error&lt;&#x2F;em&gt; and &lt;em&gt;input&lt;&#x2F;em&gt; redirection too.&lt;&#x2F;p&gt;
&lt;p&gt;For two processes piped together we have to provide &lt;em&gt;two&lt;&#x2F;em&gt; &lt;code&gt;RunningProcess&lt;&#x2F;code&gt; instances with the proper result type parameters. So we can see that it is not enough that the &lt;em&gt;redirection&lt;&#x2F;em&gt; stores the result type in the process type, the &lt;em&gt;start&lt;&#x2F;em&gt; method must be dependent typed too.&lt;&#x2F;p&gt;
&lt;p&gt;One way to encode this in the type system would be something like this (simplified):&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;p1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;Process()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;p2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;Process()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;p3 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;Process()
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;rp1&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;IO&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RunningProcess&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; p1.start
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;rp2&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;IO&lt;&#x2F;span&gt;&lt;span&gt;[(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RunningProcess&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RunningProcess&lt;&#x2F;span&gt;&lt;span&gt;)] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;(p1 | p2).start
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;rp3&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;IO&lt;&#x2F;span&gt;&lt;span&gt;[(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RunningProcess&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RunningProcess&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RunningProcess&lt;&#x2F;span&gt;&lt;span&gt;)] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;(p1 | p2 | p3).start
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We encode piped processes with tuples of &lt;code&gt;RunningProcess&lt;&#x2F;code&gt; and single process with a single &lt;code&gt;RunningProcess&lt;&#x2F;code&gt;. To implement this we can make use of the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;milessabin&#x2F;shapeless&quot;&gt;shapeless&lt;&#x2F;a&gt; library&#x27;s &lt;code&gt;HList&lt;&#x2F;code&gt; implementation.&lt;&#x2F;p&gt;
&lt;p&gt;HLists are heterogeneous lists; basically similar to a tuple, but with all the &quot;usual&quot; list-like functions implemented as dependent typed functions. It&#x27;s type describes the types of all its elements, and you can split it to head&#x2F;tail, append two, etc. And we can do it both on the &lt;em&gt;type level&lt;&#x2F;em&gt; (computing the result type of appending two &lt;code&gt;HList&lt;&#x2F;code&gt;&#x27;s, for example) and on the &lt;em&gt;value leve&lt;&#x2F;em&gt; (appending the two values creating a third &lt;code&gt;HList&lt;&#x2F;code&gt; value).&lt;&#x2F;p&gt;
&lt;p&gt;We can implement the &lt;code&gt;start&lt;&#x2F;code&gt; method more easily by building a &lt;code&gt;HList&lt;&#x2F;code&gt;, while still keep the desired interface as &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;milessabin&#x2F;shapeless&quot;&gt;shapeless&lt;&#x2F;a&gt; implements a conversion from &lt;code&gt;HList&lt;&#x2F;code&gt; to tuples.&lt;&#x2F;p&gt;
&lt;p&gt;We can define two separate &lt;em&gt;start functions&lt;&#x2F;em&gt;, one producing &lt;code&gt;HList&lt;&#x2F;code&gt; and another the tuples (IO releated parameters omitted):&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;start&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RP&lt;&#x2F;span&gt;&lt;span&gt;](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;implicit &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;start&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Start&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Aux&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;PN&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RP&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;]]): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;IO&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RP&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= ???
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;startHL&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RPL &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;HList&lt;&#x2F;span&gt;&lt;span&gt;](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;implicit &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;start&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Start&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Aux&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;PN&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RP&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;IO&lt;&#x2F;span&gt;&lt;span&gt;]): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;IO&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RPL&lt;&#x2F;span&gt;&lt;span&gt;] = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;???
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;code&gt;Start&lt;&#x2F;code&gt; type class calculates both the tupled and the &lt;code&gt;HList&lt;&#x2F;code&gt; version&#x27;s result type. The implementation&#x27;s responsibility is to start the actual system processes and wire the streams together.&lt;&#x2F;p&gt;
&lt;p&gt;The interesting part is how we use &lt;em&gt;type level calculations&lt;&#x2F;em&gt; from &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;milessabin&#x2F;shapeless&quot;&gt;shapeless&lt;&#x2F;a&gt; to calculte the tuple and &lt;code&gt;HList&lt;&#x2F;code&gt; types for piped processes. This is all done using the technique I described earlier, but may look a bit shocking first. Let&#x27;s take a look!&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;implicit def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;startPipedProcess&lt;&#x2F;span&gt;&lt;span&gt;[
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Out&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Err&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;PN1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ProcessNode&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;],
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;PN2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ProcessNode&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;],
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;IRS &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RedirectionState&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ORS &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RedirectionState&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ERS &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RedirectionState&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RP1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RPL1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;HList&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RP1Last &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RunningProcess&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;],
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RP2&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RPL2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;HList&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RP2Head &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RunningProcess&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RP2Tail &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;HList&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RPT&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RPL &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;HList&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;  (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;implicit
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;start1&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Start&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Aux&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;PN1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RP1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RPL1&lt;&#x2F;span&gt;&lt;span&gt;],
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;start2&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Start&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Aux&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;PN2&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RP2&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RPL2&lt;&#x2F;span&gt;&lt;span&gt;],
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;last1&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Last&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Aux&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RPL1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RP1Last&lt;&#x2F;span&gt;&lt;span&gt;],
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;rp1LastType&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RP1Last &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;:&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RunningProcess&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Byte&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;],
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;hcons2&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;IsHCons&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Aux&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RPL2&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RP2Head&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RP2Tail&lt;&#x2F;span&gt;&lt;span&gt;],
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;prepend&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Prepend&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Aux&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RPL1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RPL2&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RPL&lt;&#x2F;span&gt;&lt;span&gt;],
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;tupler&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Tupler&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Aux&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RPL&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RPT&lt;&#x2F;span&gt;&lt;span&gt;]):
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Aux&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;PipedProcess&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Out&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Err&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Byte&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;PN1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;PN2&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;IRS&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ORS&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ERS&lt;&#x2F;span&gt;&lt;span&gt;], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RPT&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RPL&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Start&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;PipedProcess&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Out&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Err&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Byte&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;PN1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;PN2&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;IRS&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ORS&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ERS&lt;&#x2F;span&gt;&lt;span&gt;]] {
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;override type &lt;&#x2F;span&gt;&lt;span&gt;RunningProcesses &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RPT
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;override type &lt;&#x2F;span&gt;&lt;span&gt;RunningProcessList &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RPL
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The way to parse this is to follow the type level computations performed through the &lt;em&gt;Aux types&lt;&#x2F;em&gt; in the implicit parameter list:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;PN1&lt;&#x2F;code&gt; and &lt;code&gt;PN2&lt;&#x2F;code&gt; are the types of the two processes piped together&lt;&#x2F;li&gt;
&lt;li&gt;The first two implicit definition calculates the &lt;em&gt;running process tuple&lt;&#x2F;em&gt; and the &lt;em&gt;running process HList&lt;&#x2F;em&gt; types of these inidividual process nodes and &quot;stores&quot; the results in &lt;code&gt;RP1&lt;&#x2F;code&gt;, &lt;code&gt;RPL1&lt;&#x2F;code&gt;, &lt;code&gt;RP2&lt;&#x2F;code&gt; and &lt;code&gt;RPL2&lt;&#x2F;code&gt; type parameters. For example if the two processes pipe together are single &lt;code&gt;Process&lt;&#x2F;code&gt; instances, then &lt;code&gt;RP1&lt;&#x2F;code&gt; and &lt;code&gt;RP2&lt;&#x2F;code&gt; would be some kind of &lt;code&gt;RunningProcess&lt;&#x2F;code&gt;, and the HLists would be one element long, like &lt;code&gt;RunningProcess :: HNil&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;The &lt;code&gt;last1&lt;&#x2F;code&gt; implicit parameter is a type level &lt;em&gt;last&lt;&#x2F;em&gt; functinon on the first process&#x27;s &lt;code&gt;HList&lt;&#x2F;code&gt;. This is required because &lt;code&gt;PN1&lt;&#x2F;code&gt; itself can also be a sequence of piped processes, and we are connecting &lt;code&gt;PN2&lt;&#x2F;code&gt; to the &lt;strong&gt;last&lt;&#x2F;strong&gt; of these. The &lt;code&gt;RP1Last&lt;&#x2F;code&gt; type parameter becomes the &lt;em&gt;type&lt;&#x2F;em&gt; of the &lt;em&gt;last running process&lt;&#x2F;em&gt; of the first process node.&lt;&#x2F;li&gt;
&lt;li&gt;The next line, &lt;code&gt;rp1LastType&lt;&#x2F;code&gt; is an additional constraint fixing the &lt;em&gt;output stream element type&lt;&#x2F;em&gt; of &lt;code&gt;RP1Last&lt;&#x2F;code&gt; to &lt;code&gt;Byte&lt;&#x2F;code&gt;. The piping implementation is not able to connect streams of arbitrary element types, as the &lt;em&gt;process input&lt;&#x2F;em&gt; is always required to be a &lt;em&gt;byte stream&lt;&#x2F;em&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;hcons2&lt;&#x2F;code&gt; is similar to the &lt;code&gt;last1&lt;&#x2F;code&gt; but here we are calculating the type level &lt;em&gt;head type&lt;&#x2F;em&gt; of the &lt;code&gt;HList&lt;&#x2F;code&gt; called &lt;code&gt;RPL2&lt;&#x2F;code&gt;. The head will be in &lt;code&gt;RP2Head&lt;&#x2F;code&gt; and the tail &lt;code&gt;HList&lt;&#x2F;code&gt; in &lt;code&gt;RP2Tail&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;In the &lt;code&gt;prepend&lt;&#x2F;code&gt; step we concatenate &lt;code&gt;RPL1&lt;&#x2F;code&gt; with &lt;code&gt;RPL2&lt;&#x2F;code&gt; using the &lt;code&gt;Prepend&lt;&#x2F;code&gt; operation, the result &lt;code&gt;HList&lt;&#x2F;code&gt; type is in &lt;code&gt;RPL&lt;&#x2F;code&gt;. This is the &lt;code&gt;HList&lt;&#x2F;code&gt; representation of the piped running process.&lt;&#x2F;li&gt;
&lt;li&gt;Finally we use the &lt;code&gt;Tupler&lt;&#x2F;code&gt; operation to calculate the tuple type from the &lt;code&gt;HList&lt;&#x2F;code&gt;, and store it in &lt;code&gt;RPT&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The compiler perform the type level calculations and we can use the result types &lt;code&gt;RPT&lt;&#x2F;code&gt; and &lt;code&gt;RPL&lt;&#x2F;code&gt; to actually implement the &lt;em&gt;start typeclass&lt;&#x2F;em&gt;. This is the most complicated type level calculation in the library.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;final-thoughts&quot;&gt;Final thoughts&lt;&#x2F;h2&gt;
&lt;p&gt;As we&#x27;ve seen, Scala&#x27;s type system can bring us quite far in expressing a dependent typed interface. On the other hand writing and reading code in this style is really hard, and if things go wrong, decoding the compiler&#x27;s error messages is not an easy task either. This is a serious tradeoff that has to be considered and in many cases a more dynamic but much more readable and maintainable approach can be better.&lt;&#x2F;p&gt;
&lt;p&gt;With &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;vigoo&#x2F;prox&quot;&gt;prox&lt;&#x2F;a&gt; I explicitly wanted to explore these features of the Scala language.&lt;&#x2F;p&gt;
&lt;p&gt;In the next posts we will ignore the type level parts of the library and focus on different &lt;em&gt;streaming&lt;&#x2F;em&gt; and &lt;em&gt;effect&lt;&#x2F;em&gt; libraries.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>AWS rate limits vs prezidig</title>
        <published>2018-09-21T00:00:00+00:00</published>
        <updated>2018-09-21T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Daniel Vigovszky
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://blog.vigoo.dev/posts/aws-rate-limits-prezidig/"/>
        <id>https://blog.vigoo.dev/posts/aws-rate-limits-prezidig/</id>
        
        <content type="html" xml:base="https://blog.vigoo.dev/posts/aws-rate-limits-prezidig/">&lt;p&gt;At &lt;a href=&quot;https:&#x2F;&#x2F;prezi.com&quot;&gt;Prezi&lt;&#x2F;a&gt;, we have an internal tool called &lt;strong&gt;prezidig&lt;&#x2F;strong&gt; for discovering AWS resources. I like it a lot so I was quite annoyed recently that it always fails with a &lt;em&gt;throttling exception&lt;&#x2F;em&gt; because of our increased use of the AWS API. It made it completely unusable, so I decided to try to fix this.&lt;&#x2F;p&gt;
&lt;p&gt;Then I decided to write the story in this blog post, as the steps I had to made to achieve the results I aimed for can be useful for writing maintainable, fast and safe Scala code in the future.&lt;&#x2F;p&gt;
&lt;p&gt;I will describe the phases as they happened, as I did not really know anything about this codebase so the path to the success was not exactly clear immediately.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;wrapping-the-calls&quot;&gt;Wrapping the calls&lt;&#x2F;h2&gt;
&lt;p&gt;So my initial thought was to just find the AWS API calls and wrap them in a helper function which catches the throttling error and retries with an increasing delay.&lt;&#x2F;p&gt;
&lt;p&gt;I basically wrote this in the base class of all the &lt;em&gt;mirrors&lt;&#x2F;em&gt; (the classes which are responsible for fetching AWS and other resource data for &lt;strong&gt;prezidig&lt;&#x2F;strong&gt;):&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;protected def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;byHandlingThrottling&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span&gt;](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;awsCall&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span&gt;): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Future&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;call&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;remainingTries&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Int&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;wait&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;FiniteDuration&lt;&#x2F;span&gt;&lt;span&gt;): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Future&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;      Future(Try(awsCall)).flatMap {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span&gt;Success(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;result&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;Future.successful(result)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span&gt;Failure(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;awsException&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;AmazonServiceException&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; awsException.getErrorCode &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;Throttling&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt; &amp;amp;&amp;amp; remainingTries &amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;          akka.pattern.after(wait, actorSystem.scheduler) {
&lt;&#x2F;span&gt;&lt;span&gt;            call(remainingTries - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, wait * &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;          }
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span&gt;Failure(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;reason&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;Future.failed(reason)
&lt;&#x2F;span&gt;&lt;span&gt;      }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;     call(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span&gt;.millis) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; TODO: make configurable
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Then the only thing I had to do was to was wrapping all the existing AWS calls with this. Then I realized that this won’t be this simple, as these calls were not always asynchronous, just sometimes. To see an example, for an &lt;em&gt;ElasticBeanstalk application&lt;&#x2F;em&gt;, it fetches the &lt;em&gt;application metadata&lt;&#x2F;em&gt; with synchronous call, then fetches the related &lt;em&gt;EB environments&lt;&#x2F;em&gt; asynchronously. The whole thing might be wrapped in another future somewhere else, but that’s a different story.&lt;&#x2F;p&gt;
&lt;p&gt;While making these discoveries I also found several synchronization points, like the code waiting for some futures to complete in a blocking way. Also that the model is mutable. So… just for trying this out, I &lt;em&gt;still &lt;strong&gt;wrapped&lt;&#x2F;strong&gt;&lt;&#x2F;em&gt; all the AWS calls with this stuff, by converting the future back to a synchronous call by immediately blocking on it.&lt;&#x2F;p&gt;
&lt;p&gt;What did I achieve with this? Well, some throttling errors were fixed, the code became extremely ugly, and I could not even wrap everything so the errors remained, and because of the tons of blocking, timeouts, etc. it was basically impossible to understand whether this would work or deadlock or just be slow.&lt;&#x2F;p&gt;
&lt;p&gt;That was the point I decided to do this properly&lt;&#x2F;p&gt;
&lt;h2 id=&quot;reflection&quot;&gt;Reflection&lt;&#x2F;h2&gt;
&lt;p&gt;Before solving the real problem I found that the mirrors are initialized via reflection, something like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;buildMirrors&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;A &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RegionAwareAWSMirror&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;]](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;implicit &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;mf&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Manifest&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;]): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Seq&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span&gt;    Config.regions.map(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;region &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; mf.runtimeClass.getConstructor(classOf[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;]).newInstance(region).asInstanceOf[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;])
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This is something that you should avoid, as it leads to problems that are not detected by the compiler, only at runtime, every time you refactor something around these classes. There are some use cases where this may be required, like dynamically loading plugins or stuff like this, but to just have a factory for something, it is must simple to use… &lt;strong&gt;functions&lt;&#x2F;strong&gt;!&lt;&#x2F;p&gt;
&lt;p&gt;So I could not hold myself back and quickly changed this to:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;buildMirrors&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;A &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RegionAwareAWSMirror&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;]](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;factory&lt;&#x2F;span&gt;&lt;span&gt;: (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ActorSystem&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    Config.regions.map(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;region &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; factory(region, system))
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;(Since then even this has disappeared, but don’t run that much forward).&lt;&#x2F;p&gt;
&lt;h2 id=&quot;async-fetching&quot;&gt;Async fetching&lt;&#x2F;h2&gt;
&lt;p&gt;Ok so the first obvious step was to refactor the whole fetching code in a way that it is just a chain of &lt;strong&gt;futures&lt;&#x2F;strong&gt;. By making everything async in the process, the AWS calls would be simply replaceable with the throttling function above or anything more sophisticated!&lt;&#x2F;p&gt;
&lt;p&gt;But I knew that I cannot safely do this while the model we are building itself is mutable - there is no way I want to debug what happens with it once all the steps are really becoming parallel!&lt;&#x2F;p&gt;
&lt;h3 id=&quot;immutable-model&quot;&gt;Immutable model&lt;&#x2F;h3&gt;
&lt;p&gt;I believe the following GitHub diff captures the core change of this step:&lt;&#x2F;p&gt;
&lt;img src=&quot;&#x2F;images&#x2F;prezidig-img-1.png&quot; width=&quot;800&quot;&#x2F;&gt;
&lt;p&gt;Of course I had to change all the subtypes of Model, and I went through the code looking for&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;var&lt;&#x2F;strong&gt;s&lt;&#x2F;li&gt;
&lt;li&gt;mutable collections&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;and got rid of them. Except for the caching constructs, because I planned to refactor those in the next step, so for now I left them alone.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;async-mirrors&quot;&gt;Async mirrors&lt;&#x2F;h3&gt;
&lt;p&gt;Once I felt the model is safe enough, I went to the next big change, making everything asynchronous.&lt;&#x2F;p&gt;
&lt;img src=&quot;&#x2F;images&#x2F;prezidig-img-2.png&quot; width=&quot;800&quot;&#x2F;&gt;
&lt;p&gt;This took some hours, to be honest. But really, the core idea is only that the result must be a &lt;code&gt;Future[T]&lt;&#x2F;code&gt;, not &lt;code&gt;T&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;So how do you refactor a code that was previously half synchronous, half asynchronous to achieve this? Let’s see an example! It will be the &lt;em&gt;key-pair mirror&lt;&#x2F;em&gt; as it is the smallest.&lt;&#x2F;p&gt;
&lt;p&gt;Originally (with my ugly wrapping in the previous step) it looked like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;override protected def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;fetch&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;input&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;SimpleParsedInput&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;context&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Context&lt;&#x2F;span&gt;&lt;span&gt;): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Seq&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;KeyPair&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;try &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;futureResult &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; byHandlingThrottling(
&lt;&#x2F;span&gt;&lt;span&gt;        buildClient(AmazonEC2ClientBuilder.standard()).describeKeyPairs(
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;DescribeKeyPairsRequest&lt;&#x2F;span&gt;&lt;span&gt;().withKeyNames(input.id)
&lt;&#x2F;span&gt;&lt;span&gt;        ))
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;result &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;Await.result(futureResult, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;.seconds)
&lt;&#x2F;span&gt;&lt;span&gt;      result.getKeyPairs.asScala.map(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;info &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;KeyPair(info, region)).seq
&lt;&#x2F;span&gt;&lt;span&gt;        .map(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;keypair &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; keypair.withFutureChildren(LaunchConfigurationMirror(region, actorSystem).apply(context.withInput(keypair.description.getKeyName))))
&lt;&#x2F;span&gt;&lt;span&gt;    } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;catch &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;AmazonEC2Exception &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;Seq()
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;So as you can see fetching the key pairs by name was a synchronous request, but then the &lt;em&gt;launch configurations&lt;&#x2F;em&gt; are fetched asynchronously and are being updated back the result model in a mutable way. We want to transform this function so it does not have any side effects, just performs a chain of asynchronous operations and in the end have a fully fetched &lt;em&gt;key pair&lt;&#x2F;em&gt; with the related &lt;em&gt;launch configurations&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;In every case the only thing needed was a combination of &lt;code&gt;map&lt;&#x2F;code&gt; and &lt;code&gt;flatMap&lt;&#x2F;code&gt; on futures, and of course the &lt;em&gt;for syntax&lt;&#x2F;em&gt; can also be used to make the code more readable:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;private def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;fetchKeyPair&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;client&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;AmazonEC2&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;context&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Context&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;info&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;KeyPairInfo&lt;&#x2F;span&gt;&lt;span&gt;): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Future&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;KeyPair&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;launchConfigurations &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;- &lt;&#x2F;span&gt;&lt;span&gt;LaunchConfigurationMirror(region, actorSystem).apply(context.withInput(info.getKeyName))
&lt;&#x2F;span&gt;&lt;span&gt;    } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;yield &lt;&#x2F;span&gt;&lt;span&gt;KeyPair(
&lt;&#x2F;span&gt;&lt;span&gt;      description &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; info,
&lt;&#x2F;span&gt;&lt;span&gt;      region &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; region,
&lt;&#x2F;span&gt;&lt;span&gt;      children &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; launchConfigurations
&lt;&#x2F;span&gt;&lt;span&gt;    )
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;override protected def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;fetch&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;input&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;SimpleParsedInput&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;context&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Context&lt;&#x2F;span&gt;&lt;span&gt;): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Future&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;KeyPair&lt;&#x2F;span&gt;&lt;span&gt;]] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;client &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; buildClient(AmazonEC2ClientBuilder.standard())
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    byHandlingThrottling(client.describeKeyPairs(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;DescribeKeyPairsRequest&lt;&#x2F;span&gt;&lt;span&gt;().withKeyNames(input.id))).flatMap { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;result &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;      Future.sequence(
&lt;&#x2F;span&gt;&lt;span&gt;        result.getKeyPairs.asScala.toList.map(fetchKeyPair(client, context, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;      )
&lt;&#x2F;span&gt;&lt;span&gt;    }.recover {
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;AmazonEC2Exception &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;List() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; TODO: log?
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Note that the &lt;code&gt;Future.sequence&lt;&#x2F;code&gt; function is quite useful in these scenarios, as it makes a &lt;code&gt;Future[List[T]]&lt;&#x2F;code&gt; from &lt;code&gt;List[Future[T]]&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Of course the code became more verbose because of all this chaining, this is the price of this transformation. And why I don’t like to express complex logic with a chain of futures, rather with some higher level abstraction such as actors (or for this use case, streams would fit even better).&lt;&#x2F;p&gt;
&lt;p&gt;But I wanted to make iterative changes, so I did this transformation on all the mirrors and eventually got a &lt;code&gt;Future[List[Model]]&lt;&#x2F;code&gt; in the main function that I could await for. I also thrown out the global atomic integer that counted the running stuff for completion, as in this model the completion of the composed future should mark the end of the whole computation.&lt;&#x2F;p&gt;
&lt;p&gt;So did I succeed at this point? Of course not. Actually this whole thing is a big deadlock :)&lt;&#x2F;p&gt;
&lt;h2 id=&quot;caching-and-circular-references&quot;&gt;Caching and circular references&lt;&#x2F;h2&gt;
&lt;p&gt;It was not immediately obvious what causes the deadlock. In a system like this it can happen in different ways. For example I knew that there are global singleton caches in the code, protected by &lt;strong&gt;locks&lt;&#x2F;strong&gt;. This &lt;em&gt;could&lt;&#x2F;em&gt; cause deadlocks if all the executors got blocked and no new threads can be spawned by the active executor. I did not know if this is happening, but would not have been surprised at all, as much more things were happening in parallel because of the previous refactoring step.&lt;&#x2F;p&gt;
&lt;p&gt;And circular references in the huge chained future graph can also lead to this. Let’s consider this simplified example:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;trait&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; Cache { 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;key&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: String): Future[Work]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;put&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;key&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: String, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;compute&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: () &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Future[Work]): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;Unit
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;cache&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Cache &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= ???
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;work1&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Future&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Work&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; cache.get(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;work2&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;).map { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;w2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;Work(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;Hello &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;$w2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)) }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;work2&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Future&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Work&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; cache.get(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;work1&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;).map { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;w1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;Work(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;Hello &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;$w1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)) }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;cache.put(work1)
&lt;&#x2F;span&gt;&lt;span&gt;cache.put(work2)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;println(Await.result(work1), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;.second)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This can never work. If you think about what &lt;strong&gt;prezidig&lt;&#x2F;strong&gt; does, you will have a feeling that this happens. A lot.&lt;&#x2F;p&gt;
&lt;p&gt;But let’s go in order.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;non-blocking-cache&quot;&gt;Non-blocking cache&lt;&#x2F;h3&gt;
&lt;p&gt;First I wanted to get rid of the global, lock-protected mutable maps used as caches, and have a non-blocking implementation with more control and better performance and safety. This is the kind of job that an &lt;strong&gt;actor&lt;&#x2F;strong&gt; can model nicely, so I created a &lt;em&gt;model cache actor&lt;&#x2F;em&gt; that is spawned for &lt;em&gt;each mirror&lt;&#x2F;em&gt; and can store and retrieve lists of AWS models for a given key.&lt;&#x2F;p&gt;
&lt;p&gt;I won’t list the whole actor’s code here, let’s see the messages it consumes:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;sealed trait&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; ModelCacheMessage&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;M &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Model&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;final case class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; Put&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;M &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Model&lt;&#x2F;span&gt;&lt;span&gt;](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;key&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;M&lt;&#x2F;span&gt;&lt;span&gt;])
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span&gt;ModelCacheMessage[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;M&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;final case class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; FetchFailed&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;M &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Model&lt;&#x2F;span&gt;&lt;span&gt;](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;key&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;failure&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Failure&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;])
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span&gt;ModelCacheMessage[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;M&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;final case class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; GetOrFetch&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;M &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Model&lt;&#x2F;span&gt;&lt;span&gt;](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;key&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;fetch&lt;&#x2F;span&gt;&lt;span&gt;: () &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Future&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;M&lt;&#x2F;span&gt;&lt;span&gt;]], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;respondTo&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ActorRef&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Try&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;M&lt;&#x2F;span&gt;&lt;span&gt;]]])
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span&gt;ModelCacheMessage[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;M&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;final case class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; GetRefOrFetch&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;M &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Model&lt;&#x2F;span&gt;&lt;span&gt;](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;key&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;fetch&lt;&#x2F;span&gt;&lt;span&gt;: () &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Future&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;M&lt;&#x2F;span&gt;&lt;span&gt;]], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;respondTo&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ActorRef&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ModelRef&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;M&lt;&#x2F;span&gt;&lt;span&gt;]])
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span&gt;ModelCacheMessage[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;M&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;final case class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; Dump&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;M &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Model&lt;&#x2F;span&gt;&lt;span&gt;](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;respondTo&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ActorRef&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Map&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;M&lt;&#x2F;span&gt;&lt;span&gt;]]])
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span&gt;ModelCacheMessage[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;M&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This cache itself is responsible for executing the &lt;em&gt;fetch function&lt;&#x2F;em&gt; only if needed, when the value for the given key is not cached yet. It is done by using the &lt;strong&gt;pipe pattern&lt;&#x2F;strong&gt;: it starts the asynchronous fetch function on a configured worker executor (which can be the actor system, or a fix thread pool, etc.) and registers an &lt;code&gt;onFinish&lt;&#x2F;code&gt; callback for the future which &lt;em&gt;pipes back&lt;&#x2F;em&gt; the future’s result to the actor as actor messages (&lt;code&gt;Put&lt;&#x2F;code&gt; and &lt;code&gt;FetchFailed&lt;&#x2F;code&gt;).&lt;&#x2F;p&gt;
&lt;p&gt;I will talk about references and cache dumps in the next section.&lt;&#x2F;p&gt;
&lt;p&gt;There was one more big problem with the existing code that prevented introducing these cache actors: that the mirrors were not really singletons but some mirrors created new instances of existing mirrors (without any difference to the ones created in the main function). These shared the singleton mutable lock-protected cache map in the original version, that’s why it worked. But in the new implementation each mirror spawned its own cache actor, so it was no longer allowed to create multiple instances of the same thing.&lt;&#x2F;p&gt;
&lt;p&gt;So in this step I collected all the mirrors to a class called &lt;code&gt;Mirrors&lt;&#x2F;code&gt;, which later became the collection of all the resources needed to perform the “dig”, so in the final version it is called &lt;code&gt;DigSite&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;With this change the caching could be replaced, and with the &lt;strong&gt;ask pattern&lt;&#x2F;strong&gt; I was able to fit it to the chain of futures created in the previous step.&lt;&#x2F;p&gt;
&lt;p&gt;Did it solve the deadlock? No, of course not&lt;&#x2F;p&gt;
&lt;h3 id=&quot;circular-references&quot;&gt;Circular references&lt;&#x2F;h3&gt;
&lt;p&gt;But now it was obvious that there are some circular references. And by simply drawing it, I could see that this is actually the core concept of the whole thing :)&lt;&#x2F;p&gt;
&lt;p&gt;Let me show you &lt;em&gt;the drawing&lt;&#x2F;em&gt;:&lt;&#x2F;p&gt;
&lt;img src=&quot;&#x2F;images&#x2F;prezidig-img-3.png&quot; width=&quot;800&quot;&#x2F;&gt;
&lt;p&gt;So everything refers back to everything, not a surprise that this chained-together code cannot finish.&lt;&#x2F;p&gt;
&lt;p&gt;To be honest, I was not sure how exactly did it work in the original version, whether the boundary of sync and async calls were carefully designed to make this work or just accidentally, whatever.&lt;&#x2F;p&gt;
&lt;p&gt;I wanted to have a solution where you don’t have to think about it so nobody will fuck it up next time when it has to be modified.&lt;&#x2F;p&gt;
&lt;p&gt;The chosen solution can be summarized in the following way:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;em&gt;models&lt;&#x2F;em&gt; are only storing &lt;strong&gt;references to other models&lt;&#x2F;strong&gt; encoded by the &lt;code&gt;ModelRef&lt;&#x2F;code&gt; type. A reference is basically selecting a mirror (by its &lt;em&gt;cache&lt;&#x2F;em&gt;) and an item in it by its &lt;em&gt;key&lt;&#x2F;em&gt;&lt;&#x2F;li&gt;
&lt;li&gt;When fetching a model, you immediately get back a &lt;em&gt;model reference&lt;&#x2F;em&gt; from the cache so it can be stored in the owner model, even with circular references. The real data is still fetched and cached as before.&lt;&#x2F;li&gt;
&lt;li&gt;This works because nobody uses the actual child models until the &lt;strong&gt;rendering&lt;&#x2F;strong&gt; of the output. So we have the asynchronous, parallel fetching of all the models, and then a completely separate, non-async step where we need the real connections to actually render the output based on the templates. I could change how the rendering works to query the model references from the cache, but I did not want to touch that part. So I introduced a middle step where all the &lt;em&gt;model cache actors&lt;&#x2F;em&gt; &lt;strong&gt;dump&lt;&#x2F;strong&gt; their state to simple immutable maps, and then the model gets &lt;em&gt;updated&lt;&#x2F;em&gt; by selecting the referenced models from this map and changing a field. Yes, a mutable field. It is a non-threadsafe operation that has a single, well defined place to be called, and this way the whole third part (rendering the output) could remain untouched.&lt;&#x2F;li&gt;
&lt;li&gt;Because of decoupling the actual fetching from the result future (it is completed earlier, as it only needs the references!), I had to have something that keeps track of the ongoing tasks ran by the cache actors, so there is also a &lt;em&gt;work monitor actor&lt;&#x2F;em&gt; that notifies the main logic once everything is complete.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Considering all this, the main steps before starting to render the output looks like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;result &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= for &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;models &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span&gt; runRelevantMirrors(digSite.allMirrors, Context.initial(input))
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;fetchingDone &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span&gt; digSite.workMonitor ? WorkMonitor.WaitForReady
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;cacheDumps &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;- &lt;&#x2F;span&gt;&lt;span&gt;CacheDumps.fromMirrors(digSite.allMirrors)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; models.foreach(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;.resolveChildren(cacheDumps)) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; side effect!
&lt;&#x2F;span&gt;&lt;span&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;yield&lt;&#x2F;span&gt;&lt;span&gt; models
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;anyone-else-blocking&quot;&gt;Anyone else blocking?&lt;&#x2F;h2&gt;
&lt;p&gt;At this point the tool started to work again and produce results. So I went back checking if any other blocking code remained that can be implemented in other ways. The progress tracker was like that, it had mutable state and locks, so I converted that to an actor too. It was quite simple, and on the usage side almost nothing changed compared to the original.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;and-what-about-the-throttling&quot;&gt;And what about the throttling?&lt;&#x2F;h2&gt;
&lt;p&gt;Ok so at this point I refactored the whole stuff but still did not solve the throttling issue, right?&lt;&#x2F;p&gt;
&lt;p&gt;Right.&lt;&#x2F;p&gt;
&lt;p&gt;But now finally I knew how to do it!&lt;&#x2F;p&gt;
&lt;p&gt;I already wrapped all AWS calls with that specific function (and at this point it was really &lt;em&gt;all&lt;&#x2F;em&gt; calls, not just &lt;em&gt;almost)&lt;&#x2F;em&gt;. So I just had to write it in a better way.&lt;&#x2F;p&gt;
&lt;p&gt;I wanted to:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Have control on how many AWS requests are we doing in parallel&lt;&#x2F;li&gt;
&lt;li&gt;In case of throttling errors delay &lt;strong&gt;everything&lt;&#x2F;strong&gt; as soon as possible&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;This can be achieved easily by some standard patterns like treating AWS as an encapsulated resource and putting some circuit breaking logic in it, and explicitly distributing the work among multiple workers.&lt;&#x2F;p&gt;
&lt;p&gt;Let’s see the designed solution on a drawing:&lt;&#x2F;p&gt;
&lt;img src=&quot;&#x2F;images&#x2F;prezidig-img-4.png&quot; width=&quot;800&quot;&#x2F;&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;&#x2F;strong&gt;: the &lt;em&gt;classic Akka&lt;&#x2F;em&gt; has built-in support for this routing and circuit breaking, but I prefer &lt;em&gt;Akka-typed&lt;&#x2F;em&gt; because of its type safety, where there are no official reusable higher level components like this yet. The one I implemented here is quite specific, later could be refactored to be built from more reusable typed actor components.&lt;&#x2F;p&gt;
&lt;p&gt;So how does this work?&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;There is a single coordinator actor called &lt;strong&gt;AWS&lt;&#x2F;strong&gt; and multiple (32 by default) worker actors called &lt;strong&gt;AWS Worker&lt;&#x2F;strong&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;The number of worker actors control the maximum number of parallel AWS operations, because each worker actor is guaranteed to run maximum one such operation at the same time. All the other incoming requests are distributed among the workers and gets enqueued.&lt;&#x2F;li&gt;
&lt;li&gt;The AWS calls are executed on a different thread pool, not blocking the actors. Their result is sent back by the already mentioned &lt;em&gt;pipe to&lt;&#x2F;em&gt; pattern&lt;&#x2F;li&gt;
&lt;li&gt;AWS throttling errors are detected on the worker nodes, and the worker node immediately switches to &lt;strong&gt;open circuit state&lt;&#x2F;strong&gt; in which it does not start any new AWS command. The length of the open state increases with every throttling error, and gets reseted after a number of successful requests.&lt;&#x2F;li&gt;
&lt;li&gt;Opening the circuit breaker on one worker node is immediately followed by opening it on &lt;strong&gt;all other&lt;&#x2F;strong&gt; worker nodes too, to stop overloading AWS.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;This could be further improved with more advanced logic but I believe it is good enough for our current purposes, and now we can use &lt;strong&gt;prezidig&lt;&#x2F;strong&gt; again!&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Bari with Visual Studio Code</title>
        <published>2016-01-21T00:00:00+00:00</published>
        <updated>2016-01-21T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Daniel Vigovszky
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://blog.vigoo.dev/posts/bari-vscode/"/>
        <id>https://blog.vigoo.dev/posts/bari-vscode/</id>
        
        <content type="html" xml:base="https://blog.vigoo.dev/posts/bari-vscode/">&lt;h2 id=&quot;intro&quot;&gt;Intro&lt;&#x2F;h2&gt;
&lt;p&gt;A few weeks ago I discovered &lt;a href=&quot;https:&#x2F;&#x2F;code.visualstudio.com&#x2F;&quot;&gt;Visual Studio Code&lt;&#x2F;a&gt; and started using it for some of my work. &lt;em&gt;(Note: I&#x27;m using multiple editors&#x2F;IDEs all the time, based on the task; Emacs, Sublime, Atom, IntelliJ, VS, etc.)&lt;&#x2F;em&gt; So far &lt;em&gt;Code&lt;&#x2F;em&gt; is my favourite among the set of similar editors, such as Atom. I was pleasently surprised how well it works with its integrated &lt;a href=&quot;http:&#x2F;&#x2F;www.omnisharp.net&#x2F;&quot;&gt;OmniSharp&lt;&#x2F;a&gt; plugin on &lt;a href=&quot;http:&#x2F;&#x2F;vigoo.github.io&#x2F;bari&#x2F;&quot;&gt;bari&#x27;s&lt;&#x2F;a&gt; codebase, so I decided to try to write a &lt;em&gt;bari plugin&lt;&#x2F;em&gt; for it.&lt;&#x2F;p&gt;
&lt;p&gt;Writing an extension for &lt;em&gt;Code&lt;&#x2F;em&gt; was a nice experience. The outcome is the &lt;a href=&quot;https:&#x2F;&#x2F;marketplace.visualstudio.com&#x2F;items&#x2F;vigoo.bari&quot;&gt;bari build management extension&lt;&#x2F;a&gt;, which I&#x27;ll demonstrate in the next section.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;developing-net-applications-with-visual-studio-code-and-bari&quot;&gt;Developing .NET applications with Visual Studio Code and bari&lt;&#x2F;h2&gt;
&lt;p&gt;As &lt;em&gt;Code&lt;&#x2F;em&gt; is multiplatform, and &lt;em&gt;bari&lt;&#x2F;em&gt; also works with &lt;a href=&quot;http:&#x2F;&#x2F;www.mono-project.com&#x2F;&quot;&gt;Mono&lt;&#x2F;a&gt;, I&#x27;ll demonstrate how you can use these tools to develop a .NET application (actually &lt;em&gt;bari&lt;&#x2F;em&gt; itself) on a Mac. The steps here (except installing Mono) would be the same on Windows or Linux as well.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;installing-the-tools&quot;&gt;Installing the tools&lt;&#x2F;h3&gt;
&lt;p&gt;First, if you are not on Windows, you&#x27;ll have to install the latest &lt;a href=&quot;http:&#x2F;&#x2F;www.mono-project.com&#x2F;&quot;&gt;Mono&lt;&#x2F;a&gt; framework. On OSX I recommed to use &lt;a href=&quot;http:&#x2F;&#x2F;brew.sh&#x2F;&quot;&gt;&lt;code&gt;brew&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; to do that:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#383a42;&quot;&gt;&lt;code&gt;&lt;span&gt;brew install mono
&lt;&#x2F;span&gt;&lt;span&gt;mono --version
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Then get the latest &lt;a href=&quot;https:&#x2F;&#x2F;code.visualstudio.com&#x2F;&quot;&gt;Visual Studio Code&lt;&#x2F;a&gt; version, either by downloading it from its homepage or with &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;caskroom&#x2F;homebrew-cask&quot;&gt;&lt;code&gt;brew cask&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#383a42;&quot;&gt;&lt;code&gt;&lt;span&gt;brew cask install visual-studio-code
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Get the latest &lt;em&gt;bari&lt;&#x2F;em&gt;. On Windows I recommend downloading and extracting the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;vigoo&#x2F;bari&#x2F;releases&#x2F;latest&quot;&gt;latest official release&lt;&#x2F;a&gt; and adding it to the &lt;code&gt;PATH&lt;&#x2F;code&gt;.
On OSX, with &lt;code&gt;mono&lt;&#x2F;code&gt; we already have &lt;code&gt;nuget&lt;&#x2F;code&gt;, so let&#x27;s use that:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#383a42;&quot;&gt;&lt;code&gt;&lt;span&gt;cd &#x2F;opt
&lt;&#x2F;span&gt;&lt;span&gt;nuget install bari-mono
&lt;&#x2F;span&gt;&lt;span&gt;ln -s bari-mono.1.0.2.2 bari
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;and create a script to execute it somewhere in your &lt;code&gt;PATH&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;#!&#x2F;bin&#x2F;sh
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;mono&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;opt&#x2F;bari&#x2F;tools&#x2F;bari.exe $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;@
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;That&#x27;s it. Future versions of the &lt;em&gt;bari extension&lt;&#x2F;em&gt; will probably be able to install &lt;em&gt;bari&lt;&#x2F;em&gt; itself.&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s start &lt;em&gt;Code&lt;&#x2F;em&gt; now!&lt;&#x2F;p&gt;
&lt;h3 id=&quot;installing-the-extension&quot;&gt;Installing the extension&lt;&#x2F;h3&gt;
&lt;p&gt;Open the &lt;em&gt;command palette&lt;&#x2F;em&gt; (F1, or ⇧⌘P) and type &lt;code&gt;ext install bari&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;&#x2F;images&#x2F;baricode1.png&quot; class=&quot;zimg&quot;&gt;&lt;img width=&quot;600&quot; src=&quot;&#x2F;images&#x2F;baricode1.png&quot; alt=&quot;bari-code-1&quot;&gt;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;loading-the-project&quot;&gt;Loading the project&lt;&#x2F;h3&gt;
&lt;p&gt;After that restart the editor. Have your bari-built project available somewhere. As we are going to develop bari itself, let&#x27;s clone its repository:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#383a42;&quot;&gt;&lt;code&gt;&lt;span&gt;git clone https:&#x2F;&#x2F;github.com&#x2F;vigoo&#x2F;bari.git
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Then open the result &lt;code&gt;bari&lt;&#x2F;code&gt; directory with &lt;em&gt;Code&lt;&#x2F;em&gt;. This should look like the following:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;&#x2F;images&#x2F;baricode2.png&quot; class=&quot;zimg&quot;&gt;&lt;img width=&quot;800&quot; src=&quot;&#x2F;images&#x2F;baricode2.png&quot; alt=&quot;bari-code-2&quot;&gt;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;em&gt;bari plugin&lt;&#x2F;em&gt; automatically detected that the opened folder has a &lt;code&gt;suite.yaml&lt;&#x2F;code&gt; in its root, and loaded it. That&#x27;s why we can see the two sections on the statusbar&#x27;s right side: &lt;code&gt;full&lt;&#x2F;code&gt; and &lt;code&gt;debug&lt;&#x2F;code&gt;. The first one is the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;vigoo&#x2F;bari&#x2F;wiki&#x2F;Product&quot;&gt;selected target product&lt;&#x2F;a&gt; and the second one is the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;vigoo&#x2F;bari&#x2F;wiki&#x2F;Goal&quot;&gt;selected goal&lt;&#x2F;a&gt;. All the &lt;em&gt;bari commands&lt;&#x2F;em&gt; provided by the extension will be executed with these settings.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;changing-the-target&quot;&gt;Changing the target&lt;&#x2F;h3&gt;
&lt;p&gt;To change the active product or goal, you can click on the statusbar or use the &lt;em&gt;command palette&lt;&#x2F;em&gt; (F1, or ⇧⌘P) and choose &lt;code&gt;bari: Change goal&lt;&#x2F;code&gt; or &lt;code&gt;bari: Change target product&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s change the &lt;em&gt;goal&lt;&#x2F;em&gt; to &lt;code&gt;debug-mono&lt;&#x2F;code&gt;, as we are working on a non-Windows environment:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;&#x2F;images&#x2F;baricode3.png&quot; class=&quot;zimg&quot;&gt;&lt;img width=&quot;800&quot; src=&quot;&#x2F;images&#x2F;baricode3.png&quot; alt=&quot;bari-code-3&quot;&gt;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;generating-the-solution&quot;&gt;Generating the solution&lt;&#x2F;h3&gt;
&lt;p&gt;The next step before starting coding is to actually &lt;strong&gt;generate&lt;&#x2F;strong&gt; the solution and projects files (and fetch the dependencies, etc.) so &lt;em&gt;OmniSharp&lt;&#x2F;em&gt; can load it and provide code completion, analysis, etc. features.&lt;&#x2F;p&gt;
&lt;p&gt;To do so, just use the &lt;em&gt;command palette&lt;&#x2F;em&gt; and choose &lt;code&gt;bari: Regenerate solution&lt;&#x2F;code&gt;, which &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;vigoo&#x2F;bari&#x2F;wiki&#x2F;VsCommand&quot;&gt;runs the &lt;code&gt;bari vs&lt;&#x2F;code&gt; command&lt;&#x2F;a&gt; with the correct parameters. The command&#x27;s output is displayed in an &lt;em&gt;output panel&lt;&#x2F;em&gt; called &lt;code&gt;bari&lt;&#x2F;code&gt;. This looks like the following:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;&#x2F;images&#x2F;baricode4.png&quot; class=&quot;zimg&quot;&gt;&lt;img width=&quot;800&quot; src=&quot;&#x2F;images&#x2F;baricode4.png&quot; alt=&quot;bari-code-4&quot;&gt;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;There&#x27;s nothing else left than pointing &lt;em&gt;OmniSharp&lt;&#x2F;em&gt; to the generated solution, with the following command:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;&#x2F;images&#x2F;baricode5.png&quot; class=&quot;zimg&quot;&gt;&lt;img width=&quot;800&quot; src=&quot;&#x2F;images&#x2F;baricode5.png&quot; alt=&quot;bari-code-5&quot;&gt;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;It will automatically find the generated &lt;code&gt;.sln&lt;&#x2F;code&gt; file, just select the correct one:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;&#x2F;images&#x2F;baricode6.png&quot; class=&quot;zimg&quot;&gt;&lt;img width=&quot;800&quot; src=&quot;&#x2F;images&#x2F;baricode6.png&quot; alt=&quot;bari-code-6&quot;&gt;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;In a few seconds (and with a few warnings for this project), &lt;em&gt;OmniSharp&lt;&#x2F;em&gt; works. To see what it can do, &lt;a href=&quot;https:&#x2F;&#x2F;code.visualstudio.com&#x2F;Docs&#x2F;languages&#x2F;csharp&quot;&gt;check this page&lt;&#x2F;a&gt;. A simple example is to jump to a given class or interface with ⌘P:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;&#x2F;images&#x2F;baricode7.png&quot; class=&quot;zimg&quot;&gt;&lt;img width=&quot;600&quot; src=&quot;&#x2F;images&#x2F;baricode7.png&quot; alt=&quot;bari-code-7&quot;&gt;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;working-on-the-project&quot;&gt;Working on the project&lt;&#x2F;h3&gt;
&lt;p&gt;You can work on the project and build it from &lt;em&gt;Code&lt;&#x2F;em&gt; or run its tests using the &lt;code&gt;bari: Build&lt;&#x2F;code&gt; and &lt;code&gt;bari: Test&lt;&#x2F;code&gt; commands. The build output will be shown just like in the &lt;em&gt;solution generation step&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;&#x2F;images&#x2F;baricode8.png&quot; class=&quot;zimg&quot;&gt;&lt;img width=&quot;600&quot; src=&quot;&#x2F;images&#x2F;baricode8.png&quot; alt=&quot;bari-code-8&quot;&gt;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Whenever the suite definition itself must be modified, you can jump there with the &lt;code&gt;bari: Open suite.yaml&lt;&#x2F;code&gt; command and then just regenerate the solution as it was shown above.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;implementation&quot;&gt;Implementation&lt;&#x2F;h2&gt;
&lt;p&gt;The implementation was really straightforward. The source code &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;vigoo&#x2F;bari-code&quot;&gt;can be found here&lt;&#x2F;a&gt;. It&#x27;s basically a &lt;em&gt;JSON&lt;&#x2F;em&gt; defining how the plugin is integrated and some implementation code in &lt;em&gt;TypeScript&lt;&#x2F;em&gt;. It&#x27;s easy to run and debug the plugin from &lt;em&gt;Code&lt;&#x2F;em&gt; itself.&lt;&#x2F;p&gt;
&lt;p&gt;For example the following section from the extension definition describes what events triggers the extension:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;json&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-json &quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;activationEvents&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: [
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;onCommand:bari.build&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;onCommand:bari.test&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;onCommand:bari.vs&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;onCommand:bari.openSuiteYaml&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;onCommand:bari.selfUpdate&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;onCommand:bari.goal.changeCurrentGoal&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;onCommand:bari.goal.changeCurrentProduct&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;workspaceContains:suite.yaml&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;],
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;It&#x27;s either done by invoking one of the defined commands from the &lt;em&gt;command palette&lt;&#x2F;em&gt;, or if the opened workspace contains a &lt;code&gt;suite.yaml&lt;&#x2F;code&gt;. The latter enables the extension to parse the suite definition and initialize the statusbar immediately one the suite has been opened.&lt;&#x2F;p&gt;
&lt;p&gt;The package definition also specifies the provided configuration values, such as:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;json&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-json &quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;bari.commandLine&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;type&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;string&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;default&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;bari&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;description&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;Command line to execute bari&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;},
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;bari.verboseOutput&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;type&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;boolean&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;default&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;description&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;Turns on verbose output for all the executed bari commands&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The implementation itself is really simple, all the user interface elements involved such as the console output window, the command palette, the statusbar panels can be easily managed.&lt;&#x2F;p&gt;
&lt;p&gt;For example the panel showing &lt;code&gt;bari&lt;&#x2F;code&gt;&#x27;s output is created by the following code snippet:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;javascript&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-javascript &quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;channel &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;vscode&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;window&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;createOutputChannel&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;#39;bari&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;channel&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;show&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Or to display the result of an operation:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;javascript&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-javascript &quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;vscode&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;window&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;showErrorMessage&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;No suite.yaml in the current workspace!&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;or to create the statusbar panel:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;javascript&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-javascript &quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;goals &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;vscode&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;window&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;createStatusBarItem&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;vscode&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;StatusBarAlignment&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;Right&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;goals&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;command &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;#39;bari.goal.changeCurrentGoal&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;goals&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;show&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This API is simple and well documented enough so basic integrations like this can be done in an hour.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Gradle-Haskell-plugin with experimental Stack support</title>
        <published>2015-12-22T00:00:00+00:00</published>
        <updated>2015-12-22T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Daniel Vigovszky
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://blog.vigoo.dev/posts/gradle-haskell-plugin-stack/"/>
        <id>https://blog.vigoo.dev/posts/gradle-haskell-plugin-stack/</id>
        
        <content type="html" xml:base="https://blog.vigoo.dev/posts/gradle-haskell-plugin-stack/">&lt;p&gt;I&#x27;ve released a &lt;strong&gt;new version (0.4)&lt;&#x2F;strong&gt; of &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;prezi&#x2F;gradle-haskell-plugin&quot;&gt;gradle-haskell-plugin&lt;&#x2F;a&gt; today, with &lt;strong&gt;experimental stack support&lt;&#x2F;strong&gt;.
It is not enabled by default, but I used it exclusively for months and it seems to get quite stable. To use it you need &lt;a href=&quot;https:&#x2F;&#x2F;haskellstack.com&quot;&gt;stack&lt;&#x2F;a&gt;,
have it enabled with &lt;code&gt;-Puse-stack&lt;&#x2F;code&gt; and have to keep some rules in your &lt;code&gt;.cabal&lt;&#x2F;code&gt; file, as explained &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;prezi&#x2F;gradle-haskell-plugin#explanation-stack-mode&quot;&gt;in the README&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;how-does-it-work&quot;&gt;How does it work?&lt;&#x2F;h2&gt;
&lt;p&gt;The core idea did not change &lt;a href=&quot;https:&#x2F;&#x2F;blog.vigoo.dev&#x2F;posts&#x2F;gradle-haskell-plugin&#x2F;&quot;&gt;compared to the original, cabal based solution&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;To support chaining the binary artifacts, I had to add a new option to &lt;em&gt;stack&lt;&#x2F;em&gt; called &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;commercialhaskell&#x2F;stack&#x2F;pull&#x2F;990&quot;&gt;extra package databases&lt;&#x2F;a&gt;. The databases listed in this section are passed &lt;em&gt;after the global&lt;&#x2F;em&gt; but &lt;strong&gt;before&lt;&#x2F;strong&gt; the snapshot and the local databases, which means that the snapshot database cannot be used (the packages in the binary artifacts are not &quot;seeing&quot; them). This sounds bad, but &lt;em&gt;gradle-haskell-plugin&lt;&#x2F;em&gt; does a workaround; it &lt;strong&gt;generates&lt;&#x2F;strong&gt; the &lt;code&gt;stack.yaml&lt;&#x2F;code&gt; automatically, and in a way that:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;it disables snapshots on stack level (uses a resolver like &lt;code&gt;ghc-7.10.2&lt;&#x2F;code&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;lists all the dependencies explicitly in &lt;code&gt;extra-deps&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;but it still figures out the &lt;em&gt;versions&lt;&#x2F;em&gt; of the dependencies (to be listed in &lt;code&gt;extra-deps&lt;&#x2F;code&gt;) based on a given &lt;em&gt;stackage snapshot&lt;&#x2F;em&gt;!&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;With this approach we get the same behavior that was already proven in cabal mode, but with the advantage that the generated &lt;code&gt;stack.yaml&lt;&#x2F;code&gt; completely defines the project for any tool that knows stack. So after gradle extracted the dependencies and generated the &lt;code&gt;stack.yaml&lt;&#x2F;code&gt;, it is no longer needed to succesfully compile&#x2F;run&#x2F;test the project, which means that tools like IDE integration will work much better than with the more hacky cabal mode of the plugin.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Case Study - Haskell at Prezi</title>
        <published>2015-09-21T00:00:00+00:00</published>
        <updated>2015-09-21T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Daniel Vigovszky
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://blog.vigoo.dev/posts/haskell-case-study/"/>
        <id>https://blog.vigoo.dev/posts/haskell-case-study/</id>
        
        <content type="html" xml:base="https://blog.vigoo.dev/posts/haskell-case-study/">&lt;p&gt;I wrote a &lt;em&gt;case study&lt;&#x2F;em&gt; for &lt;a href=&quot;http:&#x2F;&#x2F;www.fpcomplete.com&quot;&gt;FPComplete&lt;&#x2F;a&gt; on how we use Haskell at &lt;a href=&quot;https:&#x2F;&#x2F;prezi.com&quot;&gt;Prezi&lt;&#x2F;a&gt;. It is published &lt;a href=&quot;https:&#x2F;&#x2F;www.fpcomplete.com&#x2F;page&#x2F;case-study-prezi&quot;&gt;here&lt;&#x2F;a&gt;, but I&#x27;m just posting it here as well:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;prezi.com&quot;&gt;Prezi&lt;&#x2F;a&gt; is a cloud-based presentation and storytelling tool, based on a zoomable canvas. The company was founded in 2009, and today we have more than 50 million users, with more than 160 million prezis created.&lt;&#x2F;p&gt;
&lt;p&gt;The company is using several different platforms and technologies; one of these is &lt;em&gt;Haskell&lt;&#x2F;em&gt;, which we are using server side, for code generation and for testing.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;pdom&quot;&gt;PDOM&lt;&#x2F;h2&gt;
&lt;p&gt;Prezi&#x27;s document format is continuously evolving as we add features to the application. It is very important for us that this format is handled correctly on all our supported platforms, and both on client and server side. To achieve this, we created an eDSL in Haskell that defines the schema of a Prezi. From this schema we are able to generate several artifacts.&lt;&#x2F;p&gt;
&lt;p&gt;Most importantly we are generating a &lt;em&gt;Prezi Document Object Model (PDOM)&lt;&#x2F;em&gt; library for multiple platforms - Haxe (compiled to JS) code for the web, C++ code for the native platforms, and Haskell code for our tests, tools and the server side. These libraries are responsible for loading, updating, maintaining consistency and saving Prezis.&lt;&#x2F;p&gt;
&lt;p&gt;This API also implements &lt;em&gt;collaborative editing&lt;&#x2F;em&gt; functionality by transparently synchronising document changes between multiple clients. This technique is called &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Operational_transformation&quot;&gt;operational transformation (OT)&lt;&#x2F;a&gt;. We implemented the server side of this in Haskell; it supports clients from any of the supported platforms and it is connected to several other backend services.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;benefits&quot;&gt;Benefits&lt;&#x2F;h2&gt;
&lt;p&gt;Using &lt;em&gt;Haskell&lt;&#x2F;em&gt; for this project turned out to have huge benefits.&lt;&#x2F;p&gt;
&lt;p&gt;We are taking advantage of Haskell&#x27;s capabilities to create embedded domain specific languages, using it to define the document&#x27;s schema in our own eDSL which is used not only by Haskell developers but many others too.&lt;&#x2F;p&gt;
&lt;p&gt;Haskell&#x27;s clean and terse code allows us to describe document invariants and rules in a very readable way and the type system guarantees that we handle all the necessary cases, providing a stable base Haskell implementation which we can compare the other language backends to.&lt;&#x2F;p&gt;
&lt;p&gt;It was also possible to define a set of merge laws for OT, which are verified whenever we introduce a new element to the document schema, guaranteeing that the collaboration functionality works correctly.&lt;&#x2F;p&gt;
&lt;p&gt;We use the &lt;em&gt;QuickCheck&lt;&#x2F;em&gt; testing library on all levels. We can generate arbitrary Prezi documents and test serialization on all the backends. We are even generating arbitrary JavaScript code which uses our generated API to test random collaborative network sessions. These tests turned out to be critical for our success as they caught many interesting problems before we deployed anything to production&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Haskell plugin for Gradle</title>
        <published>2015-04-22T00:00:00+00:00</published>
        <updated>2015-04-22T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Daniel Vigovszky
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://blog.vigoo.dev/posts/gradle-haskell-plugin/"/>
        <id>https://blog.vigoo.dev/posts/gradle-haskell-plugin/</id>
        
        <content type="html" xml:base="https://blog.vigoo.dev/posts/gradle-haskell-plugin/">&lt;p&gt;My team at &lt;a href=&quot;https:&#x2F;&#x2F;prezi.com&quot;&gt;Prezi&lt;&#x2F;a&gt; uses &lt;strong&gt;Haskell&lt;&#x2F;strong&gt; for several projects, which usually depend on each other, often with build steps using other languages such as Scala, C++ or Haxe. As &lt;a href=&quot;https:&#x2F;&#x2F;gradle.org&#x2F;&quot;&gt;Gradle&lt;&#x2F;a&gt; is used heavily in the company, we decided to try to integrate our Haskell projects within Gradle.&lt;&#x2F;p&gt;
&lt;p&gt;The result is &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;prezi&#x2F;gradle-haskell-plugin&quot;&gt;Gradle Haskell Plugin&lt;&#x2F;a&gt;, which we were using succesfully in the last 2 months in our daily work, and we have &lt;em&gt;open-sourced&lt;&#x2F;em&gt; recently.&lt;&#x2F;p&gt;
&lt;p&gt;What makes this solution interesting is that it not just simply wraps &lt;em&gt;cabal&lt;&#x2F;em&gt; within Gradle tasks, but implements a way to define &lt;strong&gt;dependencies&lt;&#x2F;strong&gt; between Haskell projects and to upload the binary Haskell artifacts to a &lt;em&gt;repository&lt;&#x2F;em&gt; such as &lt;a href=&quot;http:&#x2F;&#x2F;www.jfrog.com&#x2F;open-source&#x2F;&quot;&gt;artifactory&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;This makes it easy to modularize our projects, publish them, and also works perfectly with &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;prezi&#x2F;pride&quot;&gt;pride&lt;&#x2F;a&gt;, an other &lt;em&gt;open-source&lt;&#x2F;em&gt; Prezi project. This means that we can work on a subset of our Haskell projects while the other dependencies are built on Jenkins, and it also integrates well with our non-Haskell projects.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;how-does-it-work&quot;&gt;How does it work?&lt;&#x2F;h2&gt;
&lt;p&gt;The main idea is that we let &lt;em&gt;cabal&lt;&#x2F;em&gt; manage the Haskell packages, and handle whole Haskell &lt;em&gt;sandboxes&lt;&#x2F;em&gt; on Gradle level. So if you have a single Haskell project, it will be built using &lt;em&gt;cabal&lt;&#x2F;em&gt; and the result sandbox (the built project together with all the dependent cabal packages which are not installed in the &lt;em&gt;global package database&lt;&#x2F;em&gt;) will be packed&#x2F;published as a Gradle &lt;em&gt;artifact&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;This is not very interesting so far, but when you introduce dependencies on Gradle level, the plugin does something which (as far as I know) is not really done by anyone else, which I call &lt;em&gt;sandbox chaining&lt;&#x2F;em&gt;. This basically means that to compile the haskell project, the plugin will pass all the dependent sandboxes&#x27; package database to cabal and GHC, so for the actual sandbox only the packages which are &lt;strong&gt;not&lt;&#x2F;strong&gt; in any of the dependent sandboxes will be installed.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;example&quot;&gt;Example&lt;&#x2F;h2&gt;
&lt;p&gt;Let&#x27;s see an example scenario with &lt;em&gt;4 gradle-haskell projects&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;prezi&#x2F;gradle-haskell-plugin&#x2F;master&#x2F;doc&#x2F;gradle-haskell-plugin-drawing1.png&quot; class=&quot;zimg&quot;&gt;&lt;img width=&quot;600&quot; src=&quot;https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;prezi&#x2F;gradle-haskell-plugin&#x2F;master&#x2F;doc&#x2F;gradle-haskell-plugin-drawing1.png&quot; alt=&quot;gradle-haskell-plugin&quot;&gt;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The project called &lt;em&gt;Haskell project&lt;&#x2F;em&gt; depends on two other projects, which taking into accound the transitive dependencies means it depends on &lt;em&gt;three other haskell projects&lt;&#x2F;em&gt;. Each project has its own haskell source and &lt;em&gt;cabal file&lt;&#x2F;em&gt;. Building this suite consists of the following steps:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;dependency 1&lt;&#x2F;strong&gt; is built using only the &lt;em&gt;global package database&lt;&#x2F;em&gt;, everything &lt;strong&gt;not&lt;&#x2F;strong&gt; in that database, together with the compiled project goes into its &lt;code&gt;build&#x2F;sandbox&lt;&#x2F;code&gt; directory, which is a combination of a &lt;em&gt;GHC package database&lt;&#x2F;em&gt; and the project&#x27;s build output. This is packed as &lt;strong&gt;dependency 1&lt;&#x2F;strong&gt;&#x27;s build artifact.&lt;&#x2F;li&gt;
&lt;li&gt;For &lt;strong&gt;dependency 2&lt;&#x2F;strong&gt;, Gradle first downloads the build artifact of &lt;em&gt;dependency 1&lt;&#x2F;em&gt; and extracts it to &lt;code&gt;build&#x2F;deps&#x2F;dependency1&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;Then it runs &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;exFalso&#x2F;sandfix&quot;&gt;SandFix&lt;&#x2F;a&gt; on it&lt;&#x2F;li&gt;
&lt;li&gt;And compiles the second project, now passing &lt;strong&gt;both&lt;&#x2F;strong&gt; the &lt;em&gt;global package database&lt;&#x2F;em&gt; and &lt;strong&gt;dependency 1&lt;&#x2F;strong&gt;&#x27;s sandbox to cabal&#x2F;ghc. The result is that only the packages which are &lt;strong&gt;not&lt;&#x2F;strong&gt; in any of these two package databases will be installed in the project&#x27;s own sandbox, which becomes the build artifact of &lt;strong&gt;dependency 2&lt;&#x2F;strong&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;For &lt;strong&gt;dependency 3&lt;&#x2F;strong&gt;, Gradle extracts both the direct dependency and the transitive dependency&#x27;s sandbox, to &lt;code&gt;build&#x2F;deps&#x2F;dependency2&lt;&#x2F;code&gt; and &lt;code&gt;build&#x2F;deps&#x2F;dependency3&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;Then it runs &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;exFalso&#x2F;sandfix&quot;&gt;SandFix&lt;&#x2F;a&gt; on both the dependencies&lt;&#x2F;li&gt;
&lt;li&gt;And finally passes three package databases to cabal&#x2F;ghc to compile the project. Only those cabal dependencies will be installed into this sandbox which are not in global, neither in any of the dependent sandboxes.&lt;&#x2F;li&gt;
&lt;li&gt;Finally, for &lt;strong&gt;Haskell project&lt;&#x2F;strong&gt; it goes the same way, but here we have three sandboxes, all chained together to make sure only the built sandbox only contains what is not in the dependent sandboxes yet.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;For more information, check out &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;prezi&#x2F;gradle-haskell-plugin&quot;&gt;the documentation&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>bari 1.0 released</title>
        <published>2014-12-08T00:00:00+00:00</published>
        <updated>2014-12-08T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Daniel Vigovszky
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://blog.vigoo.dev/posts/bari-1-0/"/>
        <id>https://blog.vigoo.dev/posts/bari-1-0/</id>
        
        <content type="html" xml:base="https://blog.vigoo.dev/posts/bari-1-0/">&lt;p&gt;I already wrote about &lt;a href=&quot;http:&#x2F;&#x2F;vigoo.github.io&#x2F;bari&quot;&gt;bari&lt;&#x2F;a&gt; in &lt;a href=&quot;https:&#x2F;&#x2F;blog.vigoo.dev&#x2F;posts&#x2F;introducing-bari&#x2F;&quot;&gt;May&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;As a reminder, &lt;a href=&quot;http:&#x2F;&#x2F;vigoo.github.io&#x2F;bari&quot;&gt;bari&lt;&#x2F;a&gt; is a &lt;em&gt;build management system&lt;&#x2F;em&gt; primarily for .NET, trying to fix Visual Studio&#x27;s bad parts while keeping the good ones.&lt;&#x2F;p&gt;
&lt;p&gt;After more than two years of development, and being in production at &lt;a href=&quot;http:&#x2F;&#x2F;www.kotem.com&#x2F;&quot;&gt;KOTEM&lt;&#x2F;a&gt; for almost half a year, bari reached a state when it can be considered as a &lt;em&gt;stable&lt;&#x2F;em&gt; and &lt;em&gt;usable&lt;&#x2F;em&gt; first version.&lt;&#x2F;p&gt;
&lt;p&gt;To indicate this today I released &lt;strong&gt;bari 1.0&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Try it out and feel free to give any kind of feedback or ask any questions!&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;http:&#x2F;&#x2F;vigoo.github.io&#x2F;bari&#x2F;img&#x2F;barilogo-small.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>ScalaFXML 0.2.2 available</title>
        <published>2014-10-22T00:00:00+00:00</published>
        <updated>2014-10-22T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Daniel Vigovszky
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://blog.vigoo.dev/posts/scalafxml-0-2-2/"/>
        <id>https://blog.vigoo.dev/posts/scalafxml-0-2-2/</id>
        
        <content type="html" xml:base="https://blog.vigoo.dev/posts/scalafxml-0-2-2/">&lt;p&gt;I&#x27;ve released a new version of &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;vigoo&#x2F;scalafxml&quot;&gt;ScalaFXML&lt;&#x2F;a&gt;, which now supports &lt;em&gt;both&lt;&#x2F;em&gt; &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;scalafx&#x2F;scalafx&quot;&gt;ScalaFX 8&lt;&#x2F;a&gt; with &lt;em&gt;JavaFX 8&lt;&#x2F;em&gt; on Java 8, and &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;scalafx&#x2F;scalafx&quot;&gt;ScalaFX 2.2&lt;&#x2F;a&gt; with &lt;em&gt;JavaFX 2.x&lt;&#x2F;em&gt; on Java 7.&lt;&#x2F;p&gt;
&lt;p&gt;The two branches are separated by the &lt;code&gt;sfx2&lt;&#x2F;code&gt; and &lt;code&gt;sfx8&lt;&#x2F;code&gt; postfixes, and both are available for &lt;em&gt;Scala&lt;&#x2F;em&gt; &lt;code&gt;2.10.x&lt;&#x2F;code&gt; and &lt;code&gt;2.11.x&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;To use it with &lt;a href=&quot;http:&#x2F;&#x2F;www.scala-sbt.org&#x2F;&quot;&gt;sbt&lt;&#x2F;a&gt; on Java 7:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span&gt;addCompilerPlugin(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;org.scalamacros&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt; % &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;paradise&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt; % &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;2.0.1&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt; cross CrossVersion.full)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;libraryDependencies += &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;org.scalafx&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt; %% &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;scalafx&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt; % &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;2.2.67-R10&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;libraryDependencies += &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;org.scalafx&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt; %% &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;scalafxml-core-sfx2&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt; % &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;0.2.2&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And on Java 8:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span&gt;addCompilerPlugin(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;org.scalamacros&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt; % &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;paradise&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt; % &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;2.0.1&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt; cross CrossVersion.full)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;libraryDependencies += &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;org.scalafx&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt; %% &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;scalafx&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt; % &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;8.0.20-R6&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;libraryDependencies += &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;org.scalafx&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt; %% &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;scalafxml-core-sfx8&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt; % &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;0.2.2&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>A python&#x2F;thrift profiling story</title>
        <published>2014-09-15T00:00:00+00:00</published>
        <updated>2014-09-15T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Daniel Vigovszky
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://blog.vigoo.dev/posts/thrift-profiling/"/>
        <id>https://blog.vigoo.dev/posts/thrift-profiling/</id>
        
        <content type="html" xml:base="https://blog.vigoo.dev/posts/thrift-profiling/">&lt;p&gt;A few weeks ago I met a problem where a script, running once every night sending out some emails did not run correctly because a remote thrift call timed out in it. As I started investigating it, turned out that it&#x27;s a &lt;em&gt;search&lt;&#x2F;em&gt; call:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span&gt;staff_users &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;RemoteUserFactory&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;search&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;is_staff&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;True&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The details here are not really important, what this call does is that it asks a service to return a &lt;em&gt;set of users&lt;&#x2F;em&gt;, and the communication is going on &lt;a href=&quot;https:&#x2F;&#x2F;thrift.apache.org&#x2F;&quot;&gt;thrift&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Executing it manually on the server revealed that it should return &lt;em&gt;5649&lt;&#x2F;em&gt; users. Checking out the logs I could see that the call took extremely long time, between 8 to 12 seconds. Even when the cron job was moved from 3:00 AM to a less busy time (several other jobs were executing at the same time), it took more than 6 seconds!&lt;&#x2F;p&gt;
&lt;p&gt;This was suspicious so I also checked the log of a &lt;em&gt;proxy&lt;&#x2F;em&gt; which runs on the same host as the script itself and provides client side load balancing, circuit breaking, retry logic etc. for thrift connections. This log showed that the service replied in &lt;em&gt;2.5 seconds&lt;&#x2F;em&gt;, but it took almost 4 seconds to get this response from the proxy to the client on localhost! This seemed to be completely unacceptable, and also the 2.5 second response time from the service seemed to be too big (I ran the query on one of the server nodes and it returned the users from the database almost instantly). I also had similar experience (but without measurements) before.&lt;&#x2F;p&gt;
&lt;p&gt;So I decided to find out what&#x27;s going on. And I found the process interesting enough to write this post about it :)&lt;&#x2F;p&gt;
&lt;h2 id=&quot;test-environment&quot;&gt;Test environment&lt;&#x2F;h2&gt;
&lt;p&gt;I started by adding a test method to the service&#x27;s thrift API called &lt;code&gt;test_get_users(count, sleep)&lt;&#x2F;code&gt; which returns &lt;code&gt;count&lt;&#x2F;code&gt; fake users after waiting &lt;code&gt;sleep&lt;&#x2F;code&gt; seconds. Then in the following experiments I called it with &lt;code&gt;(5499, 1)&lt;&#x2F;code&gt;. The 1 second sleep was intended to simulate the network latency and database query; there was no advantage from having it at the end, but as it is visible everywhere in the results, I had to mention.&lt;&#x2F;p&gt;
&lt;p&gt;For finding out what&#x27;s going on I used &lt;a href=&quot;https:&#x2F;&#x2F;docs.python.org&#x2F;2&#x2F;library&#x2F;profile.html&quot;&gt;cProfile&lt;&#x2F;a&gt; with &lt;a href=&quot;https:&#x2F;&#x2F;code.google.com&#x2F;p&#x2F;jrfonseca&#x2F;&quot;&gt;gprof2dot&lt;&#x2F;a&gt;, calling the remote test method from a django shell, while everything is running on localhost.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;first-measurement&quot;&gt;First measurement&lt;&#x2F;h3&gt;
&lt;p&gt;Without touching anything, returning 5499 dummy users on localhost took &lt;strong&gt;5.272 seconds&lt;&#x2F;strong&gt;!&lt;&#x2F;p&gt;
&lt;p&gt;The client side of the call looked like this:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;&#x2F;images&#x2F;profile1.png&quot; class=&quot;zimg&quot;&gt;&lt;img width=&quot;600&quot; src=&quot;&#x2F;images&#x2F;profile1.png&quot; alt=&quot;profile1&quot;&gt;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Here we can see that the call has two major phases:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;The thrift call itself (65%)&lt;&#x2F;li&gt;
&lt;li&gt;Converting the raw results to model objects with &lt;code&gt;_row_to_model&lt;&#x2F;code&gt; (35%)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Let&#x27;s see first the thrift call (the green branch on the picture). Once again it has two, nearly equivalent branches:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;send_test_get_users&lt;&#x2F;code&gt; which sends the request and waits for the response. This includes the 1 second sleep as well.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;recv_test_get_users&lt;&#x2F;code&gt; processes the response&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;What&#x27;s interesting here is that &lt;code&gt;recv_test_get_users&lt;&#x2F;code&gt; took ~32% of the overall time which is around ~1.6 seconds for simple data deserialization.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;optimizing-thrift-deserialization&quot;&gt;Optimizing thrift deserialization&lt;&#x2F;h3&gt;
&lt;p&gt;I did not want to believe that the python thrift deserialization is that slow, so I did a search and found that the &lt;code&gt;TBinaryProtocol&lt;&#x2F;code&gt; which we are using is really that slow.&lt;&#x2F;p&gt;
&lt;p&gt;But the thrift library contains a class called &lt;code&gt;TBinaryProtocolAccelerated&lt;&#x2F;code&gt; which is about 10x faster (according to a stackoverflow post).&lt;&#x2F;p&gt;
&lt;p&gt;First I simply changed the used protocol to this, but nothing happened. Digging deeper I found that this is not a real protocol implementation, but a lower level hack.&lt;&#x2F;p&gt;
&lt;p&gt;The documentation of the protocol class says:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#383a42;&quot;&gt;&lt;code&gt;&lt;span&gt;  C-Accelerated version of TBinaryProtocol.
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  This class does not override any of TBinaryProtocol&amp;#39;s methods,
&lt;&#x2F;span&gt;&lt;span&gt;  but the generated code recognizes it directly and will call into
&lt;&#x2F;span&gt;&lt;span&gt;  our C module to do the encoding, bypassing this object entirely.
&lt;&#x2F;span&gt;&lt;span&gt;  We inherit from TBinaryProtocol so that the normal TBinaryProtocol
&lt;&#x2F;span&gt;&lt;span&gt;  encoding can happen if the fastbinary module doesn&amp;#39;t work for some
&lt;&#x2F;span&gt;&lt;span&gt;  reason.  (TODO(dreiss): Make this happen sanely in more cases.)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  In order to take advantage of the C module, just use
&lt;&#x2F;span&gt;&lt;span&gt;  TBinaryProtocolAccelerated instead of TBinaryProtocol.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;So why didn&#x27;t it work? The answer is in &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;apache&#x2F;thrift&#x2F;blob&#x2F;master&#x2F;lib&#x2F;py&#x2F;src&#x2F;protocol&#x2F;TBase.py#L52-L58&quot;&gt;TBase.py&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The following conditions have to met in order to use the fast deserializer:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Protocol must be &lt;code&gt;TBinaryProtocolAccelerated&lt;&#x2F;code&gt; (I changed that)&lt;&#x2F;li&gt;
&lt;li&gt;Protocol&#x27;s transport implementation must implement the &lt;code&gt;TTransport.CReadableTransport&lt;&#x2F;code&gt; interface&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;thrift_spec&lt;&#x2F;code&gt; must be available (this was true in this case)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;fastbinary&lt;&#x2F;code&gt; must be available (also true)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The problem was that we were replacing the &lt;code&gt;TTransport&lt;&#x2F;code&gt; implementation with a custom class called &lt;code&gt;ThriftifyTransport&lt;&#x2F;code&gt; in order to do thrift logging, HMAC authentication, etc.&lt;&#x2F;p&gt;
&lt;p&gt;Fortunately all the default transport implementations implement the &lt;code&gt;CReadableTransport&lt;&#x2F;code&gt; interface, and one of them, &lt;code&gt;TBufferedTransport&lt;&#x2F;code&gt; can be used to wrap another transport to add buffering around it. That&#x27;s what I did, and it immediately started using the fast deserialization code.&lt;&#x2F;p&gt;
&lt;p&gt;The test call now ran in &lt;strong&gt;3.624 seconds&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;And the new profiling results with this change:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;&#x2F;images&#x2F;profile2.png&quot; class=&quot;zimg&quot;&gt;&lt;img width=&quot;600&quot; src=&quot;&#x2F;images&#x2F;profile2.png&quot; alt=&quot;profile2&quot;&gt;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The left-hand side of the call graph remained the same, but &lt;code&gt;recv_test_get_users&lt;&#x2F;code&gt; is now only 2.35% of the overall time which is ~0.08 seconds (to be compared with the 1.6 seconds with the original deserializer!)&lt;&#x2F;p&gt;
&lt;h3 id=&quot;optimizing-thrift-serialization&quot;&gt;Optimizing thrift serialization&lt;&#x2F;h3&gt;
&lt;p&gt;The obvious next step was to apply this change on the server side as well, so our service can use the fast binary protocol for serialization too. For this I simply copied the change and remeasured everything.&lt;&#x2F;p&gt;
&lt;p&gt;The test call now ran in &lt;strong&gt;3.328 seconds&lt;&#x2F;strong&gt;!&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s see the call graph of this stage:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;&#x2F;images&#x2F;profile3.png&quot; class=&quot;zimg&quot;&gt;&lt;img width=&quot;600&quot; src=&quot;&#x2F;images&#x2F;profile3.png&quot; alt=&quot;profile3&quot;&gt;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;optimizing-result-processing&quot;&gt;Optimizing result processing&lt;&#x2F;h3&gt;
&lt;p&gt;The client side of the test method was written similar to how the original API method is written:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;test_get_users_thrift&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;count&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;sleep&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;    rpc &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;ThriftRPC&lt;&#x2F;span&gt;&lt;span&gt;(UserDataService, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.name, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;service_name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.service_name, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;client_config&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt;client_config)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    result &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[]
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;row &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span&gt;rpc.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;test_get_users&lt;&#x2F;span&gt;&lt;span&gt;(count, sleep).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;iteritems&lt;&#x2F;span&gt;&lt;span&gt;():
&lt;&#x2F;span&gt;&lt;span&gt;        user &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_row_to_model&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.user_factory, row)
&lt;&#x2F;span&gt;&lt;span&gt;        result.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;append&lt;&#x2F;span&gt;&lt;span&gt;(user)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;result
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;It is clearly visible on the call graph that the 5499 call to &lt;code&gt;_row_to_model&lt;&#x2F;code&gt; takes 53% of the total time, which is ~1.7 seconds. There are two main branches of this call. The left hand side (&lt;code&gt;row_to_model&lt;&#x2F;code&gt;) seemed to be simple data conversion, and its slowest part is date-time deserialization.&lt;&#x2F;p&gt;
&lt;p&gt;The other branch however looked like a real problem; why should we resolve HMAC host, or parse configuration for each row?&lt;&#x2F;p&gt;
&lt;p&gt;It turned out to be a bug, &lt;code&gt;_row_to_model&lt;&#x2F;code&gt; created a new &lt;em&gt;model factory&lt;&#x2F;em&gt; in each call, which involves a lot of initialization, config parsing, and similar things.&lt;&#x2F;p&gt;
&lt;p&gt;So the simple fix was to create a &lt;code&gt;_rows_to_model&lt;&#x2F;code&gt; helper function which does the same for multiple rows with a single factory.&lt;&#x2F;p&gt;
&lt;p&gt;Running my test code once again showed that the optimization makes sense. Now it ran in &lt;strong&gt;2.448 seconds&lt;&#x2F;strong&gt;, with the following call graph:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;&#x2F;images&#x2F;profile4.png&quot; class=&quot;zimg&quot;&gt;&lt;img width=&quot;600&quot; src=&quot;&#x2F;images&#x2F;profile4.png&quot; alt=&quot;profile4&quot;&gt;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;further-optimizations&quot;&gt;Further optimizations&lt;&#x2F;h3&gt;
&lt;p&gt;I saw two possible ways to further optimize this case:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Lazy conversion of raw thrift data to model data (per field). This would make sense because many times only a few fields (the id for example) are used, but it seemed to be a too complex change&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Checking the server side as well&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;To profile the server side and only measure the thrift request processing I had to add profiling code to the django view class in the following way:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;cProfile
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;cProfile.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;runctx&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;#39;self._call_processor(op_data)&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;globals&lt;&#x2F;span&gt;&lt;span&gt;(), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;locals&lt;&#x2F;span&gt;&lt;span&gt;(), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;#39;callstats&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;# self._call_processor(op_data)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The server-side call took &lt;strong&gt;1.691 seconds&lt;&#x2F;strong&gt; and looked like this:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;&#x2F;images&#x2F;profile5.png&quot; class=&quot;zimg&quot;&gt;&lt;img width=&quot;600&quot; src=&quot;&#x2F;images&#x2F;profile5.png&quot; alt=&quot;profile5&quot;&gt;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;As expected, 60% of this was the 1 second sleep. The rest of the calls are data conversion with no obvious point to improve.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;&#x2F;h2&gt;
&lt;p&gt;These optimizations are decreasing the response time significantly, especially for calls returning multiple rows.&lt;&#x2F;p&gt;
&lt;p&gt;The interesting was that the extremely slow performance was caused by both the slow perfomance of the python thrift serializer and a bug in our code.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Conditional blocks in Distributed Documentor</title>
        <published>2014-07-13T00:00:00+00:00</published>
        <updated>2014-07-13T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Daniel Vigovszky
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://blog.vigoo.dev/posts/conditional-blocks-in-ddoc/"/>
        <id>https://blog.vigoo.dev/posts/conditional-blocks-in-ddoc/</id>
        
        <content type="html" xml:base="https://blog.vigoo.dev/posts/conditional-blocks-in-ddoc/">&lt;p&gt;I&#x27;ve added a new feature to &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;vigoo&#x2F;distributed-documentor&quot;&gt;Distributed Documentor&lt;&#x2F;a&gt; today, &lt;em&gt;conditional blocks&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The idea is that parts of the documents can be enabled when a given &lt;em&gt;condition&lt;&#x2F;em&gt; is present. This is very similar to &lt;a href=&quot;http:&#x2F;&#x2F;gcc.gnu.org&#x2F;onlinedocs&#x2F;cpp&#x2F;Ifdef.html&quot;&gt;C&#x27;s ifdef blocks&lt;&#x2F;a&gt;. To use it with the &lt;em&gt;MediaWiki syntax&lt;&#x2F;em&gt;, put &lt;code&gt;[When:X]&lt;&#x2F;code&gt; and &lt;code&gt;[End]&lt;&#x2F;code&gt; commands in separate lines:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#383a42;&quot;&gt;&lt;code&gt;&lt;span&gt;Unconditional
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;[When:FIRST]
&lt;&#x2F;span&gt;&lt;span&gt;First conditional
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;[When:SECOND]
&lt;&#x2F;span&gt;&lt;span&gt;First and second conditional
&lt;&#x2F;span&gt;&lt;span&gt;[End]
&lt;&#x2F;span&gt;&lt;span&gt;[End]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;[When:SECOND]
&lt;&#x2F;span&gt;&lt;span&gt;Second conditional
&lt;&#x2F;span&gt;&lt;span&gt;[End]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;em&gt;Snippets&lt;&#x2F;em&gt; can also have conditional blocks.&lt;&#x2F;p&gt;
&lt;p&gt;There are two possibilities to set which conditionals are enabled:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Specifying it with command line arguments, such as&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#383a42;&quot;&gt;&lt;code&gt;&lt;span&gt; java -jar DistributedDocumentor.jar -D FIRST -D SECOND
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This is useful when exporting a documentation from command line, or to launch the documentation editor with a predefined set of enabled conditions.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;On the user interface, using &lt;em&gt;View&lt;&#x2F;em&gt; menu&#x27;s &lt;em&gt;Enabled conditions...&lt;&#x2F;em&gt; menu item:&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;enabled-conditions-dialog.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Introducing bari</title>
        <published>2014-05-16T00:00:00+00:00</published>
        <updated>2014-05-16T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Daniel Vigovszky
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://blog.vigoo.dev/posts/introducing-bari/"/>
        <id>https://blog.vigoo.dev/posts/introducing-bari/</id>
        
        <content type="html" xml:base="https://blog.vigoo.dev/posts/introducing-bari/">&lt;p&gt;In the past two years I worked on a project called &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;vigoo&#x2F;bari&quot;&gt;bari&lt;&#x2F;a&gt; which now reached an usable state. &lt;strong&gt;bari&lt;&#x2F;strong&gt; is a &lt;em&gt;build management system&lt;&#x2F;em&gt;, trying to fix Visual Studio&#x27;s bad parts while keeping the good ones.&lt;&#x2F;p&gt;
&lt;p&gt;Basically it tries to make .NET development more convenient, when&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;The application may consist of a &lt;em&gt;large number of projects&lt;&#x2F;em&gt;&lt;&#x2F;li&gt;
&lt;li&gt;There may be several different &lt;em&gt;subsets&lt;&#x2F;em&gt; of these projects defining
valuable target &lt;em&gt;products&lt;&#x2F;em&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;em&gt;Custom build steps&lt;&#x2F;em&gt; may be required&lt;&#x2F;li&gt;
&lt;li&gt;It is important to be able to &lt;em&gt;reproduce&lt;&#x2F;em&gt; the build environment as
easily as possible&lt;&#x2F;li&gt;
&lt;li&gt;The developers want to use the full power of their &lt;em&gt;IDE&lt;&#x2F;em&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The main idea is to generate Visual Studio solutions and projects &lt;em&gt;on the fly&lt;&#x2F;em&gt; as needed, from a concise &lt;em&gt;declarative&lt;&#x2F;em&gt;  build description. I tried to optimize this build description for human readability. Let&#x27;s see an example, a short section from &lt;strong&gt;bari&lt;&#x2F;strong&gt;&#x27;s own build definition:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;bari
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;executable
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;references&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;gac:&#x2F;&#x2F;System
&lt;&#x2F;span&gt;&lt;span&gt;    - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;nuget:&#x2F;&#x2F;log4net
&lt;&#x2F;span&gt;&lt;span&gt;    - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;nuget:&#x2F;&#x2F;Ninject&#x2F;3.0.1.10
&lt;&#x2F;span&gt;&lt;span&gt;    - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;nuget:&#x2F;&#x2F;QuickGraph
&lt;&#x2F;span&gt;&lt;span&gt;    - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;module:&#x2F;&#x2F;Bari.Core
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;csharp&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;root-namespace&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;Bari.Console
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The main advantage of generating solutions and projects on the fly is that each developer can work on the subset he needs for his current task keeping the IDE fast, but can also open everything in one solution if it is useful for performing a refactoring.&lt;&#x2F;p&gt;
&lt;p&gt;To keep build definitions short and readable, &lt;strong&gt;bari&lt;&#x2F;strong&gt; prefers &lt;em&gt;convention&lt;&#x2F;em&gt; over &lt;em&gt;configuration&lt;&#x2F;em&gt;. For example the directory stucture in which the source code lays defines not only the name of the modules to build, but also the way it is built. For example, in a simple &lt;em&gt;hello world&lt;&#x2F;em&gt; example the C# source code would be put in the &lt;code&gt;src&#x2F;TestModule&#x2F;HelloWorld&#x2F;cs&lt;&#x2F;code&gt; directory, and &lt;strong&gt;bari&lt;&#x2F;strong&gt; would build &lt;code&gt;target&#x2F;TestModule&#x2F;HelloWorld.exe&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;bari&lt;&#x2F;strong&gt; unifies the handling of &lt;em&gt;project references&lt;&#x2F;em&gt; in a way that referencing projects within a suite, from the GAC, using &lt;a href=&quot;http:&#x2F;&#x2F;www.nuget.org&quot;&gt;Nuget&lt;&#x2F;a&gt; or from a custom repository works exactly the same. It is also possible to write &lt;em&gt;custom builders&lt;&#x2F;em&gt; in Python.&lt;&#x2F;p&gt;
&lt;p&gt;For more information check out &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;vigoo&#x2F;bari&#x2F;wiki&#x2F;GettingStarted&quot;&gt;the getting started page&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>ScalaFX with FXML</title>
        <published>2014-01-12T00:00:00+00:00</published>
        <updated>2014-01-12T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Daniel Vigovszky
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://blog.vigoo.dev/posts/scalafx-with-fxml/"/>
        <id>https://blog.vigoo.dev/posts/scalafx-with-fxml/</id>
        
        <content type="html" xml:base="https://blog.vigoo.dev/posts/scalafx-with-fxml/">&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;code.google.com&#x2F;p&#x2F;scalafx&#x2F;&quot;&gt;ScalaFX&lt;&#x2F;a&gt; is a nice wrapper around JavaFX for Scala, but currently it lacks support for using &lt;a href=&quot;http:&#x2F;&#x2F;docs.oracle.com&#x2F;javafx&#x2F;2&#x2F;api&#x2F;javafx&#x2F;fxml&#x2F;doc-files&#x2F;introduction_to_fxml.html&quot;&gt;FXML&lt;&#x2F;a&gt; instead of Scala code for defining the user interfaces. This can be understood as &lt;em&gt;ScalaFX&lt;&#x2F;em&gt; is in fact a DSL for defining the UI in Scala instead of an XML file. Still I believe that using FXML instead may have its advantages; first of all it has a visual designer (&lt;a href=&quot;http:&#x2F;&#x2F;www.oracle.com&#x2F;technetwork&#x2F;java&#x2F;javafx&#x2F;tools&#x2F;index.html&quot;&gt;JavaFX Scene Builder&lt;&#x2F;a&gt;). For me, designing an UI without immediate visual feedback is hard, and involves a lot of iterations of tweaking the code, running it and checking the results. I also expect that in the future there will be more tools available which work on FXML data.&lt;&#x2F;p&gt;
&lt;p&gt;It is not impossible to use FXML user interfaces from Scala, but the ScalaFX wrappers does not help and the code for the controller classes is not clean enough. See &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jpsacha&#x2F;ProScalaFX&#x2F;blob&#x2F;master&#x2F;src&#x2F;proscalafx&#x2F;ch10&#x2F;fxml&#x2F;AdoptionFormController.scala&quot;&gt;the following example&lt;&#x2F;a&gt; to get a feeling how it looks like.&lt;&#x2F;p&gt;
&lt;p&gt;To make it better I wrote a small library called &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;vigoo&#x2F;scalafxml&quot;&gt;ScalaFXML&lt;&#x2F;a&gt;. In this post I&#x27;ll go through a small example to explain how it works.&lt;&#x2F;p&gt;
&lt;p&gt;The following image shows how our sample application will look like:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;unit-conversion-shot.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;em&gt;From&lt;&#x2F;em&gt; fiels is editable, and the result in the &lt;em&gt;To&lt;&#x2F;em&gt; field is filled as you type using &lt;em&gt;data binding&lt;&#x2F;em&gt;. The &lt;em&gt;Close&lt;&#x2F;em&gt; button&#x27;s only purpose is to demonstrate event handlers.&lt;&#x2F;p&gt;
&lt;p&gt;The conversion logic itself is implemented by &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;vigoo&#x2F;scalafxml&#x2F;blob&#x2F;master&#x2F;demo&#x2F;src&#x2F;main&#x2F;scala&#x2F;scalafxml&#x2F;demo&#x2F;unitconverter&#x2F;UnitConverter.scala&quot;&gt;small classes&lt;&#x2F;a&gt; sharing the same trait:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;trait&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; UnitConverter {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;description&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: String
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;run&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;input&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: String): String
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;override def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;toString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; description
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;object&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; MMtoInches &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span&gt;UnitConverter &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;description&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: String &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;Millimeters to inches&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;run&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;input&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: String): String &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;try &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;{ 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;          (input.toDouble &#x2F; 25.4).toString 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;      } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;catch &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;{ 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;ex&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: Throwable &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; ex.toString 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;      }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;object&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; InchesToMM &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span&gt;UnitConverter &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;description&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: String &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;Inches to millimeters&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;run&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;input&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: String): String &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;try &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;{ 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;          (input.toDouble * 25.4).toString 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;      } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;catch &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;{ 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;ex&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: Throwable &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; ex.toString 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;      }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;To describe the set of available &lt;em&gt;unit converters&lt;&#x2F;em&gt;, we define one more helper class:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; UnitConverters&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;converters&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;UnitConverter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;available &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;List(converters : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;_*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now let&#x27;s start with a &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;vigoo&#x2F;scalafxml&#x2F;blob&#x2F;master&#x2F;demo&#x2F;src&#x2F;main&#x2F;scala&#x2F;scalafxml&#x2F;demo&#x2F;unitconverter&#x2F;PureScalaFX.scala&quot;&gt;pure ScalaFX solution&lt;&#x2F;a&gt;, where the user interface is defined in Scala. I&#x27;ve implemented the view itself in a class called &lt;code&gt;PureScalaFXView&lt;&#x2F;code&gt;, which gets the set of available &lt;em&gt;unit converters&lt;&#x2F;em&gt; as a dependency through its constructor. This makes the main application object very simple:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;object&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; PureScalaFX &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span&gt;JFXApp &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  stage &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;PureScalaFXView(
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;UnitConverters(InchesToMM, MMtoInches))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;code&gt;PureScalaFXView&lt;&#x2F;code&gt; class consists of two distinct parts. First we define the user interface using the &lt;em&gt;ScalaFX UI DSL&lt;&#x2F;em&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; PureScalaFXView&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;converters&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;UnitConverters&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span&gt;JFXApp.PrimaryStage &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; UI Definition
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  title &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;Unit conversion&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;private val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;types &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ComboBox[UnitConverter]() {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    maxWidth &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= Double&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;.MaxValue
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    margin &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Insets(3)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;private val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;TextField {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    margin &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Insets(3)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    prefWidth &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;200.0
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;private val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;to &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;TextField {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    prefWidth &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;200.0
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    margin &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Insets(3)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    editable &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;false
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  scene &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Scene {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    content &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;GridPane {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;      padding &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Insets(5)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;      add(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Label(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;Conversion type:&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;), 0, 0)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;      add(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Label(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;From:&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;), 0, 1)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;      add(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Label(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;To:&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;), 0, 2)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;      add(types, 1, 0)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;      add(from, 1, 1)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;      add(to, 1, 2)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;      add(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Button(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;Close&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; inline event handler binding
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;        onAction &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;e&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: ActionEvent) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Platform.exit()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;      }, 1, 3)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;      columnConstraints &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;List(
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ColumnConstraints {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;          halignment &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;HPos.LEFT
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;          hgrow &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Priority.SOMETIMES
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;          margin &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Insets(5)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;        },
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ColumnConstraints {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;          halignment &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;HPos.RIGHT
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;          hgrow &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Priority.ALWAYS
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;          margin &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Insets(5)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;        }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;      )
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This is not 100% pure UI definition, because it also contains an inline event handler definition for the &lt;em&gt;Close&lt;&#x2F;em&gt; button.&lt;&#x2F;p&gt;
&lt;p&gt;The next part fills the &lt;em&gt;combo box&lt;&#x2F;em&gt; and defines the data binding. Filling the combo box is a simple procedural loop:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;converter &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span&gt; converters.available) {
&lt;&#x2F;span&gt;&lt;span&gt;    types += converter
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;  types.getSelectionModel.selectFirst()
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;For the data binding we define a &lt;a href=&quot;http:&#x2F;&#x2F;docs.oracle.com&#x2F;javafx&#x2F;2&#x2F;binding&#x2F;jfxpub-binding.htm&quot;&gt;low level data binding&lt;&#x2F;a&gt; which depends on the combo box&#x27;s selected value and the &lt;em&gt;From&lt;&#x2F;em&gt; field&#x27;s text, and produces the output for the &lt;em&gt;To&lt;&#x2F;em&gt; field:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span&gt;  to.text &amp;lt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;StringBinding &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    bind(from.text.delegate, types.getSelectionModel.selectedItemProperty)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;computeValue&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; types.getSelectionModel.getSelectedItem.run(from.text.value)
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;That&#x27;s all, the application is fully functional. The next thing is to split this class so the UI definition and the UI logic got separated. This &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;vigoo&#x2F;scalafxml&#x2F;blob&#x2F;master&#x2F;demo&#x2F;src&#x2F;main&#x2F;scala&#x2F;scalafxml&#x2F;demo&#x2F;unitconverter&#x2F;RefactoredPureScalaFX.scala&quot;&gt;refactored ScalaFX solution&lt;&#x2F;a&gt; is very similar to the previous one, but the initialization of the combo box, the data binding and the event handler are all encapsulated by a new, separate class:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; RawUnitConverterPresenter&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;                              &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;private val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;from&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;TextField&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                              &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;private val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;to&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;TextField&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                              &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;private val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;types&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ComboBox&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;UnitConverter&lt;&#x2F;span&gt;&lt;span&gt;],
&lt;&#x2F;span&gt;&lt;span&gt;                              &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;private val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;converters&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;UnitConverters&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; Filling the combo box
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;converter &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; converters.available) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    types += converter
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  types.getSelectionModel.selectFirst()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; Data binding
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  to.text &amp;lt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;StringBinding {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    bind(from.text.delegate, types.getSelectionModel.selectedItemProperty)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;computeValue&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; types.getSelectionModel.getSelectedItem.run(from.text.value)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; Close button event handler
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;onClose&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;event&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: ActionEvent) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    Platform.exit()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;What I wanted is to be able to define the controller class exactly like this while building the user interface from FXML. Without &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;vigoo&#x2F;scalafxml&quot;&gt;ScalaFXML&lt;&#x2F;a&gt; the controller class have some serious limitations:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;It must implement the &lt;a href=&quot;http:&#x2F;&#x2F;docs.oracle.com&#x2F;javafx&#x2F;2&#x2F;api&#x2F;javafx&#x2F;fxml&#x2F;Initializable.html&quot;&gt;Initializable&lt;&#x2F;a&gt; interface&lt;&#x2F;li&gt;
&lt;li&gt;It cannot have any constructor arguments&lt;&#x2F;li&gt;
&lt;li&gt;The user interface objects must be variable fields of the class&lt;&#x2F;li&gt;
&lt;li&gt;And they have to have the type of the JavaFX controls, so to be able to use the ScalaFX wrappers, they have to be explicitly wrapped in the &lt;code&gt;initialize&lt;&#x2F;code&gt; method.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;With &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;vigoo&#x2F;scalafxml&quot;&gt;ScalaFXML&lt;&#x2F;a&gt; the process is really simple. First we create the FXML, for example with the &lt;a href=&quot;http:&#x2F;&#x2F;www.oracle.com&#x2F;technetwork&#x2F;java&#x2F;javafx&#x2F;tools&#x2F;index.html&quot;&gt;JavaFX Scene Builder&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;unit-conversion-scenebuilder.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;In the FXML we give the &lt;code&gt;from&lt;&#x2F;code&gt;, &lt;code&gt;to&lt;&#x2F;code&gt;, and &lt;code&gt;types&lt;&#x2F;code&gt; identifiers to our controls using the &lt;code&gt;fx:id&lt;&#x2F;code&gt; attribute, for example:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;xml&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-xml &quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;TextField &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;fx:id&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;from&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;prefWidth&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;200.0&amp;quot; 
&lt;&#x2F;span&gt;&lt;span&gt;               &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;GridPane.columnIndex&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;1&amp;quot; 
&lt;&#x2F;span&gt;&lt;span&gt;               &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;GridPane.margin&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;$x1&amp;quot; 
&lt;&#x2F;span&gt;&lt;span&gt;               &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;GridPane.rowIndex&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;1&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The event handlers can be specified simply by their name:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;xml&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-xml &quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;Button &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;onAction&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;#onClose&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;text&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;Close&amp;quot; 
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;mnemonicParsing&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;false&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;GridPane.columnIndex&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;1&amp;quot; 
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;GridPane.halignment&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;RIGHT&amp;quot; 
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;GridPane.rowIndex&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;3&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;and the controller class must be referenced on the root node&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;xml&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-xml &quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span&gt;fx:controller=&amp;quot;scalafxml.demo.unitconverter.UnitConverterPresenter&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The controller class &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;vigoo&#x2F;scalafxml&#x2F;blob&#x2F;master&#x2F;demo&#x2F;src&#x2F;main&#x2F;scala&#x2F;scalafxml&#x2F;demo&#x2F;unitconverter&#x2F;ScalaFXML.scala&quot;&gt;can be exactly the same as the &lt;code&gt;RawUnitConverterPresenter&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;, adding an additional &lt;code&gt;@sfxml&lt;&#x2F;code&gt; annotation for it. Everything else is handled by the library, as we will see.&lt;&#x2F;p&gt;
&lt;p&gt;The application object itself looks like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;object&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; ScalaFXML &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span&gt;JFXApp &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;root &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;FXMLView(getClass.getResource(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;unitconverter.fxml&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;),
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;DependenciesByType(Map(
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;      typeOf[UnitConverters] -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;UnitConverters(InchesToMM, MMtoInches))))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  stage &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;JFXApp.PrimaryStage() {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    title &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;Unit conversion&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    scene &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Scene(root)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Beside giving the URI for the FXML file we also has to provide the &lt;em&gt;additional dependencies&lt;&#x2F;em&gt; of the controller class. This is an easily extensible part of the library, and it already has support for &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;dickwall&#x2F;subcut&quot;&gt;SubCut&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;code.google.com&#x2F;p&#x2F;google-guice&#x2F;&quot;&gt;Guice&lt;&#x2F;a&gt; as well. Here we are using a simple &lt;em&gt;type-&amp;gt;value&lt;&#x2F;em&gt; mapping instead.&lt;&#x2F;p&gt;
&lt;p&gt;How does this work? What happens behind the scenes?&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;code&gt;@sfxml&lt;&#x2F;code&gt; is a &lt;a href=&quot;http:&#x2F;&#x2F;docs.scala-lang.org&#x2F;overviews&#x2F;macros&#x2F;annotations.html&quot;&gt;macro annotation&lt;&#x2F;a&gt;. In &lt;em&gt;compile-time&lt;&#x2F;em&gt;, the class definition itself is transformed by the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;vigoo&#x2F;scalafxml&#x2F;blob&#x2F;master&#x2F;core-macros&#x2F;src&#x2F;main&#x2F;scala&#x2F;scalafxml&#x2F;core&#x2F;macros&#x2F;sfxmlMacro.scala&quot;&gt;&lt;code&gt;sfxmlMacro.impl&lt;&#x2F;code&gt; function&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The transformation&#x27;s result is a class definition with the source class&#x27; name, but with a completely different content. The original class is added as an inner class, always called &lt;code&gt;Controller&lt;&#x2F;code&gt;. In our example, the generated class definition would look like something similar:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; UnitConverterPresenter&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;private val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;dependencyResolver&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ControllerDependencyResolver&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span&gt;javafx.fxml.Initializable 
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;with &lt;&#x2F;span&gt;&lt;span&gt;FxmlProxyGenerator.ProxyDependencyInjection &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; Controller(
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;private val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;from&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: TextField,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;private val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;to&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: TextField,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;private val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;types&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: ComboBox[UnitConverter],
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;private val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;converters&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: UnitConverters) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; …
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;private var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;impl&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;: Controller &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;null
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; …
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;}   
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The class have four distinct parts:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Getting the additional dependencies from the &lt;em&gt;dependency resolver&lt;&#x2F;em&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Variable fields for binding the JavaFX controls defined in the FXML&lt;&#x2F;li&gt;
&lt;li&gt;Event handler methods&lt;&#x2F;li&gt;
&lt;li&gt;The &lt;code&gt;initializable&lt;&#x2F;code&gt; method&#x27;s implementation&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;The first one is simple - for each constructor argument of the controller class which is &lt;em&gt;not&lt;&#x2F;em&gt; a ScalaFX control, we query the &lt;em&gt;dependency resolver&lt;&#x2F;em&gt; to get a value for it. These are performed when the outer, generated class is instantiated and stored through the &lt;code&gt;ProxyDependencyInjection&lt;&#x2F;code&gt; trait.&lt;&#x2F;p&gt;
&lt;p&gt;The variable fields are simple fields for all the ScalaFX constructor arguments of the controller class, but converted to their JavaFX counterpart. For example the generated field for the controller&#x27;s &lt;code&gt;from&lt;&#x2F;code&gt; argument will look like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span&gt;@javafx.fxml.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;FXML
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;private var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;from&lt;&#x2F;span&gt;&lt;span&gt;: javafx.scene.control.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;TextField &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;null
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;em&gt;event handler&lt;&#x2F;em&gt;&#x27;s are proxies for all the public methods of the controller, but the ScalaFX event argument types are replaced with JavaFX event argument types and they are wrapped automatically when forwarding the call to the real implementation. For the &lt;code&gt;onClose&lt;&#x2F;code&gt; event handler it would look like the following:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span&gt;@javafx.fxml.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;FXML &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;onClose&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;e&lt;&#x2F;span&gt;&lt;span&gt;: javafx.event.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ActionEvent&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    impl.onClose(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span&gt;scalafx.event.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ActionEvent&lt;&#x2F;span&gt;&lt;span&gt;(e))
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;When JavaFX calls the generated controller&#x27;s &lt;code&gt;initialize&lt;&#x2F;code&gt; method, the control fields are already set up, and the additional dependencies were already gathered from the dependency resolver so we have all the values required to instantiate the real controller class. For ScalaFX arguments we wrap the JavaFX controls, for the additional dependencies we use the &lt;code&gt;ProxyDependencyInjection&lt;&#x2F;code&gt; trait&#x27;s &lt;code&gt;getDependency&lt;&#x2F;code&gt; method:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;initialize&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;url&lt;&#x2F;span&gt;&lt;span&gt;: java.net.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;URL&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;rb&lt;&#x2F;span&gt;&lt;span&gt;: java.util.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ResourceBundle&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    impl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Controller&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span&gt;scalafx.scene.control.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;TextField&lt;&#x2F;span&gt;&lt;span&gt;(from),
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span&gt;scalafx.scene.control.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;TextField&lt;&#x2F;span&gt;&lt;span&gt;(to),        
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span&gt;scalafx.scene.control.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ComboBox&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;UnitConverter&lt;&#x2F;span&gt;&lt;span&gt;](types),
&lt;&#x2F;span&gt;&lt;span&gt;        getDependencies[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;UnitConverters&lt;&#x2F;span&gt;&lt;span&gt;](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;converters&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;That&#x27;s all. The final interesting bit is the &lt;code&gt;FXMLView&lt;&#x2F;code&gt; object, which overrides JavaFX&#x27;s default controller factory. This is only necessary to be able to pass the given &lt;code&gt;ControllerDependencyResolver&lt;&#x2F;code&gt; to the generated controller&#x27;s constructor:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;apply&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;fxml&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;URL&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;dependencies&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ControllerDependencyResolver&lt;&#x2F;span&gt;&lt;span&gt;): jfxs.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Parent &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span&gt;    jfxf.FXMLLoader.load(
&lt;&#x2F;span&gt;&lt;span&gt;      fxml, 
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span&gt;jfxf.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;JavaFXBuilderFactory&lt;&#x2F;span&gt;&lt;span&gt;(),
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span&gt;jfxu.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Callback&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Class&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Object&lt;&#x2F;span&gt;&lt;span&gt;] {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;override def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;call&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;cls&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Class&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;]): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Object &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= 
&lt;&#x2F;span&gt;&lt;span&gt;            FxmlProxyGenerator(cls, dependencies)
&lt;&#x2F;span&gt;&lt;span&gt;      })
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;FxmlProxyGenerator&lt;&#x2F;code&gt; uses reflection to create a new instance of the generated controller, and pass the dependency resolver as its only constructor argument.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Trying out Ceylon - Part 1</title>
        <published>2013-11-17T00:00:00+00:00</published>
        <updated>2013-11-17T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Daniel Vigovszky
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://blog.vigoo.dev/posts/trying-out-ceylon-part-1/"/>
        <id>https://blog.vigoo.dev/posts/trying-out-ceylon-part-1/</id>
        
        <content type="html" xml:base="https://blog.vigoo.dev/posts/trying-out-ceylon-part-1/">&lt;p&gt;Ceylon&#x27;s first production release was announced on 12th of November. I decided to try it out after going through the quick introduction, as it looked quite promising. In a series of posts I&#x27;d like to share my first attempts to use this interesting language.&lt;&#x2F;p&gt;
&lt;p&gt;This first release came with an eclipse plugin as well - after installing it I was immediately able to start working on my test project. In this few hours the plugin seemed to be stable enough, I did not experience any problems.&lt;&#x2F;p&gt;
&lt;p&gt;I have a &lt;code&gt;JVLT&lt;&#x2F;code&gt; file which I created while attending a foreign language course about a year ago. I was using only a limited subset of this application, so basically what I have is a .jvlt file, which is in fact a ZIP archive, in which a &lt;code&gt;dict.xml&lt;&#x2F;code&gt; stores a set of words and for each word one or more translation and the lesson we have learnt it.&lt;&#x2F;p&gt;
&lt;p&gt;See the following example:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;xml&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-xml &quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;dictionary &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;language&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;french&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;version&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;1.4&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;entry &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;e275&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;orth&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;à côté de&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;orth&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;sense &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;e275-s1&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;trans&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;mellett&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;trans&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;sense&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;sense &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;e275-s2&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;trans&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;mellé&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;trans&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;sense&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;lesson&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;8&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;lesson&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;entry&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;dictionary&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;My idea was to write an application that helps me learning and practicing these words.&lt;&#x2F;p&gt;
&lt;p&gt;In this first post I&#x27;m going to load the dictionary from the JVLT file.&lt;&#x2F;p&gt;
&lt;p&gt;To get started, I created a new Ceylon module with the help of the IDE called jvlt. This immediately created three program units: &lt;code&gt;module.ceylon&lt;&#x2F;code&gt;, &lt;code&gt;package.ceylon&lt;&#x2F;code&gt; and &lt;code&gt;run.ceylon&lt;&#x2F;code&gt;. The &lt;code&gt;module.ceylon&lt;&#x2F;code&gt; contains the module definition, which also describes the module&#x27;s dependencies. As I was trying to implement the dictionary reader, I ended up with the following module definition:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ceylon&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-ceylon &quot;&gt;&lt;code class=&quot;language-ceylon&quot; data-lang=&quot;ceylon&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;module &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;jvlt &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;1.0.0&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;shared import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;ceylon&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;file &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;1.0.0&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;ceylon&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;collection &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;1.0.0&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;ceylon&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;interop&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;java &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;1.0.0&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;javax&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;xml &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;7&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;; 
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;ceylon&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;test &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;1.0.0&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Let&#x27;s start with the data model we want to build up! The dictionary consists of words:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ceylon&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-ceylon &quot;&gt;&lt;code class=&quot;language-ceylon&quot; data-lang=&quot;ceylon&quot;&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;Represents a foreign word with one or more senses&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;shared class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Word&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;shared &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;String &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;word&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;shared &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Set&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;senses&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;shared &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Integer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;lesson&lt;&#x2F;span&gt;&lt;span&gt;){ 
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The word, senses and lessons are all shared attributes of this class, accessible from the outside. To make it easy to access the word objects by their foreign word, I&#x27;m currently storing them in a map:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ceylon&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-ceylon &quot;&gt;&lt;code class=&quot;language-ceylon&quot; data-lang=&quot;ceylon&quot;&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;Represents a dictionary of words in a given language&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;shared class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Dictionary&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;shared &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;String &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;language&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;shared &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Map&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;string word&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;words&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Basically that&#x27;s the data model, but I wrapped the whole thing in an abstract JVLT class which looks like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ceylon&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-ceylon &quot;&gt;&lt;code class=&quot;language-ceylon&quot; data-lang=&quot;ceylon&quot;&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;Represents a JVLT file&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;abstract shared class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;JVLT&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;The dictionary stored in this JVLT&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt; 	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;formal shared &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Dictionary &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;dictionary&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The idea is that you get a JVLT instance from one of the helper functions and then use it as a root of the data model.&lt;&#x2F;p&gt;
&lt;p&gt;The next thing is to create this data model from the JVLT files. For this, I needed two things:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Reading a ZIP archive&lt;&#x2F;li&gt;
&lt;li&gt;Parsing XML&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;It turned out that Ceylon&#x27;s file module has ZIP support, with the &lt;code&gt;createZipFileSystem&lt;&#x2F;code&gt; function as an entry point. I made two module-level functions beside the JVLT class for creating instances deriving from the abstract JVLT class:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;loadJVLT&lt;&#x2F;code&gt; which loads a JVLT ZIP archive from the file system&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;loadJVLTFromDictionaryString&lt;&#x2F;code&gt; oads directly a dict.xml-like XML passed as a simple string. I&#x27;m using this for unit testing the XML parser.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Let&#x27;s see the ZIP handling first:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ceylon&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-ceylon &quot;&gt;&lt;code class=&quot;language-ceylon&quot; data-lang=&quot;ceylon&quot;&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;Loads a JVLT file from a `.jvlt` ZIP archive, if possible.&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;shared &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;JVLT&lt;&#x2F;span&gt;&lt;span&gt;? &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;loadJVLT&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;File &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;file&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;zip&lt;&#x2F;span&gt;&lt;span&gt; = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;createZipFileSystem&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;file&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt; 	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;dictPath&lt;&#x2F;span&gt;&lt;span&gt; = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;zip&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;parsePath&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&#x2F;dict.xml&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt; 	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;is &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;File &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;dictFile&lt;&#x2F;span&gt;&lt;span&gt; = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;dictPath&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;resource&lt;&#x2F;span&gt;&lt;span&gt;) {  
&lt;&#x2F;span&gt;&lt;span&gt;  		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;try&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;reader&lt;&#x2F;span&gt;&lt;span&gt; = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;dictFile&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Reader&lt;&#x2F;span&gt;&lt;span&gt;()) {
&lt;&#x2F;span&gt;&lt;span&gt;   
&lt;&#x2F;span&gt;&lt;span&gt;   			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;loadJVLTFromDictionaryString&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;readAll&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;reader&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;  		}
&lt;&#x2F;span&gt;&lt;span&gt; 	} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;else&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;  		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt; 	}
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Well, the error handling is not too sophisticated in this case, it either returns a JVLT or returns &lt;code&gt;null&lt;&#x2F;code&gt; if the given file did not have a &lt;code&gt;dict.xml&lt;&#x2F;code&gt; in it. Other error conditions such as a &lt;code&gt;dict.xml&lt;&#x2F;code&gt; with a wrong format, etc., are not handled currently. As you can see, I&#x27;m reusing my other load function here, once the &lt;code&gt;dict.xml&lt;&#x2F;code&gt; is read.&lt;&#x2F;p&gt;
&lt;p&gt;There are two interesting things here. First, the if statement where we check if the resource is an instance of &lt;code&gt;File&lt;&#x2F;code&gt; and immediately store it in the value called &lt;code&gt;dictFile&lt;&#x2F;code&gt;. The &lt;code&gt;dictPath.resource&lt;&#x2F;code&gt; attribute has the type &lt;code&gt;Resource&lt;&#x2F;code&gt; which is a Ceylon interface. It is either an &lt;code&gt;ExistingResource&lt;&#x2F;code&gt;: &lt;code&gt;Directory&lt;&#x2F;code&gt;, &lt;code&gt;File&lt;&#x2F;code&gt; or &lt;code&gt;Link&lt;&#x2F;code&gt;, or &lt;code&gt;Nil&lt;&#x2F;code&gt;. In any case if it is not a &lt;code&gt;File&lt;&#x2F;code&gt; instance, we just return &lt;code&gt;null&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;For simplicity, I&#x27;m reading the full &lt;code&gt;dict.xml&lt;&#x2F;code&gt; into a string before parsing it. For this purpose I wrote a small helper function &lt;code&gt;readAll&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ceylon&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-ceylon &quot;&gt;&lt;code class=&quot;language-ceylon&quot; data-lang=&quot;ceylon&quot;&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;Reads all lines from a file reader and returns the concatenated string&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;String &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;readAll&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;File&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Reader &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;reader&lt;&#x2F;span&gt;&lt;span&gt;) { 
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;variable &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;String &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;result&lt;&#x2F;span&gt;&lt;span&gt; = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt; 	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;while&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;exists &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;line&lt;&#x2F;span&gt;&lt;span&gt; = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;reader&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;readLine&lt;&#x2F;span&gt;&lt;span&gt;()) {
&lt;&#x2F;span&gt;&lt;span&gt;  		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;result&lt;&#x2F;span&gt;&lt;span&gt; += &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;line&lt;&#x2F;span&gt;&lt;span&gt;; 
&lt;&#x2F;span&gt;&lt;span&gt; 	}
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt; 	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;result&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Probably it&#x27;s not an optimal solution, but works :)&lt;&#x2F;p&gt;
&lt;p&gt;Now that we have our data model and have a way to build it up from XML, we can write some unit tests to see how it works. The Ceylon SDK has a test module and the Ceylon IDE supports running the tests. There is a &lt;a href=&quot;http:&#x2F;&#x2F;ceylon-lang.org&#x2F;documentation&#x2F;1.0&#x2F;ide&#x2F;test-plugin&#x2F;&quot;&gt;separate page in the documentation&lt;&#x2F;a&gt; describing how. It is really simple, I had to add the test module as a dependency, and I created a separate file to hold my test definitions. The class groups the tests together and optionally supports running extra code before&#x2F;after each test case, as in other test frameworks:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ceylon&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-ceylon &quot;&gt;&lt;code class=&quot;language-ceylon&quot; data-lang=&quot;ceylon&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;DictionaryParserTests&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;shared &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;test &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;emptyDictionary&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;	  	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;dic&lt;&#x2F;span&gt;&lt;span&gt; = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;loadJVLTFromDictionaryString&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&amp;lt;dictionary&amp;gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;	  
&lt;&#x2F;span&gt;&lt;span&gt;	  	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;assert&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;dic&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;dictionary&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;words&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;empty&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;	  	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;assert&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;dic&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;dictionary&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;language&lt;&#x2F;span&gt;&lt;span&gt; == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;unknown&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt; 	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;shared &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;test &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;languageAttributeRead&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;  		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;dic&lt;&#x2F;span&gt;&lt;span&gt; = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;loadJVLTFromDictionaryString&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&amp;lt;dictionary language=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;testlang&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&amp;gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;  		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;assert&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;dic&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;dictionary&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;language&lt;&#x2F;span&gt;&lt;span&gt; == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;testlang&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt; 	}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I won&#x27;t paste here all the test code, only a few samples to get the feeling how the Ceylon code looks like. To test whether a given word&#x27;s translations are loaded correctly, I wrote a helper function:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ceylon&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-ceylon &quot;&gt;&lt;code class=&quot;language-ceylon&quot; data-lang=&quot;ceylon&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;assertSenses&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;JVLT &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;jvlt&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;String &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;w&lt;&#x2F;span&gt;&lt;span&gt;, [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;+] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;expectedSenses&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;  
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Word&lt;&#x2F;span&gt;&lt;span&gt;? &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;word&lt;&#x2F;span&gt;&lt;span&gt; = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;jvlt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;dictionary&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;words&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;w&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;exists &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;word&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;assert&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;word&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;senses&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;equals&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;HashSet&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;expectedSenses&lt;&#x2F;span&gt;&lt;span&gt;)));  
&lt;&#x2F;span&gt;&lt;span&gt;    } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;else&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;     	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;fail&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;Word does not exists&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This helper function can be used to assert that a word has been loaded correctly:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ceylon&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-ceylon &quot;&gt;&lt;code class=&quot;language-ceylon&quot; data-lang=&quot;ceylon&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;shared &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;test &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;wordWithMultipleSenses&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;dic&lt;&#x2F;span&gt;&lt;span&gt; = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;loadJVLTFromDictionaryString&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;  		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&amp;lt;dictionary&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;   			&amp;lt;entry id=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;e1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;    			&amp;lt;orth&amp;gt;src1&amp;lt;&#x2F;orth&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;    			&amp;lt;sense id=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;e1&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;s1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;     				&amp;lt;trans&amp;gt;dst1&amp;lt;&#x2F;trans&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;    			&amp;lt;&#x2F;sense&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;    			&amp;lt;sense id=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;e1&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;s2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;     				&amp;lt;trans&amp;gt;dst2&amp;lt;&#x2F;trans&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;    			&amp;lt;&#x2F;sense&amp;gt;    
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;   			&amp;lt;&#x2F;entry&amp;gt;  
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;   		&amp;lt;&#x2F;dictionary&amp;gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt; 	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;assertSenses&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;dic&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;src1&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;dst1&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;dst2&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;]);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now the only problem is that there is no XML parsing support in the Ceylon SDK currently, so it has to be done using Java interop. As I wrote the code to build up the data model from the XML, I wrote several helper functions to make it easier to fit into the language. So let&#x27;s see first how the dictionary loading is defined, and then I&#x27;ll show the helper functions.&lt;&#x2F;p&gt;
&lt;p&gt;The XML parsing is done by two module level functions which are not shared - only used by the JVLT constructor functions I shown before. The first one creates a map entry for a single word:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ceylon&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-ceylon &quot;&gt;&lt;code class=&quot;language-ceylon&quot; data-lang=&quot;ceylon&quot;&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;Creates a word entry for the dictionary&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Word &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;loadEntry&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Element &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;elem&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt; 	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;w&lt;&#x2F;span&gt;&lt;span&gt; = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Word&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;  		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;word&lt;&#x2F;span&gt;&lt;span&gt; = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;selectNodeText&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;elem&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;orth&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;???&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;lesson&lt;&#x2F;span&gt;&lt;span&gt; = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;selectNodeInteger&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;elem&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;lesson&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;senses&lt;&#x2F;span&gt;&lt;span&gt; = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;HashSet&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;selectNodes&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;elem&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;sense&#x2F;trans&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  					.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;((&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Node &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;n&lt;&#x2F;span&gt;&lt;span&gt;) =&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;n&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;textContent&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt; 	};
&lt;&#x2F;span&gt;&lt;span&gt; 	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;w&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;word&lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;w&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;and the second one loads all the words from the XML document:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ceylon&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-ceylon &quot;&gt;&lt;code class=&quot;language-ceylon&quot; data-lang=&quot;ceylon&quot;&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;Loads a dictionary from JVLT&amp;#39;s `dict.xml` format.&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Dictionary &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;loadDictionaryFromXML&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Document &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;doc&lt;&#x2F;span&gt;&lt;span&gt;) { 
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;doc&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;documentElement&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;normalize&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt; 	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Dictionary&lt;&#x2F;span&gt;&lt;span&gt; { 
&lt;&#x2F;span&gt;&lt;span&gt;  		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;language&lt;&#x2F;span&gt;&lt;span&gt; = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;getAttribute&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;doc&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;documentElement&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;language&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;unknown&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;words&lt;&#x2F;span&gt;&lt;span&gt; = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;HashMap&lt;&#x2F;span&gt;&lt;span&gt;({ 
&lt;&#x2F;span&gt;&lt;span&gt;     		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;node &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;selectNodes&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;doc&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;dictionary&#x2F;entry&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;       			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;is &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Element &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;elem&lt;&#x2F;span&gt;&lt;span&gt; = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;node&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;             		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;loadEntry&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;elem&lt;&#x2F;span&gt;&lt;span&gt;) });   
&lt;&#x2F;span&gt;&lt;span&gt; 	};
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The function which returns the JVLT instance uses this function and Java interop to read the dictionary:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ceylon&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-ceylon &quot;&gt;&lt;code class=&quot;language-ceylon&quot; data-lang=&quot;ceylon&quot;&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;Loads a JVLT file by the parsing the dictionary XML directly from a string&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;shared &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;JVLT &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;loadJVLTFromDictionaryString&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;String &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;dictXML&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;docBuilderFactory&lt;&#x2F;span&gt;&lt;span&gt; = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;DocumentBuilderFactory&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;newInstance&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt; 	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;builder&lt;&#x2F;span&gt;&lt;span&gt; = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;docBuilderFactory&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;newDocumentBuilder&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt; 	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;value doc&lt;&#x2F;span&gt;&lt;span&gt; = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;builder&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;parse&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ByteArrayInputStream&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;javaString&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;dictXML&lt;&#x2F;span&gt;&lt;span&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;bytes&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt; 	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;object &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;result &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;JVLT&lt;&#x2F;span&gt;&lt;span&gt;() { 
&lt;&#x2F;span&gt;&lt;span&gt;  		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;dictionary&lt;&#x2F;span&gt;&lt;span&gt; = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;loadDictionaryFromXML&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;doc&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt; 	}
&lt;&#x2F;span&gt;&lt;span&gt; 	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;result&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;There are two things to notice here: we had to convert from Ceylon&#x27;s string to Java string. This is not done automatically and we need the &lt;code&gt;ceylon.interop.java&lt;&#x2F;code&gt; module to do it. In the last lines we define an anonymous class extending from JVLT and overwriting it&#x27;s abstract dictionary attribute. Then this anonymous class instance is returned as the loaded JVLT.&lt;&#x2F;p&gt;
&lt;p&gt;To make the XML parsing less painful, I defined a few helper functions in a separate compilation unit (&lt;code&gt;XmlHelper.ceylon&lt;&#x2F;code&gt;). I won&#x27;t show here the full file but there are some interesting parts. First, from Ceylon you cannot call static methods, but you can import them. I&#x27;m using the following two import statements:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ceylon&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-ceylon &quot;&gt;&lt;code class=&quot;language-ceylon&quot; data-lang=&quot;ceylon&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;org&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;w3c&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;dom&lt;&#x2F;span&gt;&lt;span&gt; { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Node&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;NodeList&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Element&lt;&#x2F;span&gt;&lt;span&gt; }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;javax&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;xml&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;xpath&lt;&#x2F;span&gt;&lt;span&gt; { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;XPathFactory&lt;&#x2F;span&gt;&lt;span&gt; { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;newXPathFactory&lt;&#x2F;span&gt;&lt;span&gt; = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;newInstance&lt;&#x2F;span&gt;&lt;span&gt; },
&lt;&#x2F;span&gt;&lt;span&gt;       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;XPathConstants&lt;&#x2F;span&gt;&lt;span&gt; { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;nodeSet&lt;&#x2F;span&gt;&lt;span&gt; = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;\iNODESET&lt;&#x2F;span&gt;&lt;span&gt; }}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The first one is straightforward. It imports three DOM interfaces. The second one first imports the &lt;code&gt;XPathFactory.newInstance&lt;&#x2F;code&gt; static method and also renames it, as newInstance is a too generic name without its class name as a prefix. The third line imports a constant value and gives it a Ceylon-compatible name. Because in Ceylon only the types can start with an uppercase character, we have to use a special and ugly syntax which helps the interoperability - prefixing it with &lt;code&gt;\i&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;code&gt;ceylon.interop.java&lt;&#x2F;code&gt; module has helper classes to make Java Iterable objects iterable in Ceylon, but unfortunately the &lt;code&gt;NodeList&lt;&#x2F;code&gt; interface is not iterable in Java either. So I wrote a simple wrapper that iterates through a node list:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ceylon&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-ceylon &quot;&gt;&lt;code class=&quot;language-ceylon&quot; data-lang=&quot;ceylon&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;NodeListIterator&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;NodeList &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;nodes&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;satisfies &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Iterable&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Node&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;shared actual default &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Iterator&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Node&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;iterator&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;  		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;object &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;it &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;satisfies &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Iterator&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Node&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; {   
&lt;&#x2F;span&gt;&lt;span&gt;   			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;variable &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Integer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span&gt; = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;   
&lt;&#x2F;span&gt;&lt;span&gt;   			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;shared actual &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Node&lt;&#x2F;span&gt;&lt;span&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Finished &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;next&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span&gt; &amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;nodes&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;length&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;     				&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;nodes&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;item&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span&gt;++);
&lt;&#x2F;span&gt;&lt;span&gt;    			} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;else&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;     				&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;finished&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    			}
&lt;&#x2F;span&gt;&lt;span&gt;   			}
&lt;&#x2F;span&gt;&lt;span&gt;  		}
&lt;&#x2F;span&gt;&lt;span&gt;  		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;it&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt; 	}
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Using this iterator and the imports I wrote a &lt;code&gt;selectNodes&lt;&#x2F;code&gt; function to run XPath expressions and return the result as a Ceylon iterable:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ceylon&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-ceylon &quot;&gt;&lt;code class=&quot;language-ceylon&quot; data-lang=&quot;ceylon&quot;&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Node&lt;&#x2F;span&gt;&lt;span&gt;*} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;selectNodes&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Node &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;root&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;String &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;xpath&lt;&#x2F;span&gt;&lt;span&gt;) { 
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;factory&lt;&#x2F;span&gt;&lt;span&gt; = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;newXPathFactory&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt; 	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;xpathCompiler&lt;&#x2F;span&gt;&lt;span&gt; = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;factory&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;newXPath&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt; 	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;expr&lt;&#x2F;span&gt;&lt;span&gt; = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;xpathCompiler&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;compile&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;xpath&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt; 	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;nodeList&lt;&#x2F;span&gt;&lt;span&gt; = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;expr&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;evaluate&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;root&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;nodeSet&lt;&#x2F;span&gt;&lt;span&gt;); 
&lt;&#x2F;span&gt;&lt;span&gt; 	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;is &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;NodeList &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;nodeList&lt;&#x2F;span&gt;&lt;span&gt;) {  
&lt;&#x2F;span&gt;&lt;span&gt;  		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;NodeListIterator&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;nodeList&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt; 	}
&lt;&#x2F;span&gt;&lt;span&gt; 	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;else&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;  		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; [];
&lt;&#x2F;span&gt;&lt;span&gt; 	}
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Using this function it is very easy to write a variant that selects a single node:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ceylon&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-ceylon &quot;&gt;&lt;code class=&quot;language-ceylon&quot; data-lang=&quot;ceylon&quot;&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Node&lt;&#x2F;span&gt;&lt;span&gt;? &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;selectNode&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Node &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;root&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;String &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;xpath&lt;&#x2F;span&gt;&lt;span&gt;) { 
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;selectNodes&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;root&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;xpath&lt;&#x2F;span&gt;&lt;span&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;first&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;There are some other helper functions returning the node&#x27;s text, converting it to integer, etc. but I think they are not that interesting. Now that I have my data model which is built from my JVLT file, the next thing is to make a user interface somehow where the vocabulary can be shown an the user&#x27;s knowledge can be tested&#x2F;improved. This will be the topic of some future posts, as soon as I have time to experiment more with this new language.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Cloning WPF flow document fragments</title>
        <published>2013-10-25T00:00:00+00:00</published>
        <updated>2013-10-25T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Daniel Vigovszky
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://blog.vigoo.dev/posts/cloning-wpf-flow-document-fragments/"/>
        <id>https://blog.vigoo.dev/posts/cloning-wpf-flow-document-fragments/</id>
        
        <content type="html" xml:base="https://blog.vigoo.dev/posts/cloning-wpf-flow-document-fragments/">&lt;p&gt;Today I had to write such an ugly hack to fix a bug that I decided to start writing a blog where I can show it to the world :)&lt;&#x2F;p&gt;
&lt;p&gt;The software I&#x27;m working on has some sort of context sensitive help panel, which is implemented using dynamically generated &lt;a href=&quot;http:&#x2F;&#x2F;msdn.microsoft.com&#x2F;en-us&#x2F;library&#x2F;aa970909.aspx&quot;&gt;flow documents&lt;&#x2F;a&gt;. The software loads a large set of flow document sections from a XAML file runtime, and later builds documents from a subset of them.&lt;&#x2F;p&gt;
&lt;p&gt;For some reason (which belong to a separate post), it is not possible to reuse these flow document elements in multiple flow documents, not even if there is only one at a time. To work around this, I was cloning these sections before adding them to the document.&lt;&#x2F;p&gt;
&lt;p&gt;As WPF elements are not &lt;em&gt;cloneable&lt;&#x2F;em&gt;, I was using the method recommended many places, for example &lt;a href=&quot;http:&#x2F;&#x2F;stackoverflow.com&#x2F;questions&#x2F;32541&#x2F;how-can-you-clone-a-wpf-object&quot;&gt;in this StackOverflow post&lt;&#x2F;a&gt;: saving the object tree to an in-memory XAML stream, and loading it back.&lt;&#x2F;p&gt;
&lt;p&gt;This worked quite well.. until we discovered a bug, which I still cannot explain. In some cases which were easily reproducible for any developer, but the code running in those cases being exactly the same as in other, working cases, the clone method simply stopped working.&lt;&#x2F;p&gt;
&lt;p&gt;Stopped working here means that the following code:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cs&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-cs &quot;&gt;&lt;code class=&quot;language-cs&quot; data-lang=&quot;cs&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;xaml &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;XamlWriter&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;Save&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;block&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;would write out the correct object hierarchy, but without any properties (no attributes, no content properties, nothing but the element names)! In the same time the objects in the memory were untouched and still had all the relevant properties set.&lt;&#x2F;p&gt;
&lt;p&gt;I also tried to write my own XAML serializer based on the code found &lt;a href=&quot;http:&#x2F;&#x2F;go4answers.webhost4life.com&#x2F;Example&#x2F;xaml-serialization-replacement-75133.aspx&quot;&gt;at this site&lt;&#x2F;a&gt;, but this was only good to find out that the problem lies deep within the &lt;code&gt;MarkupWriter&lt;&#x2F;code&gt; class, which is the same what the &lt;code&gt;XamlWriter&lt;&#x2F;code&gt; uses internally. When the &lt;code&gt;XamlWriter&lt;&#x2F;code&gt; failed, my own code could not find any properties using the returned &lt;a href=&quot;http:&#x2F;&#x2F;msdn.microsoft.com&#x2F;en-us&#x2F;library&#x2F;system.windows.markup.primitives.markupobject.aspx&quot;&gt;MarkupObject&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cs&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-cs &quot;&gt;&lt;code class=&quot;language-cs&quot; data-lang=&quot;cs&quot;&gt;&lt;span&gt;MarkupObject &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;markupObj &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;MarkupWriter&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;GetMarkupObjectFor&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;obj&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;For the same object, in the working scenarios it returned a markup object with a working &lt;code&gt;Properties&lt;&#x2F;code&gt; collection.&lt;&#x2F;p&gt;
&lt;p&gt;So here is the final &lt;em&gt;&quot;solution&quot;&lt;&#x2F;em&gt; which I&#x27;m not really proud of, but solved the problem. Maybe with some modifications it is useful for someone struggling with the framework:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cs&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-cs &quot;&gt;&lt;code class=&quot;language-cs&quot; data-lang=&quot;cs&quot;&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F;&#x2F; &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;summary&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F;&#x2F; Horrible ugly clone hack to issues where XamlWriter&#x2F;XamlReader based
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F;&#x2F; clone method did not work.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F;&#x2F; &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;summary&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;public static class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;CloneHelper
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;public static &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Block &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;Clone&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;&amp;lt;t&amp;gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;this &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;T &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;block&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;where &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;T : Block
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;result &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;(T)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;DeepClone&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;block&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;result&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;private static object &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;DeepClone&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;object &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;obj&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;obj &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;null)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;        {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; Replacing ResourceDictionary and Style values with null. 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; In this particular use case it is correct to do
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;obj&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;GetType&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;== typeof&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;(ResourceDictionary) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;||
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;obj&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;GetType&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;== typeof&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;(Style))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;            {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;null;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;            }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;else
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;            {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; Value types and some special cases where we don&amp;#39;t want to clone
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;obj&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;GetType&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;IsValueType &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;||
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;obj&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;GetType&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;== typeof &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;(Cursor) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;||
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;obj&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;GetType&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;== typeof &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;(XmlLanguage))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;                {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;obj&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;                }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;else
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;                {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; If it is cloneable, use it
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;cloneable &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;obj &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ICloneable;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;cloneable &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;null)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;                    {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;                        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;cloneable&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;Clone&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;                    }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;else
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;                    {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;                        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; Creating the clone with reflection
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;                        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;typ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;obj&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;GetType&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;                        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;clone &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;Activator&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;CreateInstance&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;typ&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;);                     
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;                        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; Property names which are known locally set 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;                        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; dependency properties
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;                        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;usedNames &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;HashSet&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;&amp;gt;();                        
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;                        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; Copying locally set dependency properties from the 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;                        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; source to the target
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;                        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;dobjSource &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;obj &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;DependencyObject;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;                        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;dobjTarget &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;clone &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;DependencyObject;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;                        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;dobjSource &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;null &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;amp;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;dobjTarget &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;null)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;                        {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;                            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;locallySetProperties &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;                                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;dobjSource&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;GetLocalValueEnumerator&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;                            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;while &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;locallySetProperties&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;MoveNext&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;())
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;                            {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;                                DependencyProperty &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;dp &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;                                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;locallySetProperties&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;Current&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;Property&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;                                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;dp&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;ReadOnly&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;                                {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;                                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;dobjTarget&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;SetValue&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;dp&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;dobjSource&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;GetValue&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;dp&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;));
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;                                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;usedNames&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;Add&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;dp&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;Name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;                                }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;                            }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;                        }                        
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;                        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; Getting all the public, non-static properties of the source
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;                        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;foreach &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;pi &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;typ&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;GetProperties&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;(
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;                                            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;BindingFlags&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;Instance &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;| 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;                                            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;BindingFlags&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;Public &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;| 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;                                            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;BindingFlags&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;FlattenHierarchy&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;                        {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;                            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; If it is not a dependency property 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;                            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; and not the default property...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;                            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;pi&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;CanRead &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;amp;&amp;amp;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;                                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;usedNames&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;Contains&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;pi&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;Name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;amp;&amp;amp;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;                                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;IsDependencyProperty&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;dobjSource&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;pi&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;amp;&amp;amp;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;                                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;pi&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;Name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;Item&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;                            {                                    
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;                                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;pi&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;GetValue&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;obj&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;, null);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;                                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; ..and it is writeable, then we recursively clone 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;                                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; the value and set the property:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;                                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;pi&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;CanWrite&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;                                {                                        
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;                                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;pi&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;SetValue&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;clone&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;DeepClone&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;val&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;), null);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;                                }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;                                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;else
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;                                {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;                                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; ..otherwise if it is a readonly list property, 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;                                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; go through each item,  clone it and add to 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;                                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; the clone&amp;#39;s list property
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;                                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;pi&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;PropertyType
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;                                          .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;GetInterfaces&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;                                          .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;Contains&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;typeof &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;(IList)))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;                                    {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;                                        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;source &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;IList;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;                                        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;target &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;pi&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;GetValue&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;clone&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;, null) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;IList;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;                                        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;source &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;null &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;amp;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;target &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;null)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;                                        {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;                                            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;foreach &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;item &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;source&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;                                                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;target&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;Add&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;DeepClone&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;item&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;));
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;                                        }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;                                    }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;                                }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;                            }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;                        }                        
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;                        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;clone&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;                    }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;                }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;            }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;        }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;else
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;        {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;null;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;        }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    }    
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F;&#x2F; &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;summary&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;    &#x2F;&#x2F;&#x2F; Tries to determine if a property is a dependency property, by reflection and 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;    &#x2F;&#x2F;&#x2F; naming convention
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;    &#x2F;&#x2F;&#x2F; &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;summary&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;    &#x2F;&#x2F;&#x2F; &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;param &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;dobj&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&amp;gt;Dependency object
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;    &#x2F;&#x2F;&#x2F; &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;param &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;pi&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&amp;gt;Property info
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;    &#x2F;&#x2F;&#x2F; &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;returns&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&amp;gt;Returns &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;c&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&amp;gt;true&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;c&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&amp;gt; if the given property seems to be a 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;    &#x2F;&#x2F;&#x2F;          CLR access property for a dependency property.&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;returns&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;private static bool &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;IsDependencyProperty&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;(DependencyObject &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;dobj&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;, PropertyInfo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;pi&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;dobj &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;null)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;        {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;dpProp &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;dobj&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;GetType&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;GetProperty&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;pi&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;Name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;Property&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;, 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;                                                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;BindingFlags&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;Static &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;|
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;                                                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;BindingFlags&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;Public &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;|
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;                                                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;BindingFlags&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;FlattenHierarchy&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;dpProp &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;null &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;amp;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;dpProp&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;PropertyType &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;== typeof &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;(DependencyProperty))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;true;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;else
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;            {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;dpField &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;dobj&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;GetType&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;GetField&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;pi&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;Name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;Property&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;, 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;                                                      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;BindingFlags&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;Static &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;| 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;                                                      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;BindingFlags&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;Public &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;| 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;                                                      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;BindingFlags&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;FlattenHierarchy&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;dpField &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;null &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;amp;&amp;amp; 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;dpField&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;FieldType &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;== typeof &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;(DependencyProperty) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;amp;&amp;amp; 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;dpField&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;IsInitOnly &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;amp;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;dpField&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;IsStatic&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;true;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;            }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;        }        
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;false;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
        
    </entry>
</feed>
